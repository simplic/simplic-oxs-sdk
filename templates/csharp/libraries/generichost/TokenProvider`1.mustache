// <auto-generated>
{{>partial_header}}
{{#nrt}}
#nullable enable

{{/nrt}}
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using {{packageName}};

namespace {{packageName}}
{
    /// <summary>
    /// A class which will provide tokens.
    /// </summary>
    {{>visibility}} abstract class TokenProvider<TTokenBase> where TTokenBase : TokenBase
    {
        /// <summary>
        /// The array of tokens.
        /// </summary>
        protected List<TTokenBase> _tokens;

        public abstract ValueTask<TTokenBase> GetAsync(string header = "", CancellationToken cancellation = default{{^netstandard20OrLater}}(CancellationToken){{/netstandard20OrLater}});

        /// <summary>
        /// Instantiates a TokenProvider.
        /// </summary>
        /// <param name="tokens"></param>
        public TokenProvider(IEnumerable<TTokenBase> tokens)
        {
            _tokens = tokens.ToList();

            if (_tokens.Count == 0)
                throw new ArgumentException("You did not provide any tokens.");
        }

        /// <summary>
        /// Instantiate without tokens.
        /// </summary>
        public TokenProvider()
        {
            _tokens = new List<TTokenBase>();
            HasTokens = false;
        }

        /// <summary>
        /// Gets or sets whether the provider has any tokens.
        /// </summary>
        public bool HasTokens { get; set; } = true;
    }

    /// <summary>
    /// Dummy for token providers.
    /// </summary>
    /// <typeparam name="TTokenBase"></typeparam>
    public class NullTokenProvider<TTokenBase> : TokenProvider<TTokenBase> where TTokenBase : TokenBase
    {
        public NullTokenProvider(IEnumerable<TTokenBase> tokens) : base(tokens)
        {
        }

        public NullTokenProvider() : base()
        {
        }

        public override ValueTask<TTokenBase> GetAsync(string header = "", CancellationToken cancellation = default)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Provides <see cref="ApiKeyToken"/>s.
    /// </summary>
    public class ApiKeyTokenProvider : TokenProvider<ApiKeyToken>
    {
        public ApiKeyTokenProvider(IEnumerable<ApiKeyToken> tokens) : base(tokens)
        {
        }

        public override ValueTask<ApiKeyToken> GetAsync(string header = "", CancellationToken cancellation = default)
        {
            var token = string.IsNullOrEmpty(header) ? _tokens.FirstOrDefault() : _tokens.FirstOrDefault(x => x.Header == header);

            return new ValueTask<ApiKeyToken>(token);
        }
    }
}