{{>.inject/Extensions}}
{{>.inject/Multimap}}

/// <summary>
/// Provides a non-generic contract for the ApiResponse wrapper.
/// </summary>
public interface IApiResponse
{
    /// <summary>
    /// The data type of <see cref="Content"/>
    /// </summary>
    Type ResponseType { get; }

    /// <summary>
    /// The content of this response
    /// </summary>
    Object Content { get; }

    /// <summary>
    /// Gets or sets the status code (HTTP status code)
    /// </summary>
    /// <value>The status code.</value>
    HttpStatusCode StatusCode { get; }

    /// <summary>
    /// Gets or sets the HTTP headers
    /// </summary>
    /// <value>HTTP headers</value>
    Multimap<string, string> Headers { get; }

    /// <summary>
    /// Gets or sets any error text defined by the calling client.
    /// </summary>
    string ErrorText { get; set; }

    /// <summary>
    /// Gets or sets any cookies passed along on the response.
    /// </summary>
    List<Cookie> Cookies { get; set; }

    /// <summary>
    /// The raw content of this response
    /// </summary>
    string RawContent { get; }
}

/// <summary>
/// API Response
/// </summary>
public class ApiResponse<T> : IApiResponse
{
    #region Properties

    /// <summary>
    /// Gets or sets the status code (HTTP status code)
    /// </summary>
    /// <value>The status code.</value>
    public HttpStatusCode StatusCode { get; }

    /// <summary>
    /// Gets or sets the HTTP headers
    /// </summary>
    /// <value>HTTP headers</value>
    public Multimap<string, string> Headers { get; }

    /// <summary>
    /// Gets or sets the data (parsed HTTP body)
    /// </summary>
    /// <value>The data.</value>
    public T Data { get; }

    /// <summary>
    /// Gets or sets any error text defined by the calling client.
    /// </summary>
    public string ErrorText { get; set; }

    /// <summary>
    /// Gets or sets any cookies passed along on the response.
    /// </summary>
    public List<Cookie> Cookies { get; set; }

    /// <summary>
    /// The content of this response
    /// </summary>
    public Type ResponseType
    {
        get { return typeof(T); }
    }

    /// <summary>
    /// The data type of <see cref="Content"/>
    /// </summary>
    public object Content
    {
        get { return Data; }
    }

    /// <summary>
    /// The raw content
    /// </summary>
    public string RawContent { get; }

    #endregion Properties

    #region Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
    /// </summary>
    /// <param name="statusCode">HTTP status code.</param>
    /// <param name="headers">HTTP headers.</param>
    /// <param name="data">Data (parsed HTTP body)</param>
    /// <param name="rawContent">Raw content.</param>
    public ApiResponse(HttpStatusCode statusCode, Multimap<string, string> headers, T data, string rawContent)
    {
        StatusCode = statusCode;
        Headers = headers;
        Data = data;
        RawContent = rawContent;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
    /// </summary>
    /// <param name="statusCode">HTTP status code.</param>
    /// <param name="headers">HTTP headers.</param>
    /// <param name="data">Data (parsed HTTP body)</param>
    public ApiResponse(HttpStatusCode statusCode, Multimap<string, string> headers, T data) : this(statusCode, headers, data, null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
    /// </summary>
    /// <param name="statusCode">HTTP status code.</param>
    /// <param name="data">Data (parsed HTTP body)</param>
    /// <param name="rawContent">Raw content.</param>
    public ApiResponse(HttpStatusCode statusCode, T data, string rawContent) : this(statusCode, null, data, rawContent)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
    /// </summary>
    /// <param name="statusCode">HTTP status code.</param>
    /// <param name="data">Data (parsed HTTP body)</param>
    public ApiResponse(HttpStatusCode statusCode, T data) : this(statusCode, data, null)
    {
    }

    #endregion Constructors
}

/// <summary>
/// An interface for responses of type Ok.
/// </summary>
/// <typeparam name="TType"></typeparam>
{{>visibility}} interface IOk<TType> : __IApiResponse
{
    /// <summary>
    /// Deserializes the response if the response is Ok.
    /// </summary>
    /// <returns></returns>
    TType Ok();

    /// <summary>
    /// Returns true if the response is Ok and the deserialized response is not null.
    /// </summary>
    /// <param name="result"></param>
    /// <returns></returns>
    bool TryOk({{^netStandard}}[NotNullWhen(true)]{{/netStandard}}out TType{{nrt?}} result);
}

/// <summary>
/// An interface for responses of type Unauthorized.
/// </summary>
/// <typeparam name="TType"></typeparam>
{{>visibility}} interface IUnauthorized<TType> : __IApiResponse
{
    /// <summary>
    /// Deserializes the response if the response is Unauthorized.
    /// </summary>
    /// <returns></returns>
    TType Unauthorized();

    /// <summary>
    /// Returns true if the response is Unauthorized and the deserialized response is not null.
    /// </summary>
    /// <param name="result"></param>
    /// <returns></returns>
    bool TryUnauthorized({{^netStandard}}[NotNullWhen(true)]{{/netStandard}}out TType{{nrt?}} result);
}

/// <summary>
/// An interface for responses of type BadRequest.
/// </summary>
/// <typeparam name="TType"></typeparam>
{{>visibility}} interface IBadRequest<TType> : __IApiResponse
{
    /// <summary>
    /// Deserializes the response if the response is BadRequest.
    /// </summary>
    /// <returns></returns>
    TType BadRequest();

    /// <summary>
    /// Returns true if the response is BadRequest and the deserialized response is not null.
    /// </summary>
    /// <param name="result"></param>
    /// <returns></returns>
    bool TryBadRequest({{^netStandard}}[NotNullWhen(true)]{{/netStandard}}out TType{{nrt?}} result);
}

/// <summary>
/// An interface for responses of type NotFound.
/// </summary>
/// <typeparam name="TType"></typeparam>
{{>visibility}} interface INotFound<TType> : __IApiResponse
{
    /// <summary>
    /// Deserializes the response if the response is NotFound.
    /// </summary>
    /// <returns></returns>
    TType NotFound();

    /// <summary>
    /// Returns true if the response is NotFound and the deserialized response is not null.
    /// </summary>
    /// <param name="result"></param>
    /// <returns></returns>
    bool TryNotFound({{^netStandard}}[NotNullWhen(true)]{{/netStandard}}out TType{{nrt?}} result);
}

/// <summary>
/// An interface for responses of type InternalServerError.
/// </summary>
/// <typeparam name="TType"></typeparam>
{{>visibility}} interface IInternalServerError<TType> : __IApiResponse
{
    /// <summary>
    /// Deserializes the response if the response is InternalServerError.
    /// </summary>
    /// <returns></returns>
    TType InternalServerError();

    /// <summary>
    /// Returns true if the response is InternalServerError and the deserialized response is not null.
    /// </summary>
    /// <param name="result"></param>
    /// <returns></returns>
    bool TryInternalServerError({{^netStandard}}[NotNullWhen(true)]{{/netStandard}}out TType{{nrt?}} result);
}

/// <summary>
/// An interface for responses of type Forbidden.
/// </summary>
/// <typeparam name="TType"></typeparam>
{{>visibility}} interface IForbidden<TType> : __IApiResponse
{
    /// <summary>
    /// Deserializes the response if the response is Forbidden.
    /// </summary>
    /// <returns></returns>
    TType Forbidden();

    /// <summary>
    /// Returns true if the response is Forbidden and the deserialized response is not null.
    /// </summary>
    /// <param name="result"></param>
    /// <returns></returns>
    bool TryForbidden({{^netStandard}}[NotNullWhen(true)]{{/netStandard}}out TType{{nrt?}} result);
}

/// <summary>
/// An interface for responses of type NotImplemented.
/// </summary>
/// <typeparam name="TType"></typeparam>
{{>visibility}} interface INotImplemented<TType> : __IApiResponse
{
    /// <summary>
    /// Deserializes the response if the response is NotImplemented.
    /// </summary>
    /// <returns></returns>
    TType NotImplemented();

    /// <summary>
    /// Returns true if the response is NotImplemented and the deserialized response is not null.
    /// </summary>
    /// <param name="result"></param>
    /// <returns></returns>
    bool TryNotImplemented({{^netStandard}}[NotNullWhen(true)]{{/netStandard}}out TType{{nrt?}} result);
}