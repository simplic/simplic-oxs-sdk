public static class StreamContentExtension
{
    public static StreamContent From(Stream stream)
    {
        return new StreamContent(stream);
    }

    public static StreamContent From(Stream stream, int bufferSize)
    {
        return new StreamContent(stream, bufferSize);
    }

    public static IEnumerable<StreamContent> From(IEnumerable<Stream> streams)
    {
        var result = new List<StreamContent>();
        foreach (var stream in streams)
            result.Add(new StreamContent(stream));

        return result;
    }
}

public static class MultipartContentExtension
{
    public static void Add(this MultipartContent multipartContent, IEnumerable<StreamContent> streamContents)
    {
        var result = new List<StreamContent>();
        foreach (var streamContent in streamContents)
            result.Add(streamContent);
    }
}

public static class Utf8JsonWriterExtension
{
    public static void WriteString(this Utf8JsonWriter writer, string propertyName, Guid? id)
    {
        writer.WriteString(propertyName, id!.Value);
    }

    public static void WriteNumber(this Utf8JsonWriter writer, string propertyName, int? number)
    {
        writer.WriteNumber(propertyName, number!.Value);
    }

    public static void WriteNumber(this Utf8JsonWriter writer, string propertyName, float? number)
    {
        writer.WriteNumber(propertyName, number!.Value);
    }

    public static void WriteNumber(this Utf8JsonWriter writer, string propertyName, double? number)
    {
        writer.WriteNumber(propertyName, number!.Value);
    }
}

public static class DateTimeExtension
{
    public static string ToString(this DateTime? dateTime, string format)
    {
        return dateTime.GetValueOrDefault().ToString(format);
    }
}

public static class HttpResponseHeadersExtension
{
    public static Multimap<string, string> ToMultimap(this HttpResponseHeaders headers)
    {
        var multimap = new Multimap<string, string>(StringComparer.OrdinalIgnoreCase);

        foreach (var header in headers)
        {
            string key = header.Key;
            IList<string> values = header.Value.ToList();

            if (multimap.ContainsKey(key))
            {
                // If the key already exists, merge the values
                multimap[key] = multimap[key].Concat(values).ToList();
                continue;
            }

            multimap[key] = values;
        }

        return multimap;
    }
}