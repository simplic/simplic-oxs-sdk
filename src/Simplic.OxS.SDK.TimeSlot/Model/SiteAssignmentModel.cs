// <auto-generated>
/*
 * Simplic.OxS.TimeSlot
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.TimeSlot
{
    /// <summary>
    /// SiteAssignmentModel
    /// </summary>
    public partial class SiteAssignmentModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public SiteAssignmentModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteAssignmentModel" /> class.
        /// </summary>
        /// <param name="organizationId">organizationId</param>
        /// <param name="organizationSiteId">organizationSiteId</param>
        //[JsonConstructor]
        public SiteAssignmentModel(Option<Guid> organizationId = default, Option<Guid> organizationSiteId = default)
        {
            OrganizationIdOption = organizationId;
            OrganizationSiteIdOption = organizationSiteId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationSiteId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationSiteIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrganizationSiteId
        /// </summary>
        [JsonPropertyName("organizationSiteId")]
        public Guid? OrganizationSiteId { get { return this. OrganizationSiteIdOption; } set { this.OrganizationSiteIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SiteAssignmentModel {\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OrganizationSiteId: ").Append(OrganizationSiteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SiteAssignmentModel" />
    /// </summary>
    public class SiteAssignmentModelJsonConverter : JsonConverter<SiteAssignmentModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="SiteAssignmentModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SiteAssignmentModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid> organizationId = default;
            Option<Guid> organizationSiteId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "organizationSiteId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationSiteId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class SiteAssignmentModel.");

            //2return new SiteAssignmentModel(organizationId, organizationSiteId);
            return new SiteAssignmentModel(organizationId, organizationSiteId);
        }

        /// <summary>
        /// Serializes a <see cref="SiteAssignmentModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="siteAssignmentModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SiteAssignmentModel siteAssignmentModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, siteAssignmentModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SiteAssignmentModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="siteAssignmentModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, SiteAssignmentModel siteAssignmentModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (siteAssignmentModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", siteAssignmentModel.OrganizationIdOption!.Value);

            if (siteAssignmentModel.OrganizationSiteIdOption.IsSet)
                if (siteAssignmentModel.OrganizationSiteIdOption.Value != null)
                {
                    writer.WriteString("organizationSiteId", siteAssignmentModel.OrganizationSiteIdOption!.Value);
                    //var __value = siteAssignmentModel.OrganizationSiteIdOption.Value;
                    //writer.WriteString("organizationSiteId", __value);
                }
                else
                    writer.WriteNull("organizationSiteId");
        }
    }
}
