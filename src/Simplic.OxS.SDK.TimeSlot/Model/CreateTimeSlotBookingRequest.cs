// <auto-generated>
/*
 * Simplic.OxS.TimeSlot
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.TimeSlot
{
    /// <summary>
    /// CreateTimeSlotBookingRequest
    /// </summary>
    public partial class CreateTimeSlotBookingRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public CreateTimeSlotBookingRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTimeSlotBookingRequest" /> class.
        /// </summary>
        /// <param name="bookedByName">Gets or sets the name of the user that has booked the time slot</param>
        /// <param name="deliveryNumber">Gets or sets the delivery number</param>
        /// <param name="driver">Gets or sets the driver name</param>
        /// <param name="loadNumber">Gets or sets the load number</param>
        /// <param name="notes">Gets or sets the booking notes</param>
        /// <param name="referenceNumber">Gets or sets the reference number</param>
        /// <param name="tractorUnit">Gets or sets the tractor unit registration plate</param>
        /// <param name="trailer">Gets or sets the trailer registration plate</param>
        //[JsonConstructor]
        public CreateTimeSlotBookingRequest(Option<string> bookedByName = default, Option<string> deliveryNumber = default, Option<string> driver = default, Option<string> loadNumber = default, Option<string> notes = default, Option<string> referenceNumber = default, Option<string> tractorUnit = default, Option<string> trailer = default)
        {
            BookedByNameOption = bookedByName;
            DeliveryNumberOption = deliveryNumber;
            DriverOption = driver;
            LoadNumberOption = loadNumber;
            NotesOption = notes;
            ReferenceNumberOption = referenceNumber;
            TractorUnitOption = tractorUnit;
            TrailerOption = trailer;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BookedByName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> BookedByNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the name of the user that has booked the time slot
        /// </summary>
        /// <value>Gets or sets the name of the user that has booked the time slot</value>
        [JsonPropertyName("bookedByName")]
        public string? BookedByName { get { return this. BookedByNameOption; } set { this.BookedByNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DeliveryNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the delivery number
        /// </summary>
        /// <value>Gets or sets the delivery number</value>
        [JsonPropertyName("deliveryNumber")]
        public string? DeliveryNumber { get { return this. DeliveryNumberOption; } set { this.DeliveryNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Driver
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DriverOption { get; private set; }

        /// <summary>
        /// Gets or sets the driver name
        /// </summary>
        /// <value>Gets or sets the driver name</value>
        [JsonPropertyName("driver")]
        public string? Driver { get { return this. DriverOption; } set { this.DriverOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LoadNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> LoadNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the load number
        /// </summary>
        /// <value>Gets or sets the load number</value>
        [JsonPropertyName("loadNumber")]
        public string? LoadNumber { get { return this. LoadNumberOption; } set { this.LoadNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Gets or sets the booking notes
        /// </summary>
        /// <value>Gets or sets the booking notes</value>
        [JsonPropertyName("notes")]
        public string? Notes { get { return this. NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReferenceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the reference number
        /// </summary>
        /// <value>Gets or sets the reference number</value>
        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get { return this. ReferenceNumberOption; } set { this.ReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TractorUnit
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TractorUnitOption { get; private set; }

        /// <summary>
        /// Gets or sets the tractor unit registration plate
        /// </summary>
        /// <value>Gets or sets the tractor unit registration plate</value>
        [JsonPropertyName("tractorUnit")]
        public string? TractorUnit { get { return this. TractorUnitOption; } set { this.TractorUnitOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Trailer
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TrailerOption { get; private set; }

        /// <summary>
        /// Gets or sets the trailer registration plate
        /// </summary>
        /// <value>Gets or sets the trailer registration plate</value>
        [JsonPropertyName("trailer")]
        public string? Trailer { get { return this. TrailerOption; } set { this.TrailerOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTimeSlotBookingRequest {\n");
            sb.Append("  BookedByName: ").Append(BookedByName).Append("\n");
            sb.Append("  DeliveryNumber: ").Append(DeliveryNumber).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  LoadNumber: ").Append(LoadNumber).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  TractorUnit: ").Append(TractorUnit).Append("\n");
            sb.Append("  Trailer: ").Append(Trailer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateTimeSlotBookingRequest" />
    /// </summary>
    public class CreateTimeSlotBookingRequestJsonConverter : JsonConverter<CreateTimeSlotBookingRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateTimeSlotBookingRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateTimeSlotBookingRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> bookedByName = default;
            Option<string> deliveryNumber = default;
            Option<string> driver = default;
            Option<string> loadNumber = default;
            Option<string> notes = default;
            Option<string> referenceNumber = default;
            Option<string> tractorUnit = default;
            Option<string> trailer = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bookedByName":
                            bookedByName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "deliveryNumber":
                            deliveryNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "driver":
                            driver = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "loadNumber":
                            loadNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "referenceNumber":
                            referenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tractorUnit":
                            tractorUnit = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "trailer":
                            trailer = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new CreateTimeSlotBookingRequest(bookedByName, deliveryNumber, driver, loadNumber, notes, referenceNumber, tractorUnit, trailer);
            return new CreateTimeSlotBookingRequest(bookedByName, deliveryNumber, driver, loadNumber, notes, referenceNumber, tractorUnit, trailer);
        }

        /// <summary>
        /// Serializes a <see cref="CreateTimeSlotBookingRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTimeSlotBookingRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateTimeSlotBookingRequest createTimeSlotBookingRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createTimeSlotBookingRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateTimeSlotBookingRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTimeSlotBookingRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateTimeSlotBookingRequest createTimeSlotBookingRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createTimeSlotBookingRequest.BookedByNameOption.IsSet)
                if (createTimeSlotBookingRequest.BookedByNameOption.Value != null)
                {
                    writer.WriteString("bookedByName", createTimeSlotBookingRequest.BookedByName);
                    //var __value = createTimeSlotBookingRequest.BookedByNameOption.Value;
                    //writer.WriteString("bookedByName", __value);
                }
                else
                    writer.WriteNull("bookedByName");

            if (createTimeSlotBookingRequest.DeliveryNumberOption.IsSet)
                if (createTimeSlotBookingRequest.DeliveryNumberOption.Value != null)
                {
                    writer.WriteString("deliveryNumber", createTimeSlotBookingRequest.DeliveryNumber);
                    //var __value = createTimeSlotBookingRequest.DeliveryNumberOption.Value;
                    //writer.WriteString("deliveryNumber", __value);
                }
                else
                    writer.WriteNull("deliveryNumber");

            if (createTimeSlotBookingRequest.DriverOption.IsSet)
                if (createTimeSlotBookingRequest.DriverOption.Value != null)
                {
                    writer.WriteString("driver", createTimeSlotBookingRequest.Driver);
                    //var __value = createTimeSlotBookingRequest.DriverOption.Value;
                    //writer.WriteString("driver", __value);
                }
                else
                    writer.WriteNull("driver");

            if (createTimeSlotBookingRequest.LoadNumberOption.IsSet)
                if (createTimeSlotBookingRequest.LoadNumberOption.Value != null)
                {
                    writer.WriteString("loadNumber", createTimeSlotBookingRequest.LoadNumber);
                    //var __value = createTimeSlotBookingRequest.LoadNumberOption.Value;
                    //writer.WriteString("loadNumber", __value);
                }
                else
                    writer.WriteNull("loadNumber");

            if (createTimeSlotBookingRequest.NotesOption.IsSet)
                if (createTimeSlotBookingRequest.NotesOption.Value != null)
                {
                    writer.WriteString("notes", createTimeSlotBookingRequest.Notes);
                    //var __value = createTimeSlotBookingRequest.NotesOption.Value;
                    //writer.WriteString("notes", __value);
                }
                else
                    writer.WriteNull("notes");

            if (createTimeSlotBookingRequest.ReferenceNumberOption.IsSet)
                if (createTimeSlotBookingRequest.ReferenceNumberOption.Value != null)
                {
                    writer.WriteString("referenceNumber", createTimeSlotBookingRequest.ReferenceNumber);
                    //var __value = createTimeSlotBookingRequest.ReferenceNumberOption.Value;
                    //writer.WriteString("referenceNumber", __value);
                }
                else
                    writer.WriteNull("referenceNumber");

            if (createTimeSlotBookingRequest.TractorUnitOption.IsSet)
                if (createTimeSlotBookingRequest.TractorUnitOption.Value != null)
                {
                    writer.WriteString("tractorUnit", createTimeSlotBookingRequest.TractorUnit);
                    //var __value = createTimeSlotBookingRequest.TractorUnitOption.Value;
                    //writer.WriteString("tractorUnit", __value);
                }
                else
                    writer.WriteNull("tractorUnit");

            if (createTimeSlotBookingRequest.TrailerOption.IsSet)
                if (createTimeSlotBookingRequest.TrailerOption.Value != null)
                {
                    writer.WriteString("trailer", createTimeSlotBookingRequest.Trailer);
                    //var __value = createTimeSlotBookingRequest.TrailerOption.Value;
                    //writer.WriteString("trailer", __value);
                }
                else
                    writer.WriteNull("trailer");
        }
    }
}
