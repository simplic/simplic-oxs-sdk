// <auto-generated>
/*
 * Simplic.OxS.TimeSlot
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.TimeSlot
{
    /// <summary>
    /// Represents a timeslot model
    /// </summary>
    public partial class TimeSlotModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TimeSlotModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSlotModel" /> class.
        /// </summary>
        /// <param name="bookingDetails">bookingDetails</param>
        /// <param name="createDateTime">Gets or sets the date and time the TimeSlot is created.</param>
        /// <param name="createUserId">Gets or sets the id of the user that created the timeslot.</param>
        /// <param name="createUserName">Gets or sets the name of the user taht created the timeslot.</param>
        /// <param name="end">Gets or sets the end datetime</param>
        /// <param name="foreignOrganizationId">Gets or sets the organization, that has booked the time slot</param>
        /// <param name="id">Gets or sets the timeslot id</param>
        /// <param name="loadingEndTime">Gets or sets the ending time of loading.</param>
        /// <param name="loadingStartTime">Gets or sets the starting time of loading.</param>
        /// <param name="location">Gets or sets the locaiton name</param>
        /// <param name="organizationId">Gets or sets the timeslot orgaization id</param>
        /// <param name="siteId">Gets or sets the organization site id</param>
        /// <param name="siteName">Gets or sets the organization site name</param>
        /// <param name="start">Gets or sets the start datetime</param>
        /// <param name="state">state</param>
        /// <param name="timeOfArrival">Gets or sets the time pf arrival.</param>
        /// <param name="updateDateTime">Gets or sets the date and time the TimeSlot is updated.</param>
        /// <param name="updateUserId">Gets or sets the id of the user taht updated the timeslot.</param>
        /// <param name="updateUserName">Gets or sets the name of the user that updated the timeslot.</param>
        //[JsonConstructor]
        public TimeSlotModel(Option<BookingDetailsModel> bookingDetails = default, Option<DateTime> createDateTime = default, Option<Guid> createUserId = default, Option<string> createUserName = default, Option<DateTime> end = default, Option<Guid> foreignOrganizationId = default, Option<Guid> id = default, Option<DateTime> loadingEndTime = default, Option<DateTime> loadingStartTime = default, Option<string> location = default, Option<Guid> organizationId = default, Option<Guid> siteId = default, Option<string> siteName = default, Option<DateTime> start = default, Option<BookingState> state = default, Option<DateTime> timeOfArrival = default, Option<DateTime> updateDateTime = default, Option<Guid> updateUserId = default, Option<string> updateUserName = default)
        {
            BookingDetailsOption = bookingDetails;
            CreateDateTimeOption = createDateTime;
            CreateUserIdOption = createUserId;
            CreateUserNameOption = createUserName;
            EndOption = end;
            ForeignOrganizationIdOption = foreignOrganizationId;
            IdOption = id;
            LoadingEndTimeOption = loadingEndTime;
            LoadingStartTimeOption = loadingStartTime;
            LocationOption = location;
            OrganizationIdOption = organizationId;
            SiteIdOption = siteId;
            SiteNameOption = siteName;
            StartOption = start;
            StateOption = state;
            TimeOfArrivalOption = timeOfArrival;
            UpdateDateTimeOption = updateDateTime;
            UpdateUserIdOption = updateUserId;
            UpdateUserNameOption = updateUserName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BookingState>))]
        public Option<BookingState> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public BookingState? State { get { return this.StateOption; } set { this.StateOption = new Option<BookingState>(value); } }

        /// <summary>
        /// Used to track the state of BookingDetails
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BookingDetailsModel>))]
        public Option<BookingDetailsModel> BookingDetailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets BookingDetails
        /// </summary>
        [JsonPropertyName("bookingDetails")]
        public BookingDetailsModel? BookingDetails { get { return this. BookingDetailsOption; } set { this.BookingDetailsOption = new Option<BookingDetailsModel>(value); } }

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the date and time the TimeSlot is created.
        /// </summary>
        /// <value>Gets or sets the date and time the TimeSlot is created.</value>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CreateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the user that created the timeslot.
        /// </summary>
        /// <value>Gets or sets the id of the user that created the timeslot.</value>
        [JsonPropertyName("createUserId")]
        public Guid? CreateUserId { get { return this. CreateUserIdOption; } set { this.CreateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the name of the user taht created the timeslot.
        /// </summary>
        /// <value>Gets or sets the name of the user taht created the timeslot.</value>
        [JsonPropertyName("createUserName")]
        public string? CreateUserName { get { return this. CreateUserNameOption; } set { this.CreateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of End
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndOption { get; private set; }

        /// <summary>
        /// Gets or sets the end datetime
        /// </summary>
        /// <value>Gets or sets the end datetime</value>
        [JsonPropertyName("end")]
        public DateTime? End { get { return this. EndOption; } set { this.EndOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of ForeignOrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ForeignOrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the organization, that has booked the time slot
        /// </summary>
        /// <value>Gets or sets the organization, that has booked the time slot</value>
        [JsonPropertyName("foreignOrganizationId")]
        public Guid? ForeignOrganizationId { get { return this. ForeignOrganizationIdOption; } set { this.ForeignOrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the timeslot id
        /// </summary>
        /// <value>Gets or sets the timeslot id</value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of LoadingEndTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> LoadingEndTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the ending time of loading.
        /// </summary>
        /// <value>Gets or sets the ending time of loading.</value>
        [JsonPropertyName("loadingEndTime")]
        public DateTime? LoadingEndTime { get { return this. LoadingEndTimeOption; } set { this.LoadingEndTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of LoadingStartTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> LoadingStartTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the starting time of loading.
        /// </summary>
        /// <value>Gets or sets the starting time of loading.</value>
        [JsonPropertyName("loadingStartTime")]
        public DateTime? LoadingStartTime { get { return this. LoadingStartTimeOption; } set { this.LoadingStartTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> LocationOption { get; private set; }

        /// <summary>
        /// Gets or sets the locaiton name
        /// </summary>
        /// <value>Gets or sets the locaiton name</value>
        [JsonPropertyName("location")]
        public string? Location { get { return this. LocationOption; } set { this.LocationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the timeslot orgaization id
        /// </summary>
        /// <value>Gets or sets the timeslot orgaization id</value>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of SiteId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> SiteIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the organization site id
        /// </summary>
        /// <value>Gets or sets the organization site id</value>
        [JsonPropertyName("siteId")]
        public Guid? SiteId { get { return this. SiteIdOption; } set { this.SiteIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of SiteName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> SiteNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the organization site name
        /// </summary>
        /// <value>Gets or sets the organization site name</value>
        [JsonPropertyName("siteName")]
        public string? SiteName { get { return this. SiteNameOption; } set { this.SiteNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Start
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartOption { get; private set; }

        /// <summary>
        /// Gets or sets the start datetime
        /// </summary>
        /// <value>Gets or sets the start datetime</value>
        [JsonPropertyName("start")]
        public DateTime? Start { get { return this. StartOption; } set { this.StartOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of TimeOfArrival
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> TimeOfArrivalOption { get; private set; }

        /// <summary>
        /// Gets or sets the time pf arrival.
        /// </summary>
        /// <value>Gets or sets the time pf arrival.</value>
        [JsonPropertyName("timeOfArrival")]
        public DateTime? TimeOfArrival { get { return this. TimeOfArrivalOption; } set { this.TimeOfArrivalOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of UpdateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UpdateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the date and time the TimeSlot is updated.
        /// </summary>
        /// <value>Gets or sets the date and time the TimeSlot is updated.</value>
        [JsonPropertyName("updateDateTime")]
        public DateTime? UpdateDateTime { get { return this. UpdateDateTimeOption; } set { this.UpdateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UpdateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the user taht updated the timeslot.
        /// </summary>
        /// <value>Gets or sets the id of the user taht updated the timeslot.</value>
        [JsonPropertyName("updateUserId")]
        public Guid? UpdateUserId { get { return this. UpdateUserIdOption; } set { this.UpdateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> UpdateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the name of the user that updated the timeslot.
        /// </summary>
        /// <value>Gets or sets the name of the user that updated the timeslot.</value>
        [JsonPropertyName("updateUserName")]
        public string? UpdateUserName { get { return this. UpdateUserNameOption; } set { this.UpdateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeSlotModel {\n");
            sb.Append("  BookingDetails: ").Append(BookingDetails).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  CreateUserName: ").Append(CreateUserName).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  ForeignOrganizationId: ").Append(ForeignOrganizationId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LoadingEndTime: ").Append(LoadingEndTime).Append("\n");
            sb.Append("  LoadingStartTime: ").Append(LoadingStartTime).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  SiteName: ").Append(SiteName).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TimeOfArrival: ").Append(TimeOfArrival).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("  UpdateUserName: ").Append(UpdateUserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TimeSlotModel" />
    /// </summary>
    public class TimeSlotModelJsonConverter : JsonConverter<TimeSlotModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize End
        /// </summary>
        public static string EndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LoadingEndTime
        /// </summary>
        public static string LoadingEndTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LoadingStartTime
        /// </summary>
        public static string LoadingStartTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Start
        /// </summary>
        public static string StartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TimeOfArrival
        /// </summary>
        public static string TimeOfArrivalFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateDateTime
        /// </summary>
        public static string UpdateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TimeSlotModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TimeSlotModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<BookingDetailsModel> bookingDetails = default;
            Option<DateTime> createDateTime = default;
            Option<Guid> createUserId = default;
            Option<string> createUserName = default;
            Option<DateTime> end = default;
            Option<Guid> foreignOrganizationId = default;
            Option<Guid> id = default;
            Option<DateTime> loadingEndTime = default;
            Option<DateTime> loadingStartTime = default;
            Option<string> location = default;
            Option<Guid> organizationId = default;
            Option<Guid> siteId = default;
            Option<string> siteName = default;
            Option<DateTime> start = default;
            Option<BookingState> state = default;
            Option<DateTime> timeOfArrival = default;
            Option<DateTime> updateDateTime = default;
            Option<Guid> updateUserId = default;
            Option<string> updateUserName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bookingDetails":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bookingDetails = new Option<BookingDetailsModel>(JsonSerializer.Deserialize<BookingDetailsModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "createUserName":
                            createUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "end":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                end = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "foreignOrganizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                foreignOrganizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "loadingEndTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadingEndTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "loadingStartTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadingStartTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "location":
                            location = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "siteId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                siteId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "siteName":
                            siteName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "start":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                start = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "state":
                            string? stateRawValue = utf8JsonReader.GetString();
                            if (stateRawValue != null)
                                state = new Option<BookingState>(BookingStateValueConverter.FromStringOrDefault(stateRawValue));
                            break;
                        case "timeOfArrival":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                timeOfArrival = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "updateUserName":
                            updateUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (bookingDetails.IsSet && bookingDetails.Value == null)
                throw new ArgumentNullException(nameof(bookingDetails), "Property is not nullable for class TimeSlotModel.");

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class TimeSlotModel.");

            if (end.IsSet && end.Value == null)
                throw new ArgumentNullException(nameof(end), "Property is not nullable for class TimeSlotModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TimeSlotModel.");

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class TimeSlotModel.");

            if (siteId.IsSet && siteId.Value == null)
                throw new ArgumentNullException(nameof(siteId), "Property is not nullable for class TimeSlotModel.");

            if (start.IsSet && start.Value == null)
                throw new ArgumentNullException(nameof(start), "Property is not nullable for class TimeSlotModel.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class TimeSlotModel.");

            if (updateDateTime.IsSet && updateDateTime.Value == null)
                throw new ArgumentNullException(nameof(updateDateTime), "Property is not nullable for class TimeSlotModel.");

            //2return new TimeSlotModel(bookingDetails, createDateTime, createUserId, createUserName, end, foreignOrganizationId, id, loadingEndTime, loadingStartTime, location, organizationId, siteId, siteName, start, state, timeOfArrival, updateDateTime, updateUserId, updateUserName);
            return new TimeSlotModel(bookingDetails, createDateTime, createUserId, createUserName, end, foreignOrganizationId, id, loadingEndTime, loadingStartTime, location, organizationId, siteId, siteName, start, state, timeOfArrival, updateDateTime, updateUserId, updateUserName);
        }

        /// <summary>
        /// Serializes a <see cref="TimeSlotModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="timeSlotModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TimeSlotModel timeSlotModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, timeSlotModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TimeSlotModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="timeSlotModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TimeSlotModel timeSlotModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (timeSlotModel.BookingDetailsOption.IsSet && timeSlotModel.BookingDetails == null)
                throw new ArgumentNullException(nameof(timeSlotModel.BookingDetails), "Property is required for class TimeSlotModel.");

            if (timeSlotModel.BookingDetailsOption.IsSet)
            {
                writer.WritePropertyName("bookingDetails");
                JsonSerializer.Serialize(writer, timeSlotModel.BookingDetails, jsonSerializerOptions);
            }
            if (timeSlotModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", timeSlotModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (timeSlotModel.CreateUserIdOption.IsSet)
                if (timeSlotModel.CreateUserIdOption.Value != null)
                {
                    writer.WriteString("createUserId", timeSlotModel.CreateUserIdOption!.Value);
                    //var __value = timeSlotModel.CreateUserIdOption.Value;
                    //writer.WriteString("createUserId", __value);
                }
                else
                    writer.WriteNull("createUserId");

            if (timeSlotModel.CreateUserNameOption.IsSet)
                if (timeSlotModel.CreateUserNameOption.Value != null)
                {
                    writer.WriteString("createUserName", timeSlotModel.CreateUserName);
                    //var __value = timeSlotModel.CreateUserNameOption.Value;
                    //writer.WriteString("createUserName", __value);
                }
                else
                    writer.WriteNull("createUserName");

            if (timeSlotModel.EndOption.IsSet)
                writer.WriteString("end", timeSlotModel.EndOption!.Value.ToString(EndFormat));

            if (timeSlotModel.ForeignOrganizationIdOption.IsSet)
                if (timeSlotModel.ForeignOrganizationIdOption.Value != null)
                {
                    writer.WriteString("foreignOrganizationId", timeSlotModel.ForeignOrganizationIdOption!.Value);
                    //var __value = timeSlotModel.ForeignOrganizationIdOption.Value;
                    //writer.WriteString("foreignOrganizationId", __value);
                }
                else
                    writer.WriteNull("foreignOrganizationId");

            if (timeSlotModel.IdOption.IsSet)
                writer.WriteString("id", timeSlotModel.IdOption!.Value);

            if (timeSlotModel.LoadingEndTimeOption.IsSet)
                if (timeSlotModel.LoadingEndTimeOption.Value != null)
                {
                    writer.WriteString("loadingEndTime", timeSlotModel.LoadingEndTimeOption!.Value.ToString(LoadingEndTimeFormat));
                    //var __value = timeSlotModel.LoadingEndTimeOption.Value;
                    //writer.WriteString("loadingEndTime", __value);
                }
                else
                    writer.WriteNull("loadingEndTime");

            if (timeSlotModel.LoadingStartTimeOption.IsSet)
                if (timeSlotModel.LoadingStartTimeOption.Value != null)
                {
                    writer.WriteString("loadingStartTime", timeSlotModel.LoadingStartTimeOption!.Value.ToString(LoadingStartTimeFormat));
                    //var __value = timeSlotModel.LoadingStartTimeOption.Value;
                    //writer.WriteString("loadingStartTime", __value);
                }
                else
                    writer.WriteNull("loadingStartTime");

            if (timeSlotModel.LocationOption.IsSet)
                if (timeSlotModel.LocationOption.Value != null)
                {
                    writer.WriteString("location", timeSlotModel.Location);
                    //var __value = timeSlotModel.LocationOption.Value;
                    //writer.WriteString("location", __value);
                }
                else
                    writer.WriteNull("location");

            if (timeSlotModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", timeSlotModel.OrganizationIdOption!.Value);

            if (timeSlotModel.SiteIdOption.IsSet)
                writer.WriteString("siteId", timeSlotModel.SiteIdOption!.Value);

            if (timeSlotModel.SiteNameOption.IsSet)
                if (timeSlotModel.SiteNameOption.Value != null)
                {
                    writer.WriteString("siteName", timeSlotModel.SiteName);
                    //var __value = timeSlotModel.SiteNameOption.Value;
                    //writer.WriteString("siteName", __value);
                }
                else
                    writer.WriteNull("siteName");

            if (timeSlotModel.StartOption.IsSet)
                writer.WriteString("start", timeSlotModel.StartOption!.Value.ToString(StartFormat));

            if (timeSlotModel.StateOption.IsSet)
            {
                var stateRawValue = BookingStateValueConverter.ToJsonValue(timeSlotModel.State!.Value);
                writer.WriteNumber("state", stateRawValue);
            }
            if (timeSlotModel.TimeOfArrivalOption.IsSet)
                if (timeSlotModel.TimeOfArrivalOption.Value != null)
                {
                    writer.WriteString("timeOfArrival", timeSlotModel.TimeOfArrivalOption!.Value.ToString(TimeOfArrivalFormat));
                    //var __value = timeSlotModel.TimeOfArrivalOption.Value;
                    //writer.WriteString("timeOfArrival", __value);
                }
                else
                    writer.WriteNull("timeOfArrival");

            if (timeSlotModel.UpdateDateTimeOption.IsSet)
                writer.WriteString("updateDateTime", timeSlotModel.UpdateDateTimeOption!.Value.ToString(UpdateDateTimeFormat));

            if (timeSlotModel.UpdateUserIdOption.IsSet)
                if (timeSlotModel.UpdateUserIdOption.Value != null)
                {
                    writer.WriteString("updateUserId", timeSlotModel.UpdateUserIdOption!.Value);
                    //var __value = timeSlotModel.UpdateUserIdOption.Value;
                    //writer.WriteString("updateUserId", __value);
                }
                else
                    writer.WriteNull("updateUserId");

            if (timeSlotModel.UpdateUserNameOption.IsSet)
                if (timeSlotModel.UpdateUserNameOption.Value != null)
                {
                    writer.WriteString("updateUserName", timeSlotModel.UpdateUserName);
                    //var __value = timeSlotModel.UpdateUserNameOption.Value;
                    //writer.WriteString("updateUserName", __value);
                }
                else
                    writer.WriteNull("updateUserName");
        }
    }
}
