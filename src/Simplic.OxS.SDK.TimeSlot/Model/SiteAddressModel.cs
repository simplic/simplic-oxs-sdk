// <auto-generated>
/*
 * Simplic.OxS.TimeSlot
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.TimeSlot
{
    /// <summary>
    /// SiteAddressModel
    /// </summary>
    public partial class SiteAddressModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public SiteAddressModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteAddressModel" /> class.
        /// </summary>
        /// <param name="additional01">additional01</param>
        /// <param name="city">city</param>
        /// <param name="countryIso">countryIso</param>
        /// <param name="houseNumber">houseNumber</param>
        /// <param name="street">street</param>
        /// <param name="zipCode">zipCode</param>
        //[JsonConstructor]
        public SiteAddressModel(Option<string> additional01 = default, Option<string> city = default, Option<string> countryIso = default, Option<string> houseNumber = default, Option<string> street = default, Option<string> zipCode = default)
        {
            Additional01Option = additional01;
            CityOption = city;
            CountryIsoOption = countryIso;
            HouseNumberOption = houseNumber;
            StreetOption = street;
            ZipCodeOption = zipCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Additional01
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> Additional01Option { get; private set; }

        /// <summary>
        /// Gets or Sets Additional01
        /// </summary>
        [JsonPropertyName("additional01")]
        public string? Additional01 { get { return this. Additional01Option; } set { this.Additional01Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of City
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CityOption { get; private set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [JsonPropertyName("city")]
        public string? City { get { return this. CityOption; } set { this.CityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryIso
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CountryIsoOption { get; private set; }

        /// <summary>
        /// Gets or Sets CountryIso
        /// </summary>
        [JsonPropertyName("countryIso")]
        public string? CountryIso { get { return this. CountryIsoOption; } set { this.CountryIsoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of HouseNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> HouseNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets HouseNumber
        /// </summary>
        [JsonPropertyName("houseNumber")]
        public string? HouseNumber { get { return this. HouseNumberOption; } set { this.HouseNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Street
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> StreetOption { get; private set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [JsonPropertyName("street")]
        public string? Street { get { return this. StreetOption; } set { this.StreetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ZipCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ZipCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [JsonPropertyName("zipCode")]
        public string? ZipCode { get { return this. ZipCodeOption; } set { this.ZipCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SiteAddressModel {\n");
            sb.Append("  Additional01: ").Append(Additional01).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryIso: ").Append(CountryIso).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SiteAddressModel" />
    /// </summary>
    public class SiteAddressModelJsonConverter : JsonConverter<SiteAddressModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="SiteAddressModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SiteAddressModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> additional01 = default;
            Option<string> city = default;
            Option<string> countryIso = default;
            Option<string> houseNumber = default;
            Option<string> street = default;
            Option<string> zipCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "additional01":
                            additional01 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "city":
                            city = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "countryIso":
                            countryIso = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "houseNumber":
                            houseNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "street":
                            street = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "zipCode":
                            zipCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new SiteAddressModel(additional01, city, countryIso, houseNumber, street, zipCode);
            return new SiteAddressModel(additional01, city, countryIso, houseNumber, street, zipCode);
        }

        /// <summary>
        /// Serializes a <see cref="SiteAddressModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="siteAddressModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SiteAddressModel siteAddressModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, siteAddressModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SiteAddressModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="siteAddressModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, SiteAddressModel siteAddressModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (siteAddressModel.Additional01Option.IsSet)
                if (siteAddressModel.Additional01Option.Value != null)
                {
                    writer.WriteString("additional01", siteAddressModel.Additional01);
                    //var __value = siteAddressModel.Additional01Option.Value;
                    //writer.WriteString("additional01", __value);
                }
                else
                    writer.WriteNull("additional01");

            if (siteAddressModel.CityOption.IsSet)
                if (siteAddressModel.CityOption.Value != null)
                {
                    writer.WriteString("city", siteAddressModel.City);
                    //var __value = siteAddressModel.CityOption.Value;
                    //writer.WriteString("city", __value);
                }
                else
                    writer.WriteNull("city");

            if (siteAddressModel.CountryIsoOption.IsSet)
                if (siteAddressModel.CountryIsoOption.Value != null)
                {
                    writer.WriteString("countryIso", siteAddressModel.CountryIso);
                    //var __value = siteAddressModel.CountryIsoOption.Value;
                    //writer.WriteString("countryIso", __value);
                }
                else
                    writer.WriteNull("countryIso");

            if (siteAddressModel.HouseNumberOption.IsSet)
                if (siteAddressModel.HouseNumberOption.Value != null)
                {
                    writer.WriteString("houseNumber", siteAddressModel.HouseNumber);
                    //var __value = siteAddressModel.HouseNumberOption.Value;
                    //writer.WriteString("houseNumber", __value);
                }
                else
                    writer.WriteNull("houseNumber");

            if (siteAddressModel.StreetOption.IsSet)
                if (siteAddressModel.StreetOption.Value != null)
                {
                    writer.WriteString("street", siteAddressModel.Street);
                    //var __value = siteAddressModel.StreetOption.Value;
                    //writer.WriteString("street", __value);
                }
                else
                    writer.WriteNull("street");

            if (siteAddressModel.ZipCodeOption.IsSet)
                if (siteAddressModel.ZipCodeOption.Value != null)
                {
                    writer.WriteString("zipCode", siteAddressModel.ZipCode);
                    //var __value = siteAddressModel.ZipCodeOption.Value;
                    //writer.WriteString("zipCode", __value);
                }
                else
                    writer.WriteNull("zipCode");
        }
    }
}
