// <auto-generated>
/*
 * Simplic.OxS.TimeSlot
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.TimeSlot
{
    /// <summary>
    /// Request for creating a new time slot
    /// </summary>
    public partial class CreateTimeSlotRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public CreateTimeSlotRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTimeSlotRequest" /> class.
        /// </summary>
        /// <param name="end">Gets or sets the end datetime</param>
        /// <param name="loadingEndTime">Gets or sets the ending time of loading.</param>
        /// <param name="loadingStartTime">Gets or sets the starting time of loading.</param>
        /// <param name="location">Gets or sets the locaiton name</param>
        /// <param name="siteId">Gets or sets the organization site id</param>
        /// <param name="start">Gets or sets the start datetime</param>
        /// <param name="timeOfArrival">Gets or sets the time pf arrival.</param>
        //[JsonConstructor]
        public CreateTimeSlotRequest(Option<DateTime> end = default, Option<DateTime> loadingEndTime = default, Option<DateTime> loadingStartTime = default, Option<string> location = default, Option<Guid> siteId = default, Option<DateTime> start = default, Option<DateTime> timeOfArrival = default)
        {
            EndOption = end;
            LoadingEndTimeOption = loadingEndTime;
            LoadingStartTimeOption = loadingStartTime;
            LocationOption = location;
            SiteIdOption = siteId;
            StartOption = start;
            TimeOfArrivalOption = timeOfArrival;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of End
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndOption { get; private set; }

        /// <summary>
        /// Gets or sets the end datetime
        /// </summary>
        /// <value>Gets or sets the end datetime</value>
        [JsonPropertyName("end")]
        public DateTime? End { get { return this. EndOption; } set { this.EndOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of LoadingEndTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> LoadingEndTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the ending time of loading.
        /// </summary>
        /// <value>Gets or sets the ending time of loading.</value>
        [JsonPropertyName("loadingEndTime")]
        public DateTime? LoadingEndTime { get { return this. LoadingEndTimeOption; } set { this.LoadingEndTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of LoadingStartTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> LoadingStartTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the starting time of loading.
        /// </summary>
        /// <value>Gets or sets the starting time of loading.</value>
        [JsonPropertyName("loadingStartTime")]
        public DateTime? LoadingStartTime { get { return this. LoadingStartTimeOption; } set { this.LoadingStartTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> LocationOption { get; private set; }

        /// <summary>
        /// Gets or sets the locaiton name
        /// </summary>
        /// <value>Gets or sets the locaiton name</value>
        [JsonPropertyName("location")]
        public string? Location { get { return this. LocationOption; } set { this.LocationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SiteId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> SiteIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the organization site id
        /// </summary>
        /// <value>Gets or sets the organization site id</value>
        [JsonPropertyName("siteId")]
        public Guid? SiteId { get { return this. SiteIdOption; } set { this.SiteIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Start
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartOption { get; private set; }

        /// <summary>
        /// Gets or sets the start datetime
        /// </summary>
        /// <value>Gets or sets the start datetime</value>
        [JsonPropertyName("start")]
        public DateTime? Start { get { return this. StartOption; } set { this.StartOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of TimeOfArrival
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> TimeOfArrivalOption { get; private set; }

        /// <summary>
        /// Gets or sets the time pf arrival.
        /// </summary>
        /// <value>Gets or sets the time pf arrival.</value>
        [JsonPropertyName("timeOfArrival")]
        public DateTime? TimeOfArrival { get { return this. TimeOfArrivalOption; } set { this.TimeOfArrivalOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTimeSlotRequest {\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  LoadingEndTime: ").Append(LoadingEndTime).Append("\n");
            sb.Append("  LoadingStartTime: ").Append(LoadingStartTime).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  TimeOfArrival: ").Append(TimeOfArrival).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateTimeSlotRequest" />
    /// </summary>
    public class CreateTimeSlotRequestJsonConverter : JsonConverter<CreateTimeSlotRequest>
    {
        /// <summary>
        /// The format to use to serialize End
        /// </summary>
        public static string EndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LoadingEndTime
        /// </summary>
        public static string LoadingEndTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LoadingStartTime
        /// </summary>
        public static string LoadingStartTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Start
        /// </summary>
        public static string StartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TimeOfArrival
        /// </summary>
        public static string TimeOfArrivalFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CreateTimeSlotRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateTimeSlotRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> end = default;
            Option<DateTime> loadingEndTime = default;
            Option<DateTime> loadingStartTime = default;
            Option<string> location = default;
            Option<Guid> siteId = default;
            Option<DateTime> start = default;
            Option<DateTime> timeOfArrival = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "end":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                end = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "loadingEndTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadingEndTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "loadingStartTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadingStartTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "location":
                            location = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "siteId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                siteId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "start":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                start = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "timeOfArrival":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                timeOfArrival = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (end.IsSet && end.Value == null)
                throw new ArgumentNullException(nameof(end), "Property is not nullable for class CreateTimeSlotRequest.");

            if (siteId.IsSet && siteId.Value == null)
                throw new ArgumentNullException(nameof(siteId), "Property is not nullable for class CreateTimeSlotRequest.");

            if (start.IsSet && start.Value == null)
                throw new ArgumentNullException(nameof(start), "Property is not nullable for class CreateTimeSlotRequest.");

            //2return new CreateTimeSlotRequest(end, loadingEndTime, loadingStartTime, location, siteId, start, timeOfArrival);
            return new CreateTimeSlotRequest(end, loadingEndTime, loadingStartTime, location, siteId, start, timeOfArrival);
        }

        /// <summary>
        /// Serializes a <see cref="CreateTimeSlotRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTimeSlotRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateTimeSlotRequest createTimeSlotRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createTimeSlotRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateTimeSlotRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTimeSlotRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateTimeSlotRequest createTimeSlotRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createTimeSlotRequest.EndOption.IsSet)
                writer.WriteString("end", createTimeSlotRequest.EndOption!.Value.ToString(EndFormat));

            if (createTimeSlotRequest.LoadingEndTimeOption.IsSet)
                if (createTimeSlotRequest.LoadingEndTimeOption.Value != null)
                {
                    writer.WriteString("loadingEndTime", createTimeSlotRequest.LoadingEndTimeOption!.Value.ToString(LoadingEndTimeFormat));
                    //var __value = createTimeSlotRequest.LoadingEndTimeOption.Value;
                    //writer.WriteString("loadingEndTime", __value);
                }
                else
                    writer.WriteNull("loadingEndTime");

            if (createTimeSlotRequest.LoadingStartTimeOption.IsSet)
                if (createTimeSlotRequest.LoadingStartTimeOption.Value != null)
                {
                    writer.WriteString("loadingStartTime", createTimeSlotRequest.LoadingStartTimeOption!.Value.ToString(LoadingStartTimeFormat));
                    //var __value = createTimeSlotRequest.LoadingStartTimeOption.Value;
                    //writer.WriteString("loadingStartTime", __value);
                }
                else
                    writer.WriteNull("loadingStartTime");

            if (createTimeSlotRequest.LocationOption.IsSet)
                if (createTimeSlotRequest.LocationOption.Value != null)
                {
                    writer.WriteString("location", createTimeSlotRequest.Location);
                    //var __value = createTimeSlotRequest.LocationOption.Value;
                    //writer.WriteString("location", __value);
                }
                else
                    writer.WriteNull("location");

            if (createTimeSlotRequest.SiteIdOption.IsSet)
                writer.WriteString("siteId", createTimeSlotRequest.SiteIdOption!.Value);

            if (createTimeSlotRequest.StartOption.IsSet)
                writer.WriteString("start", createTimeSlotRequest.StartOption!.Value.ToString(StartFormat));

            if (createTimeSlotRequest.TimeOfArrivalOption.IsSet)
                if (createTimeSlotRequest.TimeOfArrivalOption.Value != null)
                {
                    writer.WriteString("timeOfArrival", createTimeSlotRequest.TimeOfArrivalOption!.Value.ToString(TimeOfArrivalFormat));
                    //var __value = createTimeSlotRequest.TimeOfArrivalOption.Value;
                    //writer.WriteString("timeOfArrival", __value);
                }
                else
                    writer.WriteNull("timeOfArrival");
        }
    }
}
