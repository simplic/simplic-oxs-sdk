/*
 * Simplic.OxS.TimeSlot
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.TimeSlot
{
    /// <summary>
    /// Request for creating a new time slot
    /// </summary>
    [DataContract(Name = "CreateTimeSlotRequest")]
    public partial class CreateTimeSlotRequest : IEquatable<CreateTimeSlotRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTimeSlotRequest" /> class.
        /// </summary>
        /// <param name="start">Gets or sets the start datetime.</param>
        /// <param name="end">Gets or sets the end datetime.</param>
        /// <param name="siteId">Gets or sets the organization site id.</param>
        /// <param name="location">Gets or sets the locaiton name.</param>
        /// <param name="timeOfArrival">Gets or sets the time pf arrival..</param>
        /// <param name="loadingStartTime">Gets or sets the starting time of loading..</param>
        /// <param name="loadingEndTime">Gets or sets the ending time of loading..</param>
        public CreateTimeSlotRequest(DateTime start = default(DateTime), DateTime end = default(DateTime), Guid siteId = default(Guid), string location = default(string), DateTime? timeOfArrival = default(DateTime?), DateTime? loadingStartTime = default(DateTime?), DateTime? loadingEndTime = default(DateTime?))
        {
            this.Start = start;
            this.End = end;
            this.SiteId = siteId;
            this.Location = location;
            this.TimeOfArrival = timeOfArrival;
            this.LoadingStartTime = loadingStartTime;
            this.LoadingEndTime = loadingEndTime;
        }

        /// <summary>
        /// Gets or sets the start datetime
        /// </summary>
        /// <value>Gets or sets the start datetime</value>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public DateTime Start { get; set; }

        /// <summary>
        /// Gets or sets the end datetime
        /// </summary>
        /// <value>Gets or sets the end datetime</value>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public DateTime End { get; set; }

        /// <summary>
        /// Gets or sets the organization site id
        /// </summary>
        /// <value>Gets or sets the organization site id</value>
        [DataMember(Name = "siteId", EmitDefaultValue = false)]
        public Guid SiteId { get; set; }

        /// <summary>
        /// Gets or sets the locaiton name
        /// </summary>
        /// <value>Gets or sets the locaiton name</value>
        [DataMember(Name = "location", EmitDefaultValue = true)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the time pf arrival.
        /// </summary>
        /// <value>Gets or sets the time pf arrival.</value>
        [DataMember(Name = "timeOfArrival", EmitDefaultValue = true)]
        public DateTime? TimeOfArrival { get; set; }

        /// <summary>
        /// Gets or sets the starting time of loading.
        /// </summary>
        /// <value>Gets or sets the starting time of loading.</value>
        [DataMember(Name = "loadingStartTime", EmitDefaultValue = true)]
        public DateTime? LoadingStartTime { get; set; }

        /// <summary>
        /// Gets or sets the ending time of loading.
        /// </summary>
        /// <value>Gets or sets the ending time of loading.</value>
        [DataMember(Name = "loadingEndTime", EmitDefaultValue = true)]
        public DateTime? LoadingEndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTimeSlotRequest {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  TimeOfArrival: ").Append(TimeOfArrival).Append("\n");
            sb.Append("  LoadingStartTime: ").Append(LoadingStartTime).Append("\n");
            sb.Append("  LoadingEndTime: ").Append(LoadingEndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTimeSlotRequest);
        }

        /// <summary>
        /// Returns true if CreateTimeSlotRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTimeSlotRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTimeSlotRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.SiteId == input.SiteId ||
                    (this.SiteId != null &&
                    this.SiteId.Equals(input.SiteId))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.TimeOfArrival == input.TimeOfArrival ||
                    (this.TimeOfArrival != null &&
                    this.TimeOfArrival.Equals(input.TimeOfArrival))
                ) && 
                (
                    this.LoadingStartTime == input.LoadingStartTime ||
                    (this.LoadingStartTime != null &&
                    this.LoadingStartTime.Equals(input.LoadingStartTime))
                ) && 
                (
                    this.LoadingEndTime == input.LoadingEndTime ||
                    (this.LoadingEndTime != null &&
                    this.LoadingEndTime.Equals(input.LoadingEndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                if (this.End != null)
                {
                    hashCode = (hashCode * 59) + this.End.GetHashCode();
                }
                if (this.SiteId != null)
                {
                    hashCode = (hashCode * 59) + this.SiteId.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.TimeOfArrival != null)
                {
                    hashCode = (hashCode * 59) + this.TimeOfArrival.GetHashCode();
                }
                if (this.LoadingStartTime != null)
                {
                    hashCode = (hashCode * 59) + this.LoadingStartTime.GetHashCode();
                }
                if (this.LoadingEndTime != null)
                {
                    hashCode = (hashCode * 59) + this.LoadingEndTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
