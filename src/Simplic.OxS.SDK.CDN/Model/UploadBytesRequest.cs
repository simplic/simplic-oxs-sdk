// <auto-generated>
/*
 * Simplic.OxS.CDN
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.CDN
{
    /// <summary>
    /// UploadBytesRequest
    /// </summary>
    public partial class UploadBytesRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public UploadBytesRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UploadBytesRequest" /> class.
        /// </summary>
        /// <param name="data">data</param>
        /// <param name="fileName">fileName</param>
        /// <param name="contentType">contentType</param>
        //[JsonConstructor]
        public UploadBytesRequest(byte[] data, string fileName, Option<string> contentType = default)
        {
            Data = data;
            FileName = fileName;
            ContentTypeOption = contentType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public byte[] Data { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [JsonPropertyName("fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ContentTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [JsonPropertyName("contentType")]
        public string? ContentType { get { return this. ContentTypeOption; } set { this.ContentTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UploadBytesRequest {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FileName (string) minLength
            if (this.FileName != null && this.FileName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, length must be greater than 1.", new [] { "FileName" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UploadBytesRequest" />
    /// </summary>
    public class UploadBytesRequestJsonConverter : JsonConverter<UploadBytesRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UploadBytesRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UploadBytesRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<byte[]> data = default;
            Option<string> fileName = default;
            Option<string> contentType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                data = new Option<byte[]>(JsonSerializer.Deserialize<byte[]>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "fileName":
                            fileName = new Option<string>(utf8JsonReader.GetString()!);
                            break;
                        case "contentType":
                            contentType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class UploadBytesRequest.", nameof(data));

            if (!fileName.IsSet)
                throw new ArgumentException("Property is required for class UploadBytesRequest.", nameof(fileName));

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class UploadBytesRequest.");

            if (fileName.IsSet && fileName.Value == null)
                throw new ArgumentNullException(nameof(fileName), "Property is not nullable for class UploadBytesRequest.");

            //2return new UploadBytesRequest(data.Value!, fileName.Value!, contentType);
            return new UploadBytesRequest(data.Value!, fileName.Value!, contentType);
        }

        /// <summary>
        /// Serializes a <see cref="UploadBytesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="uploadBytesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UploadBytesRequest uploadBytesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, uploadBytesRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UploadBytesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="uploadBytesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, UploadBytesRequest uploadBytesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (uploadBytesRequest.Data == null)
                throw new ArgumentNullException(nameof(uploadBytesRequest.Data), "Property is required for class UploadBytesRequest.");

            if (uploadBytesRequest.FileName == null)
                throw new ArgumentNullException(nameof(uploadBytesRequest.FileName), "Property is required for class UploadBytesRequest.");

            writer.WritePropertyName("data");
            JsonSerializer.Serialize(writer, uploadBytesRequest.Data, jsonSerializerOptions);
            writer.WriteString("fileName", uploadBytesRequest.FileName);

            if (uploadBytesRequest.ContentTypeOption.IsSet)
                if (uploadBytesRequest.ContentTypeOption.Value != null)
                {
                    writer.WriteString("contentType", uploadBytesRequest.ContentType);
                    //var __value = uploadBytesRequest.ContentTypeOption.Value;
                    //writer.WriteString("contentType", __value);
                }
                else
                    writer.WriteNull("contentType");
        }
    }
}
