// <auto-generated>
/*
 * Simplic.OxS.CDN
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.CDN
{
    /// <summary>
    /// BlobMetadata
    /// </summary>
    public partial class BlobMetadata : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public BlobMetadata()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlobMetadata" /> class.
        /// </summary>
        /// <param name="fileName">fileName</param>
        /// <param name="id">id</param>
        /// <param name="lastModified">lastModified</param>
        /// <param name="mimeType">mimeType</param>
        /// <param name="size">size</param>
        //[JsonConstructor]
        public BlobMetadata(Option<string> fileName = default, Option<string> id = default, Option<DateTime> lastModified = default, Option<string> mimeType = default, Option<long> size = default)
        {
            FileNameOption = fileName;
            IdOption = id;
            LastModifiedOption = lastModified;
            MimeTypeOption = mimeType;
            SizeOption = size;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FileName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> FileNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [JsonPropertyName("fileName")]
        public string? FileName { get { return this. FileNameOption; } set { this.FileNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this. IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastModified
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> LastModifiedOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [JsonPropertyName("lastModified")]
        public DateTime? LastModified { get { return this. LastModifiedOption; } set { this.LastModifiedOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of MimeType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> MimeTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [JsonPropertyName("mimeType")]
        public string? MimeType { get { return this. MimeTypeOption; } set { this.MimeTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<long>))]
        public Option<long> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public long? Size { get { return this. SizeOption; } set { this.SizeOption = new Option<long>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlobMetadata {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BlobMetadata" />
    /// </summary>
    public class BlobMetadataJsonConverter : JsonConverter<BlobMetadata>
    {
        /// <summary>
        /// The format to use to serialize LastModified
        /// </summary>
        public static string LastModifiedFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BlobMetadata" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BlobMetadata Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> fileName = default;
            Option<string> id = default;
            Option<DateTime> lastModified = default;
            Option<string> mimeType = default;
            Option<long> size = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fileName":
                            fileName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lastModified":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastModified = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mimeType":
                            mimeType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = new Option<long>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (lastModified.IsSet && lastModified.Value == null)
                throw new ArgumentNullException(nameof(lastModified), "Property is not nullable for class BlobMetadata.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class BlobMetadata.");

            //2return new BlobMetadata(fileName, id, lastModified, mimeType, size);
            return new BlobMetadata(fileName, id, lastModified, mimeType, size);
        }

        /// <summary>
        /// Serializes a <see cref="BlobMetadata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="blobMetadata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BlobMetadata blobMetadata, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, blobMetadata, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BlobMetadata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="blobMetadata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, BlobMetadata blobMetadata, JsonSerializerOptions jsonSerializerOptions)
        {
            if (blobMetadata.FileNameOption.IsSet)
                if (blobMetadata.FileNameOption.Value != null)
                {
                    writer.WriteString("fileName", blobMetadata.FileName);
                    //var __value = blobMetadata.FileNameOption.Value;
                    //writer.WriteString("fileName", __value);
                }
                else
                    writer.WriteNull("fileName");

            if (blobMetadata.IdOption.IsSet)
                if (blobMetadata.IdOption.Value != null)
                {
                    writer.WriteString("id", blobMetadata.Id);
                    //var __value = blobMetadata.IdOption.Value;
                    //writer.WriteString("id", __value);
                }
                else
                    writer.WriteNull("id");

            if (blobMetadata.LastModifiedOption.IsSet)
                writer.WriteString("lastModified", blobMetadata.LastModifiedOption!.Value.ToString(LastModifiedFormat));

            if (blobMetadata.MimeTypeOption.IsSet)
                if (blobMetadata.MimeTypeOption.Value != null)
                {
                    writer.WriteString("mimeType", blobMetadata.MimeType);
                    //var __value = blobMetadata.MimeTypeOption.Value;
                    //writer.WriteString("mimeType", __value);
                }
                else
                    writer.WriteNull("mimeType");

            if (blobMetadata.SizeOption.IsSet)
                writer.WriteNumber("size", blobMetadata.SizeOption!.Value);
        }
    }
}
