/*
 * Simplic.OxS.Geo
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Geo
{
    /// <summary>
    /// RoutingResponse
    /// </summary>
    [DataContract(Name = "RoutingResponse")]
    public partial class RoutingResponse : IEquatable<RoutingResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoutingResponse" /> class.
        /// </summary>
        /// <param name="totalDistance">totalDistance.</param>
        /// <param name="totalTollDistance">totalTollDistance.</param>
        /// <param name="travelTime">travelTime.</param>
        /// <param name="totalTollCosts">totalTollCosts.</param>
        public RoutingResponse(double totalDistance = default(double), double totalTollDistance = default(double), int travelTime = default(int), double totalTollCosts = default(double))
        {
            this.TotalDistance = totalDistance;
            this.TotalTollDistance = totalTollDistance;
            this.TravelTime = travelTime;
            this.TotalTollCosts = totalTollCosts;
        }

        /// <summary>
        /// Gets or Sets TotalDistance
        /// </summary>
        [DataMember(Name = "totalDistance", EmitDefaultValue = false)]
        public double TotalDistance { get; set; }

        /// <summary>
        /// Gets or Sets TotalTollDistance
        /// </summary>
        [DataMember(Name = "totalTollDistance", EmitDefaultValue = false)]
        public double TotalTollDistance { get; set; }

        /// <summary>
        /// Gets or Sets TravelTime
        /// </summary>
        [DataMember(Name = "travelTime", EmitDefaultValue = false)]
        public int TravelTime { get; set; }

        /// <summary>
        /// Gets or Sets TotalTollCosts
        /// </summary>
        [DataMember(Name = "totalTollCosts", EmitDefaultValue = false)]
        public double TotalTollCosts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoutingResponse {\n");
            sb.Append("  TotalDistance: ").Append(TotalDistance).Append("\n");
            sb.Append("  TotalTollDistance: ").Append(TotalTollDistance).Append("\n");
            sb.Append("  TravelTime: ").Append(TravelTime).Append("\n");
            sb.Append("  TotalTollCosts: ").Append(TotalTollCosts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RoutingResponse);
        }

        /// <summary>
        /// Returns true if RoutingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RoutingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoutingResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalDistance == input.TotalDistance ||
                    this.TotalDistance.Equals(input.TotalDistance)
                ) && 
                (
                    this.TotalTollDistance == input.TotalTollDistance ||
                    this.TotalTollDistance.Equals(input.TotalTollDistance)
                ) && 
                (
                    this.TravelTime == input.TravelTime ||
                    this.TravelTime.Equals(input.TravelTime)
                ) && 
                (
                    this.TotalTollCosts == input.TotalTollCosts ||
                    this.TotalTollCosts.Equals(input.TotalTollCosts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TotalDistance.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalTollDistance.GetHashCode();
                hashCode = (hashCode * 59) + this.TravelTime.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalTollCosts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
