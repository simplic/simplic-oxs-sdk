// <auto-generated>
/*
 * Simplic.OxS.Geo
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Geo
{
    /// <summary>
    /// RoutingResponse
    /// </summary>
    public partial class RoutingResponse : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public RoutingResponse()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutingResponse" /> class.
        /// </summary>
        /// <param name="totalDistance">totalDistance</param>
        /// <param name="totalTollCosts">totalTollCosts</param>
        /// <param name="totalTollDistance">totalTollDistance</param>
        /// <param name="travelTime">travelTime</param>
        //[JsonConstructor]
        public RoutingResponse(Option<double> totalDistance = default, Option<double> totalTollCosts = default, Option<double> totalTollDistance = default, Option<int> travelTime = default)
        {
            TotalDistanceOption = totalDistance;
            TotalTollCostsOption = totalTollCosts;
            TotalTollDistanceOption = totalTollDistance;
            TravelTimeOption = travelTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TotalDistance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalDistanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalDistance
        /// </summary>
        [JsonPropertyName("totalDistance")]
        public double? TotalDistance { get { return this. TotalDistanceOption; } set { this.TotalDistanceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TotalTollCosts
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalTollCostsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalTollCosts
        /// </summary>
        [JsonPropertyName("totalTollCosts")]
        public double? TotalTollCosts { get { return this. TotalTollCostsOption; } set { this.TotalTollCostsOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TotalTollDistance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalTollDistanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalTollDistance
        /// </summary>
        [JsonPropertyName("totalTollDistance")]
        public double? TotalTollDistance { get { return this. TotalTollDistanceOption; } set { this.TotalTollDistanceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TravelTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> TravelTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets TravelTime
        /// </summary>
        [JsonPropertyName("travelTime")]
        public int? TravelTime { get { return this. TravelTimeOption; } set { this.TravelTimeOption = new Option<int>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoutingResponse {\n");
            sb.Append("  TotalDistance: ").Append(TotalDistance).Append("\n");
            sb.Append("  TotalTollCosts: ").Append(TotalTollCosts).Append("\n");
            sb.Append("  TotalTollDistance: ").Append(TotalTollDistance).Append("\n");
            sb.Append("  TravelTime: ").Append(TravelTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RoutingResponse" />
    /// </summary>
    public class RoutingResponseJsonConverter : JsonConverter<RoutingResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="RoutingResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RoutingResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double> totalDistance = default;
            Option<double> totalTollCosts = default;
            Option<double> totalTollDistance = default;
            Option<int> travelTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "totalDistance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalDistance = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalTollCosts":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalTollCosts = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalTollDistance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalTollDistance = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "travelTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                travelTime = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (totalDistance.IsSet && totalDistance.Value == null)
                throw new ArgumentNullException(nameof(totalDistance), "Property is not nullable for class RoutingResponse.");

            if (totalTollCosts.IsSet && totalTollCosts.Value == null)
                throw new ArgumentNullException(nameof(totalTollCosts), "Property is not nullable for class RoutingResponse.");

            if (totalTollDistance.IsSet && totalTollDistance.Value == null)
                throw new ArgumentNullException(nameof(totalTollDistance), "Property is not nullable for class RoutingResponse.");

            if (travelTime.IsSet && travelTime.Value == null)
                throw new ArgumentNullException(nameof(travelTime), "Property is not nullable for class RoutingResponse.");

            //2return new RoutingResponse(totalDistance, totalTollCosts, totalTollDistance, travelTime);
            return new RoutingResponse(totalDistance, totalTollCosts, totalTollDistance, travelTime);
        }

        /// <summary>
        /// Serializes a <see cref="RoutingResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="routingResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RoutingResponse routingResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, routingResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RoutingResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="routingResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, RoutingResponse routingResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (routingResponse.TotalDistanceOption.IsSet)
                writer.WriteNumber("totalDistance", routingResponse.TotalDistanceOption!.Value);

            if (routingResponse.TotalTollCostsOption.IsSet)
                writer.WriteNumber("totalTollCosts", routingResponse.TotalTollCostsOption!.Value);

            if (routingResponse.TotalTollDistanceOption.IsSet)
                writer.WriteNumber("totalTollDistance", routingResponse.TotalTollDistanceOption!.Value);

            if (routingResponse.TravelTimeOption.IsSet)
                writer.WriteNumber("travelTime", routingResponse.TravelTimeOption!.Value);
        }
    }
}
