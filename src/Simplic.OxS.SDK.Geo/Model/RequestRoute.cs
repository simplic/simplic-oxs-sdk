/*
 * Simplic.OxS.Geo
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Geo
{
    /// <summary>
    /// RequestRoute
    /// </summary>
    [DataContract(Name = "RequestRoute")]
    public partial class RequestRoute : IEquatable<RequestRoute>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Traffic
        /// </summary>
        [DataMember(Name = "traffic", EmitDefaultValue = false)]
        public Traffic? Traffic { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestRoute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequestRoute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestRoute" /> class.
        /// </summary>
        /// <param name="traffic">traffic.</param>
        /// <param name="waypoints">waypoints (required).</param>
        public RequestRoute(Traffic? traffic = default(Traffic?), List<WaypointModel> waypoints = default(List<WaypointModel>))
        {
            // to ensure "waypoints" is required (not null)
            if (waypoints == null)
            {
                throw new ArgumentNullException("waypoints is a required property for RequestRoute and cannot be null");
            }
            this.Waypoints = waypoints;
            this.Traffic = traffic;
        }

        /// <summary>
        /// Gets or Sets Waypoints
        /// </summary>
        [DataMember(Name = "waypoints", IsRequired = true, EmitDefaultValue = true)]
        public List<WaypointModel> Waypoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestRoute {\n");
            sb.Append("  Traffic: ").Append(Traffic).Append("\n");
            sb.Append("  Waypoints: ").Append(Waypoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestRoute);
        }

        /// <summary>
        /// Returns true if RequestRoute instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestRoute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestRoute input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Traffic == input.Traffic ||
                    this.Traffic.Equals(input.Traffic)
                ) && 
                (
                    this.Waypoints == input.Waypoints ||
                    this.Waypoints != null &&
                    input.Waypoints != null &&
                    this.Waypoints.SequenceEqual(input.Waypoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Traffic.GetHashCode();
                if (this.Waypoints != null)
                {
                    hashCode = (hashCode * 59) + this.Waypoints.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
