// <auto-generated>
/*
 * Simplic.OxS.Document
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Document
{
    /// <summary>
    /// DocumentResponse
    /// </summary>
    public partial class DocumentResponse : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public DocumentResponse()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentResponse" /> class.
        /// </summary>
        /// <param name="barcode">barcode</param>
        /// <param name="currentVersion">currentVersion</param>
        /// <param name="dateTime">dateTime</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="primaryClassification">primaryClassification</param>
        /// <param name="reference">reference</param>
        /// <param name="versions">versions</param>
        //[JsonConstructor]
        public DocumentResponse(Option<string> barcode = default, Option<DocumentVersionResponse> currentVersion = default, Option<DateTime> dateTime = default, Option<Guid> id = default, Option<string> name = default, Option<ClassificationResponse> primaryClassification = default, Option<string> reference = default, Option<List<DocumentVersionResponse>> versions = default)
        {
            BarcodeOption = barcode;
            CurrentVersionOption = currentVersion;
            DateTimeOption = dateTime;
            IdOption = id;
            NameOption = name;
            PrimaryClassificationOption = primaryClassification;
            ReferenceOption = reference;
            VersionsOption = versions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Barcode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> BarcodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Barcode
        /// </summary>
        [JsonPropertyName("barcode")]
        public string? Barcode { get { return this. BarcodeOption; } set { this.BarcodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CurrentVersion
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DocumentVersionResponse>))]
        public Option<DocumentVersionResponse> CurrentVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets CurrentVersion
        /// </summary>
        [JsonPropertyName("currentVersion")]
        public DocumentVersionResponse? CurrentVersion { get { return this. CurrentVersionOption; } set { this.CurrentVersionOption = new Option<DocumentVersionResponse>(value); } }

        /// <summary>
        /// Used to track the state of DateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [JsonPropertyName("dateTime")]
        public DateTime? DateTime { get { return this. DateTimeOption; } set { this.DateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PrimaryClassification
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ClassificationResponse>))]
        public Option<ClassificationResponse> PrimaryClassificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets PrimaryClassification
        /// </summary>
        [JsonPropertyName("primaryClassification")]
        public ClassificationResponse? PrimaryClassification { get { return this. PrimaryClassificationOption; } set { this.PrimaryClassificationOption = new Option<ClassificationResponse>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [JsonPropertyName("reference")]
        public string? Reference { get { return this. ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Versions
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<DocumentVersionResponse>>))]
        public Option<List<DocumentVersionResponse>> VersionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Versions
        /// </summary>
        [JsonPropertyName("versions")]
        public List<DocumentVersionResponse>? Versions { get { return this. VersionsOption; } set { this.VersionsOption = new Option<List<DocumentVersionResponse>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentResponse {\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  CurrentVersion: ").Append(CurrentVersion).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PrimaryClassification: ").Append(PrimaryClassification).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentResponse" />
    /// </summary>
    public class DocumentResponseJsonConverter : JsonConverter<DocumentResponse>
    {
        /// <summary>
        /// The format to use to serialize DateTime
        /// </summary>
        public static string DateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DocumentResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DocumentResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> barcode = default;
            Option<DocumentVersionResponse> currentVersion = default;
            Option<DateTime> dateTime = default;
            Option<Guid> id = default;
            Option<string> name = default;
            Option<ClassificationResponse> primaryClassification = default;
            Option<string> reference = default;
            Option<List<DocumentVersionResponse>> versions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "barcode":
                            barcode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "currentVersion":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currentVersion = new Option<DocumentVersionResponse>(JsonSerializer.Deserialize<DocumentVersionResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "primaryClassification":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                primaryClassification = new Option<ClassificationResponse>(JsonSerializer.Deserialize<ClassificationResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "versions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                versions = new Option<List<DocumentVersionResponse>>(JsonSerializer.Deserialize<List<DocumentVersionResponse>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (currentVersion.IsSet && currentVersion.Value == null)
                throw new ArgumentNullException(nameof(currentVersion), "Property is not nullable for class DocumentResponse.");

            if (dateTime.IsSet && dateTime.Value == null)
                throw new ArgumentNullException(nameof(dateTime), "Property is not nullable for class DocumentResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DocumentResponse.");

            if (primaryClassification.IsSet && primaryClassification.Value == null)
                throw new ArgumentNullException(nameof(primaryClassification), "Property is not nullable for class DocumentResponse.");

            //2return new DocumentResponse(barcode, currentVersion, dateTime, id, name, primaryClassification, reference, versions);
            return new DocumentResponse(barcode, currentVersion, dateTime, id, name, primaryClassification, reference, versions);
        }

        /// <summary>
        /// Serializes a <see cref="DocumentResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DocumentResponse documentResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, documentResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DocumentResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, DocumentResponse documentResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (documentResponse.CurrentVersionOption.IsSet && documentResponse.CurrentVersion == null)
                throw new ArgumentNullException(nameof(documentResponse.CurrentVersion), "Property is required for class DocumentResponse.");

            if (documentResponse.PrimaryClassificationOption.IsSet && documentResponse.PrimaryClassification == null)
                throw new ArgumentNullException(nameof(documentResponse.PrimaryClassification), "Property is required for class DocumentResponse.");

            if (documentResponse.BarcodeOption.IsSet)
                if (documentResponse.BarcodeOption.Value != null)
                {
                    writer.WriteString("barcode", documentResponse.Barcode);
                    //var __value = documentResponse.BarcodeOption.Value;
                    //writer.WriteString("barcode", __value);
                }
                else
                    writer.WriteNull("barcode");

            if (documentResponse.CurrentVersionOption.IsSet)
            {
                writer.WritePropertyName("currentVersion");
                JsonSerializer.Serialize(writer, documentResponse.CurrentVersion, jsonSerializerOptions);
            }
            if (documentResponse.DateTimeOption.IsSet)
                writer.WriteString("dateTime", documentResponse.DateTimeOption!.Value.ToString(DateTimeFormat));

            if (documentResponse.IdOption.IsSet)
                writer.WriteString("id", documentResponse.IdOption!.Value);

            if (documentResponse.NameOption.IsSet)
                if (documentResponse.NameOption.Value != null)
                {
                    writer.WriteString("name", documentResponse.Name);
                    //var __value = documentResponse.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (documentResponse.PrimaryClassificationOption.IsSet)
            {
                writer.WritePropertyName("primaryClassification");
                JsonSerializer.Serialize(writer, documentResponse.PrimaryClassification, jsonSerializerOptions);
            }
            if (documentResponse.ReferenceOption.IsSet)
                if (documentResponse.ReferenceOption.Value != null)
                {
                    writer.WriteString("reference", documentResponse.Reference);
                    //var __value = documentResponse.ReferenceOption.Value;
                    //writer.WriteString("reference", __value);
                }
                else
                    writer.WriteNull("reference");

            if (documentResponse.VersionsOption.IsSet)
                if (documentResponse.VersionsOption.Value != null)
                {
                    writer.WritePropertyName("versions");
                    JsonSerializer.Serialize(writer, documentResponse.Versions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("versions");
        }
    }
}
