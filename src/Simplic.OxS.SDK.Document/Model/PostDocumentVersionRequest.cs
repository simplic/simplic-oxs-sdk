// <auto-generated>
/*
 * Simplic.OxS.Document
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Document
{
    /// <summary>
    /// PostDocumentVersionRequest
    /// </summary>
    public partial class PostDocumentVersionRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public PostDocumentVersionRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostDocumentVersionRequest" /> class.
        /// </summary>
        /// <param name="fileSize">fileSize</param>
        /// <param name="mimeType">mimeType</param>
        /// <param name="url">url</param>
        /// <param name="comment">comment</param>
        /// <param name="fileExtension">fileExtension</param>
        //[JsonConstructor]
        public PostDocumentVersionRequest(long fileSize, string mimeType, string url, Option<string> comment = default, Option<string> fileExtension = default)
        {
            FileSize = fileSize;
            MimeType = mimeType;
            Url = url;
            CommentOption = comment;
            FileExtensionOption = fileExtension;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [JsonPropertyName("fileSize")]
        public long FileSize { get; set; }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [JsonPropertyName("mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this. CommentOption; } set { this.CommentOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FileExtension
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> FileExtensionOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileExtension
        /// </summary>
        [JsonPropertyName("fileExtension")]
        public string? FileExtension { get { return this. FileExtensionOption; } set { this.FileExtensionOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostDocumentVersionRequest {\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  FileExtension: ").Append(FileExtension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MimeType (string) minLength
            if (this.MimeType != null && this.MimeType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MimeType, length must be greater than 1.", new [] { "MimeType" });
            }

            // Url (string) minLength
            if (this.Url != null && this.Url.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be greater than 1.", new [] { "Url" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PostDocumentVersionRequest" />
    /// </summary>
    public class PostDocumentVersionRequestJsonConverter : JsonConverter<PostDocumentVersionRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PostDocumentVersionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PostDocumentVersionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long> fileSize = default;
            Option<string> mimeType = default;
            Option<string> url = default;
            Option<string> comment = default;
            Option<string> fileExtension = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fileSize":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fileSize = new Option<long>(utf8JsonReader.GetInt64());
                            break;
                        case "mimeType":
                            mimeType = new Option<string>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString()!);
                            break;
                        case "comment":
                            comment = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fileExtension":
                            fileExtension = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fileSize.IsSet)
                throw new ArgumentException("Property is required for class PostDocumentVersionRequest.", nameof(fileSize));

            if (!mimeType.IsSet)
                throw new ArgumentException("Property is required for class PostDocumentVersionRequest.", nameof(mimeType));

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class PostDocumentVersionRequest.", nameof(url));

            if (fileSize.IsSet && fileSize.Value == null)
                throw new ArgumentNullException(nameof(fileSize), "Property is not nullable for class PostDocumentVersionRequest.");

            if (mimeType.IsSet && mimeType.Value == null)
                throw new ArgumentNullException(nameof(mimeType), "Property is not nullable for class PostDocumentVersionRequest.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class PostDocumentVersionRequest.");

            //2return new PostDocumentVersionRequest(fileSize.Value!.Value!, mimeType.Value!, url.Value!, comment, fileExtension);
            return new PostDocumentVersionRequest(fileSize.Value!, mimeType.Value!, url.Value!, comment, fileExtension);
        }

        /// <summary>
        /// Serializes a <see cref="PostDocumentVersionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postDocumentVersionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PostDocumentVersionRequest postDocumentVersionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, postDocumentVersionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PostDocumentVersionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postDocumentVersionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, PostDocumentVersionRequest postDocumentVersionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (postDocumentVersionRequest.MimeType == null)
                throw new ArgumentNullException(nameof(postDocumentVersionRequest.MimeType), "Property is required for class PostDocumentVersionRequest.");

            if (postDocumentVersionRequest.Url == null)
                throw new ArgumentNullException(nameof(postDocumentVersionRequest.Url), "Property is required for class PostDocumentVersionRequest.");

            writer.WriteNumber("fileSize", postDocumentVersionRequest.FileSize);

            writer.WriteString("mimeType", postDocumentVersionRequest.MimeType);

            writer.WriteString("url", postDocumentVersionRequest.Url);

            if (postDocumentVersionRequest.CommentOption.IsSet)
                if (postDocumentVersionRequest.CommentOption.Value != null)
                {
                    writer.WriteString("comment", postDocumentVersionRequest.Comment);
                    //var __value = postDocumentVersionRequest.CommentOption.Value;
                    //writer.WriteString("comment", __value);
                }
                else
                    writer.WriteNull("comment");

            if (postDocumentVersionRequest.FileExtensionOption.IsSet)
                if (postDocumentVersionRequest.FileExtensionOption.Value != null)
                {
                    writer.WriteString("fileExtension", postDocumentVersionRequest.FileExtension);
                    //var __value = postDocumentVersionRequest.FileExtensionOption.Value;
                    //writer.WriteString("fileExtension", __value);
                }
                else
                    writer.WriteNull("fileExtension");
        }
    }
}
