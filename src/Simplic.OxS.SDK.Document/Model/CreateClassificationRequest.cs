// <auto-generated>
/*
 * Simplic.OxS.Document
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Document
{
    /// <summary>
    /// CreateClassificationRequest
    /// </summary>
    public partial class CreateClassificationRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public CreateClassificationRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateClassificationRequest" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="aiConfiguration">aiConfiguration</param>
        //[JsonConstructor]
        public CreateClassificationRequest(string name, Option<ClassificationAIPropertiesModel> aiConfiguration = default)
        {
            Name = name;
            AiConfigurationOption = aiConfiguration;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of AiConfiguration
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ClassificationAIPropertiesModel>))]
        public Option<ClassificationAIPropertiesModel> AiConfigurationOption { get; private set; }

        /// <summary>
        /// Gets or Sets AiConfiguration
        /// </summary>
        [JsonPropertyName("aiConfiguration")]
        public ClassificationAIPropertiesModel? AiConfiguration { get { return this. AiConfigurationOption; } set { this.AiConfigurationOption = new Option<ClassificationAIPropertiesModel>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateClassificationRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AiConfiguration: ").Append(AiConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateClassificationRequest" />
    /// </summary>
    public class CreateClassificationRequestJsonConverter : JsonConverter<CreateClassificationRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateClassificationRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateClassificationRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<ClassificationAIPropertiesModel> aiConfiguration = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString()!);
                            break;
                        case "aiConfiguration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                aiConfiguration = new Option<ClassificationAIPropertiesModel>(JsonSerializer.Deserialize<ClassificationAIPropertiesModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateClassificationRequest.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateClassificationRequest.");

            if (aiConfiguration.IsSet && aiConfiguration.Value == null)
                throw new ArgumentNullException(nameof(aiConfiguration), "Property is not nullable for class CreateClassificationRequest.");

            //2return new CreateClassificationRequest(name.Value!, aiConfiguration);
            return new CreateClassificationRequest(name.Value!, aiConfiguration);
        }

        /// <summary>
        /// Serializes a <see cref="CreateClassificationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createClassificationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateClassificationRequest createClassificationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createClassificationRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateClassificationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createClassificationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateClassificationRequest createClassificationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createClassificationRequest.Name == null)
                throw new ArgumentNullException(nameof(createClassificationRequest.Name), "Property is required for class CreateClassificationRequest.");

            if (createClassificationRequest.AiConfigurationOption.IsSet && createClassificationRequest.AiConfiguration == null)
                throw new ArgumentNullException(nameof(createClassificationRequest.AiConfiguration), "Property is required for class CreateClassificationRequest.");

            writer.WriteString("name", createClassificationRequest.Name);

            if (createClassificationRequest.AiConfigurationOption.IsSet)
            {
                writer.WritePropertyName("aiConfiguration");
                JsonSerializer.Serialize(writer, createClassificationRequest.AiConfiguration, jsonSerializerOptions);
            }
        }
    }
}
