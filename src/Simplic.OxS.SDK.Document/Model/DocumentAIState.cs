/*
 * Simplic.OxS.Document
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Document
{
    /// <summary>
    /// DocumentAIState
    /// </summary>
    [DataContract(Name = "DocumentAIState")]
    public partial class DocumentAIState : IEquatable<DocumentAIState>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AiState
        /// </summary>
        [DataMember(Name = "aiState", EmitDefaultValue = false)]
        public AIState? AiState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentAIState" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="aiState">aiState.</param>
        /// <param name="rossumId">rossumId.</param>
        /// <param name="payloadId">payloadId.</param>
        /// <param name="annotationId">annotationId.</param>
        public DocumentAIState(Guid id = default(Guid), Guid organizationId = default(Guid), bool isDeleted = default(bool), AIState? aiState = default(AIState?), int rossumId = default(int), Guid payloadId = default(Guid), int? annotationId = default(int?))
        {
            this.Id = id;
            this.OrganizationId = organizationId;
            this.IsDeleted = isDeleted;
            this.AiState = aiState;
            this.RossumId = rossumId;
            this.PayloadId = payloadId;
            this.AnnotationId = annotationId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organizationId", EmitDefaultValue = false)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets RossumId
        /// </summary>
        [DataMember(Name = "rossumId", EmitDefaultValue = false)]
        public int RossumId { get; set; }

        /// <summary>
        /// Gets or Sets PayloadId
        /// </summary>
        [DataMember(Name = "payloadId", EmitDefaultValue = false)]
        public Guid PayloadId { get; set; }

        /// <summary>
        /// Gets or Sets AnnotationId
        /// </summary>
        [DataMember(Name = "annotationId", EmitDefaultValue = true)]
        public int? AnnotationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentAIState {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  AiState: ").Append(AiState).Append("\n");
            sb.Append("  RossumId: ").Append(RossumId).Append("\n");
            sb.Append("  PayloadId: ").Append(PayloadId).Append("\n");
            sb.Append("  AnnotationId: ").Append(AnnotationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentAIState);
        }

        /// <summary>
        /// Returns true if DocumentAIState instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentAIState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentAIState input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.AiState == input.AiState ||
                    this.AiState.Equals(input.AiState)
                ) && 
                (
                    this.RossumId == input.RossumId ||
                    this.RossumId.Equals(input.RossumId)
                ) && 
                (
                    this.PayloadId == input.PayloadId ||
                    (this.PayloadId != null &&
                    this.PayloadId.Equals(input.PayloadId))
                ) && 
                (
                    this.AnnotationId == input.AnnotationId ||
                    (this.AnnotationId != null &&
                    this.AnnotationId.Equals(input.AnnotationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.OrganizationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                hashCode = (hashCode * 59) + this.AiState.GetHashCode();
                hashCode = (hashCode * 59) + this.RossumId.GetHashCode();
                if (this.PayloadId != null)
                {
                    hashCode = (hashCode * 59) + this.PayloadId.GetHashCode();
                }
                if (this.AnnotationId != null)
                {
                    hashCode = (hashCode * 59) + this.AnnotationId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
