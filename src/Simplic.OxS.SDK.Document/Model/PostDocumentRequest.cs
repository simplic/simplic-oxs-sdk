/*
 * Simplic.OxS.Document
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Document
{
    /// <summary>
    /// PostDocumentRequest
    /// </summary>
    [DataContract(Name = "PostDocumentRequest")]
    public partial class PostDocumentRequest : IEquatable<PostDocumentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostDocumentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostDocumentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostDocumentRequest" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="dateTime">dateTime.</param>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="reference">reference.</param>
        /// <param name="barcode">barcode.</param>
        /// <param name="primaryClassificationId">primaryClassificationId.</param>
        /// <param name="rawDataUrl">rawDataUrl.</param>
        /// <param name="rawDataProvider">rawDataProvider.</param>
        public PostDocumentRequest(string name = default(string), DateTime dateTime = default(DateTime), PostDocumentVersionRequest varVersion = default(PostDocumentVersionRequest), string reference = default(string), string barcode = default(string), Guid? primaryClassificationId = default(Guid?), string rawDataUrl = default(string), string rawDataProvider = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PostDocumentRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for PostDocumentRequest and cannot be null");
            }
            this.VarVersion = varVersion;
            this.DateTime = dateTime;
            this.Reference = reference;
            this.Barcode = barcode;
            this.PrimaryClassificationId = primaryClassificationId;
            this.RawDataUrl = rawDataUrl;
            this.RawDataProvider = rawDataProvider;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public PostDocumentVersionRequest VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Barcode
        /// </summary>
        [DataMember(Name = "barcode", EmitDefaultValue = true)]
        public string Barcode { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryClassificationId
        /// </summary>
        [DataMember(Name = "primaryClassificationId", EmitDefaultValue = true)]
        public Guid? PrimaryClassificationId { get; set; }

        /// <summary>
        /// Gets or Sets RawDataUrl
        /// </summary>
        [DataMember(Name = "rawDataUrl", EmitDefaultValue = true)]
        public string RawDataUrl { get; set; }

        /// <summary>
        /// Gets or Sets RawDataProvider
        /// </summary>
        [DataMember(Name = "rawDataProvider", EmitDefaultValue = true)]
        public string RawDataProvider { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostDocumentRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  PrimaryClassificationId: ").Append(PrimaryClassificationId).Append("\n");
            sb.Append("  RawDataUrl: ").Append(RawDataUrl).Append("\n");
            sb.Append("  RawDataProvider: ").Append(RawDataProvider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostDocumentRequest);
        }

        /// <summary>
        /// Returns true if PostDocumentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostDocumentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostDocumentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                ) && 
                (
                    this.PrimaryClassificationId == input.PrimaryClassificationId ||
                    (this.PrimaryClassificationId != null &&
                    this.PrimaryClassificationId.Equals(input.PrimaryClassificationId))
                ) && 
                (
                    this.RawDataUrl == input.RawDataUrl ||
                    (this.RawDataUrl != null &&
                    this.RawDataUrl.Equals(input.RawDataUrl))
                ) && 
                (
                    this.RawDataProvider == input.RawDataProvider ||
                    (this.RawDataProvider != null &&
                    this.RawDataProvider.Equals(input.RawDataProvider))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.Barcode != null)
                {
                    hashCode = (hashCode * 59) + this.Barcode.GetHashCode();
                }
                if (this.PrimaryClassificationId != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryClassificationId.GetHashCode();
                }
                if (this.RawDataUrl != null)
                {
                    hashCode = (hashCode * 59) + this.RawDataUrl.GetHashCode();
                }
                if (this.RawDataProvider != null)
                {
                    hashCode = (hashCode * 59) + this.RawDataProvider.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
