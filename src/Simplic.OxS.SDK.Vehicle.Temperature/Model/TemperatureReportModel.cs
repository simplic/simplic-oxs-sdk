/*
 * Simplic.OxS.vehicle-temperature
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle.Temperature
{
    /// <summary>
    /// TemperatureReportModel
    /// </summary>
    [DataContract(Name = "TemperatureReportModel")]
    public partial class TemperatureReportModel : IEquatable<TemperatureReportModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureReportModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="vehicleName">vehicleName.</param>
        /// <param name="vehicleId">vehicleId.</param>
        /// <param name="dateTime">dateTime.</param>
        /// <param name="temperatures">temperatures.</param>
        /// <param name="switches">switches.</param>
        /// <param name="varConfiguration">varConfiguration.</param>
        public TemperatureReportModel(Guid id = default(Guid), string vehicleName = default(string), Guid vehicleId = default(Guid), DateTime dateTime = default(DateTime), List<ReportVehicleTemperatureModel> temperatures = default(List<ReportVehicleTemperatureModel>), List<ReportVehicleSwitchModel> switches = default(List<ReportVehicleSwitchModel>), ConfigurationModel varConfiguration = default(ConfigurationModel))
        {
            this.Id = id;
            this.VehicleName = vehicleName;
            this.VehicleId = vehicleId;
            this.DateTime = dateTime;
            this.Temperatures = temperatures;
            this.Switches = switches;
            this.VarConfiguration = varConfiguration;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets VehicleName
        /// </summary>
        [DataMember(Name = "vehicleName", EmitDefaultValue = true)]
        public string VehicleName { get; set; }

        /// <summary>
        /// Gets or Sets VehicleId
        /// </summary>
        [DataMember(Name = "vehicleId", EmitDefaultValue = false)]
        public Guid VehicleId { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Gets or Sets Temperatures
        /// </summary>
        [DataMember(Name = "temperatures", EmitDefaultValue = true)]
        public List<ReportVehicleTemperatureModel> Temperatures { get; set; }

        /// <summary>
        /// Gets or Sets Switches
        /// </summary>
        [DataMember(Name = "switches", EmitDefaultValue = true)]
        public List<ReportVehicleSwitchModel> Switches { get; set; }

        /// <summary>
        /// Gets or Sets VarConfiguration
        /// </summary>
        [DataMember(Name = "configuration", EmitDefaultValue = false)]
        public ConfigurationModel VarConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemperatureReportModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VehicleName: ").Append(VehicleName).Append("\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Temperatures: ").Append(Temperatures).Append("\n");
            sb.Append("  Switches: ").Append(Switches).Append("\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemperatureReportModel);
        }

        /// <summary>
        /// Returns true if TemperatureReportModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TemperatureReportModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemperatureReportModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VehicleName == input.VehicleName ||
                    (this.VehicleName != null &&
                    this.VehicleName.Equals(input.VehicleName))
                ) && 
                (
                    this.VehicleId == input.VehicleId ||
                    (this.VehicleId != null &&
                    this.VehicleId.Equals(input.VehicleId))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.Temperatures == input.Temperatures ||
                    this.Temperatures != null &&
                    input.Temperatures != null &&
                    this.Temperatures.SequenceEqual(input.Temperatures)
                ) && 
                (
                    this.Switches == input.Switches ||
                    this.Switches != null &&
                    input.Switches != null &&
                    this.Switches.SequenceEqual(input.Switches)
                ) && 
                (
                    this.VarConfiguration == input.VarConfiguration ||
                    (this.VarConfiguration != null &&
                    this.VarConfiguration.Equals(input.VarConfiguration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VehicleName != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleName.GetHashCode();
                }
                if (this.VehicleId != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleId.GetHashCode();
                }
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                if (this.Temperatures != null)
                {
                    hashCode = (hashCode * 59) + this.Temperatures.GetHashCode();
                }
                if (this.Switches != null)
                {
                    hashCode = (hashCode * 59) + this.Switches.GetHashCode();
                }
                if (this.VarConfiguration != null)
                {
                    hashCode = (hashCode * 59) + this.VarConfiguration.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
