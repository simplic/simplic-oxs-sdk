// <auto-generated>
/*
 * Simplic.OxS.vehicle-temperature
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle.Temperature
{
    /// <summary>
    /// Vehicle
    /// </summary>
    public partial class Vehicle : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public Vehicle()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="matchCode">matchCode</param>
        /// <param name="registrationPlate">registrationPlate</param>
        //[JsonConstructor]
        public Vehicle(Option<Guid> id = default, Option<string> matchCode = default, Option<RegistrationPlate> registrationPlate = default)
        {
            IdOption = id;
            MatchCodeOption = matchCode;
            RegistrationPlateOption = registrationPlate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of MatchCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> MatchCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets MatchCode
        /// </summary>
        [JsonPropertyName("matchCode")]
        public string? MatchCode { get { return this. MatchCodeOption; } set { this.MatchCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationPlate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<RegistrationPlate>))]
        public Option<RegistrationPlate> RegistrationPlateOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationPlate
        /// </summary>
        [JsonPropertyName("registrationPlate")]
        public RegistrationPlate? RegistrationPlate { get { return this. RegistrationPlateOption; } set { this.RegistrationPlateOption = new Option<RegistrationPlate>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MatchCode: ").Append(MatchCode).Append("\n");
            sb.Append("  RegistrationPlate: ").Append(RegistrationPlate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Vehicle" />
    /// </summary>
    public class VehicleJsonConverter : JsonConverter<Vehicle>
    {
        /// <summary>
        /// Deserializes json to <see cref="Vehicle" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Vehicle Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid> id = default;
            Option<string> matchCode = default;
            Option<RegistrationPlate> registrationPlate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "matchCode":
                            matchCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "registrationPlate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                registrationPlate = new Option<RegistrationPlate>(JsonSerializer.Deserialize<RegistrationPlate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Vehicle.");

            if (registrationPlate.IsSet && registrationPlate.Value == null)
                throw new ArgumentNullException(nameof(registrationPlate), "Property is not nullable for class Vehicle.");

            //2return new Vehicle(id, matchCode, registrationPlate);
            return new Vehicle(id, matchCode, registrationPlate);
        }

        /// <summary>
        /// Serializes a <see cref="Vehicle" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vehicle"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Vehicle vehicle, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, vehicle, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Vehicle" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vehicle"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, Vehicle vehicle, JsonSerializerOptions jsonSerializerOptions)
        {
            if (vehicle.RegistrationPlateOption.IsSet && vehicle.RegistrationPlate == null)
                throw new ArgumentNullException(nameof(vehicle.RegistrationPlate), "Property is required for class Vehicle.");

            if (vehicle.IdOption.IsSet)
                writer.WriteString("id", vehicle.IdOption!.Value);

            if (vehicle.MatchCodeOption.IsSet)
                if (vehicle.MatchCodeOption.Value != null)
                {
                    writer.WriteString("matchCode", vehicle.MatchCode);
                    //var __value = vehicle.MatchCodeOption.Value;
                    //writer.WriteString("matchCode", __value);
                }
                else
                    writer.WriteNull("matchCode");

            if (vehicle.RegistrationPlateOption.IsSet)
            {
                writer.WritePropertyName("registrationPlate");
                JsonSerializer.Serialize(writer, vehicle.RegistrationPlate, jsonSerializerOptions);
            }
        }
    }
}
