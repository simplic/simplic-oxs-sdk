// <auto-generated>
/*
 * Simplic.OxS.vehicle-temperature
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle.Temperature
{
    /// <summary>
    /// AgoraBeeMeasurementData
    /// </summary>
    public partial class AgoraBeeMeasurementData : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public AgoraBeeMeasurementData()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgoraBeeMeasurementData" /> class.
        /// </summary>
        /// <param name="devTimestamp">devTimestamp</param>
        /// <param name="heading">heading</param>
        /// <param name="imei">imei</param>
        /// <param name="latitude">latitude</param>
        /// <param name="longitude">longitude</param>
        /// <param name="readerId">readerId</param>
        /// <param name="speed">speed</param>
        /// <param name="srvTimestamp">srvTimestamp</param>
        /// <param name="tags">tags</param>
        //[JsonConstructor]
        public AgoraBeeMeasurementData(Option<long> devTimestamp = default, Option<int> heading = default, Option<string> imei = default, Option<double> latitude = default, Option<double> longitude = default, Option<string> readerId = default, Option<double> speed = default, Option<long> srvTimestamp = default, Option<List<AgoraBeeTag>> tags = default)
        {
            DevTimestampOption = devTimestamp;
            HeadingOption = heading;
            ImeiOption = imei;
            LatitudeOption = latitude;
            LongitudeOption = longitude;
            ReaderIdOption = readerId;
            SpeedOption = speed;
            SrvTimestampOption = srvTimestamp;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DevTimestamp
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<long>))]
        public Option<long> DevTimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets DevTimestamp
        /// </summary>
        [JsonPropertyName("devTimestamp")]
        public long? DevTimestamp { get { return this. DevTimestampOption; } set { this.DevTimestampOption = new Option<long>(value); } }

        /// <summary>
        /// Used to track the state of Heading
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> HeadingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Heading
        /// </summary>
        [JsonPropertyName("heading")]
        public int? Heading { get { return this. HeadingOption; } set { this.HeadingOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of Imei
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ImeiOption { get; private set; }

        /// <summary>
        /// Gets or Sets Imei
        /// </summary>
        [JsonPropertyName("imei")]
        public string? Imei { get { return this. ImeiOption; } set { this.ImeiOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> LatitudeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [JsonPropertyName("latitude")]
        public double? Latitude { get { return this. LatitudeOption; } set { this.LatitudeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> LongitudeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [JsonPropertyName("longitude")]
        public double? Longitude { get { return this. LongitudeOption; } set { this.LongitudeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of ReaderId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReaderIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReaderId
        /// </summary>
        [JsonPropertyName("readerId")]
        public string? ReaderId { get { return this. ReaderIdOption; } set { this.ReaderIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Speed
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SpeedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Speed
        /// </summary>
        [JsonPropertyName("speed")]
        public double? Speed { get { return this. SpeedOption; } set { this.SpeedOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SrvTimestamp
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<long>))]
        public Option<long> SrvTimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets SrvTimestamp
        /// </summary>
        [JsonPropertyName("srvTimestamp")]
        public long? SrvTimestamp { get { return this. SrvTimestampOption; } set { this.SrvTimestampOption = new Option<long>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<AgoraBeeTag>>))]
        public Option<List<AgoraBeeTag>> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public List<AgoraBeeTag>? Tags { get { return this. TagsOption; } set { this.TagsOption = new Option<List<AgoraBeeTag>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AgoraBeeMeasurementData {\n");
            sb.Append("  DevTimestamp: ").Append(DevTimestamp).Append("\n");
            sb.Append("  Heading: ").Append(Heading).Append("\n");
            sb.Append("  Imei: ").Append(Imei).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  ReaderId: ").Append(ReaderId).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  SrvTimestamp: ").Append(SrvTimestamp).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AgoraBeeMeasurementData" />
    /// </summary>
    public class AgoraBeeMeasurementDataJsonConverter : JsonConverter<AgoraBeeMeasurementData>
    {
        /// <summary>
        /// Deserializes json to <see cref="AgoraBeeMeasurementData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AgoraBeeMeasurementData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long> devTimestamp = default;
            Option<int> heading = default;
            Option<string> imei = default;
            Option<double> latitude = default;
            Option<double> longitude = default;
            Option<string> readerId = default;
            Option<double> speed = default;
            Option<long> srvTimestamp = default;
            Option<List<AgoraBeeTag>> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "devTimestamp":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                devTimestamp = new Option<long>(utf8JsonReader.GetInt64());
                            break;
                        case "heading":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                heading = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "imei":
                            imei = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "latitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                latitude = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "longitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                longitude = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "readerId":
                            readerId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "speed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                speed = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "srvTimestamp":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                srvTimestamp = new Option<long>(utf8JsonReader.GetInt64());
                            break;
                        case "tags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tags = new Option<List<AgoraBeeTag>>(JsonSerializer.Deserialize<List<AgoraBeeTag>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (devTimestamp.IsSet && devTimestamp.Value == null)
                throw new ArgumentNullException(nameof(devTimestamp), "Property is not nullable for class AgoraBeeMeasurementData.");

            if (heading.IsSet && heading.Value == null)
                throw new ArgumentNullException(nameof(heading), "Property is not nullable for class AgoraBeeMeasurementData.");

            if (latitude.IsSet && latitude.Value == null)
                throw new ArgumentNullException(nameof(latitude), "Property is not nullable for class AgoraBeeMeasurementData.");

            if (longitude.IsSet && longitude.Value == null)
                throw new ArgumentNullException(nameof(longitude), "Property is not nullable for class AgoraBeeMeasurementData.");

            if (speed.IsSet && speed.Value == null)
                throw new ArgumentNullException(nameof(speed), "Property is not nullable for class AgoraBeeMeasurementData.");

            if (srvTimestamp.IsSet && srvTimestamp.Value == null)
                throw new ArgumentNullException(nameof(srvTimestamp), "Property is not nullable for class AgoraBeeMeasurementData.");

            //2return new AgoraBeeMeasurementData(devTimestamp, heading, imei, latitude, longitude, readerId, speed, srvTimestamp, tags);
            return new AgoraBeeMeasurementData(devTimestamp, heading, imei, latitude, longitude, readerId, speed, srvTimestamp, tags);
        }

        /// <summary>
        /// Serializes a <see cref="AgoraBeeMeasurementData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="agoraBeeMeasurementData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AgoraBeeMeasurementData agoraBeeMeasurementData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, agoraBeeMeasurementData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AgoraBeeMeasurementData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="agoraBeeMeasurementData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, AgoraBeeMeasurementData agoraBeeMeasurementData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (agoraBeeMeasurementData.DevTimestampOption.IsSet)
                writer.WriteNumber("devTimestamp", agoraBeeMeasurementData.DevTimestampOption!.Value);

            if (agoraBeeMeasurementData.HeadingOption.IsSet)
                writer.WriteNumber("heading", agoraBeeMeasurementData.HeadingOption!.Value);

            if (agoraBeeMeasurementData.ImeiOption.IsSet)
                if (agoraBeeMeasurementData.ImeiOption.Value != null)
                {
                    writer.WriteString("imei", agoraBeeMeasurementData.Imei);
                    //var __value = agoraBeeMeasurementData.ImeiOption.Value;
                    //writer.WriteString("imei", __value);
                }
                else
                    writer.WriteNull("imei");

            if (agoraBeeMeasurementData.LatitudeOption.IsSet)
                writer.WriteNumber("latitude", agoraBeeMeasurementData.LatitudeOption!.Value);

            if (agoraBeeMeasurementData.LongitudeOption.IsSet)
                writer.WriteNumber("longitude", agoraBeeMeasurementData.LongitudeOption!.Value);

            if (agoraBeeMeasurementData.ReaderIdOption.IsSet)
                if (agoraBeeMeasurementData.ReaderIdOption.Value != null)
                {
                    writer.WriteString("readerId", agoraBeeMeasurementData.ReaderId);
                    //var __value = agoraBeeMeasurementData.ReaderIdOption.Value;
                    //writer.WriteString("readerId", __value);
                }
                else
                    writer.WriteNull("readerId");

            if (agoraBeeMeasurementData.SpeedOption.IsSet)
                writer.WriteNumber("speed", agoraBeeMeasurementData.SpeedOption!.Value);

            if (agoraBeeMeasurementData.SrvTimestampOption.IsSet)
                writer.WriteNumber("srvTimestamp", agoraBeeMeasurementData.SrvTimestampOption!.Value);

            if (agoraBeeMeasurementData.TagsOption.IsSet)
                if (agoraBeeMeasurementData.TagsOption.Value != null)
                {
                    writer.WritePropertyName("tags");
                    JsonSerializer.Serialize(writer, agoraBeeMeasurementData.Tags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tags");
        }
    }
}
