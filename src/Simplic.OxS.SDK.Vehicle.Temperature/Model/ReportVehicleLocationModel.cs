// <auto-generated>
/*
 * Simplic.OxS.vehicle-temperature
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle.Temperature
{
    /// <summary>
    /// ReportVehicleLocationModel
    /// </summary>
    public partial class ReportVehicleLocationModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ReportVehicleLocationModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportVehicleLocationModel" /> class.
        /// </summary>
        /// <param name="city">city</param>
        /// <param name="countryIso">countryIso</param>
        /// <param name="dateTime">dateTime</param>
        /// <param name="distance">distance</param>
        /// <param name="houseNumber">houseNumber</param>
        /// <param name="latitude">latitude</param>
        /// <param name="longitude">longitude</param>
        /// <param name="street">street</param>
        /// <param name="zipCode">zipCode</param>
        //[JsonConstructor]
        public ReportVehicleLocationModel(Option<string> city = default, Option<string> countryIso = default, Option<DateTime> dateTime = default, Option<double> distance = default, Option<string> houseNumber = default, Option<double> latitude = default, Option<double> longitude = default, Option<string> street = default, Option<string> zipCode = default)
        {
            CityOption = city;
            CountryIsoOption = countryIso;
            DateTimeOption = dateTime;
            DistanceOption = distance;
            HouseNumberOption = houseNumber;
            LatitudeOption = latitude;
            LongitudeOption = longitude;
            StreetOption = street;
            ZipCodeOption = zipCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of City
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CityOption { get; private set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [JsonPropertyName("city")]
        public string? City { get { return this. CityOption; } set { this.CityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryIso
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CountryIsoOption { get; private set; }

        /// <summary>
        /// Gets or Sets CountryIso
        /// </summary>
        [JsonPropertyName("countryIso")]
        public string? CountryIso { get { return this. CountryIsoOption; } set { this.CountryIsoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [JsonPropertyName("dateTime")]
        public DateTime? DateTime { get { return this. DateTimeOption; } set { this.DateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Distance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> DistanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [JsonPropertyName("distance")]
        public double? Distance { get { return this. DistanceOption; } set { this.DistanceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of HouseNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> HouseNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets HouseNumber
        /// </summary>
        [JsonPropertyName("houseNumber")]
        public string? HouseNumber { get { return this. HouseNumberOption; } set { this.HouseNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> LatitudeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [JsonPropertyName("latitude")]
        public double? Latitude { get { return this. LatitudeOption; } set { this.LatitudeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> LongitudeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [JsonPropertyName("longitude")]
        public double? Longitude { get { return this. LongitudeOption; } set { this.LongitudeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Street
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> StreetOption { get; private set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [JsonPropertyName("street")]
        public string? Street { get { return this. StreetOption; } set { this.StreetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ZipCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ZipCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [JsonPropertyName("zipCode")]
        public string? ZipCode { get { return this. ZipCodeOption; } set { this.ZipCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportVehicleLocationModel {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryIso: ").Append(CountryIso).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReportVehicleLocationModel" />
    /// </summary>
    public class ReportVehicleLocationModelJsonConverter : JsonConverter<ReportVehicleLocationModel>
    {
        /// <summary>
        /// The format to use to serialize DateTime
        /// </summary>
        public static string DateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ReportVehicleLocationModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReportVehicleLocationModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> city = default;
            Option<string> countryIso = default;
            Option<DateTime> dateTime = default;
            Option<double> distance = default;
            Option<string> houseNumber = default;
            Option<double> latitude = default;
            Option<double> longitude = default;
            Option<string> street = default;
            Option<string> zipCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "city":
                            city = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "countryIso":
                            countryIso = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "distance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                distance = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "houseNumber":
                            houseNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "latitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                latitude = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "longitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                longitude = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "street":
                            street = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "zipCode":
                            zipCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (dateTime.IsSet && dateTime.Value == null)
                throw new ArgumentNullException(nameof(dateTime), "Property is not nullable for class ReportVehicleLocationModel.");

            if (distance.IsSet && distance.Value == null)
                throw new ArgumentNullException(nameof(distance), "Property is not nullable for class ReportVehicleLocationModel.");

            if (latitude.IsSet && latitude.Value == null)
                throw new ArgumentNullException(nameof(latitude), "Property is not nullable for class ReportVehicleLocationModel.");

            if (longitude.IsSet && longitude.Value == null)
                throw new ArgumentNullException(nameof(longitude), "Property is not nullable for class ReportVehicleLocationModel.");

            //2return new ReportVehicleLocationModel(city, countryIso, dateTime, distance, houseNumber, latitude, longitude, street, zipCode);
            return new ReportVehicleLocationModel(city, countryIso, dateTime, distance, houseNumber, latitude, longitude, street, zipCode);
        }

        /// <summary>
        /// Serializes a <see cref="ReportVehicleLocationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reportVehicleLocationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReportVehicleLocationModel reportVehicleLocationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, reportVehicleLocationModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReportVehicleLocationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reportVehicleLocationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ReportVehicleLocationModel reportVehicleLocationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (reportVehicleLocationModel.CityOption.IsSet)
                if (reportVehicleLocationModel.CityOption.Value != null)
                {
                    writer.WriteString("city", reportVehicleLocationModel.City);
                    //var __value = reportVehicleLocationModel.CityOption.Value;
                    //writer.WriteString("city", __value);
                }
                else
                    writer.WriteNull("city");

            if (reportVehicleLocationModel.CountryIsoOption.IsSet)
                if (reportVehicleLocationModel.CountryIsoOption.Value != null)
                {
                    writer.WriteString("countryIso", reportVehicleLocationModel.CountryIso);
                    //var __value = reportVehicleLocationModel.CountryIsoOption.Value;
                    //writer.WriteString("countryIso", __value);
                }
                else
                    writer.WriteNull("countryIso");

            if (reportVehicleLocationModel.DateTimeOption.IsSet)
                writer.WriteString("dateTime", reportVehicleLocationModel.DateTimeOption!.Value.ToString(DateTimeFormat));

            if (reportVehicleLocationModel.DistanceOption.IsSet)
                writer.WriteNumber("distance", reportVehicleLocationModel.DistanceOption!.Value);

            if (reportVehicleLocationModel.HouseNumberOption.IsSet)
                if (reportVehicleLocationModel.HouseNumberOption.Value != null)
                {
                    writer.WriteString("houseNumber", reportVehicleLocationModel.HouseNumber);
                    //var __value = reportVehicleLocationModel.HouseNumberOption.Value;
                    //writer.WriteString("houseNumber", __value);
                }
                else
                    writer.WriteNull("houseNumber");

            if (reportVehicleLocationModel.LatitudeOption.IsSet)
                writer.WriteNumber("latitude", reportVehicleLocationModel.LatitudeOption!.Value);

            if (reportVehicleLocationModel.LongitudeOption.IsSet)
                writer.WriteNumber("longitude", reportVehicleLocationModel.LongitudeOption!.Value);

            if (reportVehicleLocationModel.StreetOption.IsSet)
                if (reportVehicleLocationModel.StreetOption.Value != null)
                {
                    writer.WriteString("street", reportVehicleLocationModel.Street);
                    //var __value = reportVehicleLocationModel.StreetOption.Value;
                    //writer.WriteString("street", __value);
                }
                else
                    writer.WriteNull("street");

            if (reportVehicleLocationModel.ZipCodeOption.IsSet)
                if (reportVehicleLocationModel.ZipCodeOption.Value != null)
                {
                    writer.WriteString("zipCode", reportVehicleLocationModel.ZipCode);
                    //var __value = reportVehicleLocationModel.ZipCodeOption.Value;
                    //writer.WriteString("zipCode", __value);
                }
                else
                    writer.WriteNull("zipCode");
        }
    }
}
