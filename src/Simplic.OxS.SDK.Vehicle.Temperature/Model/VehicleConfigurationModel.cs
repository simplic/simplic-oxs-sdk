// <auto-generated>
/*
 * Simplic.OxS.vehicle-temperature
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle.Temperature
{
    /// <summary>
    /// VehicleConfigurationModel
    /// </summary>
    public partial class VehicleConfigurationModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public VehicleConfigurationModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleConfigurationModel" /> class.
        /// </summary>
        /// <param name="imei">imei</param>
        /// <param name="sensors">sensors</param>
        /// <param name="vehicleId">vehicleId</param>
        //[JsonConstructor]
        public VehicleConfigurationModel(Option<string> imei = default, Option<List<Sensor>> sensors = default, Option<Guid> vehicleId = default)
        {
            ImeiOption = imei;
            SensorsOption = sensors;
            VehicleIdOption = vehicleId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Imei
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ImeiOption { get; private set; }

        /// <summary>
        /// Gets or Sets Imei
        /// </summary>
        [JsonPropertyName("imei")]
        public string? Imei { get { return this. ImeiOption; } set { this.ImeiOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Sensors
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<Sensor>>))]
        public Option<List<Sensor>> SensorsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sensors
        /// </summary>
        [JsonPropertyName("sensors")]
        public List<Sensor>? Sensors { get { return this. SensorsOption; } set { this.SensorsOption = new Option<List<Sensor>>(value); } }

        /// <summary>
        /// Used to track the state of VehicleId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> VehicleIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleId
        /// </summary>
        [JsonPropertyName("vehicleId")]
        public Guid? VehicleId { get { return this. VehicleIdOption; } set { this.VehicleIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VehicleConfigurationModel {\n");
            sb.Append("  Imei: ").Append(Imei).Append("\n");
            sb.Append("  Sensors: ").Append(Sensors).Append("\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VehicleConfigurationModel" />
    /// </summary>
    public class VehicleConfigurationModelJsonConverter : JsonConverter<VehicleConfigurationModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="VehicleConfigurationModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VehicleConfigurationModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> imei = default;
            Option<List<Sensor>> sensors = default;
            Option<Guid> vehicleId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "imei":
                            imei = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sensors":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sensors = new Option<List<Sensor>>(JsonSerializer.Deserialize<List<Sensor>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "vehicleId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vehicleId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (vehicleId.IsSet && vehicleId.Value == null)
                throw new ArgumentNullException(nameof(vehicleId), "Property is not nullable for class VehicleConfigurationModel.");

            //2return new VehicleConfigurationModel(imei, sensors, vehicleId);
            return new VehicleConfigurationModel(imei, sensors, vehicleId);
        }

        /// <summary>
        /// Serializes a <see cref="VehicleConfigurationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vehicleConfigurationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VehicleConfigurationModel vehicleConfigurationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, vehicleConfigurationModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VehicleConfigurationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vehicleConfigurationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, VehicleConfigurationModel vehicleConfigurationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (vehicleConfigurationModel.ImeiOption.IsSet)
                if (vehicleConfigurationModel.ImeiOption.Value != null)
                {
                    writer.WriteString("imei", vehicleConfigurationModel.Imei);
                    //var __value = vehicleConfigurationModel.ImeiOption.Value;
                    //writer.WriteString("imei", __value);
                }
                else
                    writer.WriteNull("imei");

            if (vehicleConfigurationModel.SensorsOption.IsSet)
                if (vehicleConfigurationModel.SensorsOption.Value != null)
                {
                    writer.WritePropertyName("sensors");
                    JsonSerializer.Serialize(writer, vehicleConfigurationModel.Sensors, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sensors");
            if (vehicleConfigurationModel.VehicleIdOption.IsSet)
                writer.WriteString("vehicleId", vehicleConfigurationModel.VehicleIdOption!.Value);
        }
    }
}
