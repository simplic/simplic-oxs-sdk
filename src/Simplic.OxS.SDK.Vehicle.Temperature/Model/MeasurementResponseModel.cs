/*
 * Simplic.OxS.vehicle-temperature
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle.Temperature
{
    /// <summary>
    /// MeasurementResponseModel
    /// </summary>
    [DataContract(Name = "MeasurementResponseModel")]
    public partial class MeasurementResponseModel : IEquatable<MeasurementResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeasurementResponseModel" /> class.
        /// </summary>
        /// <param name="temperature">temperature.</param>
        /// <param name="dateTime">dateTime.</param>
        /// <param name="vehicle">vehicle.</param>
        /// <param name="sensor">sensor.</param>
        /// <param name="location">location.</param>
        /// <param name="state">state.</param>
        public MeasurementResponseModel(double? temperature = default(double?), DateTime? dateTime = default(DateTime?), Vehicle vehicle = default(Vehicle), Sensor sensor = default(Sensor), Location location = default(Location), string state = default(string))
        {
            this.Temperature = temperature;
            this.DateTime = dateTime;
            this.Vehicle = vehicle;
            this.Sensor = sensor;
            this.Location = location;
            this.State = state;
        }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name = "temperature", EmitDefaultValue = true)]
        public double? Temperature { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name = "dateTime", EmitDefaultValue = true)]
        public DateTime? DateTime { get; set; }

        /// <summary>
        /// Gets or Sets Vehicle
        /// </summary>
        [DataMember(Name = "vehicle", EmitDefaultValue = false)]
        public Vehicle Vehicle { get; set; }

        /// <summary>
        /// Gets or Sets Sensor
        /// </summary>
        [DataMember(Name = "sensor", EmitDefaultValue = false)]
        public Sensor Sensor { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MeasurementResponseModel {\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Vehicle: ").Append(Vehicle).Append("\n");
            sb.Append("  Sensor: ").Append(Sensor).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeasurementResponseModel);
        }

        /// <summary>
        /// Returns true if MeasurementResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of MeasurementResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeasurementResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.Vehicle == input.Vehicle ||
                    (this.Vehicle != null &&
                    this.Vehicle.Equals(input.Vehicle))
                ) && 
                (
                    this.Sensor == input.Sensor ||
                    (this.Sensor != null &&
                    this.Sensor.Equals(input.Sensor))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Temperature != null)
                {
                    hashCode = (hashCode * 59) + this.Temperature.GetHashCode();
                }
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                if (this.Vehicle != null)
                {
                    hashCode = (hashCode * 59) + this.Vehicle.GetHashCode();
                }
                if (this.Sensor != null)
                {
                    hashCode = (hashCode * 59) + this.Sensor.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
