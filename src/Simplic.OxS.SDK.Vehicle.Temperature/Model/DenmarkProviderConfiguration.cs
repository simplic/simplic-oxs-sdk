// <auto-generated>
/*
 * Simplic.OxS.vehicle-temperature
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle.Temperature
{
    /// <summary>
    /// DenmarkProviderConfiguration
    /// </summary>
    public partial class DenmarkProviderConfiguration : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public DenmarkProviderConfiguration()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DenmarkProviderConfiguration" /> class.
        /// </summary>
        /// <param name="dataSupplierName">dataSupplierName</param>
        /// <param name="enabled">enabled</param>
        /// <param name="vvvono">vvvono</param>
        //[JsonConstructor]
        public DenmarkProviderConfiguration(Option<string> dataSupplierName = default, Option<bool> enabled = default, Option<string> vvvono = default)
        {
            DataSupplierNameOption = dataSupplierName;
            EnabledOption = enabled;
            VvvonoOption = vvvono;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DataSupplierName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DataSupplierNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataSupplierName
        /// </summary>
        [JsonPropertyName("dataSupplierName")]
        public string? DataSupplierName { get { return this. DataSupplierNameOption; } set { this.DataSupplierNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> EnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this. EnabledOption; } set { this.EnabledOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Vvvono
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> VvvonoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Vvvono
        /// </summary>
        [JsonPropertyName("vvvono")]
        public string? Vvvono { get { return this. VvvonoOption; } set { this.VvvonoOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DenmarkProviderConfiguration {\n");
            sb.Append("  DataSupplierName: ").Append(DataSupplierName).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Vvvono: ").Append(Vvvono).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DenmarkProviderConfiguration" />
    /// </summary>
    public class DenmarkProviderConfigurationJsonConverter : JsonConverter<DenmarkProviderConfiguration>
    {
        /// <summary>
        /// Deserializes json to <see cref="DenmarkProviderConfiguration" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DenmarkProviderConfiguration Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> dataSupplierName = default;
            Option<bool> enabled = default;
            Option<string> vvvono = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dataSupplierName":
                            dataSupplierName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enabled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enabled = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "vvvono":
                            vvvono = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class DenmarkProviderConfiguration.");

            //2return new DenmarkProviderConfiguration(dataSupplierName, enabled, vvvono);
            return new DenmarkProviderConfiguration(dataSupplierName, enabled, vvvono);
        }

        /// <summary>
        /// Serializes a <see cref="DenmarkProviderConfiguration" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="denmarkProviderConfiguration"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DenmarkProviderConfiguration denmarkProviderConfiguration, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, denmarkProviderConfiguration, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DenmarkProviderConfiguration" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="denmarkProviderConfiguration"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, DenmarkProviderConfiguration denmarkProviderConfiguration, JsonSerializerOptions jsonSerializerOptions)
        {
            if (denmarkProviderConfiguration.DataSupplierNameOption.IsSet)
                if (denmarkProviderConfiguration.DataSupplierNameOption.Value != null)
                {
                    writer.WriteString("dataSupplierName", denmarkProviderConfiguration.DataSupplierName);
                    //var __value = denmarkProviderConfiguration.DataSupplierNameOption.Value;
                    //writer.WriteString("dataSupplierName", __value);
                }
                else
                    writer.WriteNull("dataSupplierName");

            if (denmarkProviderConfiguration.EnabledOption.IsSet)
                writer.WriteBoolean("enabled", denmarkProviderConfiguration.EnabledOption!.Value);

            if (denmarkProviderConfiguration.VvvonoOption.IsSet)
                if (denmarkProviderConfiguration.VvvonoOption.Value != null)
                {
                    writer.WriteString("vvvono", denmarkProviderConfiguration.Vvvono);
                    //var __value = denmarkProviderConfiguration.VvvonoOption.Value;
                    //writer.WriteString("vvvono", __value);
                }
                else
                    writer.WriteNull("vvvono");
        }
    }
}
