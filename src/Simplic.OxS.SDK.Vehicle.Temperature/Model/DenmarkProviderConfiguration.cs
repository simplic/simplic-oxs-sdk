/*
 * Simplic.OxS.vehicle-temperature
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle.Temperature
{
    /// <summary>
    /// DenmarkProviderConfiguration
    /// </summary>
    [DataContract(Name = "DenmarkProviderConfiguration")]
    public partial class DenmarkProviderConfiguration : IEquatable<DenmarkProviderConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DenmarkProviderConfiguration" /> class.
        /// </summary>
        /// <param name="enabled">enabled.</param>
        /// <param name="vvvono">vvvono.</param>
        /// <param name="dataSupplierName">dataSupplierName.</param>
        public DenmarkProviderConfiguration(bool enabled = default(bool), string vvvono = default(string), string dataSupplierName = default(string))
        {
            this.Enabled = enabled;
            this.Vvvono = vvvono;
            this.DataSupplierName = dataSupplierName;
        }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Vvvono
        /// </summary>
        [DataMember(Name = "vvvono", EmitDefaultValue = true)]
        public string Vvvono { get; set; }

        /// <summary>
        /// Gets or Sets DataSupplierName
        /// </summary>
        [DataMember(Name = "dataSupplierName", EmitDefaultValue = true)]
        public string DataSupplierName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DenmarkProviderConfiguration {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Vvvono: ").Append(Vvvono).Append("\n");
            sb.Append("  DataSupplierName: ").Append(DataSupplierName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DenmarkProviderConfiguration);
        }

        /// <summary>
        /// Returns true if DenmarkProviderConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of DenmarkProviderConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DenmarkProviderConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.Vvvono == input.Vvvono ||
                    (this.Vvvono != null &&
                    this.Vvvono.Equals(input.Vvvono))
                ) && 
                (
                    this.DataSupplierName == input.DataSupplierName ||
                    (this.DataSupplierName != null &&
                    this.DataSupplierName.Equals(input.DataSupplierName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.Vvvono != null)
                {
                    hashCode = (hashCode * 59) + this.Vvvono.GetHashCode();
                }
                if (this.DataSupplierName != null)
                {
                    hashCode = (hashCode * 59) + this.DataSupplierName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
