/*
 * Simplic.OxS.vehicle-temperature
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle.Temperature
{
    /// <summary>
    /// UpdateConfigurationRequest
    /// </summary>
    [DataContract(Name = "UpdateConfigurationRequest")]
    public partial class UpdateConfigurationRequest : IEquatable<UpdateConfigurationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConfigurationRequest" /> class.
        /// </summary>
        /// <param name="imei">imei.</param>
        /// <param name="sensors">sensors.</param>
        /// <param name="reportConfigurationDenmark">reportConfigurationDenmark.</param>
        public UpdateConfigurationRequest(string imei = default(string), List<Sensor> sensors = default(List<Sensor>), ReportConfigurationDenmark reportConfigurationDenmark = default(ReportConfigurationDenmark))
        {
            this.Imei = imei;
            this.Sensors = sensors;
            this.ReportConfigurationDenmark = reportConfigurationDenmark;
        }

        /// <summary>
        /// Gets or Sets Imei
        /// </summary>
        [DataMember(Name = "imei", EmitDefaultValue = true)]
        public string Imei { get; set; }

        /// <summary>
        /// Gets or Sets Sensors
        /// </summary>
        [DataMember(Name = "sensors", EmitDefaultValue = true)]
        public List<Sensor> Sensors { get; set; }

        /// <summary>
        /// Gets or Sets ReportConfigurationDenmark
        /// </summary>
        [DataMember(Name = "reportConfigurationDenmark", EmitDefaultValue = false)]
        public ReportConfigurationDenmark ReportConfigurationDenmark { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateConfigurationRequest {\n");
            sb.Append("  Imei: ").Append(Imei).Append("\n");
            sb.Append("  Sensors: ").Append(Sensors).Append("\n");
            sb.Append("  ReportConfigurationDenmark: ").Append(ReportConfigurationDenmark).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateConfigurationRequest);
        }

        /// <summary>
        /// Returns true if UpdateConfigurationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateConfigurationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateConfigurationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Imei == input.Imei ||
                    (this.Imei != null &&
                    this.Imei.Equals(input.Imei))
                ) && 
                (
                    this.Sensors == input.Sensors ||
                    this.Sensors != null &&
                    input.Sensors != null &&
                    this.Sensors.SequenceEqual(input.Sensors)
                ) && 
                (
                    this.ReportConfigurationDenmark == input.ReportConfigurationDenmark ||
                    (this.ReportConfigurationDenmark != null &&
                    this.ReportConfigurationDenmark.Equals(input.ReportConfigurationDenmark))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Imei != null)
                {
                    hashCode = (hashCode * 59) + this.Imei.GetHashCode();
                }
                if (this.Sensors != null)
                {
                    hashCode = (hashCode * 59) + this.Sensors.GetHashCode();
                }
                if (this.ReportConfigurationDenmark != null)
                {
                    hashCode = (hashCode * 59) + this.ReportConfigurationDenmark.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
