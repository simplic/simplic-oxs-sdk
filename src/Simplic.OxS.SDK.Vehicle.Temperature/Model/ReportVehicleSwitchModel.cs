/*
 * Simplic.OxS.vehicle-temperature
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle.Temperature
{
    /// <summary>
    /// ReportVehicleSwitchModel
    /// </summary>
    [DataContract(Name = "ReportVehicleSwitchModel")]
    public partial class ReportVehicleSwitchModel : IEquatable<ReportVehicleSwitchModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportVehicleSwitchModel" /> class.
        /// </summary>
        /// <param name="onOff">onOff.</param>
        /// <param name="sensorName">sensorName.</param>
        /// <param name="sensorId">sensorId.</param>
        /// <param name="dateTime">dateTime.</param>
        public ReportVehicleSwitchModel(int onOff = default(int), string sensorName = default(string), string sensorId = default(string), DateTime dateTime = default(DateTime))
        {
            this.OnOff = onOff;
            this.SensorName = sensorName;
            this.SensorId = sensorId;
            this.DateTime = dateTime;
        }

        /// <summary>
        /// Gets or Sets OnOff
        /// </summary>
        [DataMember(Name = "onOff", EmitDefaultValue = false)]
        public int OnOff { get; set; }

        /// <summary>
        /// Gets or Sets SensorName
        /// </summary>
        [DataMember(Name = "sensorName", EmitDefaultValue = true)]
        public string SensorName { get; set; }

        /// <summary>
        /// Gets or Sets SensorId
        /// </summary>
        [DataMember(Name = "sensorId", EmitDefaultValue = true)]
        public string SensorId { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportVehicleSwitchModel {\n");
            sb.Append("  OnOff: ").Append(OnOff).Append("\n");
            sb.Append("  SensorName: ").Append(SensorName).Append("\n");
            sb.Append("  SensorId: ").Append(SensorId).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportVehicleSwitchModel);
        }

        /// <summary>
        /// Returns true if ReportVehicleSwitchModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportVehicleSwitchModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportVehicleSwitchModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OnOff == input.OnOff ||
                    this.OnOff.Equals(input.OnOff)
                ) && 
                (
                    this.SensorName == input.SensorName ||
                    (this.SensorName != null &&
                    this.SensorName.Equals(input.SensorName))
                ) && 
                (
                    this.SensorId == input.SensorId ||
                    (this.SensorId != null &&
                    this.SensorId.Equals(input.SensorId))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OnOff.GetHashCode();
                if (this.SensorName != null)
                {
                    hashCode = (hashCode * 59) + this.SensorName.GetHashCode();
                }
                if (this.SensorId != null)
                {
                    hashCode = (hashCode * 59) + this.SensorId.GetHashCode();
                }
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
