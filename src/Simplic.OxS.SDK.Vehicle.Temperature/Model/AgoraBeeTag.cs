// <auto-generated>
/*
 * Simplic.OxS.vehicle-temperature
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle.Temperature
{
    /// <summary>
    /// AgoraBeeTag
    /// </summary>
    public partial class AgoraBeeTag : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public AgoraBeeTag()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgoraBeeTag" /> class.
        /// </summary>
        /// <param name="rfr">rfr</param>
        /// <param name="status">status</param>
        /// <param name="statusId">statusId</param>
        /// <param name="tagId">tagId</param>
        /// <param name="temperature">temperature</param>
        //[JsonConstructor]
        public AgoraBeeTag(Option<int> rfr = default, Option<string> status = default, Option<int> statusId = default, Option<long> tagId = default, Option<double> temperature = default)
        {
            RfrOption = rfr;
            StatusOption = status;
            StatusIdOption = statusId;
            TagIdOption = tagId;
            TemperatureOption = temperature;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Rfr
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> RfrOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rfr
        /// </summary>
        [JsonPropertyName("rfr")]
        public int? Rfr { get { return this. RfrOption; } set { this.RfrOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string? Status { get { return this. StatusOption; } set { this.StatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StatusId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> StatusIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [JsonPropertyName("statusId")]
        public int? StatusId { get { return this. StatusIdOption; } set { this.StatusIdOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of TagId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<long>))]
        public Option<long> TagIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TagId
        /// </summary>
        [JsonPropertyName("tagId")]
        public long? TagId { get { return this. TagIdOption; } set { this.TagIdOption = new Option<long>(value); } }

        /// <summary>
        /// Used to track the state of Temperature
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TemperatureOption { get; private set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [JsonPropertyName("temperature")]
        public double? Temperature { get { return this. TemperatureOption; } set { this.TemperatureOption = new Option<double>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AgoraBeeTag {\n");
            sb.Append("  Rfr: ").Append(Rfr).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  TagId: ").Append(TagId).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AgoraBeeTag" />
    /// </summary>
    public class AgoraBeeTagJsonConverter : JsonConverter<AgoraBeeTag>
    {
        /// <summary>
        /// Deserializes json to <see cref="AgoraBeeTag" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AgoraBeeTag Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int> rfr = default;
            Option<string> status = default;
            Option<int> statusId = default;
            Option<long> tagId = default;
            Option<double> temperature = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "rfr":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rfr = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "status":
                            status = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "statusId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                statusId = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "tagId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tagId = new Option<long>(utf8JsonReader.GetInt64());
                            break;
                        case "temperature":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                temperature = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (rfr.IsSet && rfr.Value == null)
                throw new ArgumentNullException(nameof(rfr), "Property is not nullable for class AgoraBeeTag.");

            if (statusId.IsSet && statusId.Value == null)
                throw new ArgumentNullException(nameof(statusId), "Property is not nullable for class AgoraBeeTag.");

            if (tagId.IsSet && tagId.Value == null)
                throw new ArgumentNullException(nameof(tagId), "Property is not nullable for class AgoraBeeTag.");

            //2return new AgoraBeeTag(rfr, status, statusId, tagId, temperature);
            return new AgoraBeeTag(rfr, status, statusId, tagId, temperature);
        }

        /// <summary>
        /// Serializes a <see cref="AgoraBeeTag" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="agoraBeeTag"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AgoraBeeTag agoraBeeTag, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, agoraBeeTag, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AgoraBeeTag" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="agoraBeeTag"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, AgoraBeeTag agoraBeeTag, JsonSerializerOptions jsonSerializerOptions)
        {
            if (agoraBeeTag.RfrOption.IsSet)
                writer.WriteNumber("rfr", agoraBeeTag.RfrOption!.Value);

            if (agoraBeeTag.StatusOption.IsSet)
                if (agoraBeeTag.StatusOption.Value != null)
                {
                    writer.WriteString("status", agoraBeeTag.Status);
                    //var __value = agoraBeeTag.StatusOption.Value;
                    //writer.WriteString("status", __value);
                }
                else
                    writer.WriteNull("status");

            if (agoraBeeTag.StatusIdOption.IsSet)
                writer.WriteNumber("statusId", agoraBeeTag.StatusIdOption!.Value);

            if (agoraBeeTag.TagIdOption.IsSet)
                writer.WriteNumber("tagId", agoraBeeTag.TagIdOption!.Value);

            if (agoraBeeTag.TemperatureOption.IsSet)
                if (agoraBeeTag.TemperatureOption.Value != null)
                {
                    writer.WriteNumber("temperature", agoraBeeTag.TemperatureOption!.Value);
                    //var __value = agoraBeeTag.TemperatureOption.Value;
                    //writer.WriteString("temperature", __value);
                }
                else
                    writer.WriteNull("temperature");
        }
    }
}
