// <auto-generated>
/*
 * Simplic.OxS.vehicle-temperature
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle.Temperature
{
    /// <summary>
    /// LocationReportModel
    /// </summary>
    public partial class LocationReportModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public LocationReportModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationReportModel" /> class.
        /// </summary>
        /// <param name="dateTime">dateTime</param>
        /// <param name="id">id</param>
        /// <param name="locations">locations</param>
        /// <param name="vehicleId">vehicleId</param>
        /// <param name="vehicleName">vehicleName</param>
        /// <param name="varConfiguration">varConfiguration</param>
        //[JsonConstructor]
        public LocationReportModel(Option<DateTime> dateTime = default, Option<Guid> id = default, Option<List<ReportVehicleLocationModel>> locations = default, Option<Guid> vehicleId = default, Option<string> vehicleName = default, Option<ConfigurationModel> varConfiguration = default)
        {
            DateTimeOption = dateTime;
            IdOption = id;
            LocationsOption = locations;
            VehicleIdOption = vehicleId;
            VehicleNameOption = vehicleName;
            VarConfigurationOption = varConfiguration;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [JsonPropertyName("dateTime")]
        public DateTime? DateTime { get { return this. DateTimeOption; } set { this.DateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Locations
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<ReportVehicleLocationModel>>))]
        public Option<List<ReportVehicleLocationModel>> LocationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Locations
        /// </summary>
        [JsonPropertyName("locations")]
        public List<ReportVehicleLocationModel>? Locations { get { return this. LocationsOption; } set { this.LocationsOption = new Option<List<ReportVehicleLocationModel>>(value); } }

        /// <summary>
        /// Used to track the state of VehicleId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> VehicleIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleId
        /// </summary>
        [JsonPropertyName("vehicleId")]
        public Guid? VehicleId { get { return this. VehicleIdOption; } set { this.VehicleIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of VehicleName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> VehicleNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleName
        /// </summary>
        [JsonPropertyName("vehicleName")]
        public string? VehicleName { get { return this. VehicleNameOption; } set { this.VehicleNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VarConfiguration
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ConfigurationModel>))]
        public Option<ConfigurationModel> VarConfigurationOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarConfiguration
        /// </summary>
        [JsonPropertyName("configuration")]
        public ConfigurationModel? VarConfiguration { get { return this. VarConfigurationOption; } set { this.VarConfigurationOption = new Option<ConfigurationModel>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LocationReportModel {\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  VehicleName: ").Append(VehicleName).Append("\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LocationReportModel" />
    /// </summary>
    public class LocationReportModelJsonConverter : JsonConverter<LocationReportModel>
    {
        /// <summary>
        /// The format to use to serialize DateTime
        /// </summary>
        public static string DateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="LocationReportModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LocationReportModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> dateTime = default;
            Option<Guid> id = default;
            Option<List<ReportVehicleLocationModel>> locations = default;
            Option<Guid> vehicleId = default;
            Option<string> vehicleName = default;
            Option<ConfigurationModel> varConfiguration = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "locations":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locations = new Option<List<ReportVehicleLocationModel>>(JsonSerializer.Deserialize<List<ReportVehicleLocationModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "vehicleId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vehicleId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "vehicleName":
                            vehicleName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "configuration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varConfiguration = new Option<ConfigurationModel>(JsonSerializer.Deserialize<ConfigurationModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (dateTime.IsSet && dateTime.Value == null)
                throw new ArgumentNullException(nameof(dateTime), "Property is not nullable for class LocationReportModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class LocationReportModel.");

            if (vehicleId.IsSet && vehicleId.Value == null)
                throw new ArgumentNullException(nameof(vehicleId), "Property is not nullable for class LocationReportModel.");

            if (varConfiguration.IsSet && varConfiguration.Value == null)
                throw new ArgumentNullException(nameof(varConfiguration), "Property is not nullable for class LocationReportModel.");

            //2return new LocationReportModel(dateTime, id, locations, vehicleId, vehicleName, varConfiguration);
            return new LocationReportModel(dateTime, id, locations, vehicleId, vehicleName, varConfiguration);
        }

        /// <summary>
        /// Serializes a <see cref="LocationReportModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="locationReportModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LocationReportModel locationReportModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, locationReportModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LocationReportModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="locationReportModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, LocationReportModel locationReportModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (locationReportModel.VarConfigurationOption.IsSet && locationReportModel.VarConfiguration == null)
                throw new ArgumentNullException(nameof(locationReportModel.VarConfiguration), "Property is required for class LocationReportModel.");

            if (locationReportModel.DateTimeOption.IsSet)
                writer.WriteString("dateTime", locationReportModel.DateTimeOption!.Value.ToString(DateTimeFormat));

            if (locationReportModel.IdOption.IsSet)
                writer.WriteString("id", locationReportModel.IdOption!.Value);

            if (locationReportModel.LocationsOption.IsSet)
                if (locationReportModel.LocationsOption.Value != null)
                {
                    writer.WritePropertyName("locations");
                    JsonSerializer.Serialize(writer, locationReportModel.Locations, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("locations");
            if (locationReportModel.VehicleIdOption.IsSet)
                writer.WriteString("vehicleId", locationReportModel.VehicleIdOption!.Value);

            if (locationReportModel.VehicleNameOption.IsSet)
                if (locationReportModel.VehicleNameOption.Value != null)
                {
                    writer.WriteString("vehicleName", locationReportModel.VehicleName);
                    //var __value = locationReportModel.VehicleNameOption.Value;
                    //writer.WriteString("vehicleName", __value);
                }
                else
                    writer.WriteNull("vehicleName");

            if (locationReportModel.VarConfigurationOption.IsSet)
            {
                writer.WritePropertyName("configuration");
                JsonSerializer.Serialize(writer, locationReportModel.VarConfiguration, jsonSerializerOptions);
            }
        }
    }
}
