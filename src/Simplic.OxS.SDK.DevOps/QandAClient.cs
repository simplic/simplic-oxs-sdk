/*
 * Simplic.OxS.DevOps
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;

// -- Custom --
using System.Threading;
using System.Threading.Tasks;
// -^ Custom ^-

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.DevOps
{
    // ------------------------- Custom -------------------------------
//: Interface
    
/// <summary>
/// Client to interact with the API endpoints of the devops service.
/// </summary>
public interface IQandAClient
{
    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    string GetBasePath();


    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns></returns>
    void CheckSession(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> CheckSessionWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));
        
    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task CheckSessionAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<Object>> CheckSessionWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="companyName"> (optional)</param>
    /// <param name="street"> (optional)</param>
    /// <param name="email"> (optional)</param>
    /// <param name="country"> (optional)</param>
    /// <returns></returns>
    void CompanyData(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="companyName"> (optional)</param>
    /// <param name="street"> (optional)</param>
    /// <param name="email"> (optional)</param>
    /// <param name="country"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> CompanyDataWithHttpInfo(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?));
        
    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="companyName"> (optional)</param>
    /// <param name="street"> (optional)</param>
    /// <param name="email"> (optional)</param>
    /// <param name="country"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task CompanyDataAsync(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="companyName"> (optional)</param>
    /// <param name="street"> (optional)</param>
    /// <param name="email"> (optional)</param>
    /// <param name="country"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<Object>> CompanyDataWithHttpInfoAsync(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns></returns>
    void EndSurvey(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> EndSurveyWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));
        
    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task EndSurveyAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<Object>> EndSurveyWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns></returns>
    void GetModules(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> GetModulesWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));
        
    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task GetModulesAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<Object>> GetModulesWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns></returns>
    void GetProcesses(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> GetProcessesWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));
        
    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task GetProcessesAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<Object>> GetProcessesWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns></returns>
    void GetQuestion(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> GetQuestionWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));
        
    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task GetQuestionAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<Object>> GetQuestionWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns></returns>
    void MoveBackward(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> MoveBackwardWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));
        
    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task MoveBackwardAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<Object>> MoveBackwardWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns></returns>
    void MoveForward(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> MoveForwardWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?));
        
    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task MoveForwardAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="moduleId"> (optional)</param>
    /// <param name="processId"> (optional)</param>
    /// <param name="userInput"> (optional)</param>
    /// <param name="commentBox"> (optional)</param>
    /// <param name="questionId"> (optional)</param>
    /// <param name="answeredQuestions"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<Object>> MoveForwardWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="file"> (optional)</param>
    /// <returns></returns>
    void NewSession(System.IO.Stream? file = default(System.IO.Stream?));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="file"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> NewSessionWithHttpInfo(System.IO.Stream? file = default(System.IO.Stream?));
        
    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="file"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task NewSessionAsync(System.IO.Stream? file = default(System.IO.Stream?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="file"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<Object>> NewSessionWithHttpInfoAsync(System.IO.Stream? file = default(System.IO.Stream?), CancellationToken cancellationToken = default(CancellationToken));

}


//: Implementation

    /// <summary>
    /// Client to interact with the API endpoints of the devops service.
    /// </summary>
    public class QandAClient : IQandAClient
    {
        private __QandAClient _internalClient;
        private Simplic.OxS.SDK.ExceptionFactory _exceptionFactory = (name, response) => null;

        public QandAClient(string host, string? authorization = null)
        {
            if (authorization != null)
            {
                _internalClient = new __QandAClient(new Configuration
                {
                    BasePath = $"{host}/devops-api/v1",
                    DefaultHeaders = { { "Authorization", authorization } }
                });
            }
            else
            {
                _internalClient = new __QandAClient(new Configuration
                {
                    BasePath = $"{host}/devops-api/v1",
                });
            }
        }

        public QandAClient(Environment env, string? authorization = null)
            : this(
                env == Environment.Development
                    ? "https://dev-oxs.simplic.io"
                    : "https://oxs.simplic.io",
                authorization
            ) { }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath() => _internalClient.GetBasePath();

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Simplic.OxS.SDK.IReadableConfiguration Configuration
        {
            get => _internalClient.Configuration;
            set
            {
                _internalClient.Configuration = value;
            }
        }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Simplic.OxS.SDK.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns></returns>
        public void CheckSession(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                _internalClient.CheckSession(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> CheckSessionWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                return _internalClient.CheckSessionWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task CheckSessionAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.CheckSessionAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> CheckSessionWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.CheckSessionWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns></returns>
        public void CompanyData(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?))
        {
            try
            {
                _internalClient.CompanyData(sessionId, companyName, street, email, country);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> CompanyDataWithHttpInfo(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?))
        {
            try
            {
                return _internalClient.CompanyDataWithHttpInfo(sessionId, companyName, street, email, country);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task CompanyDataAsync(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.CompanyDataAsync(sessionId, companyName, street, email, country, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> CompanyDataWithHttpInfoAsync(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.CompanyDataWithHttpInfoAsync(sessionId, companyName, street, email, country, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns></returns>
        public void EndSurvey(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                _internalClient.EndSurvey(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> EndSurveyWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                return _internalClient.EndSurveyWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task EndSurveyAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.EndSurveyAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> EndSurveyWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.EndSurveyWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns></returns>
        public void GetModules(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                _internalClient.GetModules(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> GetModulesWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                return _internalClient.GetModulesWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task GetModulesAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetModulesAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> GetModulesWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetModulesWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns></returns>
        public void GetProcesses(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                _internalClient.GetProcesses(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> GetProcessesWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                return _internalClient.GetProcessesWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task GetProcessesAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetProcessesAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> GetProcessesWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetProcessesWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns></returns>
        public void GetQuestion(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                _internalClient.GetQuestion(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> GetQuestionWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                return _internalClient.GetQuestionWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task GetQuestionAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetQuestionAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> GetQuestionWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetQuestionWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns></returns>
        public void MoveBackward(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                _internalClient.MoveBackward(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> MoveBackwardWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                return _internalClient.MoveBackwardWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task MoveBackwardAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.MoveBackwardAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> MoveBackwardWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.MoveBackwardWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns></returns>
        public void MoveForward(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                _internalClient.MoveForward(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> MoveForwardWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?))
        {
            try
            {
                return _internalClient.MoveForwardWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task MoveForwardAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.MoveForwardAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> MoveForwardWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.MoveForwardWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        public void NewSession(System.IO.Stream? file = default(System.IO.Stream?))
        {
            try
            {
                _internalClient.NewSession(file);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> NewSessionWithHttpInfo(System.IO.Stream? file = default(System.IO.Stream?))
        {
            try
            {
                return _internalClient.NewSessionWithHttpInfo(file);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task NewSessionAsync(System.IO.Stream? file = default(System.IO.Stream?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.NewSessionAsync(file, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> NewSessionWithHttpInfoAsync(System.IO.Stream? file = default(System.IO.Stream?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.NewSessionWithHttpInfoAsync(file, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    

        private string FormatErrorMessage(string message, int errorCode) => $"<{errorCode} - {(HttpStatusCode)errorCode}> {message}";
    }

// ------------------------^ Custom ^------------------------------


    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface __IQandAClientSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CheckSession(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckSessionWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CompanyData(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CompanyDataWithHttpInfo(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void EndSurvey(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EndSurveyWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetModules(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetModulesWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetProcesses(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetProcessesWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetQuestion(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetQuestionWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void MoveBackward(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MoveBackwardWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void MoveForward(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MoveForwardWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void NewSession(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NewSessionWithHttpInfo(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface __IQandAClientAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckSessionAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckSessionWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CompanyDataAsync(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CompanyDataWithHttpInfoAsync(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EndSurveyAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EndSurveyWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetModulesAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetModulesWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetProcessesAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetProcessesWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetQuestionAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetQuestionWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MoveBackwardAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoveBackwardWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MoveForwardAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoveForwardWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NewSessionAsync(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NewSessionWithHttpInfoAsync(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface __IQandAClient : __IQandAClientSync, __IQandAClientAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal /*partial*/ class __QandAClient : __IQandAClient
    {
        private Simplic.OxS.SDK.ExceptionFactory _exceptionFactory = (name, response) => null;

        /*
        /// <summary>
        /// Initializes a new instance of the <see cref="__QandAClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __QandAClient() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="__QandAClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __QandAClient(string basePath)
        {
            this.Configuration = Simplic.OxS.SDK.Configuration.MergeConfigurations(
                Simplic.OxS.SDK.GlobalConfiguration.Instance,
                new Simplic.OxS.SDK.Configuration { BasePath = basePath }
            );
            this.Client = new Simplic.OxS.SDK.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Simplic.OxS.SDK.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Simplic.OxS.SDK.Configuration.DefaultExceptionFactory;
        }
        */

        /// <summary>
        /// Initializes a new instance of the <see cref="__QandAClient"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public __QandAClient(Simplic.OxS.SDK.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Simplic.OxS.SDK.Configuration.MergeConfigurations(
                Simplic.OxS.SDK.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Simplic.OxS.SDK.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Simplic.OxS.SDK.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Simplic.OxS.SDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="__QandAClient"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public __QandAClient(Simplic.OxS.SDK.ISynchronousClient client, Simplic.OxS.SDK.IAsynchronousClient asyncClient, Simplic.OxS.SDK.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Simplic.OxS.SDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Simplic.OxS.SDK.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Simplic.OxS.SDK.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Simplic.OxS.SDK.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Simplic.OxS.SDK.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CheckSession(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            CheckSessionWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> CheckSessionWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandACheckSessionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/QandA/checkSession", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandACheckSessionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckSessionAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CheckSessionWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> CheckSessionWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandACheckSessionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/QandA/checkSession", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandACheckSessionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CompanyData(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?), int operationIndex = 0)
        {
            CompanyDataWithHttpInfo(sessionId, companyName, street, email, country);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> CompanyDataWithHttpInfo(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (companyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CompanyName", companyName));
            }
            if (street != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "Street", street));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "Email", email));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "Country", country));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandACompanyDataGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/QandA/companyData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandACompanyDataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CompanyDataAsync(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CompanyDataWithHttpInfoAsync(sessionId, companyName, street, email, country, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> CompanyDataWithHttpInfoAsync(string? sessionId = default(string?), string? companyName = default(string?), string? street = default(string?), string? email = default(string?), string? country = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (companyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CompanyName", companyName));
            }
            if (street != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "Street", street));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "Email", email));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "Country", country));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandACompanyDataGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/QandA/companyData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandACompanyDataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void EndSurvey(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            EndSurveyWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> EndSurveyWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandAEndSurveyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/QandA/endSurvey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandAEndSurveyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EndSurveyAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EndSurveyWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> EndSurveyWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandAEndSurveyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/QandA/endSurvey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandAEndSurveyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetModules(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            GetModulesWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> GetModulesWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandAGetModulesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/QandA/getModules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandAGetModulesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetModulesAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetModulesWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> GetModulesWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandAGetModulesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/QandA/getModules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandAGetModulesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetProcesses(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            GetProcessesWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> GetProcessesWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandAGetProcessesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/QandA/getProcesses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandAGetProcessesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetProcessesAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetProcessesWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> GetProcessesWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandAGetProcessesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/QandA/getProcesses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandAGetProcessesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetQuestion(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            GetQuestionWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> GetQuestionWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandAGetQuestionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/QandA/get-question", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandAGetQuestionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetQuestionAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetQuestionWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> GetQuestionWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandAGetQuestionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/QandA/get-question", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandAGetQuestionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void MoveBackward(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            MoveBackwardWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> MoveBackwardWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandAMoveBackwardGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/QandA/moveBackward", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandAMoveBackwardGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MoveBackwardAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MoveBackwardWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> MoveBackwardWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandAMoveBackwardGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/QandA/moveBackward", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandAMoveBackwardGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void MoveForward(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            MoveForwardWithHttpInfo(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> MoveForwardWithHttpInfo(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandAMoveForwardGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/QandA/moveForward", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandAMoveForwardGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MoveForwardAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MoveForwardWithHttpInfoAsync(sessionId, moduleId, processId, userInput, commentBox, questionId, answeredQuestions, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> MoveForwardWithHttpInfoAsync(string? sessionId = default(string?), string? moduleId = default(string?), string? processId = default(string?), List<string>? userInput = default(List<string>?), string? commentBox = default(string?), string? questionId = default(string?), Dictionary<string, Question>? answeredQuestions = default(Dictionary<string, Question>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (processId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "ProcessId", processId));
            }
            if (userInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("multi", "UserInput", userInput));
            }
            if (commentBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "CommentBox", commentBox));
            }
            if (questionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "QuestionId", questionId));
            }
            if (answeredQuestions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "AnsweredQuestions", answeredQuestions));
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandAMoveForwardGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/QandA/moveForward", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandAMoveForwardGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void NewSession(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            NewSessionWithHttpInfo(file);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> NewSessionWithHttpInfo(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandANewSessionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/QandA/new-session", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandANewSessionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NewSessionAsync(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await NewSessionWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> NewSessionWithHttpInfoAsync(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "QandAClient.ApiQandANewSessionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/QandA/new-session", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiQandANewSessionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
