// <auto-generated>
/*
 * Simplic.OxS.DevOps
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.DevOps
{
    //--Custom wrapper start
    /// <summary>
    /// Client to interact with the API endpoints of the devops service.
    /// </summary>
    public interface IQandAClient
    {
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        string GetBasePath();

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        //IReadableConfiguration Configuration;

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CheckSession(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
/// <param name="userInput"> (optional)</param>
/// <param name="sessionId"> (optional)</param>
/// <param name="moduleId"> (optional)</param>
/// <param name="processId"> (optional)</param>
/// <param name="commentBox"> (optional)</param>
/// <param name="questionId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckSessionWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task CheckSessionAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> CheckSessionWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CompanyData(string sessionId = default(string), string companyName = default(string), string street = default(string), string email = default(string), string country = default(string));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
/// <param name="companyName"> (optional)</param>
/// <param name="street"> (optional)</param>
/// <param name="email"> (optional)</param>
/// <param name="country"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CompanyDataWithHttpInfo(string sessionId = default(string), string companyName = default(string), string street = default(string), string email = default(string), string country = default(string));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task CompanyDataAsync(string sessionId = default(string), string companyName = default(string), string street = default(string), string email = default(string), string country = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> CompanyDataWithHttpInfoAsync(string sessionId = default(string), string companyName = default(string), string street = default(string), string email = default(string), string country = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void EndSurvey(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
/// <param name="userInput"> (optional)</param>
/// <param name="sessionId"> (optional)</param>
/// <param name="moduleId"> (optional)</param>
/// <param name="processId"> (optional)</param>
/// <param name="commentBox"> (optional)</param>
/// <param name="questionId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EndSurveyWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task EndSurveyAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> EndSurveyWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetModules(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
/// <param name="userInput"> (optional)</param>
/// <param name="sessionId"> (optional)</param>
/// <param name="moduleId"> (optional)</param>
/// <param name="processId"> (optional)</param>
/// <param name="commentBox"> (optional)</param>
/// <param name="questionId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetModulesWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetModulesAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetModulesWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetProcesses(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
/// <param name="userInput"> (optional)</param>
/// <param name="sessionId"> (optional)</param>
/// <param name="moduleId"> (optional)</param>
/// <param name="processId"> (optional)</param>
/// <param name="commentBox"> (optional)</param>
/// <param name="questionId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetProcessesWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetProcessesAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetProcessesWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetQuestion(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
/// <param name="userInput"> (optional)</param>
/// <param name="sessionId"> (optional)</param>
/// <param name="moduleId"> (optional)</param>
/// <param name="processId"> (optional)</param>
/// <param name="commentBox"> (optional)</param>
/// <param name="questionId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetQuestionWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetQuestionAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetQuestionWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void MoveBackward(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
/// <param name="userInput"> (optional)</param>
/// <param name="sessionId"> (optional)</param>
/// <param name="moduleId"> (optional)</param>
/// <param name="processId"> (optional)</param>
/// <param name="commentBox"> (optional)</param>
/// <param name="questionId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MoveBackwardWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task MoveBackwardAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> MoveBackwardWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void MoveForward(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
/// <param name="userInput"> (optional)</param>
/// <param name="sessionId"> (optional)</param>
/// <param name="moduleId"> (optional)</param>
/// <param name="processId"> (optional)</param>
/// <param name="commentBox"> (optional)</param>
/// <param name="questionId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MoveForwardWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task MoveForwardAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> MoveForwardWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void NewSession(System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NewSessionWithHttpInfo(System.IO.Stream file = default(System.IO.Stream));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task NewSessionAsync(System.IO.Stream file = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> NewSessionWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

    }

    /// <inheritdoc cref="IQandAClient">
    public class QandAClient : IQandAClient
    {
        private __QandAClient _internalClient;
        private HttpClient _httpClient;

        public QandAClient(string host, string? authorization = null)
        {
            _httpClient = new HttpClient() { BaseAddress = new Uri($"{host}/devops-api/v1") };
            var jsonSerializerOptions = new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            var jsonSerializerOptionsProvider = new JsonSerializerOptionsProvider(jsonSerializerOptions);
            var events = new QandAClientEvents();
            if (authorization is null)
            {
                _internalClient = new __QandAClient(_httpClient, jsonSerializerOptionsProvider, events, new NullTokenProvider<ApiKeyToken>());
            }
            else
            {
                var token = new ApiKeyToken(authorization, "Authorization", "");
                _internalClient = new __QandAClient(_httpClient, jsonSerializerOptionsProvider, events, new ApiKeyTokenProvider(new[] { token }));
            }
        }

        public QandAClient(Environment env, string? authorization = null)
            : this(
                env == Environment.Development
                    ? "https://dev-oxs.simplic.io"
                    : "https://oxs.simplic.io",
                authorization
            ) { }

        /// <inheritdoc />
        public string GetBasePath() => _httpClient.BaseAddress.ToString();

        /// <inheritdoc />
        public void CheckSession(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.CheckSessionAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> CheckSessionWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.CheckSessionAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task CheckSessionAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.CheckSessionAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> CheckSessionWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.CheckSessionAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void CompanyData(string sessionId = default(string), string companyName = default(string), string street = default(string), string email = default(string), string country = default(string))
        {
            try
            {
                var response = _internalClient.CompanyDataAsync(sessionId, companyName, street, email, country).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> CompanyDataWithHttpInfo(string sessionId = default(string), string companyName = default(string), string street = default(string), string email = default(string), string country = default(string))
        {
            try
            {
                var response = _internalClient.CompanyDataAsync(sessionId, companyName, street, email, country).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task CompanyDataAsync(string sessionId = default(string), string companyName = default(string), string street = default(string), string email = default(string), string country = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.CompanyDataAsync(sessionId, companyName, street, email, country, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> CompanyDataWithHttpInfoAsync(string sessionId = default(string), string companyName = default(string), string street = default(string), string email = default(string), string country = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.CompanyDataAsync(sessionId, companyName, street, email, country, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void EndSurvey(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.EndSurveyAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> EndSurveyWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.EndSurveyAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task EndSurveyAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.EndSurveyAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> EndSurveyWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.EndSurveyAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void GetModules(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.GetModulesAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> GetModulesWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.GetModulesAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task GetModulesAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetModulesAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> GetModulesWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetModulesAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void GetProcesses(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.GetProcessesAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> GetProcessesWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.GetProcessesAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task GetProcessesAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetProcessesAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> GetProcessesWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetProcessesAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void GetQuestion(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.GetQuestionAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> GetQuestionWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.GetQuestionAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task GetQuestionAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetQuestionAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> GetQuestionWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetQuestionAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void MoveBackward(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.MoveBackwardAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> MoveBackwardWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.MoveBackwardAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task MoveBackwardAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.MoveBackwardAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> MoveBackwardWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.MoveBackwardAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void MoveForward(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.MoveForwardAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> MoveForwardWithHttpInfo(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string))
        {
            try
            {
                var response = _internalClient.MoveForwardAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task MoveForwardAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.MoveForwardAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> MoveForwardWithHttpInfoAsync(Dictionary<string, Question> answeredQuestions = default(Dictionary<string, Question>), List<string> userInput = default(List<string>), string sessionId = default(string), string moduleId = default(string), string processId = default(string), string commentBox = default(string), string questionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.MoveForwardAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void NewSession(System.IO.Stream file = default(System.IO.Stream))
        {
            try
            {
                var response = _internalClient.NewSessionAsync(file).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> NewSessionWithHttpInfo(System.IO.Stream file = default(System.IO.Stream))
        {
            try
            {
                var response = _internalClient.NewSessionAsync(file).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task NewSessionAsync(System.IO.Stream file = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.NewSessionAsync(file, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> NewSessionWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.NewSessionAsync(file, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    

        private string FormatErrorMessage(string message, int errorCode) => $"<{errorCode} - {(HttpStatusCode)errorCode}> {message}";
    }
    //--Custom wrapper end
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    internal interface __IQandAClient : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        QandAClientEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandACheckSessionGetApiResponse"/>&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandACheckSessionGetApiResponse> CheckSessionAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandACheckSessionGetApiResponse"/>?&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandACheckSessionGetApiResponse?> CheckSessionOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandACompanyDataGetApiResponse"/>&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandACompanyDataGetApiResponse> CompanyDataAsync(Option<string> sessionId = default, Option<string> companyName = default, Option<string> street = default, Option<string> email = default, Option<string> country = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandACompanyDataGetApiResponse"/>?&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandACompanyDataGetApiResponse?> CompanyDataOrDefaultAsync(Option<string> sessionId = default, Option<string> companyName = default, Option<string> street = default, Option<string> email = default, Option<string> country = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAEndSurveyGetApiResponse"/>&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandAEndSurveyGetApiResponse> EndSurveyAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAEndSurveyGetApiResponse"/>?&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandAEndSurveyGetApiResponse?> EndSurveyOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAGetModulesGetApiResponse"/>&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandAGetModulesGetApiResponse> GetModulesAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAGetModulesGetApiResponse"/>?&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandAGetModulesGetApiResponse?> GetModulesOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAGetProcessesGetApiResponse"/>&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandAGetProcessesGetApiResponse> GetProcessesAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAGetProcessesGetApiResponse"/>?&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandAGetProcessesGetApiResponse?> GetProcessesOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAGetQuestionGetApiResponse"/>&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandAGetQuestionGetApiResponse> GetQuestionAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAGetQuestionGetApiResponse"/>?&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandAGetQuestionGetApiResponse?> GetQuestionOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAMoveBackwardGetApiResponse"/>&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandAMoveBackwardGetApiResponse> MoveBackwardAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAMoveBackwardGetApiResponse"/>?&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandAMoveBackwardGetApiResponse?> MoveBackwardOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAMoveForwardGetApiResponse"/>&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandAMoveForwardGetApiResponse> MoveForwardAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAMoveForwardGetApiResponse"/>?&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandAMoveForwardGetApiResponse?> MoveForwardOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandANewSessionPostApiResponse"/>&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandANewSessionPostApiResponse> NewSessionAsync(Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandANewSessionPostApiResponse"/>?&gt;</returns>
        Task<__QandAClient.IQandAClientApiQandANewSessionPostApiResponse?> NewSessionOrDefaultAsync(Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class QandAClientEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiQandACheckSessionGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiQandACheckSessionGet;

        internal void ExecuteOnApiQandACheckSessionGet(__QandAClient.QandAClientApiQandACheckSessionGetApiResponse apiResponse)
        {
            OnApiQandACheckSessionGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiQandACheckSessionGet(Exception exception)
        {
            OnErrorApiQandACheckSessionGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiQandACompanyDataGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiQandACompanyDataGet;

        internal void ExecuteOnApiQandACompanyDataGet(__QandAClient.QandAClientApiQandACompanyDataGetApiResponse apiResponse)
        {
            OnApiQandACompanyDataGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiQandACompanyDataGet(Exception exception)
        {
            OnErrorApiQandACompanyDataGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiQandAEndSurveyGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiQandAEndSurveyGet;

        internal void ExecuteOnApiQandAEndSurveyGet(__QandAClient.QandAClientApiQandAEndSurveyGetApiResponse apiResponse)
        {
            OnApiQandAEndSurveyGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiQandAEndSurveyGet(Exception exception)
        {
            OnErrorApiQandAEndSurveyGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiQandAGetModulesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiQandAGetModulesGet;

        internal void ExecuteOnApiQandAGetModulesGet(__QandAClient.QandAClientApiQandAGetModulesGetApiResponse apiResponse)
        {
            OnApiQandAGetModulesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiQandAGetModulesGet(Exception exception)
        {
            OnErrorApiQandAGetModulesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiQandAGetProcessesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiQandAGetProcessesGet;

        internal void ExecuteOnApiQandAGetProcessesGet(__QandAClient.QandAClientApiQandAGetProcessesGetApiResponse apiResponse)
        {
            OnApiQandAGetProcessesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiQandAGetProcessesGet(Exception exception)
        {
            OnErrorApiQandAGetProcessesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiQandAGetQuestionGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiQandAGetQuestionGet;

        internal void ExecuteOnApiQandAGetQuestionGet(__QandAClient.QandAClientApiQandAGetQuestionGetApiResponse apiResponse)
        {
            OnApiQandAGetQuestionGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiQandAGetQuestionGet(Exception exception)
        {
            OnErrorApiQandAGetQuestionGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiQandAMoveBackwardGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiQandAMoveBackwardGet;

        internal void ExecuteOnApiQandAMoveBackwardGet(__QandAClient.QandAClientApiQandAMoveBackwardGetApiResponse apiResponse)
        {
            OnApiQandAMoveBackwardGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiQandAMoveBackwardGet(Exception exception)
        {
            OnErrorApiQandAMoveBackwardGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiQandAMoveForwardGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiQandAMoveForwardGet;

        internal void ExecuteOnApiQandAMoveForwardGet(__QandAClient.QandAClientApiQandAMoveForwardGetApiResponse apiResponse)
        {
            OnApiQandAMoveForwardGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiQandAMoveForwardGet(Exception exception)
        {
            OnErrorApiQandAMoveForwardGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiQandANewSessionPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiQandANewSessionPost;

        internal void ExecuteOnApiQandANewSessionPost(__QandAClient.QandAClientApiQandANewSessionPostApiResponse apiResponse)
        {
            OnApiQandANewSessionPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiQandANewSessionPost(Exception exception)
        {
            OnErrorApiQandANewSessionPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal sealed partial class __QandAClient : __IQandAClient
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public QandAClientEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="QandAClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __QandAClient(
            HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            QandAClientEvents qandAClientEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider
        )
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            HttpClient = httpClient;
            Events = qandAClientEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatApiQandACheckSessionGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, ref Option<string> sessionId, ref Option<string> moduleId, ref Option<string> processId, ref Option<string> commentBox, ref Option<string> questionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        /// <returns></returns>
        private void ValidateApiQandACheckSessionGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            if (answeredQuestions.IsSet && answeredQuestions.Value == null)
                throw new ArgumentNullException(nameof(answeredQuestions));

            if (userInput.IsSet && userInput.Value == null)
                throw new ArgumentNullException(nameof(userInput));

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (moduleId.IsSet && moduleId.Value == null)
                throw new ArgumentNullException(nameof(moduleId));

            if (processId.IsSet && processId.Value == null)
                throw new ArgumentNullException(nameof(processId));

            if (commentBox.IsSet && commentBox.Value == null)
                throw new ArgumentNullException(nameof(commentBox));

            if (questionId.IsSet && questionId.Value == null)
                throw new ArgumentNullException(nameof(questionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void AfterApiQandACheckSessionGetDefaultImplementation(__QandAClient.IQandAClientApiQandACheckSessionGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            AfterApiQandACheckSessionGet(ref suppressDefaultLog, apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void AfterApiQandACheckSessionGet(ref bool suppressDefaultLog, __QandAClient.IQandAClientApiQandACheckSessionGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void OnErrorApiQandACheckSessionGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            OnErrorApiQandACheckSessionGet(ref suppressDefaultLog, exception, pathFormat, path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void OnErrorApiQandACheckSessionGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandACheckSessionGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandACheckSessionGetApiResponse?> CheckSessionOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CheckSessionAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandACheckSessionGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandACheckSessionGetApiResponse> CheckSessionAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiQandACheckSessionGet(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                FormatApiQandACheckSessionGet(answeredQuestions, userInput, ref sessionId, ref moduleId, ref processId, ref commentBox, ref questionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/api/QandA/checkSession";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (answeredQuestions.IsSet)
                        parseQueryStringLocalVar["AnsweredQuestions"] = answeredQuestions.Value.ToString();

                    if (userInput.IsSet)
                        parseQueryStringLocalVar["UserInput"] = userInput.Value.ToString();

                    if (sessionId.IsSet)
                        parseQueryStringLocalVar["SessionId"] = sessionId.Value.ToString();

                    if (moduleId.IsSet)
                        parseQueryStringLocalVar["ModuleId"] = moduleId.Value.ToString();

                    if (processId.IsSet)
                        parseQueryStringLocalVar["ProcessId"] = processId.Value.ToString();

                    if (commentBox.IsSet)
                        parseQueryStringLocalVar["CommentBox"] = commentBox.Value.ToString();

                    if (questionId.IsSet)
                        parseQueryStringLocalVar["QuestionId"] = questionId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        QandAClientApiQandACheckSessionGetApiResponse apiResponseLocalVar = new QandAClientApiQandACheckSessionGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/QandA/checkSession", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiQandACheckSessionGetDefaultImplementation(apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                        Events.ExecuteOnApiQandACheckSessionGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiQandACheckSessionGetDefaultImplementation(e, "/api/QandA/checkSession", uriBuilderLocalVar.Path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
                Events.ExecuteOnErrorApiQandACheckSessionGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IQandAClientApiQandACheckSessionGetApiResponse"/>
        /// </summary>
        internal interface IQandAClientApiQandACheckSessionGetApiResponse : Simplic.OxS.SDK.__IApiResponse
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
        }

        /// <summary>
        /// The <see cref="QandAClientApiQandACheckSessionGetApiResponse"/>
        /// </summary>
        internal partial class QandAClientApiQandACheckSessionGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IQandAClientApiQandACheckSessionGetApiResponse
        {
            /// <summary>
            /// The <see cref="QandAClientApiQandACheckSessionGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public QandAClientApiQandACheckSessionGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiQandACompanyDataGet(ref Option<string> sessionId, ref Option<string> companyName, ref Option<string> street, ref Option<string> email, ref Option<string> country);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="companyName"></param>
        /// <param name="street"></param>
        /// <param name="email"></param>
        /// <param name="country"></param>
        /// <returns></returns>
        private void ValidateApiQandACompanyDataGet(Option<string> sessionId, Option<string> companyName, Option<string> street, Option<string> email, Option<string> country)
        {
            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (companyName.IsSet && companyName.Value == null)
                throw new ArgumentNullException(nameof(companyName));

            if (street.IsSet && street.Value == null)
                throw new ArgumentNullException(nameof(street));

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email));

            if (country.IsSet && country.Value == null)
                throw new ArgumentNullException(nameof(country));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sessionId"></param>
        /// <param name="companyName"></param>
        /// <param name="street"></param>
        /// <param name="email"></param>
        /// <param name="country"></param>
        private void AfterApiQandACompanyDataGetDefaultImplementation(__QandAClient.IQandAClientApiQandACompanyDataGetApiResponse apiResponseLocalVar, Option<string> sessionId, Option<string> companyName, Option<string> street, Option<string> email, Option<string> country)
        {
            bool suppressDefaultLog = false;
            AfterApiQandACompanyDataGet(ref suppressDefaultLog, apiResponseLocalVar, sessionId, companyName, street, email, country);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sessionId"></param>
        /// <param name="companyName"></param>
        /// <param name="street"></param>
        /// <param name="email"></param>
        /// <param name="country"></param>
        partial void AfterApiQandACompanyDataGet(ref bool suppressDefaultLog, __QandAClient.IQandAClientApiQandACompanyDataGetApiResponse apiResponseLocalVar, Option<string> sessionId, Option<string> companyName, Option<string> street, Option<string> email, Option<string> country);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="sessionId"></param>
        /// <param name="companyName"></param>
        /// <param name="street"></param>
        /// <param name="email"></param>
        /// <param name="country"></param>
        private void OnErrorApiQandACompanyDataGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> sessionId, Option<string> companyName, Option<string> street, Option<string> email, Option<string> country)
        {
            bool suppressDefaultLog = false;
            OnErrorApiQandACompanyDataGet(ref suppressDefaultLog, exception, pathFormat, path, sessionId, companyName, street, email, country);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="sessionId"></param>
        /// <param name="companyName"></param>
        /// <param name="street"></param>
        /// <param name="email"></param>
        /// <param name="country"></param>
        partial void OnErrorApiQandACompanyDataGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> sessionId, Option<string> companyName, Option<string> street, Option<string> email, Option<string> country);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandACompanyDataGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandACompanyDataGetApiResponse?> CompanyDataOrDefaultAsync(Option<string> sessionId = default, Option<string> companyName = default, Option<string> street = default, Option<string> email = default, Option<string> country = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CompanyDataAsync(sessionId, companyName, street, email, country, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="companyName"> (optional)</param>
        /// <param name="street"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandACompanyDataGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandACompanyDataGetApiResponse> CompanyDataAsync(Option<string> sessionId = default, Option<string> companyName = default, Option<string> street = default, Option<string> email = default, Option<string> country = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiQandACompanyDataGet(sessionId, companyName, street, email, country);

                FormatApiQandACompanyDataGet(ref sessionId, ref companyName, ref street, ref email, ref country);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/api/QandA/companyData";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (sessionId.IsSet)
                        parseQueryStringLocalVar["SessionId"] = sessionId.Value.ToString();

                    if (companyName.IsSet)
                        parseQueryStringLocalVar["CompanyName"] = companyName.Value.ToString();

                    if (street.IsSet)
                        parseQueryStringLocalVar["Street"] = street.Value.ToString();

                    if (email.IsSet)
                        parseQueryStringLocalVar["Email"] = email.Value.ToString();

                    if (country.IsSet)
                        parseQueryStringLocalVar["Country"] = country.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        QandAClientApiQandACompanyDataGetApiResponse apiResponseLocalVar = new QandAClientApiQandACompanyDataGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/QandA/companyData", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiQandACompanyDataGetDefaultImplementation(apiResponseLocalVar, sessionId, companyName, street, email, country);

                        Events.ExecuteOnApiQandACompanyDataGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiQandACompanyDataGetDefaultImplementation(e, "/api/QandA/companyData", uriBuilderLocalVar.Path, sessionId, companyName, street, email, country);
                Events.ExecuteOnErrorApiQandACompanyDataGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IQandAClientApiQandACompanyDataGetApiResponse"/>
        /// </summary>
        internal interface IQandAClientApiQandACompanyDataGetApiResponse : Simplic.OxS.SDK.__IApiResponse
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
        }

        /// <summary>
        /// The <see cref="QandAClientApiQandACompanyDataGetApiResponse"/>
        /// </summary>
        internal partial class QandAClientApiQandACompanyDataGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IQandAClientApiQandACompanyDataGetApiResponse
        {
            /// <summary>
            /// The <see cref="QandAClientApiQandACompanyDataGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public QandAClientApiQandACompanyDataGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiQandAEndSurveyGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, ref Option<string> sessionId, ref Option<string> moduleId, ref Option<string> processId, ref Option<string> commentBox, ref Option<string> questionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        /// <returns></returns>
        private void ValidateApiQandAEndSurveyGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            if (answeredQuestions.IsSet && answeredQuestions.Value == null)
                throw new ArgumentNullException(nameof(answeredQuestions));

            if (userInput.IsSet && userInput.Value == null)
                throw new ArgumentNullException(nameof(userInput));

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (moduleId.IsSet && moduleId.Value == null)
                throw new ArgumentNullException(nameof(moduleId));

            if (processId.IsSet && processId.Value == null)
                throw new ArgumentNullException(nameof(processId));

            if (commentBox.IsSet && commentBox.Value == null)
                throw new ArgumentNullException(nameof(commentBox));

            if (questionId.IsSet && questionId.Value == null)
                throw new ArgumentNullException(nameof(questionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void AfterApiQandAEndSurveyGetDefaultImplementation(__QandAClient.IQandAClientApiQandAEndSurveyGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            AfterApiQandAEndSurveyGet(ref suppressDefaultLog, apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void AfterApiQandAEndSurveyGet(ref bool suppressDefaultLog, __QandAClient.IQandAClientApiQandAEndSurveyGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void OnErrorApiQandAEndSurveyGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            OnErrorApiQandAEndSurveyGet(ref suppressDefaultLog, exception, pathFormat, path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void OnErrorApiQandAEndSurveyGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAEndSurveyGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandAEndSurveyGetApiResponse?> EndSurveyOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EndSurveyAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAEndSurveyGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandAEndSurveyGetApiResponse> EndSurveyAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiQandAEndSurveyGet(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                FormatApiQandAEndSurveyGet(answeredQuestions, userInput, ref sessionId, ref moduleId, ref processId, ref commentBox, ref questionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/api/QandA/endSurvey";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (answeredQuestions.IsSet)
                        parseQueryStringLocalVar["AnsweredQuestions"] = answeredQuestions.Value.ToString();

                    if (userInput.IsSet)
                        parseQueryStringLocalVar["UserInput"] = userInput.Value.ToString();

                    if (sessionId.IsSet)
                        parseQueryStringLocalVar["SessionId"] = sessionId.Value.ToString();

                    if (moduleId.IsSet)
                        parseQueryStringLocalVar["ModuleId"] = moduleId.Value.ToString();

                    if (processId.IsSet)
                        parseQueryStringLocalVar["ProcessId"] = processId.Value.ToString();

                    if (commentBox.IsSet)
                        parseQueryStringLocalVar["CommentBox"] = commentBox.Value.ToString();

                    if (questionId.IsSet)
                        parseQueryStringLocalVar["QuestionId"] = questionId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        QandAClientApiQandAEndSurveyGetApiResponse apiResponseLocalVar = new QandAClientApiQandAEndSurveyGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/QandA/endSurvey", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiQandAEndSurveyGetDefaultImplementation(apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                        Events.ExecuteOnApiQandAEndSurveyGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiQandAEndSurveyGetDefaultImplementation(e, "/api/QandA/endSurvey", uriBuilderLocalVar.Path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
                Events.ExecuteOnErrorApiQandAEndSurveyGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IQandAClientApiQandAEndSurveyGetApiResponse"/>
        /// </summary>
        internal interface IQandAClientApiQandAEndSurveyGetApiResponse : Simplic.OxS.SDK.__IApiResponse
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
        }

        /// <summary>
        /// The <see cref="QandAClientApiQandAEndSurveyGetApiResponse"/>
        /// </summary>
        internal partial class QandAClientApiQandAEndSurveyGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IQandAClientApiQandAEndSurveyGetApiResponse
        {
            /// <summary>
            /// The <see cref="QandAClientApiQandAEndSurveyGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public QandAClientApiQandAEndSurveyGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiQandAGetModulesGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, ref Option<string> sessionId, ref Option<string> moduleId, ref Option<string> processId, ref Option<string> commentBox, ref Option<string> questionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        /// <returns></returns>
        private void ValidateApiQandAGetModulesGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            if (answeredQuestions.IsSet && answeredQuestions.Value == null)
                throw new ArgumentNullException(nameof(answeredQuestions));

            if (userInput.IsSet && userInput.Value == null)
                throw new ArgumentNullException(nameof(userInput));

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (moduleId.IsSet && moduleId.Value == null)
                throw new ArgumentNullException(nameof(moduleId));

            if (processId.IsSet && processId.Value == null)
                throw new ArgumentNullException(nameof(processId));

            if (commentBox.IsSet && commentBox.Value == null)
                throw new ArgumentNullException(nameof(commentBox));

            if (questionId.IsSet && questionId.Value == null)
                throw new ArgumentNullException(nameof(questionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void AfterApiQandAGetModulesGetDefaultImplementation(__QandAClient.IQandAClientApiQandAGetModulesGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            AfterApiQandAGetModulesGet(ref suppressDefaultLog, apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void AfterApiQandAGetModulesGet(ref bool suppressDefaultLog, __QandAClient.IQandAClientApiQandAGetModulesGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void OnErrorApiQandAGetModulesGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            OnErrorApiQandAGetModulesGet(ref suppressDefaultLog, exception, pathFormat, path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void OnErrorApiQandAGetModulesGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAGetModulesGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandAGetModulesGetApiResponse?> GetModulesOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetModulesAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAGetModulesGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandAGetModulesGetApiResponse> GetModulesAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiQandAGetModulesGet(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                FormatApiQandAGetModulesGet(answeredQuestions, userInput, ref sessionId, ref moduleId, ref processId, ref commentBox, ref questionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/api/QandA/getModules";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (answeredQuestions.IsSet)
                        parseQueryStringLocalVar["AnsweredQuestions"] = answeredQuestions.Value.ToString();

                    if (userInput.IsSet)
                        parseQueryStringLocalVar["UserInput"] = userInput.Value.ToString();

                    if (sessionId.IsSet)
                        parseQueryStringLocalVar["SessionId"] = sessionId.Value.ToString();

                    if (moduleId.IsSet)
                        parseQueryStringLocalVar["ModuleId"] = moduleId.Value.ToString();

                    if (processId.IsSet)
                        parseQueryStringLocalVar["ProcessId"] = processId.Value.ToString();

                    if (commentBox.IsSet)
                        parseQueryStringLocalVar["CommentBox"] = commentBox.Value.ToString();

                    if (questionId.IsSet)
                        parseQueryStringLocalVar["QuestionId"] = questionId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        QandAClientApiQandAGetModulesGetApiResponse apiResponseLocalVar = new QandAClientApiQandAGetModulesGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/QandA/getModules", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiQandAGetModulesGetDefaultImplementation(apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                        Events.ExecuteOnApiQandAGetModulesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiQandAGetModulesGetDefaultImplementation(e, "/api/QandA/getModules", uriBuilderLocalVar.Path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
                Events.ExecuteOnErrorApiQandAGetModulesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IQandAClientApiQandAGetModulesGetApiResponse"/>
        /// </summary>
        internal interface IQandAClientApiQandAGetModulesGetApiResponse : Simplic.OxS.SDK.__IApiResponse
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
        }

        /// <summary>
        /// The <see cref="QandAClientApiQandAGetModulesGetApiResponse"/>
        /// </summary>
        internal partial class QandAClientApiQandAGetModulesGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IQandAClientApiQandAGetModulesGetApiResponse
        {
            /// <summary>
            /// The <see cref="QandAClientApiQandAGetModulesGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public QandAClientApiQandAGetModulesGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiQandAGetProcessesGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, ref Option<string> sessionId, ref Option<string> moduleId, ref Option<string> processId, ref Option<string> commentBox, ref Option<string> questionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        /// <returns></returns>
        private void ValidateApiQandAGetProcessesGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            if (answeredQuestions.IsSet && answeredQuestions.Value == null)
                throw new ArgumentNullException(nameof(answeredQuestions));

            if (userInput.IsSet && userInput.Value == null)
                throw new ArgumentNullException(nameof(userInput));

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (moduleId.IsSet && moduleId.Value == null)
                throw new ArgumentNullException(nameof(moduleId));

            if (processId.IsSet && processId.Value == null)
                throw new ArgumentNullException(nameof(processId));

            if (commentBox.IsSet && commentBox.Value == null)
                throw new ArgumentNullException(nameof(commentBox));

            if (questionId.IsSet && questionId.Value == null)
                throw new ArgumentNullException(nameof(questionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void AfterApiQandAGetProcessesGetDefaultImplementation(__QandAClient.IQandAClientApiQandAGetProcessesGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            AfterApiQandAGetProcessesGet(ref suppressDefaultLog, apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void AfterApiQandAGetProcessesGet(ref bool suppressDefaultLog, __QandAClient.IQandAClientApiQandAGetProcessesGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void OnErrorApiQandAGetProcessesGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            OnErrorApiQandAGetProcessesGet(ref suppressDefaultLog, exception, pathFormat, path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void OnErrorApiQandAGetProcessesGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAGetProcessesGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandAGetProcessesGetApiResponse?> GetProcessesOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProcessesAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAGetProcessesGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandAGetProcessesGetApiResponse> GetProcessesAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiQandAGetProcessesGet(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                FormatApiQandAGetProcessesGet(answeredQuestions, userInput, ref sessionId, ref moduleId, ref processId, ref commentBox, ref questionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/api/QandA/getProcesses";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (answeredQuestions.IsSet)
                        parseQueryStringLocalVar["AnsweredQuestions"] = answeredQuestions.Value.ToString();

                    if (userInput.IsSet)
                        parseQueryStringLocalVar["UserInput"] = userInput.Value.ToString();

                    if (sessionId.IsSet)
                        parseQueryStringLocalVar["SessionId"] = sessionId.Value.ToString();

                    if (moduleId.IsSet)
                        parseQueryStringLocalVar["ModuleId"] = moduleId.Value.ToString();

                    if (processId.IsSet)
                        parseQueryStringLocalVar["ProcessId"] = processId.Value.ToString();

                    if (commentBox.IsSet)
                        parseQueryStringLocalVar["CommentBox"] = commentBox.Value.ToString();

                    if (questionId.IsSet)
                        parseQueryStringLocalVar["QuestionId"] = questionId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        QandAClientApiQandAGetProcessesGetApiResponse apiResponseLocalVar = new QandAClientApiQandAGetProcessesGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/QandA/getProcesses", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiQandAGetProcessesGetDefaultImplementation(apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                        Events.ExecuteOnApiQandAGetProcessesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiQandAGetProcessesGetDefaultImplementation(e, "/api/QandA/getProcesses", uriBuilderLocalVar.Path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
                Events.ExecuteOnErrorApiQandAGetProcessesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IQandAClientApiQandAGetProcessesGetApiResponse"/>
        /// </summary>
        internal interface IQandAClientApiQandAGetProcessesGetApiResponse : Simplic.OxS.SDK.__IApiResponse
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
        }

        /// <summary>
        /// The <see cref="QandAClientApiQandAGetProcessesGetApiResponse"/>
        /// </summary>
        internal partial class QandAClientApiQandAGetProcessesGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IQandAClientApiQandAGetProcessesGetApiResponse
        {
            /// <summary>
            /// The <see cref="QandAClientApiQandAGetProcessesGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public QandAClientApiQandAGetProcessesGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiQandAGetQuestionGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, ref Option<string> sessionId, ref Option<string> moduleId, ref Option<string> processId, ref Option<string> commentBox, ref Option<string> questionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        /// <returns></returns>
        private void ValidateApiQandAGetQuestionGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            if (answeredQuestions.IsSet && answeredQuestions.Value == null)
                throw new ArgumentNullException(nameof(answeredQuestions));

            if (userInput.IsSet && userInput.Value == null)
                throw new ArgumentNullException(nameof(userInput));

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (moduleId.IsSet && moduleId.Value == null)
                throw new ArgumentNullException(nameof(moduleId));

            if (processId.IsSet && processId.Value == null)
                throw new ArgumentNullException(nameof(processId));

            if (commentBox.IsSet && commentBox.Value == null)
                throw new ArgumentNullException(nameof(commentBox));

            if (questionId.IsSet && questionId.Value == null)
                throw new ArgumentNullException(nameof(questionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void AfterApiQandAGetQuestionGetDefaultImplementation(__QandAClient.IQandAClientApiQandAGetQuestionGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            AfterApiQandAGetQuestionGet(ref suppressDefaultLog, apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void AfterApiQandAGetQuestionGet(ref bool suppressDefaultLog, __QandAClient.IQandAClientApiQandAGetQuestionGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void OnErrorApiQandAGetQuestionGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            OnErrorApiQandAGetQuestionGet(ref suppressDefaultLog, exception, pathFormat, path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void OnErrorApiQandAGetQuestionGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAGetQuestionGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandAGetQuestionGetApiResponse?> GetQuestionOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetQuestionAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAGetQuestionGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandAGetQuestionGetApiResponse> GetQuestionAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiQandAGetQuestionGet(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                FormatApiQandAGetQuestionGet(answeredQuestions, userInput, ref sessionId, ref moduleId, ref processId, ref commentBox, ref questionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/api/QandA/get-question";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (answeredQuestions.IsSet)
                        parseQueryStringLocalVar["AnsweredQuestions"] = answeredQuestions.Value.ToString();

                    if (userInput.IsSet)
                        parseQueryStringLocalVar["UserInput"] = userInput.Value.ToString();

                    if (sessionId.IsSet)
                        parseQueryStringLocalVar["SessionId"] = sessionId.Value.ToString();

                    if (moduleId.IsSet)
                        parseQueryStringLocalVar["ModuleId"] = moduleId.Value.ToString();

                    if (processId.IsSet)
                        parseQueryStringLocalVar["ProcessId"] = processId.Value.ToString();

                    if (commentBox.IsSet)
                        parseQueryStringLocalVar["CommentBox"] = commentBox.Value.ToString();

                    if (questionId.IsSet)
                        parseQueryStringLocalVar["QuestionId"] = questionId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        QandAClientApiQandAGetQuestionGetApiResponse apiResponseLocalVar = new QandAClientApiQandAGetQuestionGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/QandA/get-question", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiQandAGetQuestionGetDefaultImplementation(apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                        Events.ExecuteOnApiQandAGetQuestionGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiQandAGetQuestionGetDefaultImplementation(e, "/api/QandA/get-question", uriBuilderLocalVar.Path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
                Events.ExecuteOnErrorApiQandAGetQuestionGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IQandAClientApiQandAGetQuestionGetApiResponse"/>
        /// </summary>
        internal interface IQandAClientApiQandAGetQuestionGetApiResponse : Simplic.OxS.SDK.__IApiResponse
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
        }

        /// <summary>
        /// The <see cref="QandAClientApiQandAGetQuestionGetApiResponse"/>
        /// </summary>
        internal partial class QandAClientApiQandAGetQuestionGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IQandAClientApiQandAGetQuestionGetApiResponse
        {
            /// <summary>
            /// The <see cref="QandAClientApiQandAGetQuestionGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public QandAClientApiQandAGetQuestionGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiQandAMoveBackwardGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, ref Option<string> sessionId, ref Option<string> moduleId, ref Option<string> processId, ref Option<string> commentBox, ref Option<string> questionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        /// <returns></returns>
        private void ValidateApiQandAMoveBackwardGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            if (answeredQuestions.IsSet && answeredQuestions.Value == null)
                throw new ArgumentNullException(nameof(answeredQuestions));

            if (userInput.IsSet && userInput.Value == null)
                throw new ArgumentNullException(nameof(userInput));

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (moduleId.IsSet && moduleId.Value == null)
                throw new ArgumentNullException(nameof(moduleId));

            if (processId.IsSet && processId.Value == null)
                throw new ArgumentNullException(nameof(processId));

            if (commentBox.IsSet && commentBox.Value == null)
                throw new ArgumentNullException(nameof(commentBox));

            if (questionId.IsSet && questionId.Value == null)
                throw new ArgumentNullException(nameof(questionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void AfterApiQandAMoveBackwardGetDefaultImplementation(__QandAClient.IQandAClientApiQandAMoveBackwardGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            AfterApiQandAMoveBackwardGet(ref suppressDefaultLog, apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void AfterApiQandAMoveBackwardGet(ref bool suppressDefaultLog, __QandAClient.IQandAClientApiQandAMoveBackwardGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void OnErrorApiQandAMoveBackwardGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            OnErrorApiQandAMoveBackwardGet(ref suppressDefaultLog, exception, pathFormat, path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void OnErrorApiQandAMoveBackwardGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAMoveBackwardGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandAMoveBackwardGetApiResponse?> MoveBackwardOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MoveBackwardAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAMoveBackwardGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandAMoveBackwardGetApiResponse> MoveBackwardAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiQandAMoveBackwardGet(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                FormatApiQandAMoveBackwardGet(answeredQuestions, userInput, ref sessionId, ref moduleId, ref processId, ref commentBox, ref questionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/api/QandA/moveBackward";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (answeredQuestions.IsSet)
                        parseQueryStringLocalVar["AnsweredQuestions"] = answeredQuestions.Value.ToString();

                    if (userInput.IsSet)
                        parseQueryStringLocalVar["UserInput"] = userInput.Value.ToString();

                    if (sessionId.IsSet)
                        parseQueryStringLocalVar["SessionId"] = sessionId.Value.ToString();

                    if (moduleId.IsSet)
                        parseQueryStringLocalVar["ModuleId"] = moduleId.Value.ToString();

                    if (processId.IsSet)
                        parseQueryStringLocalVar["ProcessId"] = processId.Value.ToString();

                    if (commentBox.IsSet)
                        parseQueryStringLocalVar["CommentBox"] = commentBox.Value.ToString();

                    if (questionId.IsSet)
                        parseQueryStringLocalVar["QuestionId"] = questionId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        QandAClientApiQandAMoveBackwardGetApiResponse apiResponseLocalVar = new QandAClientApiQandAMoveBackwardGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/QandA/moveBackward", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiQandAMoveBackwardGetDefaultImplementation(apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                        Events.ExecuteOnApiQandAMoveBackwardGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiQandAMoveBackwardGetDefaultImplementation(e, "/api/QandA/moveBackward", uriBuilderLocalVar.Path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
                Events.ExecuteOnErrorApiQandAMoveBackwardGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IQandAClientApiQandAMoveBackwardGetApiResponse"/>
        /// </summary>
        internal interface IQandAClientApiQandAMoveBackwardGetApiResponse : Simplic.OxS.SDK.__IApiResponse
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
        }

        /// <summary>
        /// The <see cref="QandAClientApiQandAMoveBackwardGetApiResponse"/>
        /// </summary>
        internal partial class QandAClientApiQandAMoveBackwardGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IQandAClientApiQandAMoveBackwardGetApiResponse
        {
            /// <summary>
            /// The <see cref="QandAClientApiQandAMoveBackwardGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public QandAClientApiQandAMoveBackwardGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiQandAMoveForwardGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, ref Option<string> sessionId, ref Option<string> moduleId, ref Option<string> processId, ref Option<string> commentBox, ref Option<string> questionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        /// <returns></returns>
        private void ValidateApiQandAMoveForwardGet(Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            if (answeredQuestions.IsSet && answeredQuestions.Value == null)
                throw new ArgumentNullException(nameof(answeredQuestions));

            if (userInput.IsSet && userInput.Value == null)
                throw new ArgumentNullException(nameof(userInput));

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (moduleId.IsSet && moduleId.Value == null)
                throw new ArgumentNullException(nameof(moduleId));

            if (processId.IsSet && processId.Value == null)
                throw new ArgumentNullException(nameof(processId));

            if (commentBox.IsSet && commentBox.Value == null)
                throw new ArgumentNullException(nameof(commentBox));

            if (questionId.IsSet && questionId.Value == null)
                throw new ArgumentNullException(nameof(questionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void AfterApiQandAMoveForwardGetDefaultImplementation(__QandAClient.IQandAClientApiQandAMoveForwardGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            AfterApiQandAMoveForwardGet(ref suppressDefaultLog, apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void AfterApiQandAMoveForwardGet(ref bool suppressDefaultLog, __QandAClient.IQandAClientApiQandAMoveForwardGetApiResponse apiResponseLocalVar, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        private void OnErrorApiQandAMoveForwardGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId)
        {
            bool suppressDefaultLog = false;
            OnErrorApiQandAMoveForwardGet(ref suppressDefaultLog, exception, pathFormat, path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="answeredQuestions"></param>
        /// <param name="userInput"></param>
        /// <param name="sessionId"></param>
        /// <param name="moduleId"></param>
        /// <param name="processId"></param>
        /// <param name="commentBox"></param>
        /// <param name="questionId"></param>
        partial void OnErrorApiQandAMoveForwardGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<Dictionary<string, Question>> answeredQuestions, Option<List<string>> userInput, Option<string> sessionId, Option<string> moduleId, Option<string> processId, Option<string> commentBox, Option<string> questionId);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAMoveForwardGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandAMoveForwardGetApiResponse?> MoveForwardOrDefaultAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MoveForwardAsync(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="answeredQuestions"> (optional)</param>
        /// <param name="userInput"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="moduleId"> (optional)</param>
        /// <param name="processId"> (optional)</param>
        /// <param name="commentBox"> (optional)</param>
        /// <param name="questionId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandAMoveForwardGetApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandAMoveForwardGetApiResponse> MoveForwardAsync(Option<Dictionary<string, Question>> answeredQuestions = default, Option<List<string>> userInput = default, Option<string> sessionId = default, Option<string> moduleId = default, Option<string> processId = default, Option<string> commentBox = default, Option<string> questionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiQandAMoveForwardGet(answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                FormatApiQandAMoveForwardGet(answeredQuestions, userInput, ref sessionId, ref moduleId, ref processId, ref commentBox, ref questionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/api/QandA/moveForward";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (answeredQuestions.IsSet)
                        parseQueryStringLocalVar["AnsweredQuestions"] = answeredQuestions.Value.ToString();

                    if (userInput.IsSet)
                        parseQueryStringLocalVar["UserInput"] = userInput.Value.ToString();

                    if (sessionId.IsSet)
                        parseQueryStringLocalVar["SessionId"] = sessionId.Value.ToString();

                    if (moduleId.IsSet)
                        parseQueryStringLocalVar["ModuleId"] = moduleId.Value.ToString();

                    if (processId.IsSet)
                        parseQueryStringLocalVar["ProcessId"] = processId.Value.ToString();

                    if (commentBox.IsSet)
                        parseQueryStringLocalVar["CommentBox"] = commentBox.Value.ToString();

                    if (questionId.IsSet)
                        parseQueryStringLocalVar["QuestionId"] = questionId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        QandAClientApiQandAMoveForwardGetApiResponse apiResponseLocalVar = new QandAClientApiQandAMoveForwardGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/QandA/moveForward", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiQandAMoveForwardGetDefaultImplementation(apiResponseLocalVar, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);

                        Events.ExecuteOnApiQandAMoveForwardGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiQandAMoveForwardGetDefaultImplementation(e, "/api/QandA/moveForward", uriBuilderLocalVar.Path, answeredQuestions, userInput, sessionId, moduleId, processId, commentBox, questionId);
                Events.ExecuteOnErrorApiQandAMoveForwardGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IQandAClientApiQandAMoveForwardGetApiResponse"/>
        /// </summary>
        internal interface IQandAClientApiQandAMoveForwardGetApiResponse : Simplic.OxS.SDK.__IApiResponse
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
        }

        /// <summary>
        /// The <see cref="QandAClientApiQandAMoveForwardGetApiResponse"/>
        /// </summary>
        internal partial class QandAClientApiQandAMoveForwardGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IQandAClientApiQandAMoveForwardGetApiResponse
        {
            /// <summary>
            /// The <see cref="QandAClientApiQandAMoveForwardGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public QandAClientApiQandAMoveForwardGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiQandANewSessionPost(ref Option<System.IO.Stream> file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateApiQandANewSessionPost(Option<System.IO.Stream> file)
        {
            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        private void AfterApiQandANewSessionPostDefaultImplementation(__QandAClient.IQandAClientApiQandANewSessionPostApiResponse apiResponseLocalVar, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLog = false;
            AfterApiQandANewSessionPost(ref suppressDefaultLog, apiResponseLocalVar, file);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        partial void AfterApiQandANewSessionPost(ref bool suppressDefaultLog, __QandAClient.IQandAClientApiQandANewSessionPostApiResponse apiResponseLocalVar, Option<System.IO.Stream> file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="file"></param>
        private void OnErrorApiQandANewSessionPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLog = false;
            OnErrorApiQandANewSessionPost(ref suppressDefaultLog, exception, pathFormat, path, file);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="file"></param>
        partial void OnErrorApiQandANewSessionPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<System.IO.Stream> file);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandANewSessionPostApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandANewSessionPostApiResponse?> NewSessionOrDefaultAsync(Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await NewSessionAsync(file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__QandAClient.IQandAClientApiQandANewSessionPostApiResponse"/>&gt;</returns>
        public async Task<__QandAClient.IQandAClientApiQandANewSessionPostApiResponse> NewSessionAsync(Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiQandANewSessionPost(file);

                FormatApiQandANewSessionPost(ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/api/QandA/new-session";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (file.IsSet)
                        multipartContentLocalVar.Add(StreamContentExtension.From(file.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        QandAClientApiQandANewSessionPostApiResponse apiResponseLocalVar = new QandAClientApiQandANewSessionPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/QandA/new-session", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiQandANewSessionPostDefaultImplementation(apiResponseLocalVar, file);

                        Events.ExecuteOnApiQandANewSessionPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiQandANewSessionPostDefaultImplementation(e, "/api/QandA/new-session", uriBuilderLocalVar.Path, file);
                Events.ExecuteOnErrorApiQandANewSessionPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IQandAClientApiQandANewSessionPostApiResponse"/>
        /// </summary>
        internal interface IQandAClientApiQandANewSessionPostApiResponse : Simplic.OxS.SDK.__IApiResponse
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
        }

        /// <summary>
        /// The <see cref="QandAClientApiQandANewSessionPostApiResponse"/>
        /// </summary>
        internal partial class QandAClientApiQandANewSessionPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IQandAClientApiQandANewSessionPostApiResponse
        {
            /// <summary>
            /// The <see cref="QandAClientApiQandANewSessionPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public QandAClientApiQandANewSessionPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
