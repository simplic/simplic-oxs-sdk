/*
 * Simplic.OxS.DevOps
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.DevOps
{
    /// <summary>
    /// Root
    /// </summary>
    [DataContract(Name = "Root")]
    public partial class Root : IEquatable<Root>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Root" /> class.
        /// </summary>
        /// <param name="varEvent">varEvent.</param>
        /// <param name="historyItems">historyItems.</param>
        /// <param name="taskId">taskId.</param>
        /// <param name="webhookId">webhookId.</param>
        public Root(string varEvent = default(string), List<HistoryItem> historyItems = default(List<HistoryItem>), string taskId = default(string), string webhookId = default(string))
        {
            this.VarEvent = varEvent;
            this.HistoryItems = historyItems;
            this.TaskId = taskId;
            this.WebhookId = webhookId;
        }

        /// <summary>
        /// Gets or Sets VarEvent
        /// </summary>
        [DataMember(Name = "event", EmitDefaultValue = true)]
        public string VarEvent { get; set; }

        /// <summary>
        /// Gets or Sets HistoryItems
        /// </summary>
        [DataMember(Name = "historyItems", EmitDefaultValue = true)]
        public List<HistoryItem> HistoryItems { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name = "taskId", EmitDefaultValue = true)]
        public string TaskId { get; set; }

        /// <summary>
        /// Gets or Sets WebhookId
        /// </summary>
        [DataMember(Name = "webhookId", EmitDefaultValue = true)]
        public string WebhookId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Root {\n");
            sb.Append("  VarEvent: ").Append(VarEvent).Append("\n");
            sb.Append("  HistoryItems: ").Append(HistoryItems).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Root);
        }

        /// <summary>
        /// Returns true if Root instances are equal
        /// </summary>
        /// <param name="input">Instance of Root to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Root input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarEvent == input.VarEvent ||
                    (this.VarEvent != null &&
                    this.VarEvent.Equals(input.VarEvent))
                ) && 
                (
                    this.HistoryItems == input.HistoryItems ||
                    this.HistoryItems != null &&
                    input.HistoryItems != null &&
                    this.HistoryItems.SequenceEqual(input.HistoryItems)
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.WebhookId == input.WebhookId ||
                    (this.WebhookId != null &&
                    this.WebhookId.Equals(input.WebhookId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarEvent != null)
                {
                    hashCode = (hashCode * 59) + this.VarEvent.GetHashCode();
                }
                if (this.HistoryItems != null)
                {
                    hashCode = (hashCode * 59) + this.HistoryItems.GetHashCode();
                }
                if (this.TaskId != null)
                {
                    hashCode = (hashCode * 59) + this.TaskId.GetHashCode();
                }
                if (this.WebhookId != null)
                {
                    hashCode = (hashCode * 59) + this.WebhookId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
