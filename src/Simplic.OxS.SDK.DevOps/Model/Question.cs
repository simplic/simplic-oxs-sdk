/*
 * Simplic.OxS.DevOps
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.DevOps
{
    /// <summary>
    /// Question
    /// </summary>
    [DataContract(Name = "Question")]
    public partial class Question : IEquatable<Question>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Question" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="dependencyString">dependencyString.</param>
        /// <param name="text">text.</param>
        /// <param name="type">type.</param>
        /// <param name="answers">answers.</param>
        /// <param name="commentBox">commentBox.</param>
        /// <param name="userinput">userinput.</param>
        public Question(string id = default(string), string dependencyString = default(string), string text = default(string), string type = default(string), List<Answer> answers = default(List<Answer>), string commentBox = default(string), List<string> userinput = default(List<string>))
        {
            this.Id = id;
            this.DependencyString = dependencyString;
            this.Text = text;
            this.Type = type;
            this.Answers = answers;
            this.CommentBox = commentBox;
            this.Userinput = userinput;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets DependencyString
        /// </summary>
        [DataMember(Name = "dependencyString", EmitDefaultValue = true)]
        public string DependencyString { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Answers
        /// </summary>
        [DataMember(Name = "answers", EmitDefaultValue = true)]
        public List<Answer> Answers { get; set; }

        /// <summary>
        /// Gets or Sets CommentBox
        /// </summary>
        [DataMember(Name = "commentBox", EmitDefaultValue = true)]
        public string CommentBox { get; set; }

        /// <summary>
        /// Gets or Sets Userinput
        /// </summary>
        [DataMember(Name = "userinput", EmitDefaultValue = true)]
        public List<string> Userinput { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Question {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DependencyString: ").Append(DependencyString).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Answers: ").Append(Answers).Append("\n");
            sb.Append("  CommentBox: ").Append(CommentBox).Append("\n");
            sb.Append("  Userinput: ").Append(Userinput).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Question);
        }

        /// <summary>
        /// Returns true if Question instances are equal
        /// </summary>
        /// <param name="input">Instance of Question to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Question input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DependencyString == input.DependencyString ||
                    (this.DependencyString != null &&
                    this.DependencyString.Equals(input.DependencyString))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Answers == input.Answers ||
                    this.Answers != null &&
                    input.Answers != null &&
                    this.Answers.SequenceEqual(input.Answers)
                ) && 
                (
                    this.CommentBox == input.CommentBox ||
                    (this.CommentBox != null &&
                    this.CommentBox.Equals(input.CommentBox))
                ) && 
                (
                    this.Userinput == input.Userinput ||
                    this.Userinput != null &&
                    input.Userinput != null &&
                    this.Userinput.SequenceEqual(input.Userinput)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DependencyString != null)
                {
                    hashCode = (hashCode * 59) + this.DependencyString.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Answers != null)
                {
                    hashCode = (hashCode * 59) + this.Answers.GetHashCode();
                }
                if (this.CommentBox != null)
                {
                    hashCode = (hashCode * 59) + this.CommentBox.GetHashCode();
                }
                if (this.Userinput != null)
                {
                    hashCode = (hashCode * 59) + this.Userinput.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
