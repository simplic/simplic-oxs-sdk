// <auto-generated>
/*
 * Simplic.OxS.DevOps
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.DevOps
{
    /// <summary>
    /// Question
    /// </summary>
    public partial class Question : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public Question()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Question" /> class.
        /// </summary>
        /// <param name="answers">answers</param>
        /// <param name="commentBox">commentBox</param>
        /// <param name="dependencyString">dependencyString</param>
        /// <param name="id">id</param>
        /// <param name="text">text</param>
        /// <param name="type">type</param>
        /// <param name="userinput">userinput</param>
        //[JsonConstructor]
        public Question(Option<List<Answer>> answers = default, Option<string> commentBox = default, Option<string> dependencyString = default, Option<string> id = default, Option<string> text = default, Option<string> type = default, Option<List<string>> userinput = default)
        {
            AnswersOption = answers;
            CommentBoxOption = commentBox;
            DependencyStringOption = dependencyString;
            IdOption = id;
            TextOption = text;
            TypeOption = type;
            UserinputOption = userinput;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Answers
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<Answer>>))]
        public Option<List<Answer>> AnswersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Answers
        /// </summary>
        [JsonPropertyName("answers")]
        public List<Answer>? Answers { get { return this. AnswersOption; } set { this.AnswersOption = new Option<List<Answer>>(value); } }

        /// <summary>
        /// Used to track the state of CommentBox
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CommentBoxOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommentBox
        /// </summary>
        [JsonPropertyName("commentBox")]
        public string? CommentBox { get { return this. CommentBoxOption; } set { this.CommentBoxOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DependencyString
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DependencyStringOption { get; private set; }

        /// <summary>
        /// Gets or Sets DependencyString
        /// </summary>
        [JsonPropertyName("dependencyString")]
        public string? DependencyString { get { return this. DependencyStringOption; } set { this.DependencyStringOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this. IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [JsonPropertyName("text")]
        public string? Text { get { return this. TextOption; } set { this.TextOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this. TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Userinput
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> UserinputOption { get; private set; }

        /// <summary>
        /// Gets or Sets Userinput
        /// </summary>
        [JsonPropertyName("userinput")]
        public List<string>? Userinput { get { return this. UserinputOption; } set { this.UserinputOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Question {\n");
            sb.Append("  Answers: ").Append(Answers).Append("\n");
            sb.Append("  CommentBox: ").Append(CommentBox).Append("\n");
            sb.Append("  DependencyString: ").Append(DependencyString).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Userinput: ").Append(Userinput).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Question" />
    /// </summary>
    public class QuestionJsonConverter : JsonConverter<Question>
    {
        /// <summary>
        /// Deserializes json to <see cref="Question" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Question Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Answer>> answers = default;
            Option<string> commentBox = default;
            Option<string> dependencyString = default;
            Option<string> id = default;
            Option<string> text = default;
            Option<string> type = default;
            Option<List<string>> userinput = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "answers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                answers = new Option<List<Answer>>(JsonSerializer.Deserialize<List<Answer>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "commentBox":
                            commentBox = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dependencyString":
                            dependencyString = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "text":
                            text = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "userinput":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userinput = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new Question(answers, commentBox, dependencyString, id, text, type, userinput);
            return new Question(answers, commentBox, dependencyString, id, text, type, userinput);
        }

        /// <summary>
        /// Serializes a <see cref="Question" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="question"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Question question, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, question, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Question" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="question"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, Question question, JsonSerializerOptions jsonSerializerOptions)
        {
            if (question.AnswersOption.IsSet)
                if (question.AnswersOption.Value != null)
                {
                    writer.WritePropertyName("answers");
                    JsonSerializer.Serialize(writer, question.Answers, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("answers");
            if (question.CommentBoxOption.IsSet)
                if (question.CommentBoxOption.Value != null)
                {
                    writer.WriteString("commentBox", question.CommentBox);
                    //var __value = question.CommentBoxOption.Value;
                    //writer.WriteString("commentBox", __value);
                }
                else
                    writer.WriteNull("commentBox");

            if (question.DependencyStringOption.IsSet)
                if (question.DependencyStringOption.Value != null)
                {
                    writer.WriteString("dependencyString", question.DependencyString);
                    //var __value = question.DependencyStringOption.Value;
                    //writer.WriteString("dependencyString", __value);
                }
                else
                    writer.WriteNull("dependencyString");

            if (question.IdOption.IsSet)
                if (question.IdOption.Value != null)
                {
                    writer.WriteString("id", question.Id);
                    //var __value = question.IdOption.Value;
                    //writer.WriteString("id", __value);
                }
                else
                    writer.WriteNull("id");

            if (question.TextOption.IsSet)
                if (question.TextOption.Value != null)
                {
                    writer.WriteString("text", question.Text);
                    //var __value = question.TextOption.Value;
                    //writer.WriteString("text", __value);
                }
                else
                    writer.WriteNull("text");

            if (question.TypeOption.IsSet)
                if (question.TypeOption.Value != null)
                {
                    writer.WriteString("type", question.Type);
                    //var __value = question.TypeOption.Value;
                    //writer.WriteString("type", __value);
                }
                else
                    writer.WriteNull("type");

            if (question.UserinputOption.IsSet)
                if (question.UserinputOption.Value != null)
                {
                    writer.WritePropertyName("userinput");
                    JsonSerializer.Serialize(writer, question.Userinput, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("userinput");
        }
    }
}
