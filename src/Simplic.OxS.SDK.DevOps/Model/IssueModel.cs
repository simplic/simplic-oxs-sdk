// <auto-generated>
/*
 * Simplic.OxS.DevOps
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.DevOps
{
    /// <summary>
    /// IssueModel
    /// </summary>
    public partial class IssueModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public IssueModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueModel" /> class.
        /// </summary>
        /// <param name="attachments">attachments</param>
        /// <param name="id">id</param>
        /// <param name="issuer">issuer</param>
        /// <param name="project">project</param>
        /// <param name="title">title</param>
        /// <param name="type">type</param>
        //[JsonConstructor]
        public IssueModel(Option<List<AttachmentModel>> attachments = default, Option<string> id = default, Option<string> issuer = default, Option<ProjectModel> project = default, Option<string> title = default, Option<string> type = default)
        {
            AttachmentsOption = attachments;
            IdOption = id;
            IssuerOption = issuer;
            ProjectOption = project;
            TitleOption = title;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<AttachmentModel>>))]
        public Option<List<AttachmentModel>> AttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [JsonPropertyName("attachments")]
        public List<AttachmentModel>? Attachments { get { return this. AttachmentsOption; } set { this.AttachmentsOption = new Option<List<AttachmentModel>>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this. IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Issuer
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> IssuerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [JsonPropertyName("issuer")]
        public string? Issuer { get { return this. IssuerOption; } set { this.IssuerOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Project
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ProjectModel>))]
        public Option<ProjectModel> ProjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [JsonPropertyName("project")]
        public ProjectModel? Project { get { return this. ProjectOption; } set { this.ProjectOption = new Option<ProjectModel>(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this. TitleOption; } set { this.TitleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this. TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssueModel {\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IssueModel" />
    /// </summary>
    public class IssueModelJsonConverter : JsonConverter<IssueModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="IssueModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssueModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<AttachmentModel>> attachments = default;
            Option<string> id = default;
            Option<string> issuer = default;
            Option<ProjectModel> project = default;
            Option<string> title = default;
            Option<string> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attachments":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attachments = new Option<List<AttachmentModel>>(JsonSerializer.Deserialize<List<AttachmentModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "issuer":
                            issuer = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "project":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                project = new Option<ProjectModel>(JsonSerializer.Deserialize<ProjectModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "title":
                            title = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (project.IsSet && project.Value == null)
                throw new ArgumentNullException(nameof(project), "Property is not nullable for class IssueModel.");

            //2return new IssueModel(attachments, id, issuer, project, title, type);
            return new IssueModel(attachments, id, issuer, project, title, type);
        }

        /// <summary>
        /// Serializes a <see cref="IssueModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issueModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssueModel issueModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, issueModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssueModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issueModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, IssueModel issueModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issueModel.ProjectOption.IsSet && issueModel.Project == null)
                throw new ArgumentNullException(nameof(issueModel.Project), "Property is required for class IssueModel.");

            if (issueModel.AttachmentsOption.IsSet)
                if (issueModel.AttachmentsOption.Value != null)
                {
                    writer.WritePropertyName("attachments");
                    JsonSerializer.Serialize(writer, issueModel.Attachments, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachments");
            if (issueModel.IdOption.IsSet)
                if (issueModel.IdOption.Value != null)
                {
                    writer.WriteString("id", issueModel.Id);
                    //var __value = issueModel.IdOption.Value;
                    //writer.WriteString("id", __value);
                }
                else
                    writer.WriteNull("id");

            if (issueModel.IssuerOption.IsSet)
                if (issueModel.IssuerOption.Value != null)
                {
                    writer.WriteString("issuer", issueModel.Issuer);
                    //var __value = issueModel.IssuerOption.Value;
                    //writer.WriteString("issuer", __value);
                }
                else
                    writer.WriteNull("issuer");

            if (issueModel.ProjectOption.IsSet)
            {
                writer.WritePropertyName("project");
                JsonSerializer.Serialize(writer, issueModel.Project, jsonSerializerOptions);
            }
            if (issueModel.TitleOption.IsSet)
                if (issueModel.TitleOption.Value != null)
                {
                    writer.WriteString("title", issueModel.Title);
                    //var __value = issueModel.TitleOption.Value;
                    //writer.WriteString("title", __value);
                }
                else
                    writer.WriteNull("title");

            if (issueModel.TypeOption.IsSet)
                if (issueModel.TypeOption.Value != null)
                {
                    writer.WriteString("type", issueModel.Type);
                    //var __value = issueModel.TypeOption.Value;
                    //writer.WriteString("type", __value);
                }
                else
                    writer.WriteNull("type");
        }
    }
}
