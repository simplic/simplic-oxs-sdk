// <auto-generated>
/*
 * Simplic.OxS.Contact
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Contact
{
    /// <summary>
    /// CreateContactRequest
    /// </summary>
    public partial class CreateContactRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public CreateContactRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateContactRequest" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="functions">functions</param>
        /// <param name="matchCode">matchCode</param>
        //[JsonConstructor]
        public CreateContactRequest(Option<AddressModel> address = default, Option<List<string>> functions = default, Option<string> matchCode = default)
        {
            AddressOption = address;
            FunctionsOption = functions;
            MatchCodeOption = matchCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public AddressModel? Address { get { return this. AddressOption; } set { this.AddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of Functions
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> FunctionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Functions
        /// </summary>
        [JsonPropertyName("functions")]
        public List<string>? Functions { get { return this. FunctionsOption; } set { this.FunctionsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of MatchCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> MatchCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets MatchCode
        /// </summary>
        [JsonPropertyName("matchCode")]
        public string? MatchCode { get { return this. MatchCodeOption; } set { this.MatchCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateContactRequest {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Functions: ").Append(Functions).Append("\n");
            sb.Append("  MatchCode: ").Append(MatchCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateContactRequest" />
    /// </summary>
    public class CreateContactRequestJsonConverter : JsonConverter<CreateContactRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateContactRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateContactRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AddressModel> address = default;
            Option<List<string>> functions = default;
            Option<string> matchCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                address = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "functions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                functions = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "matchCode":
                            matchCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class CreateContactRequest.");

            //2return new CreateContactRequest(address, functions, matchCode);
            return new CreateContactRequest(address, functions, matchCode);
        }

        /// <summary>
        /// Serializes a <see cref="CreateContactRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createContactRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateContactRequest createContactRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createContactRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateContactRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createContactRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateContactRequest createContactRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createContactRequest.AddressOption.IsSet && createContactRequest.Address == null)
                throw new ArgumentNullException(nameof(createContactRequest.Address), "Property is required for class CreateContactRequest.");

            if (createContactRequest.AddressOption.IsSet)
            {
                writer.WritePropertyName("address");
                JsonSerializer.Serialize(writer, createContactRequest.Address, jsonSerializerOptions);
            }
            if (createContactRequest.FunctionsOption.IsSet)
                if (createContactRequest.FunctionsOption.Value != null)
                {
                    writer.WritePropertyName("functions");
                    JsonSerializer.Serialize(writer, createContactRequest.Functions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("functions");
            if (createContactRequest.MatchCodeOption.IsSet)
                if (createContactRequest.MatchCodeOption.Value != null)
                {
                    writer.WriteString("matchCode", createContactRequest.MatchCode);
                    //var __value = createContactRequest.MatchCodeOption.Value;
                    //writer.WriteString("matchCode", __value);
                }
                else
                    writer.WriteNull("matchCode");
        }
    }
}
