/*
 * Simplic.OxS.storage-management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Storage.Management
{
    /// <summary>
    /// CreateBookingRequest
    /// </summary>
    [DataContract(Name = "CreateBookingRequest")]
    public partial class CreateBookingRequest : IEquatable<CreateBookingRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBookingRequest" /> class.
        /// </summary>
        /// <param name="customerId">customerId.</param>
        /// <param name="locationId">locationId.</param>
        /// <param name="driverId">driverId.</param>
        /// <param name="vehicleId">vehicleId.</param>
        /// <param name="carrierId">carrierId.</param>
        /// <param name="externalVehicle">externalVehicle.</param>
        /// <param name="externalCarrier">externalCarrier.</param>
        /// <param name="externalDriver">externalDriver.</param>
        /// <param name="date">date.</param>
        /// <param name="signatureUser">signatureUser.</param>
        /// <param name="signatureDriver">signatureDriver.</param>
        /// <param name="ecoNumber">ecoNumber.</param>
        /// <param name="deliveryNote">deliveryNote.</param>
        /// <param name="loadingAids">loadingAids.</param>
        /// <param name="images">images.</param>
        public CreateBookingRequest(Guid? customerId = default(Guid?), Guid? locationId = default(Guid?), Guid? driverId = default(Guid?), Guid? vehicleId = default(Guid?), Guid? carrierId = default(Guid?), string externalVehicle = default(string), string externalCarrier = default(string), string externalDriver = default(string), DateTime? date = default(DateTime?), SignatureUserModel signatureUser = default(SignatureUserModel), SignatureUserModel signatureDriver = default(SignatureUserModel), string ecoNumber = default(string), string deliveryNote = default(string), List<LoadingAidRequest> loadingAids = default(List<LoadingAidRequest>), List<Guid> images = default(List<Guid>))
        {
            this.CustomerId = customerId;
            this.LocationId = locationId;
            this.DriverId = driverId;
            this.VehicleId = vehicleId;
            this.CarrierId = carrierId;
            this.ExternalVehicle = externalVehicle;
            this.ExternalCarrier = externalCarrier;
            this.ExternalDriver = externalDriver;
            this.Date = date;
            this.SignatureUser = signatureUser;
            this.SignatureDriver = signatureDriver;
            this.EcoNumber = ecoNumber;
            this.DeliveryNote = deliveryNote;
            this.LoadingAids = loadingAids;
            this.Images = images;
        }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name = "customerId", EmitDefaultValue = true)]
        public Guid? CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "locationId", EmitDefaultValue = true)]
        public Guid? LocationId { get; set; }

        /// <summary>
        /// Gets or Sets DriverId
        /// </summary>
        [DataMember(Name = "driverId", EmitDefaultValue = true)]
        public Guid? DriverId { get; set; }

        /// <summary>
        /// Gets or Sets VehicleId
        /// </summary>
        [DataMember(Name = "vehicleId", EmitDefaultValue = true)]
        public Guid? VehicleId { get; set; }

        /// <summary>
        /// Gets or Sets CarrierId
        /// </summary>
        [DataMember(Name = "carrierId", EmitDefaultValue = true)]
        public Guid? CarrierId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalVehicle
        /// </summary>
        [DataMember(Name = "externalVehicle", EmitDefaultValue = true)]
        public string ExternalVehicle { get; set; }

        /// <summary>
        /// Gets or Sets ExternalCarrier
        /// </summary>
        [DataMember(Name = "externalCarrier", EmitDefaultValue = true)]
        public string ExternalCarrier { get; set; }

        /// <summary>
        /// Gets or Sets ExternalDriver
        /// </summary>
        [DataMember(Name = "externalDriver", EmitDefaultValue = true)]
        public string ExternalDriver { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets SignatureUser
        /// </summary>
        [DataMember(Name = "signatureUser", EmitDefaultValue = false)]
        public SignatureUserModel SignatureUser { get; set; }

        /// <summary>
        /// Gets or Sets SignatureDriver
        /// </summary>
        [DataMember(Name = "signatureDriver", EmitDefaultValue = false)]
        public SignatureUserModel SignatureDriver { get; set; }

        /// <summary>
        /// Gets or Sets EcoNumber
        /// </summary>
        [DataMember(Name = "ecoNumber", EmitDefaultValue = true)]
        public string EcoNumber { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryNote
        /// </summary>
        [DataMember(Name = "deliveryNote", EmitDefaultValue = true)]
        public string DeliveryNote { get; set; }

        /// <summary>
        /// Gets or Sets LoadingAids
        /// </summary>
        [DataMember(Name = "loadingAids", EmitDefaultValue = true)]
        public List<LoadingAidRequest> LoadingAids { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name = "images", EmitDefaultValue = true)]
        public List<Guid> Images { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateBookingRequest {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  DriverId: ").Append(DriverId).Append("\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  ExternalVehicle: ").Append(ExternalVehicle).Append("\n");
            sb.Append("  ExternalCarrier: ").Append(ExternalCarrier).Append("\n");
            sb.Append("  ExternalDriver: ").Append(ExternalDriver).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SignatureUser: ").Append(SignatureUser).Append("\n");
            sb.Append("  SignatureDriver: ").Append(SignatureDriver).Append("\n");
            sb.Append("  EcoNumber: ").Append(EcoNumber).Append("\n");
            sb.Append("  DeliveryNote: ").Append(DeliveryNote).Append("\n");
            sb.Append("  LoadingAids: ").Append(LoadingAids).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateBookingRequest);
        }

        /// <summary>
        /// Returns true if CreateBookingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateBookingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateBookingRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.DriverId == input.DriverId ||
                    (this.DriverId != null &&
                    this.DriverId.Equals(input.DriverId))
                ) && 
                (
                    this.VehicleId == input.VehicleId ||
                    (this.VehicleId != null &&
                    this.VehicleId.Equals(input.VehicleId))
                ) && 
                (
                    this.CarrierId == input.CarrierId ||
                    (this.CarrierId != null &&
                    this.CarrierId.Equals(input.CarrierId))
                ) && 
                (
                    this.ExternalVehicle == input.ExternalVehicle ||
                    (this.ExternalVehicle != null &&
                    this.ExternalVehicle.Equals(input.ExternalVehicle))
                ) && 
                (
                    this.ExternalCarrier == input.ExternalCarrier ||
                    (this.ExternalCarrier != null &&
                    this.ExternalCarrier.Equals(input.ExternalCarrier))
                ) && 
                (
                    this.ExternalDriver == input.ExternalDriver ||
                    (this.ExternalDriver != null &&
                    this.ExternalDriver.Equals(input.ExternalDriver))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.SignatureUser == input.SignatureUser ||
                    (this.SignatureUser != null &&
                    this.SignatureUser.Equals(input.SignatureUser))
                ) && 
                (
                    this.SignatureDriver == input.SignatureDriver ||
                    (this.SignatureDriver != null &&
                    this.SignatureDriver.Equals(input.SignatureDriver))
                ) && 
                (
                    this.EcoNumber == input.EcoNumber ||
                    (this.EcoNumber != null &&
                    this.EcoNumber.Equals(input.EcoNumber))
                ) && 
                (
                    this.DeliveryNote == input.DeliveryNote ||
                    (this.DeliveryNote != null &&
                    this.DeliveryNote.Equals(input.DeliveryNote))
                ) && 
                (
                    this.LoadingAids == input.LoadingAids ||
                    this.LoadingAids != null &&
                    input.LoadingAids != null &&
                    this.LoadingAids.SequenceEqual(input.LoadingAids)
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                if (this.LocationId != null)
                {
                    hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                }
                if (this.DriverId != null)
                {
                    hashCode = (hashCode * 59) + this.DriverId.GetHashCode();
                }
                if (this.VehicleId != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleId.GetHashCode();
                }
                if (this.CarrierId != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierId.GetHashCode();
                }
                if (this.ExternalVehicle != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalVehicle.GetHashCode();
                }
                if (this.ExternalCarrier != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalCarrier.GetHashCode();
                }
                if (this.ExternalDriver != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalDriver.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.SignatureUser != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureUser.GetHashCode();
                }
                if (this.SignatureDriver != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureDriver.GetHashCode();
                }
                if (this.EcoNumber != null)
                {
                    hashCode = (hashCode * 59) + this.EcoNumber.GetHashCode();
                }
                if (this.DeliveryNote != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryNote.GetHashCode();
                }
                if (this.LoadingAids != null)
                {
                    hashCode = (hashCode * 59) + this.LoadingAids.GetHashCode();
                }
                if (this.Images != null)
                {
                    hashCode = (hashCode * 59) + this.Images.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
