/*
 * Simplic.OxS.storage-management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Storage.Management
{
    /// <summary>
    /// BookingModel
    /// </summary>
    [DataContract(Name = "BookingModel")]
    public partial class BookingModel : IEquatable<BookingModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookingModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="customer">customer.</param>
        /// <param name="location">location.</param>
        /// <param name="driver">driver.</param>
        /// <param name="vehicle">vehicle.</param>
        /// <param name="carrier">carrier.</param>
        /// <param name="externalVehicle">externalVehicle.</param>
        /// <param name="externalCarrier">externalCarrier.</param>
        /// <param name="externalDriver">externalDriver.</param>
        /// <param name="date">date.</param>
        /// <param name="signatureUser">signatureUser.</param>
        /// <param name="signatureDriver">signatureDriver.</param>
        /// <param name="ecoNumber">ecoNumber.</param>
        /// <param name="deliveryNote">deliveryNote.</param>
        /// <param name="loadingAids">loadingAids.</param>
        /// <param name="images">images.</param>
        /// <param name="createDateTime">createDateTime.</param>
        /// <param name="createUserId">createUserId.</param>
        /// <param name="createUserName">createUserName.</param>
        /// <param name="updateDateTime">updateDateTime.</param>
        /// <param name="updateUserId">updateUserId.</param>
        /// <param name="updateUserName">updateUserName.</param>
        public BookingModel(Guid id = default(Guid), bool isDeleted = default(bool), Guid organizationId = default(Guid), AddressModel customer = default(AddressModel), AddressModel location = default(AddressModel), AddressModel driver = default(AddressModel), BookingVehicleModel vehicle = default(BookingVehicleModel), AddressModel carrier = default(AddressModel), string externalVehicle = default(string), string externalCarrier = default(string), string externalDriver = default(string), DateTime? date = default(DateTime?), SignatureUserModel signatureUser = default(SignatureUserModel), SignatureUserModel signatureDriver = default(SignatureUserModel), string ecoNumber = default(string), string deliveryNote = default(string), List<LoadingAidModel> loadingAids = default(List<LoadingAidModel>), List<Guid> images = default(List<Guid>), DateTime createDateTime = default(DateTime), Guid? createUserId = default(Guid?), string createUserName = default(string), DateTime updateDateTime = default(DateTime), Guid? updateUserId = default(Guid?), string updateUserName = default(string))
        {
            this.Id = id;
            this.IsDeleted = isDeleted;
            this.OrganizationId = organizationId;
            this.Customer = customer;
            this.Location = location;
            this.Driver = driver;
            this.Vehicle = vehicle;
            this.Carrier = carrier;
            this.ExternalVehicle = externalVehicle;
            this.ExternalCarrier = externalCarrier;
            this.ExternalDriver = externalDriver;
            this.Date = date;
            this.SignatureUser = signatureUser;
            this.SignatureDriver = signatureDriver;
            this.EcoNumber = ecoNumber;
            this.DeliveryNote = deliveryNote;
            this.LoadingAids = loadingAids;
            this.Images = images;
            this.CreateDateTime = createDateTime;
            this.CreateUserId = createUserId;
            this.CreateUserName = createUserName;
            this.UpdateDateTime = updateDateTime;
            this.UpdateUserId = updateUserId;
            this.UpdateUserName = updateUserName;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organizationId", EmitDefaultValue = false)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public AddressModel Customer { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public AddressModel Location { get; set; }

        /// <summary>
        /// Gets or Sets Driver
        /// </summary>
        [DataMember(Name = "driver", EmitDefaultValue = false)]
        public AddressModel Driver { get; set; }

        /// <summary>
        /// Gets or Sets Vehicle
        /// </summary>
        [DataMember(Name = "vehicle", EmitDefaultValue = false)]
        public BookingVehicleModel Vehicle { get; set; }

        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name = "carrier", EmitDefaultValue = false)]
        public AddressModel Carrier { get; set; }

        /// <summary>
        /// Gets or Sets ExternalVehicle
        /// </summary>
        [DataMember(Name = "externalVehicle", EmitDefaultValue = true)]
        public string ExternalVehicle { get; set; }

        /// <summary>
        /// Gets or Sets ExternalCarrier
        /// </summary>
        [DataMember(Name = "externalCarrier", EmitDefaultValue = true)]
        public string ExternalCarrier { get; set; }

        /// <summary>
        /// Gets or Sets ExternalDriver
        /// </summary>
        [DataMember(Name = "externalDriver", EmitDefaultValue = true)]
        public string ExternalDriver { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets SignatureUser
        /// </summary>
        [DataMember(Name = "signatureUser", EmitDefaultValue = false)]
        public SignatureUserModel SignatureUser { get; set; }

        /// <summary>
        /// Gets or Sets SignatureDriver
        /// </summary>
        [DataMember(Name = "signatureDriver", EmitDefaultValue = false)]
        public SignatureUserModel SignatureDriver { get; set; }

        /// <summary>
        /// Gets or Sets EcoNumber
        /// </summary>
        [DataMember(Name = "ecoNumber", EmitDefaultValue = true)]
        public string EcoNumber { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryNote
        /// </summary>
        [DataMember(Name = "deliveryNote", EmitDefaultValue = true)]
        public string DeliveryNote { get; set; }

        /// <summary>
        /// Gets or Sets LoadingAids
        /// </summary>
        [DataMember(Name = "loadingAids", EmitDefaultValue = true)]
        public List<LoadingAidModel> LoadingAids { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name = "images", EmitDefaultValue = true)]
        public List<Guid> Images { get; set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [DataMember(Name = "createDateTime", EmitDefaultValue = false)]
        public DateTime CreateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreateUserId
        /// </summary>
        [DataMember(Name = "createUserId", EmitDefaultValue = true)]
        public Guid? CreateUserId { get; set; }

        /// <summary>
        /// Gets or Sets CreateUserName
        /// </summary>
        [DataMember(Name = "createUserName", EmitDefaultValue = true)]
        public string CreateUserName { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDateTime
        /// </summary>
        [DataMember(Name = "updateDateTime", EmitDefaultValue = false)]
        public DateTime UpdateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets UpdateUserId
        /// </summary>
        [DataMember(Name = "updateUserId", EmitDefaultValue = true)]
        public Guid? UpdateUserId { get; set; }

        /// <summary>
        /// Gets or Sets UpdateUserName
        /// </summary>
        [DataMember(Name = "updateUserName", EmitDefaultValue = true)]
        public string UpdateUserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BookingModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  Vehicle: ").Append(Vehicle).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  ExternalVehicle: ").Append(ExternalVehicle).Append("\n");
            sb.Append("  ExternalCarrier: ").Append(ExternalCarrier).Append("\n");
            sb.Append("  ExternalDriver: ").Append(ExternalDriver).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SignatureUser: ").Append(SignatureUser).Append("\n");
            sb.Append("  SignatureDriver: ").Append(SignatureDriver).Append("\n");
            sb.Append("  EcoNumber: ").Append(EcoNumber).Append("\n");
            sb.Append("  DeliveryNote: ").Append(DeliveryNote).Append("\n");
            sb.Append("  LoadingAids: ").Append(LoadingAids).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  CreateUserName: ").Append(CreateUserName).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("  UpdateUserName: ").Append(UpdateUserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookingModel);
        }

        /// <summary>
        /// Returns true if BookingModel instances are equal
        /// </summary>
        /// <param name="input">Instance of BookingModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Driver == input.Driver ||
                    (this.Driver != null &&
                    this.Driver.Equals(input.Driver))
                ) && 
                (
                    this.Vehicle == input.Vehicle ||
                    (this.Vehicle != null &&
                    this.Vehicle.Equals(input.Vehicle))
                ) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.ExternalVehicle == input.ExternalVehicle ||
                    (this.ExternalVehicle != null &&
                    this.ExternalVehicle.Equals(input.ExternalVehicle))
                ) && 
                (
                    this.ExternalCarrier == input.ExternalCarrier ||
                    (this.ExternalCarrier != null &&
                    this.ExternalCarrier.Equals(input.ExternalCarrier))
                ) && 
                (
                    this.ExternalDriver == input.ExternalDriver ||
                    (this.ExternalDriver != null &&
                    this.ExternalDriver.Equals(input.ExternalDriver))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.SignatureUser == input.SignatureUser ||
                    (this.SignatureUser != null &&
                    this.SignatureUser.Equals(input.SignatureUser))
                ) && 
                (
                    this.SignatureDriver == input.SignatureDriver ||
                    (this.SignatureDriver != null &&
                    this.SignatureDriver.Equals(input.SignatureDriver))
                ) && 
                (
                    this.EcoNumber == input.EcoNumber ||
                    (this.EcoNumber != null &&
                    this.EcoNumber.Equals(input.EcoNumber))
                ) && 
                (
                    this.DeliveryNote == input.DeliveryNote ||
                    (this.DeliveryNote != null &&
                    this.DeliveryNote.Equals(input.DeliveryNote))
                ) && 
                (
                    this.LoadingAids == input.LoadingAids ||
                    this.LoadingAids != null &&
                    input.LoadingAids != null &&
                    this.LoadingAids.SequenceEqual(input.LoadingAids)
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.CreateDateTime == input.CreateDateTime ||
                    (this.CreateDateTime != null &&
                    this.CreateDateTime.Equals(input.CreateDateTime))
                ) && 
                (
                    this.CreateUserId == input.CreateUserId ||
                    (this.CreateUserId != null &&
                    this.CreateUserId.Equals(input.CreateUserId))
                ) && 
                (
                    this.CreateUserName == input.CreateUserName ||
                    (this.CreateUserName != null &&
                    this.CreateUserName.Equals(input.CreateUserName))
                ) && 
                (
                    this.UpdateDateTime == input.UpdateDateTime ||
                    (this.UpdateDateTime != null &&
                    this.UpdateDateTime.Equals(input.UpdateDateTime))
                ) && 
                (
                    this.UpdateUserId == input.UpdateUserId ||
                    (this.UpdateUserId != null &&
                    this.UpdateUserId.Equals(input.UpdateUserId))
                ) && 
                (
                    this.UpdateUserName == input.UpdateUserName ||
                    (this.UpdateUserName != null &&
                    this.UpdateUserName.Equals(input.UpdateUserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                if (this.OrganizationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationId.GetHashCode();
                }
                if (this.Customer != null)
                {
                    hashCode = (hashCode * 59) + this.Customer.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Driver != null)
                {
                    hashCode = (hashCode * 59) + this.Driver.GetHashCode();
                }
                if (this.Vehicle != null)
                {
                    hashCode = (hashCode * 59) + this.Vehicle.GetHashCode();
                }
                if (this.Carrier != null)
                {
                    hashCode = (hashCode * 59) + this.Carrier.GetHashCode();
                }
                if (this.ExternalVehicle != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalVehicle.GetHashCode();
                }
                if (this.ExternalCarrier != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalCarrier.GetHashCode();
                }
                if (this.ExternalDriver != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalDriver.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.SignatureUser != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureUser.GetHashCode();
                }
                if (this.SignatureDriver != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureDriver.GetHashCode();
                }
                if (this.EcoNumber != null)
                {
                    hashCode = (hashCode * 59) + this.EcoNumber.GetHashCode();
                }
                if (this.DeliveryNote != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryNote.GetHashCode();
                }
                if (this.LoadingAids != null)
                {
                    hashCode = (hashCode * 59) + this.LoadingAids.GetHashCode();
                }
                if (this.Images != null)
                {
                    hashCode = (hashCode * 59) + this.Images.GetHashCode();
                }
                if (this.CreateDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreateDateTime.GetHashCode();
                }
                if (this.CreateUserId != null)
                {
                    hashCode = (hashCode * 59) + this.CreateUserId.GetHashCode();
                }
                if (this.CreateUserName != null)
                {
                    hashCode = (hashCode * 59) + this.CreateUserName.GetHashCode();
                }
                if (this.UpdateDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateDateTime.GetHashCode();
                }
                if (this.UpdateUserId != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateUserId.GetHashCode();
                }
                if (this.UpdateUserName != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateUserName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
