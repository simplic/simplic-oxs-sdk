/*
 * Simplic.OxS.storage-management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Storage.Management
{
    /// <summary>
    /// LoadingAidBookingResponse
    /// </summary>
    [DataContract(Name = "LoadingAidBookingResponse")]
    public partial class LoadingAidBookingResponse : IEquatable<LoadingAidBookingResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadingAidBookingResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="sourceAccount">sourceAccount.</param>
        /// <param name="destinationAccount">destinationAccount.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="loadingAidType">loadingAidType.</param>
        /// <param name="note">note.</param>
        /// <param name="globalBookingId">globalBookingId.</param>
        /// <param name="referenceId">referenceId.</param>
        /// <param name="referenceType">referenceType.</param>
        /// <param name="status">status.</param>
        /// <param name="dateTime">dateTime.</param>
        /// <param name="fault">fault.</param>
        /// <param name="tags">tags.</param>
        /// <param name="qualityType">qualityType.</param>
        /// <param name="voucher">voucher.</param>
        /// <param name="resources">resources.</param>
        public LoadingAidBookingResponse(Guid id = default(Guid), LoadingAidBookingBookingAccountResponse sourceAccount = default(LoadingAidBookingBookingAccountResponse), LoadingAidBookingBookingAccountResponse destinationAccount = default(LoadingAidBookingBookingAccountResponse), double quantity = default(double), LoadingAidTypeModel loadingAidType = default(LoadingAidTypeModel), string note = default(string), Guid? globalBookingId = default(Guid?), Guid? referenceId = default(Guid?), string referenceType = default(string), LoadingAidBookingStatusResponse status = default(LoadingAidBookingStatusResponse), DateTime dateTime = default(DateTime), string fault = default(string), List<LoadingAidBookingTagSubsetResponse> tags = default(List<LoadingAidBookingTagSubsetResponse>), LoadingAidBookingQualityTypeSubsetResponse qualityType = default(LoadingAidBookingQualityTypeSubsetResponse), LoadingAidVoucherResponse voucher = default(LoadingAidVoucherResponse), List<LoadingAidBookingResourceResponse> resources = default(List<LoadingAidBookingResourceResponse>))
        {
            this.Id = id;
            this.SourceAccount = sourceAccount;
            this.DestinationAccount = destinationAccount;
            this.Quantity = quantity;
            this.LoadingAidType = loadingAidType;
            this.Note = note;
            this.GlobalBookingId = globalBookingId;
            this.ReferenceId = referenceId;
            this.ReferenceType = referenceType;
            this.Status = status;
            this.DateTime = dateTime;
            this.Fault = fault;
            this.Tags = tags;
            this.QualityType = qualityType;
            this.Voucher = voucher;
            this.Resources = resources;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets SourceAccount
        /// </summary>
        [DataMember(Name = "sourceAccount", EmitDefaultValue = false)]
        public LoadingAidBookingBookingAccountResponse SourceAccount { get; set; }

        /// <summary>
        /// Gets or Sets DestinationAccount
        /// </summary>
        [DataMember(Name = "destinationAccount", EmitDefaultValue = false)]
        public LoadingAidBookingBookingAccountResponse DestinationAccount { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// Gets or Sets LoadingAidType
        /// </summary>
        [DataMember(Name = "loadingAidType", EmitDefaultValue = false)]
        public LoadingAidTypeModel LoadingAidType { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = true)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets GlobalBookingId
        /// </summary>
        [DataMember(Name = "globalBookingId", EmitDefaultValue = true)]
        public Guid? GlobalBookingId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceId
        /// </summary>
        [DataMember(Name = "referenceId", EmitDefaultValue = true)]
        public Guid? ReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceType
        /// </summary>
        [DataMember(Name = "referenceType", EmitDefaultValue = true)]
        public string ReferenceType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public LoadingAidBookingStatusResponse Status { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Gets or Sets Fault
        /// </summary>
        [DataMember(Name = "fault", EmitDefaultValue = true)]
        public string Fault { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<LoadingAidBookingTagSubsetResponse> Tags { get; set; }

        /// <summary>
        /// Gets or Sets QualityType
        /// </summary>
        [DataMember(Name = "qualityType", EmitDefaultValue = false)]
        public LoadingAidBookingQualityTypeSubsetResponse QualityType { get; set; }

        /// <summary>
        /// Gets or Sets Voucher
        /// </summary>
        [DataMember(Name = "voucher", EmitDefaultValue = false)]
        public LoadingAidVoucherResponse Voucher { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name = "resources", EmitDefaultValue = true)]
        public List<LoadingAidBookingResourceResponse> Resources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadingAidBookingResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SourceAccount: ").Append(SourceAccount).Append("\n");
            sb.Append("  DestinationAccount: ").Append(DestinationAccount).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  LoadingAidType: ").Append(LoadingAidType).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  GlobalBookingId: ").Append(GlobalBookingId).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  ReferenceType: ").Append(ReferenceType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Fault: ").Append(Fault).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  QualityType: ").Append(QualityType).Append("\n");
            sb.Append("  Voucher: ").Append(Voucher).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoadingAidBookingResponse);
        }

        /// <summary>
        /// Returns true if LoadingAidBookingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LoadingAidBookingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoadingAidBookingResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SourceAccount == input.SourceAccount ||
                    (this.SourceAccount != null &&
                    this.SourceAccount.Equals(input.SourceAccount))
                ) && 
                (
                    this.DestinationAccount == input.DestinationAccount ||
                    (this.DestinationAccount != null &&
                    this.DestinationAccount.Equals(input.DestinationAccount))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.LoadingAidType == input.LoadingAidType ||
                    (this.LoadingAidType != null &&
                    this.LoadingAidType.Equals(input.LoadingAidType))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.GlobalBookingId == input.GlobalBookingId ||
                    (this.GlobalBookingId != null &&
                    this.GlobalBookingId.Equals(input.GlobalBookingId))
                ) && 
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) && 
                (
                    this.ReferenceType == input.ReferenceType ||
                    (this.ReferenceType != null &&
                    this.ReferenceType.Equals(input.ReferenceType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.Fault == input.Fault ||
                    (this.Fault != null &&
                    this.Fault.Equals(input.Fault))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.QualityType == input.QualityType ||
                    (this.QualityType != null &&
                    this.QualityType.Equals(input.QualityType))
                ) && 
                (
                    this.Voucher == input.Voucher ||
                    (this.Voucher != null &&
                    this.Voucher.Equals(input.Voucher))
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.SourceAccount != null)
                {
                    hashCode = (hashCode * 59) + this.SourceAccount.GetHashCode();
                }
                if (this.DestinationAccount != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationAccount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.LoadingAidType != null)
                {
                    hashCode = (hashCode * 59) + this.LoadingAidType.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                if (this.GlobalBookingId != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalBookingId.GetHashCode();
                }
                if (this.ReferenceId != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceId.GetHashCode();
                }
                if (this.ReferenceType != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceType.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                if (this.Fault != null)
                {
                    hashCode = (hashCode * 59) + this.Fault.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.QualityType != null)
                {
                    hashCode = (hashCode * 59) + this.QualityType.GetHashCode();
                }
                if (this.Voucher != null)
                {
                    hashCode = (hashCode * 59) + this.Voucher.GetHashCode();
                }
                if (this.Resources != null)
                {
                    hashCode = (hashCode * 59) + this.Resources.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
