/*
 * Simplic.OxS.storage-management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Storage.Management
{
    /// <summary>
    /// CreateLoadingAidBookingHeadAccountRequest
    /// </summary>
    [DataContract(Name = "CreateLoadingAidBookingHeadAccountRequest")]
    public partial class CreateLoadingAidBookingHeadAccountRequest : IEquatable<CreateLoadingAidBookingHeadAccountRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLoadingAidBookingHeadAccountRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateLoadingAidBookingHeadAccountRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLoadingAidBookingHeadAccountRequest" /> class.
        /// </summary>
        /// <param name="contactId">contactId (required).</param>
        /// <param name="personalAccountId">personalAccountId.</param>
        /// <param name="name">name.</param>
        /// <param name="number">number.</param>
        /// <param name="loadingAidBookingAccounts">loadingAidBookingAccounts (required).</param>
        public CreateLoadingAidBookingHeadAccountRequest(Guid contactId = default(Guid), Guid? personalAccountId = default(Guid?), string name = default(string), string number = default(string), List<Guid> loadingAidBookingAccounts = default(List<Guid>))
        {
            this.ContactId = contactId;
            // to ensure "loadingAidBookingAccounts" is required (not null)
            if (loadingAidBookingAccounts == null)
            {
                throw new ArgumentNullException("loadingAidBookingAccounts is a required property for CreateLoadingAidBookingHeadAccountRequest and cannot be null");
            }
            this.LoadingAidBookingAccounts = loadingAidBookingAccounts;
            this.PersonalAccountId = personalAccountId;
            this.Name = name;
            this.Number = number;
        }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [DataMember(Name = "contactId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ContactId { get; set; }

        /// <summary>
        /// Gets or Sets PersonalAccountId
        /// </summary>
        [DataMember(Name = "personalAccountId", EmitDefaultValue = true)]
        public Guid? PersonalAccountId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets LoadingAidBookingAccounts
        /// </summary>
        [DataMember(Name = "loadingAidBookingAccounts", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> LoadingAidBookingAccounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateLoadingAidBookingHeadAccountRequest {\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  PersonalAccountId: ").Append(PersonalAccountId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  LoadingAidBookingAccounts: ").Append(LoadingAidBookingAccounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateLoadingAidBookingHeadAccountRequest);
        }

        /// <summary>
        /// Returns true if CreateLoadingAidBookingHeadAccountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateLoadingAidBookingHeadAccountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateLoadingAidBookingHeadAccountRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.PersonalAccountId == input.PersonalAccountId ||
                    (this.PersonalAccountId != null &&
                    this.PersonalAccountId.Equals(input.PersonalAccountId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.LoadingAidBookingAccounts == input.LoadingAidBookingAccounts ||
                    this.LoadingAidBookingAccounts != null &&
                    input.LoadingAidBookingAccounts != null &&
                    this.LoadingAidBookingAccounts.SequenceEqual(input.LoadingAidBookingAccounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactId != null)
                {
                    hashCode = (hashCode * 59) + this.ContactId.GetHashCode();
                }
                if (this.PersonalAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.PersonalAccountId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.LoadingAidBookingAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.LoadingAidBookingAccounts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
