/*
 * Simplic.OxS.storage-management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Storage.Management
{
    /// <summary>
    /// CreateLoadingAidBookingRequest
    /// </summary>
    [DataContract(Name = "CreateLoadingAidBookingRequest")]
    public partial class CreateLoadingAidBookingRequest : IEquatable<CreateLoadingAidBookingRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLoadingAidBookingRequest" /> class.
        /// </summary>
        /// <param name="sourceAccountId">sourceAccountId.</param>
        /// <param name="destinationAccountId">destinationAccountId.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="loadingAidTypeId">loadingAidTypeId.</param>
        /// <param name="note">note.</param>
        /// <param name="reason">reason.</param>
        /// <param name="globalBookingId">globalBookingId.</param>
        /// <param name="referenceId">referenceId.</param>
        /// <param name="referenceType">referenceType.</param>
        public CreateLoadingAidBookingRequest(Guid sourceAccountId = default(Guid), Guid destinationAccountId = default(Guid), int quantity = default(int), Guid loadingAidTypeId = default(Guid), string note = default(string), string reason = default(string), Guid? globalBookingId = default(Guid?), Guid? referenceId = default(Guid?), string referenceType = default(string))
        {
            this.SourceAccountId = sourceAccountId;
            this.DestinationAccountId = destinationAccountId;
            this.Quantity = quantity;
            this.LoadingAidTypeId = loadingAidTypeId;
            this.Note = note;
            this.Reason = reason;
            this.GlobalBookingId = globalBookingId;
            this.ReferenceId = referenceId;
            this.ReferenceType = referenceType;
        }

        /// <summary>
        /// Gets or Sets SourceAccountId
        /// </summary>
        [DataMember(Name = "sourceAccountId", EmitDefaultValue = false)]
        public Guid SourceAccountId { get; set; }

        /// <summary>
        /// Gets or Sets DestinationAccountId
        /// </summary>
        [DataMember(Name = "destinationAccountId", EmitDefaultValue = false)]
        public Guid DestinationAccountId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets LoadingAidTypeId
        /// </summary>
        [DataMember(Name = "loadingAidTypeId", EmitDefaultValue = false)]
        public Guid LoadingAidTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = true)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "reason", EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets GlobalBookingId
        /// </summary>
        [DataMember(Name = "globalBookingId", EmitDefaultValue = true)]
        public Guid? GlobalBookingId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceId
        /// </summary>
        [DataMember(Name = "referenceId", EmitDefaultValue = true)]
        public Guid? ReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceType
        /// </summary>
        [DataMember(Name = "referenceType", EmitDefaultValue = true)]
        public string ReferenceType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateLoadingAidBookingRequest {\n");
            sb.Append("  SourceAccountId: ").Append(SourceAccountId).Append("\n");
            sb.Append("  DestinationAccountId: ").Append(DestinationAccountId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  LoadingAidTypeId: ").Append(LoadingAidTypeId).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  GlobalBookingId: ").Append(GlobalBookingId).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  ReferenceType: ").Append(ReferenceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateLoadingAidBookingRequest);
        }

        /// <summary>
        /// Returns true if CreateLoadingAidBookingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateLoadingAidBookingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateLoadingAidBookingRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SourceAccountId == input.SourceAccountId ||
                    (this.SourceAccountId != null &&
                    this.SourceAccountId.Equals(input.SourceAccountId))
                ) && 
                (
                    this.DestinationAccountId == input.DestinationAccountId ||
                    (this.DestinationAccountId != null &&
                    this.DestinationAccountId.Equals(input.DestinationAccountId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.LoadingAidTypeId == input.LoadingAidTypeId ||
                    (this.LoadingAidTypeId != null &&
                    this.LoadingAidTypeId.Equals(input.LoadingAidTypeId))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.GlobalBookingId == input.GlobalBookingId ||
                    (this.GlobalBookingId != null &&
                    this.GlobalBookingId.Equals(input.GlobalBookingId))
                ) && 
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) && 
                (
                    this.ReferenceType == input.ReferenceType ||
                    (this.ReferenceType != null &&
                    this.ReferenceType.Equals(input.ReferenceType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceAccountId.GetHashCode();
                }
                if (this.DestinationAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationAccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.LoadingAidTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.LoadingAidTypeId.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.GlobalBookingId != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalBookingId.GetHashCode();
                }
                if (this.ReferenceId != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceId.GetHashCode();
                }
                if (this.ReferenceType != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Quantity (int) maximum
            if (this.Quantity > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value less than or equal to 2147483647.", new [] { "Quantity" });
            }

            // Quantity (int) minimum
            if (this.Quantity < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
