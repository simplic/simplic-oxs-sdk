/*
 * Simplic.OxS.storage-management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Storage.Management
{
    /// <summary>
    /// LoadingAidBookingFromShipmentRequest
    /// </summary>
    [DataContract(Name = "LoadingAidBookingFromShipmentRequest")]
    public partial class LoadingAidBookingFromShipmentRequest : IEquatable<LoadingAidBookingFromShipmentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadingAidBookingFromShipmentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoadingAidBookingFromShipmentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadingAidBookingFromShipmentRequest" /> class.
        /// </summary>
        /// <param name="referenceId">referenceId.</param>
        /// <param name="referenceType">referenceType.</param>
        /// <param name="globalBookingId">globalBookingId.</param>
        /// <param name="loadAddressContactId">loadAddressContactId (required).</param>
        /// <param name="deliveryAddressContactId">deliveryAddressContactId (required).</param>
        /// <param name="carrierContactId">carrierContactId.</param>
        /// <param name="carrierPickedUp">carrierPickedUp.</param>
        /// <param name="broughtToLoadAddress">broughtToLoadAddress.</param>
        /// <param name="tookFromDeliveryAddress">tookFromDeliveryAddress.</param>
        /// <param name="carrierDelivered">carrierDelivered.</param>
        /// <param name="organizationContactId">organizationContactId (required).</param>
        /// <param name="items">items (required).</param>
        public LoadingAidBookingFromShipmentRequest(Guid? referenceId = default(Guid?), string referenceType = default(string), Guid? globalBookingId = default(Guid?), Guid loadAddressContactId = default(Guid), Guid deliveryAddressContactId = default(Guid), Guid? carrierContactId = default(Guid?), bool? carrierPickedUp = default(bool?), bool broughtToLoadAddress = default(bool), bool tookFromDeliveryAddress = default(bool), bool? carrierDelivered = default(bool?), Guid organizationContactId = default(Guid), List<LoadingAidItemRequest> items = default(List<LoadingAidItemRequest>))
        {
            this.LoadAddressContactId = loadAddressContactId;
            this.DeliveryAddressContactId = deliveryAddressContactId;
            this.OrganizationContactId = organizationContactId;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for LoadingAidBookingFromShipmentRequest and cannot be null");
            }
            this.Items = items;
            this.ReferenceId = referenceId;
            this.ReferenceType = referenceType;
            this.GlobalBookingId = globalBookingId;
            this.CarrierContactId = carrierContactId;
            this.CarrierPickedUp = carrierPickedUp;
            this.BroughtToLoadAddress = broughtToLoadAddress;
            this.TookFromDeliveryAddress = tookFromDeliveryAddress;
            this.CarrierDelivered = carrierDelivered;
        }

        /// <summary>
        /// Gets or Sets ReferenceId
        /// </summary>
        [DataMember(Name = "referenceId", EmitDefaultValue = true)]
        public Guid? ReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceType
        /// </summary>
        [DataMember(Name = "referenceType", EmitDefaultValue = true)]
        public string ReferenceType { get; set; }

        /// <summary>
        /// Gets or Sets GlobalBookingId
        /// </summary>
        [DataMember(Name = "globalBookingId", EmitDefaultValue = true)]
        public Guid? GlobalBookingId { get; set; }

        /// <summary>
        /// Gets or Sets LoadAddressContactId
        /// </summary>
        [DataMember(Name = "loadAddressContactId", IsRequired = true, EmitDefaultValue = true)]
        public Guid LoadAddressContactId { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryAddressContactId
        /// </summary>
        [DataMember(Name = "deliveryAddressContactId", IsRequired = true, EmitDefaultValue = true)]
        public Guid DeliveryAddressContactId { get; set; }

        /// <summary>
        /// Gets or Sets CarrierContactId
        /// </summary>
        [DataMember(Name = "carrierContactId", EmitDefaultValue = true)]
        public Guid? CarrierContactId { get; set; }

        /// <summary>
        /// Gets or Sets CarrierPickedUp
        /// </summary>
        [DataMember(Name = "carrierPickedUp", EmitDefaultValue = true)]
        public bool? CarrierPickedUp { get; set; }

        /// <summary>
        /// Gets or Sets BroughtToLoadAddress
        /// </summary>
        [DataMember(Name = "broughtToLoadAddress", EmitDefaultValue = true)]
        public bool BroughtToLoadAddress { get; set; }

        /// <summary>
        /// Gets or Sets TookFromDeliveryAddress
        /// </summary>
        [DataMember(Name = "tookFromDeliveryAddress", EmitDefaultValue = true)]
        public bool TookFromDeliveryAddress { get; set; }

        /// <summary>
        /// Gets or Sets CarrierDelivered
        /// </summary>
        [DataMember(Name = "carrierDelivered", EmitDefaultValue = true)]
        public bool? CarrierDelivered { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationContactId
        /// </summary>
        [DataMember(Name = "organizationContactId", IsRequired = true, EmitDefaultValue = true)]
        public Guid OrganizationContactId { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<LoadingAidItemRequest> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadingAidBookingFromShipmentRequest {\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  ReferenceType: ").Append(ReferenceType).Append("\n");
            sb.Append("  GlobalBookingId: ").Append(GlobalBookingId).Append("\n");
            sb.Append("  LoadAddressContactId: ").Append(LoadAddressContactId).Append("\n");
            sb.Append("  DeliveryAddressContactId: ").Append(DeliveryAddressContactId).Append("\n");
            sb.Append("  CarrierContactId: ").Append(CarrierContactId).Append("\n");
            sb.Append("  CarrierPickedUp: ").Append(CarrierPickedUp).Append("\n");
            sb.Append("  BroughtToLoadAddress: ").Append(BroughtToLoadAddress).Append("\n");
            sb.Append("  TookFromDeliveryAddress: ").Append(TookFromDeliveryAddress).Append("\n");
            sb.Append("  CarrierDelivered: ").Append(CarrierDelivered).Append("\n");
            sb.Append("  OrganizationContactId: ").Append(OrganizationContactId).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoadingAidBookingFromShipmentRequest);
        }

        /// <summary>
        /// Returns true if LoadingAidBookingFromShipmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LoadingAidBookingFromShipmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoadingAidBookingFromShipmentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) && 
                (
                    this.ReferenceType == input.ReferenceType ||
                    (this.ReferenceType != null &&
                    this.ReferenceType.Equals(input.ReferenceType))
                ) && 
                (
                    this.GlobalBookingId == input.GlobalBookingId ||
                    (this.GlobalBookingId != null &&
                    this.GlobalBookingId.Equals(input.GlobalBookingId))
                ) && 
                (
                    this.LoadAddressContactId == input.LoadAddressContactId ||
                    (this.LoadAddressContactId != null &&
                    this.LoadAddressContactId.Equals(input.LoadAddressContactId))
                ) && 
                (
                    this.DeliveryAddressContactId == input.DeliveryAddressContactId ||
                    (this.DeliveryAddressContactId != null &&
                    this.DeliveryAddressContactId.Equals(input.DeliveryAddressContactId))
                ) && 
                (
                    this.CarrierContactId == input.CarrierContactId ||
                    (this.CarrierContactId != null &&
                    this.CarrierContactId.Equals(input.CarrierContactId))
                ) && 
                (
                    this.CarrierPickedUp == input.CarrierPickedUp ||
                    (this.CarrierPickedUp != null &&
                    this.CarrierPickedUp.Equals(input.CarrierPickedUp))
                ) && 
                (
                    this.BroughtToLoadAddress == input.BroughtToLoadAddress ||
                    this.BroughtToLoadAddress.Equals(input.BroughtToLoadAddress)
                ) && 
                (
                    this.TookFromDeliveryAddress == input.TookFromDeliveryAddress ||
                    this.TookFromDeliveryAddress.Equals(input.TookFromDeliveryAddress)
                ) && 
                (
                    this.CarrierDelivered == input.CarrierDelivered ||
                    (this.CarrierDelivered != null &&
                    this.CarrierDelivered.Equals(input.CarrierDelivered))
                ) && 
                (
                    this.OrganizationContactId == input.OrganizationContactId ||
                    (this.OrganizationContactId != null &&
                    this.OrganizationContactId.Equals(input.OrganizationContactId))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferenceId != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceId.GetHashCode();
                }
                if (this.ReferenceType != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceType.GetHashCode();
                }
                if (this.GlobalBookingId != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalBookingId.GetHashCode();
                }
                if (this.LoadAddressContactId != null)
                {
                    hashCode = (hashCode * 59) + this.LoadAddressContactId.GetHashCode();
                }
                if (this.DeliveryAddressContactId != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryAddressContactId.GetHashCode();
                }
                if (this.CarrierContactId != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierContactId.GetHashCode();
                }
                if (this.CarrierPickedUp != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierPickedUp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BroughtToLoadAddress.GetHashCode();
                hashCode = (hashCode * 59) + this.TookFromDeliveryAddress.GetHashCode();
                if (this.CarrierDelivered != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierDelivered.GetHashCode();
                }
                if (this.OrganizationContactId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationContactId.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
