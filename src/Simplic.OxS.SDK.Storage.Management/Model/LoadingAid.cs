/*
 * Simplic.OxS.storage-management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Storage.Management
{
    /// <summary>
    /// LoadingAid
    /// </summary>
    [DataContract(Name = "LoadingAid")]
    public partial class LoadingAid : IEquatable<LoadingAid>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MovementType
        /// </summary>
        [DataMember(Name = "movementType", EmitDefaultValue = false)]
        public MovementType? MovementType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadingAid" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="typeId">typeId.</param>
        /// <param name="movementType">movementType.</param>
        /// <param name="barcodes">barcodes.</param>
        public LoadingAid(int amount = default(int), Guid typeId = default(Guid), MovementType? movementType = default(MovementType?), List<ScannedBarcode> barcodes = default(List<ScannedBarcode>))
        {
            this.Amount = amount;
            this.TypeId = typeId;
            this.MovementType = movementType;
            this.Barcodes = barcodes;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "typeId", EmitDefaultValue = false)]
        public Guid TypeId { get; set; }

        /// <summary>
        /// Gets or Sets Barcodes
        /// </summary>
        [DataMember(Name = "barcodes", EmitDefaultValue = true)]
        public List<ScannedBarcode> Barcodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadingAid {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  MovementType: ").Append(MovementType).Append("\n");
            sb.Append("  Barcodes: ").Append(Barcodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoadingAid);
        }

        /// <summary>
        /// Returns true if LoadingAid instances are equal
        /// </summary>
        /// <param name="input">Instance of LoadingAid to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoadingAid input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.MovementType == input.MovementType ||
                    this.MovementType.Equals(input.MovementType)
                ) && 
                (
                    this.Barcodes == input.Barcodes ||
                    this.Barcodes != null &&
                    input.Barcodes != null &&
                    this.Barcodes.SequenceEqual(input.Barcodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.TypeId != null)
                {
                    hashCode = (hashCode * 59) + this.TypeId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MovementType.GetHashCode();
                if (this.Barcodes != null)
                {
                    hashCode = (hashCode * 59) + this.Barcodes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
