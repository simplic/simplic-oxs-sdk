/*
 * Simplic.OxS.storage-management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;

// -- Custom --
using System.Threading;
using System.Threading.Tasks;
// -^ Custom ^-

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Storage.Management
{
    // ------------------------- Custom -------------------------------
//: Interface
    
/// <summary>
/// Client to interact with the API endpoints of the storage-management service.
/// </summary>
public interface ILoadingAidVoucherProviderDeploymentClient
{
    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    string GetBasePath();


    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
    /// <returns>LoadingAidVoucherProviderResponse</returns>
    LoadingAidVoucherProviderResponse Patch(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
    /// <returns>ApiResponse of LoadingAidVoucherProviderResponse</returns>
    ApiResponse<LoadingAidVoucherProviderResponse> PatchWithHttpInfo(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?));
        
    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of LoadingAidVoucherProviderResponse</returns>
    Task<LoadingAidVoucherProviderResponse> PatchAsync(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (LoadingAidVoucherProviderResponse)</returns>
    Task<ApiResponse<LoadingAidVoucherProviderResponse>> PatchWithHttpInfoAsync(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
    /// <returns>LoadingAidVoucherProviderResponse</returns>
    LoadingAidVoucherProviderResponse Post(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
    /// <returns>ApiResponse of LoadingAidVoucherProviderResponse</returns>
    ApiResponse<LoadingAidVoucherProviderResponse> PostWithHttpInfo(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?));
        
    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of LoadingAidVoucherProviderResponse</returns>
    Task<LoadingAidVoucherProviderResponse> PostAsync(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (LoadingAidVoucherProviderResponse)</returns>
    Task<ApiResponse<LoadingAidVoucherProviderResponse>> PostWithHttpInfoAsync(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?), CancellationToken cancellationToken = default(CancellationToken));

}


//: Implementation

    /// <summary>
    /// Client to interact with the API endpoints of the storage-management service.
    /// </summary>
    public class LoadingAidVoucherProviderDeploymentClient : ILoadingAidVoucherProviderDeploymentClient
    {
        private __LoadingAidVoucherProviderDeploymentClient _internalClient;
        private Simplic.OxS.SDK.ExceptionFactory _exceptionFactory = (name, response) => null;

        public LoadingAidVoucherProviderDeploymentClient(string host, string? authorization = null)
        {
            if (authorization != null)
            {
                _internalClient = new __LoadingAidVoucherProviderDeploymentClient(new Configuration
                {
                    BasePath = $"{host}/storage-management-api/v1",
                    DefaultHeaders = { { "Authorization", authorization } }
                });
            }
            else
            {
                _internalClient = new __LoadingAidVoucherProviderDeploymentClient(new Configuration
                {
                    BasePath = $"{host}/storage-management-api/v1",
                });
            }
        }

        public LoadingAidVoucherProviderDeploymentClient(Environment env, string? authorization = null)
            : this(
                env == Environment.Development
                    ? "https://dev-oxs.simplic.io"
                    : "https://oxs.simplic.io",
                authorization
            ) { }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath() => _internalClient.GetBasePath();

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Simplic.OxS.SDK.IReadableConfiguration Configuration
        {
            get => _internalClient.Configuration;
            set
            {
                _internalClient.Configuration = value;
            }
        }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Simplic.OxS.SDK.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <returns>LoadingAidVoucherProviderResponse</returns>
        public LoadingAidVoucherProviderResponse Patch(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?))
        {
            try
            {
                return _internalClient.Patch(id, patchLoadingAidVoucherProviderRequest);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <returns>ApiResponse of LoadingAidVoucherProviderResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<LoadingAidVoucherProviderResponse> PatchWithHttpInfo(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?))
        {
            try
            {
                return _internalClient.PatchWithHttpInfo(id, patchLoadingAidVoucherProviderRequest);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoadingAidVoucherProviderResponse</returns>
        public System.Threading.Tasks.Task<LoadingAidVoucherProviderResponse> PatchAsync(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.PatchAsync(id, patchLoadingAidVoucherProviderRequest, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoadingAidVoucherProviderResponse)</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<LoadingAidVoucherProviderResponse>> PatchWithHttpInfoAsync(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.PatchWithHttpInfoAsync(id, patchLoadingAidVoucherProviderRequest, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <returns>LoadingAidVoucherProviderResponse</returns>
        public LoadingAidVoucherProviderResponse Post(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?))
        {
            try
            {
                return _internalClient.Post(createLoadingAidVoucherProviderRequest);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <returns>ApiResponse of LoadingAidVoucherProviderResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<LoadingAidVoucherProviderResponse> PostWithHttpInfo(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?))
        {
            try
            {
                return _internalClient.PostWithHttpInfo(createLoadingAidVoucherProviderRequest);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoadingAidVoucherProviderResponse</returns>
        public System.Threading.Tasks.Task<LoadingAidVoucherProviderResponse> PostAsync(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.PostAsync(createLoadingAidVoucherProviderRequest, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoadingAidVoucherProviderResponse)</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<LoadingAidVoucherProviderResponse>> PostWithHttpInfoAsync(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.PostWithHttpInfoAsync(createLoadingAidVoucherProviderRequest, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    

        private string FormatErrorMessage(string message, int errorCode) => $"<{errorCode} - {(HttpStatusCode)errorCode}> {message}";
    }

// ------------------------^ Custom ^------------------------------


    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface __ILoadingAidVoucherProviderDeploymentClientSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoadingAidVoucherProviderResponse</returns>
        LoadingAidVoucherProviderResponse Patch(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoadingAidVoucherProviderResponse</returns>
        ApiResponse<LoadingAidVoucherProviderResponse> PatchWithHttpInfo(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoadingAidVoucherProviderResponse</returns>
        LoadingAidVoucherProviderResponse Post(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoadingAidVoucherProviderResponse</returns>
        ApiResponse<LoadingAidVoucherProviderResponse> PostWithHttpInfo(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface __ILoadingAidVoucherProviderDeploymentClientAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoadingAidVoucherProviderResponse</returns>
        System.Threading.Tasks.Task<LoadingAidVoucherProviderResponse> PatchAsync(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoadingAidVoucherProviderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoadingAidVoucherProviderResponse>> PatchWithHttpInfoAsync(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoadingAidVoucherProviderResponse</returns>
        System.Threading.Tasks.Task<LoadingAidVoucherProviderResponse> PostAsync(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoadingAidVoucherProviderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoadingAidVoucherProviderResponse>> PostWithHttpInfoAsync(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface __ILoadingAidVoucherProviderDeploymentClient : __ILoadingAidVoucherProviderDeploymentClientSync, __ILoadingAidVoucherProviderDeploymentClientAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal /*partial*/ class __LoadingAidVoucherProviderDeploymentClient : __ILoadingAidVoucherProviderDeploymentClient
    {
        private Simplic.OxS.SDK.ExceptionFactory _exceptionFactory = (name, response) => null;

        /*
        /// <summary>
        /// Initializes a new instance of the <see cref="__LoadingAidVoucherProviderDeploymentClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __LoadingAidVoucherProviderDeploymentClient() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="__LoadingAidVoucherProviderDeploymentClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __LoadingAidVoucherProviderDeploymentClient(string basePath)
        {
            this.Configuration = Simplic.OxS.SDK.Configuration.MergeConfigurations(
                Simplic.OxS.SDK.GlobalConfiguration.Instance,
                new Simplic.OxS.SDK.Configuration { BasePath = basePath }
            );
            this.Client = new Simplic.OxS.SDK.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Simplic.OxS.SDK.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Simplic.OxS.SDK.Configuration.DefaultExceptionFactory;
        }
        */

        /// <summary>
        /// Initializes a new instance of the <see cref="__LoadingAidVoucherProviderDeploymentClient"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public __LoadingAidVoucherProviderDeploymentClient(Simplic.OxS.SDK.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Simplic.OxS.SDK.Configuration.MergeConfigurations(
                Simplic.OxS.SDK.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Simplic.OxS.SDK.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Simplic.OxS.SDK.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Simplic.OxS.SDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="__LoadingAidVoucherProviderDeploymentClient"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public __LoadingAidVoucherProviderDeploymentClient(Simplic.OxS.SDK.ISynchronousClient client, Simplic.OxS.SDK.IAsynchronousClient asyncClient, Simplic.OxS.SDK.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Simplic.OxS.SDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Simplic.OxS.SDK.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Simplic.OxS.SDK.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Simplic.OxS.SDK.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Simplic.OxS.SDK.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoadingAidVoucherProviderResponse</returns>
        public LoadingAidVoucherProviderResponse Patch(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.ApiResponse<LoadingAidVoucherProviderResponse> localVarResponse = PatchWithHttpInfo(id, patchLoadingAidVoucherProviderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoadingAidVoucherProviderResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<LoadingAidVoucherProviderResponse> PatchWithHttpInfo(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchLoadingAidVoucherProviderRequest;

            localVarRequestOptions.Operation = "LoadingAidVoucherProviderDeploymentClient.LoadingAidVoucherProviderDeploymentIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<LoadingAidVoucherProviderResponse>("/LoadingAidVoucherProviderDeployment/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadingAidVoucherProviderDeploymentIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoadingAidVoucherProviderResponse</returns>
        public async System.Threading.Tasks.Task<LoadingAidVoucherProviderResponse> PatchAsync(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.ApiResponse<LoadingAidVoucherProviderResponse> localVarResponse = await PatchWithHttpInfoAsync(id, patchLoadingAidVoucherProviderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoadingAidVoucherProviderResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<LoadingAidVoucherProviderResponse>> PatchWithHttpInfoAsync(Guid id, PatchLoadingAidVoucherProviderRequest? patchLoadingAidVoucherProviderRequest = default(PatchLoadingAidVoucherProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchLoadingAidVoucherProviderRequest;

            localVarRequestOptions.Operation = "LoadingAidVoucherProviderDeploymentClient.LoadingAidVoucherProviderDeploymentIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<LoadingAidVoucherProviderResponse>("/LoadingAidVoucherProviderDeployment/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadingAidVoucherProviderDeploymentIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoadingAidVoucherProviderResponse</returns>
        public LoadingAidVoucherProviderResponse Post(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.ApiResponse<LoadingAidVoucherProviderResponse> localVarResponse = PostWithHttpInfo(createLoadingAidVoucherProviderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoadingAidVoucherProviderResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<LoadingAidVoucherProviderResponse> PostWithHttpInfo(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createLoadingAidVoucherProviderRequest;

            localVarRequestOptions.Operation = "LoadingAidVoucherProviderDeploymentClient.LoadingAidVoucherProviderDeploymentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoadingAidVoucherProviderResponse>("/LoadingAidVoucherProviderDeployment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadingAidVoucherProviderDeploymentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoadingAidVoucherProviderResponse</returns>
        public async System.Threading.Tasks.Task<LoadingAidVoucherProviderResponse> PostAsync(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.ApiResponse<LoadingAidVoucherProviderResponse> localVarResponse = await PostWithHttpInfoAsync(createLoadingAidVoucherProviderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLoadingAidVoucherProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoadingAidVoucherProviderResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<LoadingAidVoucherProviderResponse>> PostWithHttpInfoAsync(CreateLoadingAidVoucherProviderRequest? createLoadingAidVoucherProviderRequest = default(CreateLoadingAidVoucherProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createLoadingAidVoucherProviderRequest;

            localVarRequestOptions.Operation = "LoadingAidVoucherProviderDeploymentClient.LoadingAidVoucherProviderDeploymentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoadingAidVoucherProviderResponse>("/LoadingAidVoucherProviderDeployment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadingAidVoucherProviderDeploymentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
