// <auto-generated>
/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle
{
    //--Custom wrapper start
    /// <summary>
    /// Client to interact with the API endpoints of the vehicle service.
    /// </summary>
    public interface IDeviceAuthClient
    {
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        string GetBasePath();

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        //IReadableConfiguration Configuration;

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceModel</returns>
        DeviceModel Get();

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
                /// <returns>ApiResponse of DeviceModel</returns>
        ApiResponse<DeviceModel> GetWithHttpInfo();
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceModel</returns>
        Task<DeviceModel> GetAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceModel)</returns>
        Task<ApiResponse<DeviceModel>> GetWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLoginRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceLoginResponse</returns>
        DeviceLoginResponse Login(DeviceLoginRequest deviceLoginRequest = default(DeviceLoginRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of DeviceLoginResponse</returns>
        ApiResponse<DeviceLoginResponse> LoginWithHttpInfo(DeviceLoginRequest deviceLoginRequest = default(DeviceLoginRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceLoginResponse</returns>
        Task<DeviceLoginResponse> LoginAsync(DeviceLoginRequest deviceLoginRequest = default(DeviceLoginRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceLoginResponse)</returns>
        Task<ApiResponse<DeviceLoginResponse>> LoginWithHttpInfoAsync(DeviceLoginRequest deviceLoginRequest = default(DeviceLoginRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogoutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Logout(DeviceLogoutRequest deviceLogoutRequest = default(DeviceLogoutRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogoutRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LogoutWithHttpInfo(DeviceLogoutRequest deviceLogoutRequest = default(DeviceLogoutRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogoutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task LogoutAsync(DeviceLogoutRequest deviceLogoutRequest = default(DeviceLogoutRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogoutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> LogoutWithHttpInfoAsync(DeviceLogoutRequest deviceLogoutRequest = default(DeviceLogoutRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceLoginResponse</returns>
        DeviceLoginResponse RefreshToken(RefreshTokenRequest refreshTokenRequest = default(RefreshTokenRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"> (optional)</param>
        /// <returns>ApiResponse of DeviceLoginResponse</returns>
        ApiResponse<DeviceLoginResponse> RefreshTokenWithHttpInfo(RefreshTokenRequest refreshTokenRequest = default(RefreshTokenRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceLoginResponse</returns>
        Task<DeviceLoginResponse> RefreshTokenAsync(RefreshTokenRequest refreshTokenRequest = default(RefreshTokenRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceLoginResponse)</returns>
        Task<ApiResponse<DeviceLoginResponse>> RefreshTokenWithHttpInfoAsync(RefreshTokenRequest refreshTokenRequest = default(RefreshTokenRequest), CancellationToken cancellationToken = default(CancellationToken));

    }

    /// <inheritdoc cref="IDeviceAuthClient">
    public class DeviceAuthClient : IDeviceAuthClient
    {
        private __DeviceAuthClient _internalClient;
        private HttpClient _httpClient;

        public DeviceAuthClient(string host, string? authorization = null)
        {
            _httpClient = new HttpClient() { BaseAddress = new Uri($"{host}/vehicle-api/v1") };
            var jsonSerializerOptions = new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            var jsonSerializerOptionsProvider = new JsonSerializerOptionsProvider(jsonSerializerOptions);
            var events = new DeviceAuthClientEvents();
            if (authorization is null)
            {
                _internalClient = new __DeviceAuthClient(_httpClient, jsonSerializerOptionsProvider, events, new NullTokenProvider<ApiKeyToken>());
            }
            else
            {
                var token = new ApiKeyToken(authorization, "Authorization", "");
                _internalClient = new __DeviceAuthClient(_httpClient, jsonSerializerOptionsProvider, events, new ApiKeyTokenProvider(new[] { token }));
            }
        }

        public DeviceAuthClient(Environment env, string? authorization = null)
            : this(
                env == Environment.Development
                    ? "https://dev-oxs.simplic.io"
                    : "https://oxs.simplic.io",
                authorization
            ) { }

        /// <inheritdoc />
        public string GetBasePath() => _httpClient.BaseAddress.ToString();

        /// <inheritdoc />
        public DeviceModel Get()
        {
            try
            {
                var response = _internalClient.GetAsync().GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<DeviceModel> GetWithHttpInfo()
        {
            try
            {
                var response = _internalClient.GetAsync().GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DeviceModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<DeviceModel> GetAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAsync(cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<DeviceModel>> GetWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAsync(cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DeviceModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public DeviceLoginResponse Login(DeviceLoginRequest deviceLoginRequest = default(DeviceLoginRequest))
        {
            try
            {
                var response = _internalClient.LoginAsync(deviceLoginRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<DeviceLoginResponse> LoginWithHttpInfo(DeviceLoginRequest deviceLoginRequest = default(DeviceLoginRequest))
        {
            try
            {
                var response = _internalClient.LoginAsync(deviceLoginRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DeviceLoginResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<DeviceLoginResponse> LoginAsync(DeviceLoginRequest deviceLoginRequest = default(DeviceLoginRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.LoginAsync(deviceLoginRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<DeviceLoginResponse>> LoginWithHttpInfoAsync(DeviceLoginRequest deviceLoginRequest = default(DeviceLoginRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.LoginAsync(deviceLoginRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DeviceLoginResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void Logout(DeviceLogoutRequest deviceLogoutRequest = default(DeviceLogoutRequest))
        {
            try
            {
                var response = _internalClient.LogoutAsync(deviceLogoutRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> LogoutWithHttpInfo(DeviceLogoutRequest deviceLogoutRequest = default(DeviceLogoutRequest))
        {
            try
            {
                var response = _internalClient.LogoutAsync(deviceLogoutRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task LogoutAsync(DeviceLogoutRequest deviceLogoutRequest = default(DeviceLogoutRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.LogoutAsync(deviceLogoutRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> LogoutWithHttpInfoAsync(DeviceLogoutRequest deviceLogoutRequest = default(DeviceLogoutRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.LogoutAsync(deviceLogoutRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public DeviceLoginResponse RefreshToken(RefreshTokenRequest refreshTokenRequest = default(RefreshTokenRequest))
        {
            try
            {
                var response = _internalClient.RefreshTokenAsync(refreshTokenRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<DeviceLoginResponse> RefreshTokenWithHttpInfo(RefreshTokenRequest refreshTokenRequest = default(RefreshTokenRequest))
        {
            try
            {
                var response = _internalClient.RefreshTokenAsync(refreshTokenRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DeviceLoginResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<DeviceLoginResponse> RefreshTokenAsync(RefreshTokenRequest refreshTokenRequest = default(RefreshTokenRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.RefreshTokenAsync(refreshTokenRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<DeviceLoginResponse>> RefreshTokenWithHttpInfoAsync(RefreshTokenRequest refreshTokenRequest = default(RefreshTokenRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.RefreshTokenAsync(refreshTokenRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DeviceLoginResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    

        private string FormatErrorMessage(string message, int errorCode) => $"<{errorCode} - {(HttpStatusCode)errorCode}> {message}";
    }
    //--Custom wrapper end
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    internal interface __IDeviceAuthClient : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DeviceAuthClientEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthGetApiResponse"/>&gt;</returns>
        Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthGetApiResponse> GetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthGetApiResponse"/>?&gt;</returns>
        Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthGetApiResponse?> GetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthLoginPostApiResponse"/>&gt;</returns>
        Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthLoginPostApiResponse> LoginAsync(Option<DeviceLoginRequest> deviceLoginRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="deviceLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthLoginPostApiResponse"/>?&gt;</returns>
        Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthLoginPostApiResponse?> LoginOrDefaultAsync(Option<DeviceLoginRequest> deviceLoginRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogoutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthLogoutPostApiResponse"/>&gt;</returns>
        Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthLogoutPostApiResponse> LogoutAsync(Option<DeviceLogoutRequest> deviceLogoutRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="deviceLogoutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthLogoutPostApiResponse"/>?&gt;</returns>
        Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthLogoutPostApiResponse?> LogoutOrDefaultAsync(Option<DeviceLogoutRequest> deviceLogoutRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse"/>&gt;</returns>
        Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse> RefreshTokenAsync(Option<RefreshTokenRequest> refreshTokenRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="refreshTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse"/>?&gt;</returns>
        Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse?> RefreshTokenOrDefaultAsync(Option<RefreshTokenRequest> refreshTokenRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DeviceAuthClientEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeviceAuthGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeviceAuthGet;

        internal void ExecuteOnDeviceAuthGet(__DeviceAuthClient.DeviceAuthClientDeviceAuthGetApiResponse apiResponse)
        {
            OnDeviceAuthGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeviceAuthGet(Exception exception)
        {
            OnErrorDeviceAuthGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeviceAuthLoginPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeviceAuthLoginPost;

        internal void ExecuteOnDeviceAuthLoginPost(__DeviceAuthClient.DeviceAuthClientDeviceAuthLoginPostApiResponse apiResponse)
        {
            OnDeviceAuthLoginPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeviceAuthLoginPost(Exception exception)
        {
            OnErrorDeviceAuthLoginPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeviceAuthLogoutPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeviceAuthLogoutPost;

        internal void ExecuteOnDeviceAuthLogoutPost(__DeviceAuthClient.DeviceAuthClientDeviceAuthLogoutPostApiResponse apiResponse)
        {
            OnDeviceAuthLogoutPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeviceAuthLogoutPost(Exception exception)
        {
            OnErrorDeviceAuthLogoutPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeviceAuthRefreshTokenPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeviceAuthRefreshTokenPost;

        internal void ExecuteOnDeviceAuthRefreshTokenPost(__DeviceAuthClient.DeviceAuthClientDeviceAuthRefreshTokenPostApiResponse apiResponse)
        {
            OnDeviceAuthRefreshTokenPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeviceAuthRefreshTokenPost(Exception exception)
        {
            OnErrorDeviceAuthRefreshTokenPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal sealed partial class __DeviceAuthClient : __IDeviceAuthClient
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DeviceAuthClientEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceAuthClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __DeviceAuthClient(
            HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            DeviceAuthClientEvents deviceAuthClientEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider
        )
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            HttpClient = httpClient;
            Events = deviceAuthClientEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterDeviceAuthGetDefaultImplementation(__DeviceAuthClient.IDeviceAuthClientDeviceAuthGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterDeviceAuthGet(ref suppressDefaultLog, apiResponseLocalVar);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterDeviceAuthGet(ref bool suppressDefaultLog, __DeviceAuthClient.IDeviceAuthClientDeviceAuthGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorDeviceAuthGetDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorDeviceAuthGet(ref suppressDefaultLog, exception, pathFormat, path);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorDeviceAuthGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthGetApiResponse"/>&gt;</returns>
        public async Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthGetApiResponse?> GetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthGetApiResponse"/>&gt;</returns>
        public async Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthGetApiResponse> GetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/DeviceAuth";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        DeviceAuthClientDeviceAuthGetApiResponse apiResponseLocalVar = new DeviceAuthClientDeviceAuthGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/DeviceAuth", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeviceAuthGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnDeviceAuthGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeviceAuthGetDefaultImplementation(e, "/DeviceAuth", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorDeviceAuthGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IDeviceAuthClientDeviceAuthGetApiResponse"/>
        /// </summary>
        internal interface IDeviceAuthClientDeviceAuthGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<DeviceModel>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="DeviceAuthClientDeviceAuthGetApiResponse"/>
        /// </summary>
        internal partial class DeviceAuthClientDeviceAuthGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IDeviceAuthClientDeviceAuthGetApiResponse
        {
            /// <summary>
            /// The <see cref="DeviceAuthClientDeviceAuthGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeviceAuthClientDeviceAuthGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public DeviceModel Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<DeviceModel>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out DeviceModel result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeviceAuthLoginPost(Option<DeviceLoginRequest> deviceLoginRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="deviceLoginRequest"></param>
        /// <returns></returns>
        private void ValidateDeviceAuthLoginPost(Option<DeviceLoginRequest> deviceLoginRequest)
        {
            if (deviceLoginRequest.IsSet && deviceLoginRequest.Value == null)
                throw new ArgumentNullException(nameof(deviceLoginRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="deviceLoginRequest"></param>
        private void AfterDeviceAuthLoginPostDefaultImplementation(__DeviceAuthClient.IDeviceAuthClientDeviceAuthLoginPostApiResponse apiResponseLocalVar, Option<DeviceLoginRequest> deviceLoginRequest)
        {
            bool suppressDefaultLog = false;
            AfterDeviceAuthLoginPost(ref suppressDefaultLog, apiResponseLocalVar, deviceLoginRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="deviceLoginRequest"></param>
        partial void AfterDeviceAuthLoginPost(ref bool suppressDefaultLog, __DeviceAuthClient.IDeviceAuthClientDeviceAuthLoginPostApiResponse apiResponseLocalVar, Option<DeviceLoginRequest> deviceLoginRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="deviceLoginRequest"></param>
        private void OnErrorDeviceAuthLoginPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<DeviceLoginRequest> deviceLoginRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorDeviceAuthLoginPost(ref suppressDefaultLog, exception, pathFormat, path, deviceLoginRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="deviceLoginRequest"></param>
        partial void OnErrorDeviceAuthLoginPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<DeviceLoginRequest> deviceLoginRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="deviceLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthLoginPostApiResponse"/>&gt;</returns>
        public async Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthLoginPostApiResponse?> LoginOrDefaultAsync(Option<DeviceLoginRequest> deviceLoginRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LoginAsync(deviceLoginRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthLoginPostApiResponse"/>&gt;</returns>
        public async Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthLoginPostApiResponse> LoginAsync(Option<DeviceLoginRequest> deviceLoginRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeviceAuthLoginPost(deviceLoginRequest);

                FormatDeviceAuthLoginPost(deviceLoginRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/DeviceAuth/login";

                    if (deviceLoginRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (deviceLoginRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(deviceLoginRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        DeviceAuthClientDeviceAuthLoginPostApiResponse apiResponseLocalVar = new DeviceAuthClientDeviceAuthLoginPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/DeviceAuth/login", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeviceAuthLoginPostDefaultImplementation(apiResponseLocalVar, deviceLoginRequest);

                        Events.ExecuteOnDeviceAuthLoginPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeviceAuthLoginPostDefaultImplementation(e, "/DeviceAuth/login", uriBuilderLocalVar.Path, deviceLoginRequest);
                Events.ExecuteOnErrorDeviceAuthLoginPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IDeviceAuthClientDeviceAuthLoginPostApiResponse"/>
        /// </summary>
        internal interface IDeviceAuthClientDeviceAuthLoginPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<DeviceLoginResponse>, IBadRequest<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
        }

        /// <summary>
        /// The <see cref="DeviceAuthClientDeviceAuthLoginPostApiResponse"/>
        /// </summary>
        internal partial class DeviceAuthClientDeviceAuthLoginPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IDeviceAuthClientDeviceAuthLoginPostApiResponse
        {
            /// <summary>
            /// The <see cref="DeviceAuthClientDeviceAuthLoginPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeviceAuthClientDeviceAuthLoginPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public DeviceLoginResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<DeviceLoginResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out DeviceLoginResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeviceAuthLogoutPost(Option<DeviceLogoutRequest> deviceLogoutRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="deviceLogoutRequest"></param>
        /// <returns></returns>
        private void ValidateDeviceAuthLogoutPost(Option<DeviceLogoutRequest> deviceLogoutRequest)
        {
            if (deviceLogoutRequest.IsSet && deviceLogoutRequest.Value == null)
                throw new ArgumentNullException(nameof(deviceLogoutRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="deviceLogoutRequest"></param>
        private void AfterDeviceAuthLogoutPostDefaultImplementation(__DeviceAuthClient.IDeviceAuthClientDeviceAuthLogoutPostApiResponse apiResponseLocalVar, Option<DeviceLogoutRequest> deviceLogoutRequest)
        {
            bool suppressDefaultLog = false;
            AfterDeviceAuthLogoutPost(ref suppressDefaultLog, apiResponseLocalVar, deviceLogoutRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="deviceLogoutRequest"></param>
        partial void AfterDeviceAuthLogoutPost(ref bool suppressDefaultLog, __DeviceAuthClient.IDeviceAuthClientDeviceAuthLogoutPostApiResponse apiResponseLocalVar, Option<DeviceLogoutRequest> deviceLogoutRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="deviceLogoutRequest"></param>
        private void OnErrorDeviceAuthLogoutPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<DeviceLogoutRequest> deviceLogoutRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorDeviceAuthLogoutPost(ref suppressDefaultLog, exception, pathFormat, path, deviceLogoutRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="deviceLogoutRequest"></param>
        partial void OnErrorDeviceAuthLogoutPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<DeviceLogoutRequest> deviceLogoutRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="deviceLogoutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthLogoutPostApiResponse"/>&gt;</returns>
        public async Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthLogoutPostApiResponse?> LogoutOrDefaultAsync(Option<DeviceLogoutRequest> deviceLogoutRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LogoutAsync(deviceLogoutRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogoutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthLogoutPostApiResponse"/>&gt;</returns>
        public async Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthLogoutPostApiResponse> LogoutAsync(Option<DeviceLogoutRequest> deviceLogoutRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeviceAuthLogoutPost(deviceLogoutRequest);

                FormatDeviceAuthLogoutPost(deviceLogoutRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/DeviceAuth/logout";

                    if (deviceLogoutRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (deviceLogoutRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(deviceLogoutRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        DeviceAuthClientDeviceAuthLogoutPostApiResponse apiResponseLocalVar = new DeviceAuthClientDeviceAuthLogoutPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/DeviceAuth/logout", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeviceAuthLogoutPostDefaultImplementation(apiResponseLocalVar, deviceLogoutRequest);

                        Events.ExecuteOnDeviceAuthLogoutPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeviceAuthLogoutPostDefaultImplementation(e, "/DeviceAuth/logout", uriBuilderLocalVar.Path, deviceLogoutRequest);
                Events.ExecuteOnErrorDeviceAuthLogoutPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IDeviceAuthClientDeviceAuthLogoutPostApiResponse"/>
        /// </summary>
        internal interface IDeviceAuthClientDeviceAuthLogoutPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="DeviceAuthClientDeviceAuthLogoutPostApiResponse"/>
        /// </summary>
        internal partial class DeviceAuthClientDeviceAuthLogoutPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IDeviceAuthClientDeviceAuthLogoutPostApiResponse
        {
            /// <summary>
            /// The <see cref="DeviceAuthClientDeviceAuthLogoutPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeviceAuthClientDeviceAuthLogoutPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeviceAuthRefreshTokenPost(Option<RefreshTokenRequest> refreshTokenRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="refreshTokenRequest"></param>
        /// <returns></returns>
        private void ValidateDeviceAuthRefreshTokenPost(Option<RefreshTokenRequest> refreshTokenRequest)
        {
            if (refreshTokenRequest.IsSet && refreshTokenRequest.Value == null)
                throw new ArgumentNullException(nameof(refreshTokenRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="refreshTokenRequest"></param>
        private void AfterDeviceAuthRefreshTokenPostDefaultImplementation(__DeviceAuthClient.IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse apiResponseLocalVar, Option<RefreshTokenRequest> refreshTokenRequest)
        {
            bool suppressDefaultLog = false;
            AfterDeviceAuthRefreshTokenPost(ref suppressDefaultLog, apiResponseLocalVar, refreshTokenRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="refreshTokenRequest"></param>
        partial void AfterDeviceAuthRefreshTokenPost(ref bool suppressDefaultLog, __DeviceAuthClient.IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse apiResponseLocalVar, Option<RefreshTokenRequest> refreshTokenRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="refreshTokenRequest"></param>
        private void OnErrorDeviceAuthRefreshTokenPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<RefreshTokenRequest> refreshTokenRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorDeviceAuthRefreshTokenPost(ref suppressDefaultLog, exception, pathFormat, path, refreshTokenRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="refreshTokenRequest"></param>
        partial void OnErrorDeviceAuthRefreshTokenPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<RefreshTokenRequest> refreshTokenRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="refreshTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse"/>&gt;</returns>
        public async Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse?> RefreshTokenOrDefaultAsync(Option<RefreshTokenRequest> refreshTokenRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RefreshTokenAsync(refreshTokenRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DeviceAuthClient.IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse"/>&gt;</returns>
        public async Task<__DeviceAuthClient.IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse> RefreshTokenAsync(Option<RefreshTokenRequest> refreshTokenRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeviceAuthRefreshTokenPost(refreshTokenRequest);

                FormatDeviceAuthRefreshTokenPost(refreshTokenRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/DeviceAuth/refresh-token";

                    if (refreshTokenRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (refreshTokenRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(refreshTokenRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        DeviceAuthClientDeviceAuthRefreshTokenPostApiResponse apiResponseLocalVar = new DeviceAuthClientDeviceAuthRefreshTokenPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/DeviceAuth/refresh-token", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeviceAuthRefreshTokenPostDefaultImplementation(apiResponseLocalVar, refreshTokenRequest);

                        Events.ExecuteOnDeviceAuthRefreshTokenPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeviceAuthRefreshTokenPostDefaultImplementation(e, "/DeviceAuth/refresh-token", uriBuilderLocalVar.Path, refreshTokenRequest);
                Events.ExecuteOnErrorDeviceAuthRefreshTokenPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse"/>
        /// </summary>
        internal interface IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<DeviceLoginResponse>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="DeviceAuthClientDeviceAuthRefreshTokenPostApiResponse"/>
        /// </summary>
        internal partial class DeviceAuthClientDeviceAuthRefreshTokenPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IDeviceAuthClientDeviceAuthRefreshTokenPostApiResponse
        {
            /// <summary>
            /// The <see cref="DeviceAuthClientDeviceAuthRefreshTokenPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeviceAuthClientDeviceAuthRefreshTokenPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public DeviceLoginResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<DeviceLoginResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out DeviceLoginResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
