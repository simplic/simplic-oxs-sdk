// <auto-generated>
/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle
{
    /// <summary>
    /// UpdateVehicleRequest
    /// </summary>
    public partial class UpdateVehicleRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public UpdateVehicleRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateVehicleRequest" /> class.
        /// </summary>
        /// <param name="additionalTechnicalData">additionalTechnicalData</param>
        /// <param name="department">department</param>
        /// <param name="dispositionSortingKey">dispositionSortingKey</param>
        /// <param name="fuelTankCapacity">fuelTankCapacity</param>
        /// <param name="isSystemVehicle">isSystemVehicle</param>
        /// <param name="loadingSlots">loadingSlots</param>
        /// <param name="location">location</param>
        /// <param name="matchCode">matchCode</param>
        /// <param name="mileage">mileage</param>
        /// <param name="mileageDate">mileageDate</param>
        /// <param name="operatingHours">operatingHours</param>
        /// <param name="qrCode">qrCode</param>
        /// <param name="registrationCertificate">registrationCertificate</param>
        /// <param name="registrationDocument">registrationDocument</param>
        /// <param name="registrationDocumentLocation">registrationDocumentLocation</param>
        /// <param name="registrationPlate">registrationPlate</param>
        /// <param name="remark">remark</param>
        /// <param name="status">status</param>
        /// <param name="toll">toll</param>
        /// <param name="usableUntil">usableUntil</param>
        /// <param name="vehicleRegistration">vehicleRegistration</param>
        /// <param name="vehicleTypeSubType">vehicleTypeSubType</param>
        /// <param name="yearOfManufacturing">yearOfManufacturing</param>
        //[JsonConstructor]
        public UpdateVehicleRequest(Option<AdditionalTechnicalDataModel> additionalTechnicalData = default, Option<DepartmentModel> department = default, Option<string> dispositionSortingKey = default, Option<int> fuelTankCapacity = default, Option<bool> isSystemVehicle = default, Option<List<LoadingSlotModel>> loadingSlots = default, Option<string> location = default, Option<string> matchCode = default, Option<double> mileage = default, Option<DateTime> mileageDate = default, Option<double> operatingHours = default, Option<string> qrCode = default, Option<RegistrationCertificateModel> registrationCertificate = default, Option<string> registrationDocument = default, Option<RegistrationDocumentLocationModel> registrationDocumentLocation = default, Option<RegistrationPlateModel> registrationPlate = default, Option<string> remark = default, Option<VehicleStatusModel> status = default, Option<TollModel> toll = default, Option<DateTime> usableUntil = default, Option<string> vehicleRegistration = default, Option<VehicleTypeSubTypeModel> vehicleTypeSubType = default, Option<DateTime> yearOfManufacturing = default)
        {
            AdditionalTechnicalDataOption = additionalTechnicalData;
            DepartmentOption = department;
            DispositionSortingKeyOption = dispositionSortingKey;
            FuelTankCapacityOption = fuelTankCapacity;
            IsSystemVehicleOption = isSystemVehicle;
            LoadingSlotsOption = loadingSlots;
            LocationOption = location;
            MatchCodeOption = matchCode;
            MileageOption = mileage;
            MileageDateOption = mileageDate;
            OperatingHoursOption = operatingHours;
            QrCodeOption = qrCode;
            RegistrationCertificateOption = registrationCertificate;
            RegistrationDocumentOption = registrationDocument;
            RegistrationDocumentLocationOption = registrationDocumentLocation;
            RegistrationPlateOption = registrationPlate;
            RemarkOption = remark;
            StatusOption = status;
            TollOption = toll;
            UsableUntilOption = usableUntil;
            VehicleRegistrationOption = vehicleRegistration;
            VehicleTypeSubTypeOption = vehicleTypeSubType;
            YearOfManufacturingOption = yearOfManufacturing;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AdditionalTechnicalData
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AdditionalTechnicalDataModel>))]
        public Option<AdditionalTechnicalDataModel> AdditionalTechnicalDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets AdditionalTechnicalData
        /// </summary>
        [JsonPropertyName("additionalTechnicalData")]
        public AdditionalTechnicalDataModel? AdditionalTechnicalData { get { return this. AdditionalTechnicalDataOption; } set { this.AdditionalTechnicalDataOption = new Option<AdditionalTechnicalDataModel>(value); } }

        /// <summary>
        /// Used to track the state of Department
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DepartmentModel>))]
        public Option<DepartmentModel> DepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Department
        /// </summary>
        [JsonPropertyName("department")]
        public DepartmentModel? Department { get { return this. DepartmentOption; } set { this.DepartmentOption = new Option<DepartmentModel>(value); } }

        /// <summary>
        /// Used to track the state of DispositionSortingKey
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DispositionSortingKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets DispositionSortingKey
        /// </summary>
        [JsonPropertyName("dispositionSortingKey")]
        public string? DispositionSortingKey { get { return this. DispositionSortingKeyOption; } set { this.DispositionSortingKeyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FuelTankCapacity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> FuelTankCapacityOption { get; private set; }

        /// <summary>
        /// Gets or Sets FuelTankCapacity
        /// </summary>
        [JsonPropertyName("fuelTankCapacity")]
        public int? FuelTankCapacity { get { return this. FuelTankCapacityOption; } set { this.FuelTankCapacityOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of IsSystemVehicle
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsSystemVehicleOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsSystemVehicle
        /// </summary>
        [JsonPropertyName("isSystemVehicle")]
        public bool? IsSystemVehicle { get { return this. IsSystemVehicleOption; } set { this.IsSystemVehicleOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of LoadingSlots
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<LoadingSlotModel>>))]
        public Option<List<LoadingSlotModel>> LoadingSlotsOption { get; private set; }

        /// <summary>
        /// Gets or Sets LoadingSlots
        /// </summary>
        [JsonPropertyName("loadingSlots")]
        public List<LoadingSlotModel>? LoadingSlots { get { return this. LoadingSlotsOption; } set { this.LoadingSlotsOption = new Option<List<LoadingSlotModel>>(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> LocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public string? Location { get { return this. LocationOption; } set { this.LocationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MatchCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> MatchCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets MatchCode
        /// </summary>
        [JsonPropertyName("matchCode")]
        public string? MatchCode { get { return this. MatchCodeOption; } set { this.MatchCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Mileage
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> MileageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mileage
        /// </summary>
        [JsonPropertyName("mileage")]
        public double? Mileage { get { return this. MileageOption; } set { this.MileageOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of MileageDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> MileageDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets MileageDate
        /// </summary>
        [JsonPropertyName("mileageDate")]
        public DateTime? MileageDate { get { return this. MileageDateOption; } set { this.MileageDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of OperatingHours
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> OperatingHoursOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperatingHours
        /// </summary>
        [JsonPropertyName("operatingHours")]
        public double? OperatingHours { get { return this. OperatingHoursOption; } set { this.OperatingHoursOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of QrCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> QrCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets QrCode
        /// </summary>
        [JsonPropertyName("qrCode")]
        public string? QrCode { get { return this. QrCodeOption; } set { this.QrCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationCertificate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<RegistrationCertificateModel>))]
        public Option<RegistrationCertificateModel> RegistrationCertificateOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationCertificate
        /// </summary>
        [JsonPropertyName("registrationCertificate")]
        public RegistrationCertificateModel? RegistrationCertificate { get { return this. RegistrationCertificateOption; } set { this.RegistrationCertificateOption = new Option<RegistrationCertificateModel>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationDocument
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> RegistrationDocumentOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationDocument
        /// </summary>
        [JsonPropertyName("registrationDocument")]
        public string? RegistrationDocument { get { return this. RegistrationDocumentOption; } set { this.RegistrationDocumentOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationDocumentLocation
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<RegistrationDocumentLocationModel>))]
        public Option<RegistrationDocumentLocationModel> RegistrationDocumentLocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationDocumentLocation
        /// </summary>
        [JsonPropertyName("registrationDocumentLocation")]
        public RegistrationDocumentLocationModel? RegistrationDocumentLocation { get { return this. RegistrationDocumentLocationOption; } set { this.RegistrationDocumentLocationOption = new Option<RegistrationDocumentLocationModel>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationPlate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<RegistrationPlateModel>))]
        public Option<RegistrationPlateModel> RegistrationPlateOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationPlate
        /// </summary>
        [JsonPropertyName("registrationPlate")]
        public RegistrationPlateModel? RegistrationPlate { get { return this. RegistrationPlateOption; } set { this.RegistrationPlateOption = new Option<RegistrationPlateModel>(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> RemarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Remark
        /// </summary>
        [JsonPropertyName("remark")]
        public string? Remark { get { return this. RemarkOption; } set { this.RemarkOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<VehicleStatusModel>))]
        public Option<VehicleStatusModel> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public VehicleStatusModel? Status { get { return this. StatusOption; } set { this.StatusOption = new Option<VehicleStatusModel>(value); } }

        /// <summary>
        /// Used to track the state of Toll
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TollModel>))]
        public Option<TollModel> TollOption { get; private set; }

        /// <summary>
        /// Gets or Sets Toll
        /// </summary>
        [JsonPropertyName("toll")]
        public TollModel? Toll { get { return this. TollOption; } set { this.TollOption = new Option<TollModel>(value); } }

        /// <summary>
        /// Used to track the state of UsableUntil
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UsableUntilOption { get; private set; }

        /// <summary>
        /// Gets or Sets UsableUntil
        /// </summary>
        [JsonPropertyName("usableUntil")]
        public DateTime? UsableUntil { get { return this. UsableUntilOption; } set { this.UsableUntilOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of VehicleRegistration
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> VehicleRegistrationOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleRegistration
        /// </summary>
        [JsonPropertyName("vehicleRegistration")]
        public string? VehicleRegistration { get { return this. VehicleRegistrationOption; } set { this.VehicleRegistrationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VehicleTypeSubType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<VehicleTypeSubTypeModel>))]
        public Option<VehicleTypeSubTypeModel> VehicleTypeSubTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleTypeSubType
        /// </summary>
        [JsonPropertyName("vehicleTypeSubType")]
        public VehicleTypeSubTypeModel? VehicleTypeSubType { get { return this. VehicleTypeSubTypeOption; } set { this.VehicleTypeSubTypeOption = new Option<VehicleTypeSubTypeModel>(value); } }

        /// <summary>
        /// Used to track the state of YearOfManufacturing
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> YearOfManufacturingOption { get; private set; }

        /// <summary>
        /// Gets or Sets YearOfManufacturing
        /// </summary>
        [JsonPropertyName("yearOfManufacturing")]
        public DateTime? YearOfManufacturing { get { return this. YearOfManufacturingOption; } set { this.YearOfManufacturingOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateVehicleRequest {\n");
            sb.Append("  AdditionalTechnicalData: ").Append(AdditionalTechnicalData).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  DispositionSortingKey: ").Append(DispositionSortingKey).Append("\n");
            sb.Append("  FuelTankCapacity: ").Append(FuelTankCapacity).Append("\n");
            sb.Append("  IsSystemVehicle: ").Append(IsSystemVehicle).Append("\n");
            sb.Append("  LoadingSlots: ").Append(LoadingSlots).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  MatchCode: ").Append(MatchCode).Append("\n");
            sb.Append("  Mileage: ").Append(Mileage).Append("\n");
            sb.Append("  MileageDate: ").Append(MileageDate).Append("\n");
            sb.Append("  OperatingHours: ").Append(OperatingHours).Append("\n");
            sb.Append("  QrCode: ").Append(QrCode).Append("\n");
            sb.Append("  RegistrationCertificate: ").Append(RegistrationCertificate).Append("\n");
            sb.Append("  RegistrationDocument: ").Append(RegistrationDocument).Append("\n");
            sb.Append("  RegistrationDocumentLocation: ").Append(RegistrationDocumentLocation).Append("\n");
            sb.Append("  RegistrationPlate: ").Append(RegistrationPlate).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Toll: ").Append(Toll).Append("\n");
            sb.Append("  UsableUntil: ").Append(UsableUntil).Append("\n");
            sb.Append("  VehicleRegistration: ").Append(VehicleRegistration).Append("\n");
            sb.Append("  VehicleTypeSubType: ").Append(VehicleTypeSubType).Append("\n");
            sb.Append("  YearOfManufacturing: ").Append(YearOfManufacturing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateVehicleRequest" />
    /// </summary>
    public class UpdateVehicleRequestJsonConverter : JsonConverter<UpdateVehicleRequest>
    {
        /// <summary>
        /// The format to use to serialize MileageDate
        /// </summary>
        public static string MileageDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UsableUntil
        /// </summary>
        public static string UsableUntilFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize YearOfManufacturing
        /// </summary>
        public static string YearOfManufacturingFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UpdateVehicleRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateVehicleRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AdditionalTechnicalDataModel> additionalTechnicalData = default;
            Option<DepartmentModel> department = default;
            Option<string> dispositionSortingKey = default;
            Option<int> fuelTankCapacity = default;
            Option<bool> isSystemVehicle = default;
            Option<List<LoadingSlotModel>> loadingSlots = default;
            Option<string> location = default;
            Option<string> matchCode = default;
            Option<double> mileage = default;
            Option<DateTime> mileageDate = default;
            Option<double> operatingHours = default;
            Option<string> qrCode = default;
            Option<RegistrationCertificateModel> registrationCertificate = default;
            Option<string> registrationDocument = default;
            Option<RegistrationDocumentLocationModel> registrationDocumentLocation = default;
            Option<RegistrationPlateModel> registrationPlate = default;
            Option<string> remark = default;
            Option<VehicleStatusModel> status = default;
            Option<TollModel> toll = default;
            Option<DateTime> usableUntil = default;
            Option<string> vehicleRegistration = default;
            Option<VehicleTypeSubTypeModel> vehicleTypeSubType = default;
            Option<DateTime> yearOfManufacturing = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "additionalTechnicalData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalTechnicalData = new Option<AdditionalTechnicalDataModel>(JsonSerializer.Deserialize<AdditionalTechnicalDataModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "department":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                department = new Option<DepartmentModel>(JsonSerializer.Deserialize<DepartmentModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dispositionSortingKey":
                            dispositionSortingKey = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fuelTankCapacity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fuelTankCapacity = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "isSystemVehicle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isSystemVehicle = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "loadingSlots":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadingSlots = new Option<List<LoadingSlotModel>>(JsonSerializer.Deserialize<List<LoadingSlotModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "location":
                            location = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "matchCode":
                            matchCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mileage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mileage = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "mileageDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mileageDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "operatingHours":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                operatingHours = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "qrCode":
                            qrCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "registrationCertificate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                registrationCertificate = new Option<RegistrationCertificateModel>(JsonSerializer.Deserialize<RegistrationCertificateModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "registrationDocument":
                            registrationDocument = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "registrationDocumentLocation":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                registrationDocumentLocation = new Option<RegistrationDocumentLocationModel>(JsonSerializer.Deserialize<RegistrationDocumentLocationModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "registrationPlate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                registrationPlate = new Option<RegistrationPlateModel>(JsonSerializer.Deserialize<RegistrationPlateModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "remark":
                            remark = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<VehicleStatusModel>(JsonSerializer.Deserialize<VehicleStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "toll":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                toll = new Option<TollModel>(JsonSerializer.Deserialize<TollModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "usableUntil":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                usableUntil = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "vehicleRegistration":
                            vehicleRegistration = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vehicleTypeSubType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vehicleTypeSubType = new Option<VehicleTypeSubTypeModel>(JsonSerializer.Deserialize<VehicleTypeSubTypeModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "yearOfManufacturing":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                yearOfManufacturing = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (additionalTechnicalData.IsSet && additionalTechnicalData.Value == null)
                throw new ArgumentNullException(nameof(additionalTechnicalData), "Property is not nullable for class UpdateVehicleRequest.");

            if (department.IsSet && department.Value == null)
                throw new ArgumentNullException(nameof(department), "Property is not nullable for class UpdateVehicleRequest.");

            if (registrationCertificate.IsSet && registrationCertificate.Value == null)
                throw new ArgumentNullException(nameof(registrationCertificate), "Property is not nullable for class UpdateVehicleRequest.");

            if (registrationDocumentLocation.IsSet && registrationDocumentLocation.Value == null)
                throw new ArgumentNullException(nameof(registrationDocumentLocation), "Property is not nullable for class UpdateVehicleRequest.");

            if (registrationPlate.IsSet && registrationPlate.Value == null)
                throw new ArgumentNullException(nameof(registrationPlate), "Property is not nullable for class UpdateVehicleRequest.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class UpdateVehicleRequest.");

            if (toll.IsSet && toll.Value == null)
                throw new ArgumentNullException(nameof(toll), "Property is not nullable for class UpdateVehicleRequest.");

            if (vehicleTypeSubType.IsSet && vehicleTypeSubType.Value == null)
                throw new ArgumentNullException(nameof(vehicleTypeSubType), "Property is not nullable for class UpdateVehicleRequest.");

            //2return new UpdateVehicleRequest(additionalTechnicalData, department, dispositionSortingKey, fuelTankCapacity, isSystemVehicle, loadingSlots, location, matchCode, mileage, mileageDate, operatingHours, qrCode, registrationCertificate, registrationDocument, registrationDocumentLocation, registrationPlate, remark, status, toll, usableUntil, vehicleRegistration, vehicleTypeSubType, yearOfManufacturing);
            return new UpdateVehicleRequest(additionalTechnicalData, department, dispositionSortingKey, fuelTankCapacity, isSystemVehicle, loadingSlots, location, matchCode, mileage, mileageDate, operatingHours, qrCode, registrationCertificate, registrationDocument, registrationDocumentLocation, registrationPlate, remark, status, toll, usableUntil, vehicleRegistration, vehicleTypeSubType, yearOfManufacturing);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateVehicleRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateVehicleRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateVehicleRequest updateVehicleRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, updateVehicleRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateVehicleRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateVehicleRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, UpdateVehicleRequest updateVehicleRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateVehicleRequest.AdditionalTechnicalDataOption.IsSet && updateVehicleRequest.AdditionalTechnicalData == null)
                throw new ArgumentNullException(nameof(updateVehicleRequest.AdditionalTechnicalData), "Property is required for class UpdateVehicleRequest.");

            if (updateVehicleRequest.DepartmentOption.IsSet && updateVehicleRequest.Department == null)
                throw new ArgumentNullException(nameof(updateVehicleRequest.Department), "Property is required for class UpdateVehicleRequest.");

            if (updateVehicleRequest.RegistrationCertificateOption.IsSet && updateVehicleRequest.RegistrationCertificate == null)
                throw new ArgumentNullException(nameof(updateVehicleRequest.RegistrationCertificate), "Property is required for class UpdateVehicleRequest.");

            if (updateVehicleRequest.RegistrationDocumentLocationOption.IsSet && updateVehicleRequest.RegistrationDocumentLocation == null)
                throw new ArgumentNullException(nameof(updateVehicleRequest.RegistrationDocumentLocation), "Property is required for class UpdateVehicleRequest.");

            if (updateVehicleRequest.RegistrationPlateOption.IsSet && updateVehicleRequest.RegistrationPlate == null)
                throw new ArgumentNullException(nameof(updateVehicleRequest.RegistrationPlate), "Property is required for class UpdateVehicleRequest.");

            if (updateVehicleRequest.StatusOption.IsSet && updateVehicleRequest.Status == null)
                throw new ArgumentNullException(nameof(updateVehicleRequest.Status), "Property is required for class UpdateVehicleRequest.");

            if (updateVehicleRequest.TollOption.IsSet && updateVehicleRequest.Toll == null)
                throw new ArgumentNullException(nameof(updateVehicleRequest.Toll), "Property is required for class UpdateVehicleRequest.");

            if (updateVehicleRequest.VehicleTypeSubTypeOption.IsSet && updateVehicleRequest.VehicleTypeSubType == null)
                throw new ArgumentNullException(nameof(updateVehicleRequest.VehicleTypeSubType), "Property is required for class UpdateVehicleRequest.");

            if (updateVehicleRequest.AdditionalTechnicalDataOption.IsSet)
            {
                writer.WritePropertyName("additionalTechnicalData");
                JsonSerializer.Serialize(writer, updateVehicleRequest.AdditionalTechnicalData, jsonSerializerOptions);
            }
            if (updateVehicleRequest.DepartmentOption.IsSet)
            {
                writer.WritePropertyName("department");
                JsonSerializer.Serialize(writer, updateVehicleRequest.Department, jsonSerializerOptions);
            }
            if (updateVehicleRequest.DispositionSortingKeyOption.IsSet)
                if (updateVehicleRequest.DispositionSortingKeyOption.Value != null)
                {
                    writer.WriteString("dispositionSortingKey", updateVehicleRequest.DispositionSortingKey);
                    //var __value = updateVehicleRequest.DispositionSortingKeyOption.Value;
                    //writer.WriteString("dispositionSortingKey", __value);
                }
                else
                    writer.WriteNull("dispositionSortingKey");

            if (updateVehicleRequest.FuelTankCapacityOption.IsSet)
                if (updateVehicleRequest.FuelTankCapacityOption.Value != null)
                {
                    writer.WriteNumber("fuelTankCapacity", updateVehicleRequest.FuelTankCapacityOption!.Value);
                    //var __value = updateVehicleRequest.FuelTankCapacityOption.Value;
                    //writer.WriteString("fuelTankCapacity", __value);
                }
                else
                    writer.WriteNull("fuelTankCapacity");

            if (updateVehicleRequest.IsSystemVehicleOption.IsSet)
                if (updateVehicleRequest.IsSystemVehicleOption.Value != null)
                {
                    writer.WriteBoolean("isSystemVehicle", updateVehicleRequest.IsSystemVehicleOption!.Value);
                    //var __value = updateVehicleRequest.IsSystemVehicleOption.Value;
                    //writer.WriteString("isSystemVehicle", __value);
                }
                else
                    writer.WriteNull("isSystemVehicle");

            if (updateVehicleRequest.LoadingSlotsOption.IsSet)
                if (updateVehicleRequest.LoadingSlotsOption.Value != null)
                {
                    writer.WritePropertyName("loadingSlots");
                    JsonSerializer.Serialize(writer, updateVehicleRequest.LoadingSlots, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("loadingSlots");
            if (updateVehicleRequest.LocationOption.IsSet)
                if (updateVehicleRequest.LocationOption.Value != null)
                {
                    writer.WriteString("location", updateVehicleRequest.Location);
                    //var __value = updateVehicleRequest.LocationOption.Value;
                    //writer.WriteString("location", __value);
                }
                else
                    writer.WriteNull("location");

            if (updateVehicleRequest.MatchCodeOption.IsSet)
                if (updateVehicleRequest.MatchCodeOption.Value != null)
                {
                    writer.WriteString("matchCode", updateVehicleRequest.MatchCode);
                    //var __value = updateVehicleRequest.MatchCodeOption.Value;
                    //writer.WriteString("matchCode", __value);
                }
                else
                    writer.WriteNull("matchCode");

            if (updateVehicleRequest.MileageOption.IsSet)
                if (updateVehicleRequest.MileageOption.Value != null)
                {
                    writer.WriteNumber("mileage", updateVehicleRequest.MileageOption!.Value);
                    //var __value = updateVehicleRequest.MileageOption.Value;
                    //writer.WriteString("mileage", __value);
                }
                else
                    writer.WriteNull("mileage");

            if (updateVehicleRequest.MileageDateOption.IsSet)
                if (updateVehicleRequest.MileageDateOption.Value != null)
                {
                    writer.WriteString("mileageDate", updateVehicleRequest.MileageDateOption!.Value.ToString(MileageDateFormat));
                    //var __value = updateVehicleRequest.MileageDateOption.Value;
                    //writer.WriteString("mileageDate", __value);
                }
                else
                    writer.WriteNull("mileageDate");

            if (updateVehicleRequest.OperatingHoursOption.IsSet)
                if (updateVehicleRequest.OperatingHoursOption.Value != null)
                {
                    writer.WriteNumber("operatingHours", updateVehicleRequest.OperatingHoursOption!.Value);
                    //var __value = updateVehicleRequest.OperatingHoursOption.Value;
                    //writer.WriteString("operatingHours", __value);
                }
                else
                    writer.WriteNull("operatingHours");

            if (updateVehicleRequest.QrCodeOption.IsSet)
                if (updateVehicleRequest.QrCodeOption.Value != null)
                {
                    writer.WriteString("qrCode", updateVehicleRequest.QrCode);
                    //var __value = updateVehicleRequest.QrCodeOption.Value;
                    //writer.WriteString("qrCode", __value);
                }
                else
                    writer.WriteNull("qrCode");

            if (updateVehicleRequest.RegistrationCertificateOption.IsSet)
            {
                writer.WritePropertyName("registrationCertificate");
                JsonSerializer.Serialize(writer, updateVehicleRequest.RegistrationCertificate, jsonSerializerOptions);
            }
            if (updateVehicleRequest.RegistrationDocumentOption.IsSet)
                if (updateVehicleRequest.RegistrationDocumentOption.Value != null)
                {
                    writer.WriteString("registrationDocument", updateVehicleRequest.RegistrationDocument);
                    //var __value = updateVehicleRequest.RegistrationDocumentOption.Value;
                    //writer.WriteString("registrationDocument", __value);
                }
                else
                    writer.WriteNull("registrationDocument");

            if (updateVehicleRequest.RegistrationDocumentLocationOption.IsSet)
            {
                writer.WritePropertyName("registrationDocumentLocation");
                JsonSerializer.Serialize(writer, updateVehicleRequest.RegistrationDocumentLocation, jsonSerializerOptions);
            }
            if (updateVehicleRequest.RegistrationPlateOption.IsSet)
            {
                writer.WritePropertyName("registrationPlate");
                JsonSerializer.Serialize(writer, updateVehicleRequest.RegistrationPlate, jsonSerializerOptions);
            }
            if (updateVehicleRequest.RemarkOption.IsSet)
                if (updateVehicleRequest.RemarkOption.Value != null)
                {
                    writer.WriteString("remark", updateVehicleRequest.Remark);
                    //var __value = updateVehicleRequest.RemarkOption.Value;
                    //writer.WriteString("remark", __value);
                }
                else
                    writer.WriteNull("remark");

            if (updateVehicleRequest.StatusOption.IsSet)
            {
                writer.WritePropertyName("status");
                JsonSerializer.Serialize(writer, updateVehicleRequest.Status, jsonSerializerOptions);
            }
            if (updateVehicleRequest.TollOption.IsSet)
            {
                writer.WritePropertyName("toll");
                JsonSerializer.Serialize(writer, updateVehicleRequest.Toll, jsonSerializerOptions);
            }
            if (updateVehicleRequest.UsableUntilOption.IsSet)
                if (updateVehicleRequest.UsableUntilOption.Value != null)
                {
                    writer.WriteString("usableUntil", updateVehicleRequest.UsableUntilOption!.Value.ToString(UsableUntilFormat));
                    //var __value = updateVehicleRequest.UsableUntilOption.Value;
                    //writer.WriteString("usableUntil", __value);
                }
                else
                    writer.WriteNull("usableUntil");

            if (updateVehicleRequest.VehicleRegistrationOption.IsSet)
                if (updateVehicleRequest.VehicleRegistrationOption.Value != null)
                {
                    writer.WriteString("vehicleRegistration", updateVehicleRequest.VehicleRegistration);
                    //var __value = updateVehicleRequest.VehicleRegistrationOption.Value;
                    //writer.WriteString("vehicleRegistration", __value);
                }
                else
                    writer.WriteNull("vehicleRegistration");

            if (updateVehicleRequest.VehicleTypeSubTypeOption.IsSet)
            {
                writer.WritePropertyName("vehicleTypeSubType");
                JsonSerializer.Serialize(writer, updateVehicleRequest.VehicleTypeSubType, jsonSerializerOptions);
            }
            if (updateVehicleRequest.YearOfManufacturingOption.IsSet)
                if (updateVehicleRequest.YearOfManufacturingOption.Value != null)
                {
                    writer.WriteString("yearOfManufacturing", updateVehicleRequest.YearOfManufacturingOption!.Value.ToString(YearOfManufacturingFormat));
                    //var __value = updateVehicleRequest.YearOfManufacturingOption.Value;
                    //writer.WriteString("yearOfManufacturing", __value);
                }
                else
                    writer.WriteNull("yearOfManufacturing");
        }
    }
}
