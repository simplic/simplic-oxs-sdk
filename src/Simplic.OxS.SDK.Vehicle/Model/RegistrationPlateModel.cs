// <auto-generated>
/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle
{
    /// <summary>
    /// RegistrationPlateModel
    /// </summary>
    public partial class RegistrationPlateModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public RegistrationPlateModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationPlateModel" /> class.
        /// </summary>
        /// <param name="countryIso">countryIso</param>
        /// <param name="isSeaosnal">isSeaosnal</param>
        /// <param name="registrationIdentifier">registrationIdentifier</param>
        /// <param name="remark">remark</param>
        //[JsonConstructor]
        public RegistrationPlateModel(Option<string> countryIso = default, Option<bool> isSeaosnal = default, Option<string> registrationIdentifier = default, Option<string> remark = default)
        {
            CountryIsoOption = countryIso;
            IsSeaosnalOption = isSeaosnal;
            RegistrationIdentifierOption = registrationIdentifier;
            RemarkOption = remark;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CountryIso
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CountryIsoOption { get; private set; }

        /// <summary>
        /// Gets or Sets CountryIso
        /// </summary>
        [JsonPropertyName("countryIso")]
        public string? CountryIso { get { return this. CountryIsoOption; } set { this.CountryIsoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsSeaosnal
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsSeaosnalOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsSeaosnal
        /// </summary>
        [JsonPropertyName("isSeaosnal")]
        public bool? IsSeaosnal { get { return this. IsSeaosnalOption; } set { this.IsSeaosnalOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationIdentifier
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> RegistrationIdentifierOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationIdentifier
        /// </summary>
        [JsonPropertyName("registrationIdentifier")]
        public string? RegistrationIdentifier { get { return this. RegistrationIdentifierOption; } set { this.RegistrationIdentifierOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> RemarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Remark
        /// </summary>
        [JsonPropertyName("remark")]
        public string? Remark { get { return this. RemarkOption; } set { this.RemarkOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegistrationPlateModel {\n");
            sb.Append("  CountryIso: ").Append(CountryIso).Append("\n");
            sb.Append("  IsSeaosnal: ").Append(IsSeaosnal).Append("\n");
            sb.Append("  RegistrationIdentifier: ").Append(RegistrationIdentifier).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RegistrationPlateModel" />
    /// </summary>
    public class RegistrationPlateModelJsonConverter : JsonConverter<RegistrationPlateModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="RegistrationPlateModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RegistrationPlateModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> countryIso = default;
            Option<bool> isSeaosnal = default;
            Option<string> registrationIdentifier = default;
            Option<string> remark = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "countryIso":
                            countryIso = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isSeaosnal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isSeaosnal = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "registrationIdentifier":
                            registrationIdentifier = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "remark":
                            remark = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new RegistrationPlateModel(countryIso, isSeaosnal, registrationIdentifier, remark);
            return new RegistrationPlateModel(countryIso, isSeaosnal, registrationIdentifier, remark);
        }

        /// <summary>
        /// Serializes a <see cref="RegistrationPlateModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="registrationPlateModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RegistrationPlateModel registrationPlateModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, registrationPlateModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RegistrationPlateModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="registrationPlateModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, RegistrationPlateModel registrationPlateModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (registrationPlateModel.CountryIsoOption.IsSet)
                if (registrationPlateModel.CountryIsoOption.Value != null)
                {
                    writer.WriteString("countryIso", registrationPlateModel.CountryIso);
                    //var __value = registrationPlateModel.CountryIsoOption.Value;
                    //writer.WriteString("countryIso", __value);
                }
                else
                    writer.WriteNull("countryIso");

            if (registrationPlateModel.IsSeaosnalOption.IsSet)
                if (registrationPlateModel.IsSeaosnalOption.Value != null)
                {
                    writer.WriteBoolean("isSeaosnal", registrationPlateModel.IsSeaosnalOption!.Value);
                    //var __value = registrationPlateModel.IsSeaosnalOption.Value;
                    //writer.WriteString("isSeaosnal", __value);
                }
                else
                    writer.WriteNull("isSeaosnal");

            if (registrationPlateModel.RegistrationIdentifierOption.IsSet)
                if (registrationPlateModel.RegistrationIdentifierOption.Value != null)
                {
                    writer.WriteString("registrationIdentifier", registrationPlateModel.RegistrationIdentifier);
                    //var __value = registrationPlateModel.RegistrationIdentifierOption.Value;
                    //writer.WriteString("registrationIdentifier", __value);
                }
                else
                    writer.WriteNull("registrationIdentifier");

            if (registrationPlateModel.RemarkOption.IsSet)
                if (registrationPlateModel.RemarkOption.Value != null)
                {
                    writer.WriteString("remark", registrationPlateModel.Remark);
                    //var __value = registrationPlateModel.RemarkOption.Value;
                    //writer.WriteString("remark", __value);
                }
                else
                    writer.WriteNull("remark");
        }
    }
}
