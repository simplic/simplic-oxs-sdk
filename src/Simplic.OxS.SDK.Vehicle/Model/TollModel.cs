/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle
{
    /// <summary>
    /// TollModel
    /// </summary>
    [DataContract(Name = "TollModel")]
    public partial class TollModel : IEquatable<TollModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TollModel" /> class.
        /// </summary>
        /// <param name="tollRegistrationDate">tollRegistrationDate.</param>
        /// <param name="axleCount">axleCount.</param>
        /// <param name="emissionClassId">emissionClassId.</param>
        /// <param name="permissableTotalWeight">permissableTotalWeight.</param>
        /// <param name="tollEmissionClassId">tollEmissionClassId.</param>
        /// <param name="orderNumber">orderNumber.</param>
        public TollModel(DateTime? tollRegistrationDate = default(DateTime?), int? axleCount = default(int?), Guid? emissionClassId = default(Guid?), double? permissableTotalWeight = default(double?), Guid? tollEmissionClassId = default(Guid?), string orderNumber = default(string))
        {
            this.TollRegistrationDate = tollRegistrationDate;
            this.AxleCount = axleCount;
            this.EmissionClassId = emissionClassId;
            this.PermissableTotalWeight = permissableTotalWeight;
            this.TollEmissionClassId = tollEmissionClassId;
            this.OrderNumber = orderNumber;
        }

        /// <summary>
        /// Gets or Sets TollRegistrationDate
        /// </summary>
        [DataMember(Name = "tollRegistrationDate", EmitDefaultValue = true)]
        public DateTime? TollRegistrationDate { get; set; }

        /// <summary>
        /// Gets or Sets AxleCount
        /// </summary>
        [DataMember(Name = "axleCount", EmitDefaultValue = true)]
        public int? AxleCount { get; set; }

        /// <summary>
        /// Gets or Sets EmissionClassId
        /// </summary>
        [DataMember(Name = "emissionClassId", EmitDefaultValue = true)]
        public Guid? EmissionClassId { get; set; }

        /// <summary>
        /// Gets or Sets PermissableTotalWeight
        /// </summary>
        [DataMember(Name = "permissableTotalWeight", EmitDefaultValue = true)]
        public double? PermissableTotalWeight { get; set; }

        /// <summary>
        /// Gets or Sets TollEmissionClassId
        /// </summary>
        [DataMember(Name = "tollEmissionClassId", EmitDefaultValue = true)]
        public Guid? TollEmissionClassId { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "orderNumber", EmitDefaultValue = true)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TollModel {\n");
            sb.Append("  TollRegistrationDate: ").Append(TollRegistrationDate).Append("\n");
            sb.Append("  AxleCount: ").Append(AxleCount).Append("\n");
            sb.Append("  EmissionClassId: ").Append(EmissionClassId).Append("\n");
            sb.Append("  PermissableTotalWeight: ").Append(PermissableTotalWeight).Append("\n");
            sb.Append("  TollEmissionClassId: ").Append(TollEmissionClassId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TollModel);
        }

        /// <summary>
        /// Returns true if TollModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TollModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TollModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TollRegistrationDate == input.TollRegistrationDate ||
                    (this.TollRegistrationDate != null &&
                    this.TollRegistrationDate.Equals(input.TollRegistrationDate))
                ) && 
                (
                    this.AxleCount == input.AxleCount ||
                    (this.AxleCount != null &&
                    this.AxleCount.Equals(input.AxleCount))
                ) && 
                (
                    this.EmissionClassId == input.EmissionClassId ||
                    (this.EmissionClassId != null &&
                    this.EmissionClassId.Equals(input.EmissionClassId))
                ) && 
                (
                    this.PermissableTotalWeight == input.PermissableTotalWeight ||
                    (this.PermissableTotalWeight != null &&
                    this.PermissableTotalWeight.Equals(input.PermissableTotalWeight))
                ) && 
                (
                    this.TollEmissionClassId == input.TollEmissionClassId ||
                    (this.TollEmissionClassId != null &&
                    this.TollEmissionClassId.Equals(input.TollEmissionClassId))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TollRegistrationDate != null)
                {
                    hashCode = (hashCode * 59) + this.TollRegistrationDate.GetHashCode();
                }
                if (this.AxleCount != null)
                {
                    hashCode = (hashCode * 59) + this.AxleCount.GetHashCode();
                }
                if (this.EmissionClassId != null)
                {
                    hashCode = (hashCode * 59) + this.EmissionClassId.GetHashCode();
                }
                if (this.PermissableTotalWeight != null)
                {
                    hashCode = (hashCode * 59) + this.PermissableTotalWeight.GetHashCode();
                }
                if (this.TollEmissionClassId != null)
                {
                    hashCode = (hashCode * 59) + this.TollEmissionClassId.GetHashCode();
                }
                if (this.OrderNumber != null)
                {
                    hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
