// <auto-generated>
/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle
{
    /// <summary>
    /// TollModel
    /// </summary>
    public partial class TollModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TollModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TollModel" /> class.
        /// </summary>
        /// <param name="axleCount">axleCount</param>
        /// <param name="emissionClassId">emissionClassId</param>
        /// <param name="orderNumber">orderNumber</param>
        /// <param name="permissableTotalWeight">permissableTotalWeight</param>
        /// <param name="tollEmissionClassId">tollEmissionClassId</param>
        /// <param name="tollRegistrationDate">tollRegistrationDate</param>
        //[JsonConstructor]
        public TollModel(Option<int> axleCount = default, Option<Guid> emissionClassId = default, Option<string> orderNumber = default, Option<double> permissableTotalWeight = default, Option<Guid> tollEmissionClassId = default, Option<DateTime> tollRegistrationDate = default)
        {
            AxleCountOption = axleCount;
            EmissionClassIdOption = emissionClassId;
            OrderNumberOption = orderNumber;
            PermissableTotalWeightOption = permissableTotalWeight;
            TollEmissionClassIdOption = tollEmissionClassId;
            TollRegistrationDateOption = tollRegistrationDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AxleCount
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> AxleCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets AxleCount
        /// </summary>
        [JsonPropertyName("axleCount")]
        public int? AxleCount { get { return this. AxleCountOption; } set { this.AxleCountOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of EmissionClassId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> EmissionClassIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmissionClassId
        /// </summary>
        [JsonPropertyName("emissionClassId")]
        public Guid? EmissionClassId { get { return this. EmissionClassIdOption; } set { this.EmissionClassIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of OrderNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> OrderNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [JsonPropertyName("orderNumber")]
        public string? OrderNumber { get { return this. OrderNumberOption; } set { this.OrderNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PermissableTotalWeight
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> PermissableTotalWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets PermissableTotalWeight
        /// </summary>
        [JsonPropertyName("permissableTotalWeight")]
        public double? PermissableTotalWeight { get { return this. PermissableTotalWeightOption; } set { this.PermissableTotalWeightOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TollEmissionClassId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TollEmissionClassIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TollEmissionClassId
        /// </summary>
        [JsonPropertyName("tollEmissionClassId")]
        public Guid? TollEmissionClassId { get { return this. TollEmissionClassIdOption; } set { this.TollEmissionClassIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of TollRegistrationDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> TollRegistrationDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets TollRegistrationDate
        /// </summary>
        [JsonPropertyName("tollRegistrationDate")]
        public DateTime? TollRegistrationDate { get { return this. TollRegistrationDateOption; } set { this.TollRegistrationDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TollModel {\n");
            sb.Append("  AxleCount: ").Append(AxleCount).Append("\n");
            sb.Append("  EmissionClassId: ").Append(EmissionClassId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  PermissableTotalWeight: ").Append(PermissableTotalWeight).Append("\n");
            sb.Append("  TollEmissionClassId: ").Append(TollEmissionClassId).Append("\n");
            sb.Append("  TollRegistrationDate: ").Append(TollRegistrationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TollModel" />
    /// </summary>
    public class TollModelJsonConverter : JsonConverter<TollModel>
    {
        /// <summary>
        /// The format to use to serialize TollRegistrationDate
        /// </summary>
        public static string TollRegistrationDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TollModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TollModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int> axleCount = default;
            Option<Guid> emissionClassId = default;
            Option<string> orderNumber = default;
            Option<double> permissableTotalWeight = default;
            Option<Guid> tollEmissionClassId = default;
            Option<DateTime> tollRegistrationDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "axleCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                axleCount = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "emissionClassId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                emissionClassId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "orderNumber":
                            orderNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "permissableTotalWeight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissableTotalWeight = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "tollEmissionClassId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tollEmissionClassId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "tollRegistrationDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tollRegistrationDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new TollModel(axleCount, emissionClassId, orderNumber, permissableTotalWeight, tollEmissionClassId, tollRegistrationDate);
            return new TollModel(axleCount, emissionClassId, orderNumber, permissableTotalWeight, tollEmissionClassId, tollRegistrationDate);
        }

        /// <summary>
        /// Serializes a <see cref="TollModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tollModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TollModel tollModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, tollModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TollModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tollModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TollModel tollModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tollModel.AxleCountOption.IsSet)
                if (tollModel.AxleCountOption.Value != null)
                {
                    writer.WriteNumber("axleCount", tollModel.AxleCountOption!.Value);
                    //var __value = tollModel.AxleCountOption.Value;
                    //writer.WriteString("axleCount", __value);
                }
                else
                    writer.WriteNull("axleCount");

            if (tollModel.EmissionClassIdOption.IsSet)
                if (tollModel.EmissionClassIdOption.Value != null)
                {
                    writer.WriteString("emissionClassId", tollModel.EmissionClassIdOption!.Value);
                    //var __value = tollModel.EmissionClassIdOption.Value;
                    //writer.WriteString("emissionClassId", __value);
                }
                else
                    writer.WriteNull("emissionClassId");

            if (tollModel.OrderNumberOption.IsSet)
                if (tollModel.OrderNumberOption.Value != null)
                {
                    writer.WriteString("orderNumber", tollModel.OrderNumber);
                    //var __value = tollModel.OrderNumberOption.Value;
                    //writer.WriteString("orderNumber", __value);
                }
                else
                    writer.WriteNull("orderNumber");

            if (tollModel.PermissableTotalWeightOption.IsSet)
                if (tollModel.PermissableTotalWeightOption.Value != null)
                {
                    writer.WriteNumber("permissableTotalWeight", tollModel.PermissableTotalWeightOption!.Value);
                    //var __value = tollModel.PermissableTotalWeightOption.Value;
                    //writer.WriteString("permissableTotalWeight", __value);
                }
                else
                    writer.WriteNull("permissableTotalWeight");

            if (tollModel.TollEmissionClassIdOption.IsSet)
                if (tollModel.TollEmissionClassIdOption.Value != null)
                {
                    writer.WriteString("tollEmissionClassId", tollModel.TollEmissionClassIdOption!.Value);
                    //var __value = tollModel.TollEmissionClassIdOption.Value;
                    //writer.WriteString("tollEmissionClassId", __value);
                }
                else
                    writer.WriteNull("tollEmissionClassId");

            if (tollModel.TollRegistrationDateOption.IsSet)
                if (tollModel.TollRegistrationDateOption.Value != null)
                {
                    writer.WriteString("tollRegistrationDate", tollModel.TollRegistrationDateOption!.Value.ToString(TollRegistrationDateFormat));
                    //var __value = tollModel.TollRegistrationDateOption.Value;
                    //writer.WriteString("tollRegistrationDate", __value);
                }
                else
                    writer.WriteNull("tollRegistrationDate");
        }
    }
}
