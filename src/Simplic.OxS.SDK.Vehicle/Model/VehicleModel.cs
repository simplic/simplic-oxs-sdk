// <auto-generated>
/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle
{
    /// <summary>
    /// VehicleModel
    /// </summary>
    public partial class VehicleModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public VehicleModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleModel" /> class.
        /// </summary>
        /// <param name="additionalTechnicalData">additionalTechnicalData</param>
        /// <param name="createDateTime">createDateTime</param>
        /// <param name="createUserId">createUserId</param>
        /// <param name="createUserName">createUserName</param>
        /// <param name="department">department</param>
        /// <param name="dispositionSortingKey">dispositionSortingKey</param>
        /// <param name="fuelTankCapacity">fuelTankCapacity</param>
        /// <param name="id">id</param>
        /// <param name="isDeleted">isDeleted</param>
        /// <param name="isSystemVehicle">isSystemVehicle</param>
        /// <param name="loadingSlots">loadingSlots</param>
        /// <param name="location">location</param>
        /// <param name="matchCode">matchCode</param>
        /// <param name="mileage">mileage</param>
        /// <param name="mileageDate">mileageDate</param>
        /// <param name="operatingHours">operatingHours</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="qrCode">qrCode</param>
        /// <param name="registrationCertificate">registrationCertificate</param>
        /// <param name="registrationDocument">registrationDocument</param>
        /// <param name="registrationDocumentLocation">registrationDocumentLocation</param>
        /// <param name="registrationPlate">registrationPlate</param>
        /// <param name="remark">remark</param>
        /// <param name="status">status</param>
        /// <param name="toll">toll</param>
        /// <param name="updateDateTime">updateDateTime</param>
        /// <param name="updateUserId">updateUserId</param>
        /// <param name="updateUserName">updateUserName</param>
        /// <param name="usableUntil">usableUntil</param>
        /// <param name="vehicleRegistration">vehicleRegistration</param>
        /// <param name="vehicleTypeSubType">vehicleTypeSubType</param>
        /// <param name="yearOfManufacturing">yearOfManufacturing</param>
        //[JsonConstructor]
        public VehicleModel(Option<AdditionalTechnicalDataModel> additionalTechnicalData = default, Option<DateTime> createDateTime = default, Option<Guid> createUserId = default, Option<string> createUserName = default, Option<DepartmentModel> department = default, Option<string> dispositionSortingKey = default, Option<int> fuelTankCapacity = default, Option<Guid> id = default, Option<bool> isDeleted = default, Option<bool> isSystemVehicle = default, Option<List<LoadingSlotModel>> loadingSlots = default, Option<string> location = default, Option<string> matchCode = default, Option<double> mileage = default, Option<DateTime> mileageDate = default, Option<double> operatingHours = default, Option<Guid> organizationId = default, Option<string> qrCode = default, Option<RegistrationCertificateModel> registrationCertificate = default, Option<string> registrationDocument = default, Option<RegistrationDocumentLocationModel> registrationDocumentLocation = default, Option<RegistrationPlateModel> registrationPlate = default, Option<string> remark = default, Option<VehicleStatusModel> status = default, Option<TollModel> toll = default, Option<DateTime> updateDateTime = default, Option<Guid> updateUserId = default, Option<string> updateUserName = default, Option<DateTime> usableUntil = default, Option<string> vehicleRegistration = default, Option<VehicleTypeSubTypeModel> vehicleTypeSubType = default, Option<DateTime> yearOfManufacturing = default)
        {
            AdditionalTechnicalDataOption = additionalTechnicalData;
            CreateDateTimeOption = createDateTime;
            CreateUserIdOption = createUserId;
            CreateUserNameOption = createUserName;
            DepartmentOption = department;
            DispositionSortingKeyOption = dispositionSortingKey;
            FuelTankCapacityOption = fuelTankCapacity;
            IdOption = id;
            IsDeletedOption = isDeleted;
            IsSystemVehicleOption = isSystemVehicle;
            LoadingSlotsOption = loadingSlots;
            LocationOption = location;
            MatchCodeOption = matchCode;
            MileageOption = mileage;
            MileageDateOption = mileageDate;
            OperatingHoursOption = operatingHours;
            OrganizationIdOption = organizationId;
            QrCodeOption = qrCode;
            RegistrationCertificateOption = registrationCertificate;
            RegistrationDocumentOption = registrationDocument;
            RegistrationDocumentLocationOption = registrationDocumentLocation;
            RegistrationPlateOption = registrationPlate;
            RemarkOption = remark;
            StatusOption = status;
            TollOption = toll;
            UpdateDateTimeOption = updateDateTime;
            UpdateUserIdOption = updateUserId;
            UpdateUserNameOption = updateUserName;
            UsableUntilOption = usableUntil;
            VehicleRegistrationOption = vehicleRegistration;
            VehicleTypeSubTypeOption = vehicleTypeSubType;
            YearOfManufacturingOption = yearOfManufacturing;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AdditionalTechnicalData
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AdditionalTechnicalDataModel>))]
        public Option<AdditionalTechnicalDataModel> AdditionalTechnicalDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets AdditionalTechnicalData
        /// </summary>
        [JsonPropertyName("additionalTechnicalData")]
        public AdditionalTechnicalDataModel? AdditionalTechnicalData { get { return this. AdditionalTechnicalDataOption; } set { this.AdditionalTechnicalDataOption = new Option<AdditionalTechnicalDataModel>(value); } }

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CreateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserId
        /// </summary>
        [JsonPropertyName("createUserId")]
        public Guid? CreateUserId { get { return this. CreateUserIdOption; } set { this.CreateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserName
        /// </summary>
        [JsonPropertyName("createUserName")]
        public string? CreateUserName { get { return this. CreateUserNameOption; } set { this.CreateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Department
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DepartmentModel>))]
        public Option<DepartmentModel> DepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Department
        /// </summary>
        [JsonPropertyName("department")]
        public DepartmentModel? Department { get { return this. DepartmentOption; } set { this.DepartmentOption = new Option<DepartmentModel>(value); } }

        /// <summary>
        /// Used to track the state of DispositionSortingKey
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DispositionSortingKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets DispositionSortingKey
        /// </summary>
        [JsonPropertyName("dispositionSortingKey")]
        public string? DispositionSortingKey { get { return this. DispositionSortingKeyOption; } set { this.DispositionSortingKeyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FuelTankCapacity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> FuelTankCapacityOption { get; private set; }

        /// <summary>
        /// Gets or Sets FuelTankCapacity
        /// </summary>
        [JsonPropertyName("fuelTankCapacity")]
        public int? FuelTankCapacity { get { return this. FuelTankCapacityOption; } set { this.FuelTankCapacityOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of IsSystemVehicle
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsSystemVehicleOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsSystemVehicle
        /// </summary>
        [JsonPropertyName("isSystemVehicle")]
        public bool? IsSystemVehicle { get { return this. IsSystemVehicleOption; } set { this.IsSystemVehicleOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of LoadingSlots
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<LoadingSlotModel>>))]
        public Option<List<LoadingSlotModel>> LoadingSlotsOption { get; private set; }

        /// <summary>
        /// Gets or Sets LoadingSlots
        /// </summary>
        [JsonPropertyName("loadingSlots")]
        public List<LoadingSlotModel>? LoadingSlots { get { return this. LoadingSlotsOption; } set { this.LoadingSlotsOption = new Option<List<LoadingSlotModel>>(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> LocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public string? Location { get { return this. LocationOption; } set { this.LocationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MatchCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> MatchCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets MatchCode
        /// </summary>
        [JsonPropertyName("matchCode")]
        public string? MatchCode { get { return this. MatchCodeOption; } set { this.MatchCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Mileage
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> MileageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mileage
        /// </summary>
        [JsonPropertyName("mileage")]
        public double? Mileage { get { return this. MileageOption; } set { this.MileageOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of MileageDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> MileageDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets MileageDate
        /// </summary>
        [JsonPropertyName("mileageDate")]
        public DateTime? MileageDate { get { return this. MileageDateOption; } set { this.MileageDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of OperatingHours
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> OperatingHoursOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperatingHours
        /// </summary>
        [JsonPropertyName("operatingHours")]
        public double? OperatingHours { get { return this. OperatingHoursOption; } set { this.OperatingHoursOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of QrCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> QrCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets QrCode
        /// </summary>
        [JsonPropertyName("qrCode")]
        public string? QrCode { get { return this. QrCodeOption; } set { this.QrCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationCertificate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<RegistrationCertificateModel>))]
        public Option<RegistrationCertificateModel> RegistrationCertificateOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationCertificate
        /// </summary>
        [JsonPropertyName("registrationCertificate")]
        public RegistrationCertificateModel? RegistrationCertificate { get { return this. RegistrationCertificateOption; } set { this.RegistrationCertificateOption = new Option<RegistrationCertificateModel>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationDocument
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> RegistrationDocumentOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationDocument
        /// </summary>
        [JsonPropertyName("registrationDocument")]
        public string? RegistrationDocument { get { return this. RegistrationDocumentOption; } set { this.RegistrationDocumentOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationDocumentLocation
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<RegistrationDocumentLocationModel>))]
        public Option<RegistrationDocumentLocationModel> RegistrationDocumentLocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationDocumentLocation
        /// </summary>
        [JsonPropertyName("registrationDocumentLocation")]
        public RegistrationDocumentLocationModel? RegistrationDocumentLocation { get { return this. RegistrationDocumentLocationOption; } set { this.RegistrationDocumentLocationOption = new Option<RegistrationDocumentLocationModel>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationPlate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<RegistrationPlateModel>))]
        public Option<RegistrationPlateModel> RegistrationPlateOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationPlate
        /// </summary>
        [JsonPropertyName("registrationPlate")]
        public RegistrationPlateModel? RegistrationPlate { get { return this. RegistrationPlateOption; } set { this.RegistrationPlateOption = new Option<RegistrationPlateModel>(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> RemarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Remark
        /// </summary>
        [JsonPropertyName("remark")]
        public string? Remark { get { return this. RemarkOption; } set { this.RemarkOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<VehicleStatusModel>))]
        public Option<VehicleStatusModel> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public VehicleStatusModel? Status { get { return this. StatusOption; } set { this.StatusOption = new Option<VehicleStatusModel>(value); } }

        /// <summary>
        /// Used to track the state of Toll
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TollModel>))]
        public Option<TollModel> TollOption { get; private set; }

        /// <summary>
        /// Gets or Sets Toll
        /// </summary>
        [JsonPropertyName("toll")]
        public TollModel? Toll { get { return this. TollOption; } set { this.TollOption = new Option<TollModel>(value); } }

        /// <summary>
        /// Used to track the state of UpdateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UpdateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateDateTime
        /// </summary>
        [JsonPropertyName("updateDateTime")]
        public DateTime? UpdateDateTime { get { return this. UpdateDateTimeOption; } set { this.UpdateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UpdateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserId
        /// </summary>
        [JsonPropertyName("updateUserId")]
        public Guid? UpdateUserId { get { return this. UpdateUserIdOption; } set { this.UpdateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> UpdateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserName
        /// </summary>
        [JsonPropertyName("updateUserName")]
        public string? UpdateUserName { get { return this. UpdateUserNameOption; } set { this.UpdateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UsableUntil
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UsableUntilOption { get; private set; }

        /// <summary>
        /// Gets or Sets UsableUntil
        /// </summary>
        [JsonPropertyName("usableUntil")]
        public DateTime? UsableUntil { get { return this. UsableUntilOption; } set { this.UsableUntilOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of VehicleRegistration
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> VehicleRegistrationOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleRegistration
        /// </summary>
        [JsonPropertyName("vehicleRegistration")]
        public string? VehicleRegistration { get { return this. VehicleRegistrationOption; } set { this.VehicleRegistrationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VehicleTypeSubType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<VehicleTypeSubTypeModel>))]
        public Option<VehicleTypeSubTypeModel> VehicleTypeSubTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleTypeSubType
        /// </summary>
        [JsonPropertyName("vehicleTypeSubType")]
        public VehicleTypeSubTypeModel? VehicleTypeSubType { get { return this. VehicleTypeSubTypeOption; } set { this.VehicleTypeSubTypeOption = new Option<VehicleTypeSubTypeModel>(value); } }

        /// <summary>
        /// Used to track the state of YearOfManufacturing
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> YearOfManufacturingOption { get; private set; }

        /// <summary>
        /// Gets or Sets YearOfManufacturing
        /// </summary>
        [JsonPropertyName("yearOfManufacturing")]
        public DateTime? YearOfManufacturing { get { return this. YearOfManufacturingOption; } set { this.YearOfManufacturingOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VehicleModel {\n");
            sb.Append("  AdditionalTechnicalData: ").Append(AdditionalTechnicalData).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  CreateUserName: ").Append(CreateUserName).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  DispositionSortingKey: ").Append(DispositionSortingKey).Append("\n");
            sb.Append("  FuelTankCapacity: ").Append(FuelTankCapacity).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  IsSystemVehicle: ").Append(IsSystemVehicle).Append("\n");
            sb.Append("  LoadingSlots: ").Append(LoadingSlots).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  MatchCode: ").Append(MatchCode).Append("\n");
            sb.Append("  Mileage: ").Append(Mileage).Append("\n");
            sb.Append("  MileageDate: ").Append(MileageDate).Append("\n");
            sb.Append("  OperatingHours: ").Append(OperatingHours).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  QrCode: ").Append(QrCode).Append("\n");
            sb.Append("  RegistrationCertificate: ").Append(RegistrationCertificate).Append("\n");
            sb.Append("  RegistrationDocument: ").Append(RegistrationDocument).Append("\n");
            sb.Append("  RegistrationDocumentLocation: ").Append(RegistrationDocumentLocation).Append("\n");
            sb.Append("  RegistrationPlate: ").Append(RegistrationPlate).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Toll: ").Append(Toll).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("  UpdateUserName: ").Append(UpdateUserName).Append("\n");
            sb.Append("  UsableUntil: ").Append(UsableUntil).Append("\n");
            sb.Append("  VehicleRegistration: ").Append(VehicleRegistration).Append("\n");
            sb.Append("  VehicleTypeSubType: ").Append(VehicleTypeSubType).Append("\n");
            sb.Append("  YearOfManufacturing: ").Append(YearOfManufacturing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VehicleModel" />
    /// </summary>
    public class VehicleModelJsonConverter : JsonConverter<VehicleModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize MileageDate
        /// </summary>
        public static string MileageDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateDateTime
        /// </summary>
        public static string UpdateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UsableUntil
        /// </summary>
        public static string UsableUntilFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize YearOfManufacturing
        /// </summary>
        public static string YearOfManufacturingFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="VehicleModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VehicleModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AdditionalTechnicalDataModel> additionalTechnicalData = default;
            Option<DateTime> createDateTime = default;
            Option<Guid> createUserId = default;
            Option<string> createUserName = default;
            Option<DepartmentModel> department = default;
            Option<string> dispositionSortingKey = default;
            Option<int> fuelTankCapacity = default;
            Option<Guid> id = default;
            Option<bool> isDeleted = default;
            Option<bool> isSystemVehicle = default;
            Option<List<LoadingSlotModel>> loadingSlots = default;
            Option<string> location = default;
            Option<string> matchCode = default;
            Option<double> mileage = default;
            Option<DateTime> mileageDate = default;
            Option<double> operatingHours = default;
            Option<Guid> organizationId = default;
            Option<string> qrCode = default;
            Option<RegistrationCertificateModel> registrationCertificate = default;
            Option<string> registrationDocument = default;
            Option<RegistrationDocumentLocationModel> registrationDocumentLocation = default;
            Option<RegistrationPlateModel> registrationPlate = default;
            Option<string> remark = default;
            Option<VehicleStatusModel> status = default;
            Option<TollModel> toll = default;
            Option<DateTime> updateDateTime = default;
            Option<Guid> updateUserId = default;
            Option<string> updateUserName = default;
            Option<DateTime> usableUntil = default;
            Option<string> vehicleRegistration = default;
            Option<VehicleTypeSubTypeModel> vehicleTypeSubType = default;
            Option<DateTime> yearOfManufacturing = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "additionalTechnicalData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalTechnicalData = new Option<AdditionalTechnicalDataModel>(JsonSerializer.Deserialize<AdditionalTechnicalDataModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "createUserName":
                            createUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "department":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                department = new Option<DepartmentModel>(JsonSerializer.Deserialize<DepartmentModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dispositionSortingKey":
                            dispositionSortingKey = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fuelTankCapacity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fuelTankCapacity = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "isSystemVehicle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isSystemVehicle = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "loadingSlots":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadingSlots = new Option<List<LoadingSlotModel>>(JsonSerializer.Deserialize<List<LoadingSlotModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "location":
                            location = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "matchCode":
                            matchCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mileage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mileage = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "mileageDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mileageDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "operatingHours":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                operatingHours = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "qrCode":
                            qrCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "registrationCertificate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                registrationCertificate = new Option<RegistrationCertificateModel>(JsonSerializer.Deserialize<RegistrationCertificateModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "registrationDocument":
                            registrationDocument = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "registrationDocumentLocation":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                registrationDocumentLocation = new Option<RegistrationDocumentLocationModel>(JsonSerializer.Deserialize<RegistrationDocumentLocationModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "registrationPlate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                registrationPlate = new Option<RegistrationPlateModel>(JsonSerializer.Deserialize<RegistrationPlateModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "remark":
                            remark = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<VehicleStatusModel>(JsonSerializer.Deserialize<VehicleStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "toll":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                toll = new Option<TollModel>(JsonSerializer.Deserialize<TollModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "updateDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "updateUserName":
                            updateUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "usableUntil":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                usableUntil = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "vehicleRegistration":
                            vehicleRegistration = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vehicleTypeSubType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vehicleTypeSubType = new Option<VehicleTypeSubTypeModel>(JsonSerializer.Deserialize<VehicleTypeSubTypeModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "yearOfManufacturing":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                yearOfManufacturing = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (additionalTechnicalData.IsSet && additionalTechnicalData.Value == null)
                throw new ArgumentNullException(nameof(additionalTechnicalData), "Property is not nullable for class VehicleModel.");

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class VehicleModel.");

            if (department.IsSet && department.Value == null)
                throw new ArgumentNullException(nameof(department), "Property is not nullable for class VehicleModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class VehicleModel.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class VehicleModel.");

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class VehicleModel.");

            if (registrationCertificate.IsSet && registrationCertificate.Value == null)
                throw new ArgumentNullException(nameof(registrationCertificate), "Property is not nullable for class VehicleModel.");

            if (registrationDocumentLocation.IsSet && registrationDocumentLocation.Value == null)
                throw new ArgumentNullException(nameof(registrationDocumentLocation), "Property is not nullable for class VehicleModel.");

            if (registrationPlate.IsSet && registrationPlate.Value == null)
                throw new ArgumentNullException(nameof(registrationPlate), "Property is not nullable for class VehicleModel.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class VehicleModel.");

            if (toll.IsSet && toll.Value == null)
                throw new ArgumentNullException(nameof(toll), "Property is not nullable for class VehicleModel.");

            if (updateDateTime.IsSet && updateDateTime.Value == null)
                throw new ArgumentNullException(nameof(updateDateTime), "Property is not nullable for class VehicleModel.");

            if (vehicleTypeSubType.IsSet && vehicleTypeSubType.Value == null)
                throw new ArgumentNullException(nameof(vehicleTypeSubType), "Property is not nullable for class VehicleModel.");

            //2return new VehicleModel(additionalTechnicalData, createDateTime, createUserId, createUserName, department, dispositionSortingKey, fuelTankCapacity, id, isDeleted, isSystemVehicle, loadingSlots, location, matchCode, mileage, mileageDate, operatingHours, organizationId, qrCode, registrationCertificate, registrationDocument, registrationDocumentLocation, registrationPlate, remark, status, toll, updateDateTime, updateUserId, updateUserName, usableUntil, vehicleRegistration, vehicleTypeSubType, yearOfManufacturing);
            return new VehicleModel(additionalTechnicalData, createDateTime, createUserId, createUserName, department, dispositionSortingKey, fuelTankCapacity, id, isDeleted, isSystemVehicle, loadingSlots, location, matchCode, mileage, mileageDate, operatingHours, organizationId, qrCode, registrationCertificate, registrationDocument, registrationDocumentLocation, registrationPlate, remark, status, toll, updateDateTime, updateUserId, updateUserName, usableUntil, vehicleRegistration, vehicleTypeSubType, yearOfManufacturing);
        }

        /// <summary>
        /// Serializes a <see cref="VehicleModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vehicleModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VehicleModel vehicleModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, vehicleModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VehicleModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vehicleModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, VehicleModel vehicleModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (vehicleModel.AdditionalTechnicalDataOption.IsSet && vehicleModel.AdditionalTechnicalData == null)
                throw new ArgumentNullException(nameof(vehicleModel.AdditionalTechnicalData), "Property is required for class VehicleModel.");

            if (vehicleModel.DepartmentOption.IsSet && vehicleModel.Department == null)
                throw new ArgumentNullException(nameof(vehicleModel.Department), "Property is required for class VehicleModel.");

            if (vehicleModel.RegistrationCertificateOption.IsSet && vehicleModel.RegistrationCertificate == null)
                throw new ArgumentNullException(nameof(vehicleModel.RegistrationCertificate), "Property is required for class VehicleModel.");

            if (vehicleModel.RegistrationDocumentLocationOption.IsSet && vehicleModel.RegistrationDocumentLocation == null)
                throw new ArgumentNullException(nameof(vehicleModel.RegistrationDocumentLocation), "Property is required for class VehicleModel.");

            if (vehicleModel.RegistrationPlateOption.IsSet && vehicleModel.RegistrationPlate == null)
                throw new ArgumentNullException(nameof(vehicleModel.RegistrationPlate), "Property is required for class VehicleModel.");

            if (vehicleModel.StatusOption.IsSet && vehicleModel.Status == null)
                throw new ArgumentNullException(nameof(vehicleModel.Status), "Property is required for class VehicleModel.");

            if (vehicleModel.TollOption.IsSet && vehicleModel.Toll == null)
                throw new ArgumentNullException(nameof(vehicleModel.Toll), "Property is required for class VehicleModel.");

            if (vehicleModel.VehicleTypeSubTypeOption.IsSet && vehicleModel.VehicleTypeSubType == null)
                throw new ArgumentNullException(nameof(vehicleModel.VehicleTypeSubType), "Property is required for class VehicleModel.");

            if (vehicleModel.AdditionalTechnicalDataOption.IsSet)
            {
                writer.WritePropertyName("additionalTechnicalData");
                JsonSerializer.Serialize(writer, vehicleModel.AdditionalTechnicalData, jsonSerializerOptions);
            }
            if (vehicleModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", vehicleModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (vehicleModel.CreateUserIdOption.IsSet)
                if (vehicleModel.CreateUserIdOption.Value != null)
                {
                    writer.WriteString("createUserId", vehicleModel.CreateUserIdOption!.Value);
                    //var __value = vehicleModel.CreateUserIdOption.Value;
                    //writer.WriteString("createUserId", __value);
                }
                else
                    writer.WriteNull("createUserId");

            if (vehicleModel.CreateUserNameOption.IsSet)
                if (vehicleModel.CreateUserNameOption.Value != null)
                {
                    writer.WriteString("createUserName", vehicleModel.CreateUserName);
                    //var __value = vehicleModel.CreateUserNameOption.Value;
                    //writer.WriteString("createUserName", __value);
                }
                else
                    writer.WriteNull("createUserName");

            if (vehicleModel.DepartmentOption.IsSet)
            {
                writer.WritePropertyName("department");
                JsonSerializer.Serialize(writer, vehicleModel.Department, jsonSerializerOptions);
            }
            if (vehicleModel.DispositionSortingKeyOption.IsSet)
                if (vehicleModel.DispositionSortingKeyOption.Value != null)
                {
                    writer.WriteString("dispositionSortingKey", vehicleModel.DispositionSortingKey);
                    //var __value = vehicleModel.DispositionSortingKeyOption.Value;
                    //writer.WriteString("dispositionSortingKey", __value);
                }
                else
                    writer.WriteNull("dispositionSortingKey");

            if (vehicleModel.FuelTankCapacityOption.IsSet)
                if (vehicleModel.FuelTankCapacityOption.Value != null)
                {
                    writer.WriteNumber("fuelTankCapacity", vehicleModel.FuelTankCapacityOption!.Value);
                    //var __value = vehicleModel.FuelTankCapacityOption.Value;
                    //writer.WriteString("fuelTankCapacity", __value);
                }
                else
                    writer.WriteNull("fuelTankCapacity");

            if (vehicleModel.IdOption.IsSet)
                writer.WriteString("id", vehicleModel.IdOption!.Value);

            if (vehicleModel.IsDeletedOption.IsSet)
                writer.WriteBoolean("isDeleted", vehicleModel.IsDeletedOption!.Value);

            if (vehicleModel.IsSystemVehicleOption.IsSet)
                if (vehicleModel.IsSystemVehicleOption.Value != null)
                {
                    writer.WriteBoolean("isSystemVehicle", vehicleModel.IsSystemVehicleOption!.Value);
                    //var __value = vehicleModel.IsSystemVehicleOption.Value;
                    //writer.WriteString("isSystemVehicle", __value);
                }
                else
                    writer.WriteNull("isSystemVehicle");

            if (vehicleModel.LoadingSlotsOption.IsSet)
                if (vehicleModel.LoadingSlotsOption.Value != null)
                {
                    writer.WritePropertyName("loadingSlots");
                    JsonSerializer.Serialize(writer, vehicleModel.LoadingSlots, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("loadingSlots");
            if (vehicleModel.LocationOption.IsSet)
                if (vehicleModel.LocationOption.Value != null)
                {
                    writer.WriteString("location", vehicleModel.Location);
                    //var __value = vehicleModel.LocationOption.Value;
                    //writer.WriteString("location", __value);
                }
                else
                    writer.WriteNull("location");

            if (vehicleModel.MatchCodeOption.IsSet)
                if (vehicleModel.MatchCodeOption.Value != null)
                {
                    writer.WriteString("matchCode", vehicleModel.MatchCode);
                    //var __value = vehicleModel.MatchCodeOption.Value;
                    //writer.WriteString("matchCode", __value);
                }
                else
                    writer.WriteNull("matchCode");

            if (vehicleModel.MileageOption.IsSet)
                if (vehicleModel.MileageOption.Value != null)
                {
                    writer.WriteNumber("mileage", vehicleModel.MileageOption!.Value);
                    //var __value = vehicleModel.MileageOption.Value;
                    //writer.WriteString("mileage", __value);
                }
                else
                    writer.WriteNull("mileage");

            if (vehicleModel.MileageDateOption.IsSet)
                if (vehicleModel.MileageDateOption.Value != null)
                {
                    writer.WriteString("mileageDate", vehicleModel.MileageDateOption!.Value.ToString(MileageDateFormat));
                    //var __value = vehicleModel.MileageDateOption.Value;
                    //writer.WriteString("mileageDate", __value);
                }
                else
                    writer.WriteNull("mileageDate");

            if (vehicleModel.OperatingHoursOption.IsSet)
                if (vehicleModel.OperatingHoursOption.Value != null)
                {
                    writer.WriteNumber("operatingHours", vehicleModel.OperatingHoursOption!.Value);
                    //var __value = vehicleModel.OperatingHoursOption.Value;
                    //writer.WriteString("operatingHours", __value);
                }
                else
                    writer.WriteNull("operatingHours");

            if (vehicleModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", vehicleModel.OrganizationIdOption!.Value);

            if (vehicleModel.QrCodeOption.IsSet)
                if (vehicleModel.QrCodeOption.Value != null)
                {
                    writer.WriteString("qrCode", vehicleModel.QrCode);
                    //var __value = vehicleModel.QrCodeOption.Value;
                    //writer.WriteString("qrCode", __value);
                }
                else
                    writer.WriteNull("qrCode");

            if (vehicleModel.RegistrationCertificateOption.IsSet)
            {
                writer.WritePropertyName("registrationCertificate");
                JsonSerializer.Serialize(writer, vehicleModel.RegistrationCertificate, jsonSerializerOptions);
            }
            if (vehicleModel.RegistrationDocumentOption.IsSet)
                if (vehicleModel.RegistrationDocumentOption.Value != null)
                {
                    writer.WriteString("registrationDocument", vehicleModel.RegistrationDocument);
                    //var __value = vehicleModel.RegistrationDocumentOption.Value;
                    //writer.WriteString("registrationDocument", __value);
                }
                else
                    writer.WriteNull("registrationDocument");

            if (vehicleModel.RegistrationDocumentLocationOption.IsSet)
            {
                writer.WritePropertyName("registrationDocumentLocation");
                JsonSerializer.Serialize(writer, vehicleModel.RegistrationDocumentLocation, jsonSerializerOptions);
            }
            if (vehicleModel.RegistrationPlateOption.IsSet)
            {
                writer.WritePropertyName("registrationPlate");
                JsonSerializer.Serialize(writer, vehicleModel.RegistrationPlate, jsonSerializerOptions);
            }
            if (vehicleModel.RemarkOption.IsSet)
                if (vehicleModel.RemarkOption.Value != null)
                {
                    writer.WriteString("remark", vehicleModel.Remark);
                    //var __value = vehicleModel.RemarkOption.Value;
                    //writer.WriteString("remark", __value);
                }
                else
                    writer.WriteNull("remark");

            if (vehicleModel.StatusOption.IsSet)
            {
                writer.WritePropertyName("status");
                JsonSerializer.Serialize(writer, vehicleModel.Status, jsonSerializerOptions);
            }
            if (vehicleModel.TollOption.IsSet)
            {
                writer.WritePropertyName("toll");
                JsonSerializer.Serialize(writer, vehicleModel.Toll, jsonSerializerOptions);
            }
            if (vehicleModel.UpdateDateTimeOption.IsSet)
                writer.WriteString("updateDateTime", vehicleModel.UpdateDateTimeOption!.Value.ToString(UpdateDateTimeFormat));

            if (vehicleModel.UpdateUserIdOption.IsSet)
                if (vehicleModel.UpdateUserIdOption.Value != null)
                {
                    writer.WriteString("updateUserId", vehicleModel.UpdateUserIdOption!.Value);
                    //var __value = vehicleModel.UpdateUserIdOption.Value;
                    //writer.WriteString("updateUserId", __value);
                }
                else
                    writer.WriteNull("updateUserId");

            if (vehicleModel.UpdateUserNameOption.IsSet)
                if (vehicleModel.UpdateUserNameOption.Value != null)
                {
                    writer.WriteString("updateUserName", vehicleModel.UpdateUserName);
                    //var __value = vehicleModel.UpdateUserNameOption.Value;
                    //writer.WriteString("updateUserName", __value);
                }
                else
                    writer.WriteNull("updateUserName");

            if (vehicleModel.UsableUntilOption.IsSet)
                if (vehicleModel.UsableUntilOption.Value != null)
                {
                    writer.WriteString("usableUntil", vehicleModel.UsableUntilOption!.Value.ToString(UsableUntilFormat));
                    //var __value = vehicleModel.UsableUntilOption.Value;
                    //writer.WriteString("usableUntil", __value);
                }
                else
                    writer.WriteNull("usableUntil");

            if (vehicleModel.VehicleRegistrationOption.IsSet)
                if (vehicleModel.VehicleRegistrationOption.Value != null)
                {
                    writer.WriteString("vehicleRegistration", vehicleModel.VehicleRegistration);
                    //var __value = vehicleModel.VehicleRegistrationOption.Value;
                    //writer.WriteString("vehicleRegistration", __value);
                }
                else
                    writer.WriteNull("vehicleRegistration");

            if (vehicleModel.VehicleTypeSubTypeOption.IsSet)
            {
                writer.WritePropertyName("vehicleTypeSubType");
                JsonSerializer.Serialize(writer, vehicleModel.VehicleTypeSubType, jsonSerializerOptions);
            }
            if (vehicleModel.YearOfManufacturingOption.IsSet)
                if (vehicleModel.YearOfManufacturingOption.Value != null)
                {
                    writer.WriteString("yearOfManufacturing", vehicleModel.YearOfManufacturingOption!.Value.ToString(YearOfManufacturingFormat));
                    //var __value = vehicleModel.YearOfManufacturingOption.Value;
                    //writer.WriteString("yearOfManufacturing", __value);
                }
                else
                    writer.WriteNull("yearOfManufacturing");
        }
    }
}
