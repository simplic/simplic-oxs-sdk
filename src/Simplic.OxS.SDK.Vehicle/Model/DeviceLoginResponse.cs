// <auto-generated>
/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle
{
    /// <summary>
    /// DeviceLoginResponse
    /// </summary>
    public partial class DeviceLoginResponse : IEquatable<DeviceLoginResponse?>, IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public DeviceLoginResponse()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceLoginResponse" /> class.
        /// </summary>
        /// <param name="scheme">scheme</param>
        /// <param name="token">token</param>
        //[JsonConstructor]
        public DeviceLoginResponse(Option<string> scheme = default, Option<string> token = default)
        {
            SchemeOption = scheme;
            TokenOption = token;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Scheme
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> SchemeOption { get; }

        /// <summary>
        /// Gets or Sets Scheme
        /// </summary>
        [JsonPropertyName("scheme")]
        public string? Scheme { get { return this. SchemeOption; } }

        /// <summary>
        /// Used to track the state of Token
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [JsonPropertyName("token")]
        public string? Token { get { return this. TokenOption; } set { this.TokenOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceLoginResponse {\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as DeviceLoginResponse);
        }

        /// <summary>
        /// Returns true if DeviceLoginResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceLoginResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceLoginResponse? input)
        {
            if (input == null)
                return false;

            return 
                (
                    Scheme == input.Scheme ||
                    (Scheme != null &&
                    Scheme.Equals(input.Scheme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Scheme != null)
                    hashCode = (hashCode * 59) + Scheme.GetHashCode();

                

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DeviceLoginResponse" />
    /// </summary>
    public class DeviceLoginResponseJsonConverter : JsonConverter<DeviceLoginResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="DeviceLoginResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DeviceLoginResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> scheme = default;
            Option<string> token = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "scheme":
                            scheme = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "token":
                            token = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new DeviceLoginResponse(scheme, token);
            return new DeviceLoginResponse(scheme, token);
        }

        /// <summary>
        /// Serializes a <see cref="DeviceLoginResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deviceLoginResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DeviceLoginResponse deviceLoginResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, deviceLoginResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DeviceLoginResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deviceLoginResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, DeviceLoginResponse deviceLoginResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (deviceLoginResponse.SchemeOption.IsSet)
                if (deviceLoginResponse.SchemeOption.Value != null)
                {
                    writer.WriteString("scheme", deviceLoginResponse.Scheme);
                    //var __value = deviceLoginResponse.SchemeOption.Value;
                    //writer.WriteString("scheme", __value);
                }
                else
                    writer.WriteNull("scheme");

            if (deviceLoginResponse.TokenOption.IsSet)
                if (deviceLoginResponse.TokenOption.Value != null)
                {
                    writer.WriteString("token", deviceLoginResponse.Token);
                    //var __value = deviceLoginResponse.TokenOption.Value;
                    //writer.WriteString("token", __value);
                }
                else
                    writer.WriteNull("token");
        }
    }
}
