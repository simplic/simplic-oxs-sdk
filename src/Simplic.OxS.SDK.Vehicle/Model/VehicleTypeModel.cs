// <auto-generated>
/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle
{
    /// <summary>
    /// VehicleTypeModel
    /// </summary>
    public partial class VehicleTypeModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public VehicleTypeModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleTypeModel" /> class.
        /// </summary>
        /// <param name="createDateTime">createDateTime</param>
        /// <param name="createUserId">createUserId</param>
        /// <param name="createUserName">createUserName</param>
        /// <param name="displayName">displayName</param>
        /// <param name="id">id</param>
        /// <param name="isDeleted">isDeleted</param>
        /// <param name="name">name</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="updateDateTime">updateDateTime</param>
        /// <param name="updateUserId">updateUserId</param>
        /// <param name="updateUserName">updateUserName</param>
        /// <param name="vehicleSubType">vehicleSubType</param>
        //[JsonConstructor]
        public VehicleTypeModel(Option<DateTime> createDateTime = default, Option<Guid> createUserId = default, Option<string> createUserName = default, Option<string> displayName = default, Option<Guid> id = default, Option<bool> isDeleted = default, Option<string> name = default, Option<Guid> organizationId = default, Option<DateTime> updateDateTime = default, Option<Guid> updateUserId = default, Option<string> updateUserName = default, Option<List<VehicleSubTypeModel>> vehicleSubType = default)
        {
            CreateDateTimeOption = createDateTime;
            CreateUserIdOption = createUserId;
            CreateUserNameOption = createUserName;
            DisplayNameOption = displayName;
            IdOption = id;
            IsDeletedOption = isDeleted;
            NameOption = name;
            OrganizationIdOption = organizationId;
            UpdateDateTimeOption = updateDateTime;
            UpdateUserIdOption = updateUserId;
            UpdateUserNameOption = updateUserName;
            VehicleSubTypeOption = vehicleSubType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CreateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserId
        /// </summary>
        [JsonPropertyName("createUserId")]
        public Guid? CreateUserId { get { return this. CreateUserIdOption; } set { this.CreateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserName
        /// </summary>
        [JsonPropertyName("createUserName")]
        public string? CreateUserName { get { return this. CreateUserNameOption; } set { this.CreateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get { return this. DisplayNameOption; } set { this.DisplayNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of UpdateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UpdateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateDateTime
        /// </summary>
        [JsonPropertyName("updateDateTime")]
        public DateTime? UpdateDateTime { get { return this. UpdateDateTimeOption; } set { this.UpdateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UpdateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserId
        /// </summary>
        [JsonPropertyName("updateUserId")]
        public Guid? UpdateUserId { get { return this. UpdateUserIdOption; } set { this.UpdateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> UpdateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserName
        /// </summary>
        [JsonPropertyName("updateUserName")]
        public string? UpdateUserName { get { return this. UpdateUserNameOption; } set { this.UpdateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VehicleSubType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<VehicleSubTypeModel>>))]
        public Option<List<VehicleSubTypeModel>> VehicleSubTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleSubType
        /// </summary>
        [JsonPropertyName("vehicleSubType")]
        public List<VehicleSubTypeModel>? VehicleSubType { get { return this. VehicleSubTypeOption; } set { this.VehicleSubTypeOption = new Option<List<VehicleSubTypeModel>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VehicleTypeModel {\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  CreateUserName: ").Append(CreateUserName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("  UpdateUserName: ").Append(UpdateUserName).Append("\n");
            sb.Append("  VehicleSubType: ").Append(VehicleSubType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VehicleTypeModel" />
    /// </summary>
    public class VehicleTypeModelJsonConverter : JsonConverter<VehicleTypeModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateDateTime
        /// </summary>
        public static string UpdateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="VehicleTypeModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VehicleTypeModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> createDateTime = default;
            Option<Guid> createUserId = default;
            Option<string> createUserName = default;
            Option<string> displayName = default;
            Option<Guid> id = default;
            Option<bool> isDeleted = default;
            Option<string> name = default;
            Option<Guid> organizationId = default;
            Option<DateTime> updateDateTime = default;
            Option<Guid> updateUserId = default;
            Option<string> updateUserName = default;
            Option<List<VehicleSubTypeModel>> vehicleSubType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "createUserName":
                            createUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "displayName":
                            displayName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "updateDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "updateUserName":
                            updateUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vehicleSubType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vehicleSubType = new Option<List<VehicleSubTypeModel>>(JsonSerializer.Deserialize<List<VehicleSubTypeModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class VehicleTypeModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class VehicleTypeModel.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class VehicleTypeModel.");

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class VehicleTypeModel.");

            if (updateDateTime.IsSet && updateDateTime.Value == null)
                throw new ArgumentNullException(nameof(updateDateTime), "Property is not nullable for class VehicleTypeModel.");

            //2return new VehicleTypeModel(createDateTime, createUserId, createUserName, displayName, id, isDeleted, name, organizationId, updateDateTime, updateUserId, updateUserName, vehicleSubType);
            return new VehicleTypeModel(createDateTime, createUserId, createUserName, displayName, id, isDeleted, name, organizationId, updateDateTime, updateUserId, updateUserName, vehicleSubType);
        }

        /// <summary>
        /// Serializes a <see cref="VehicleTypeModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vehicleTypeModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VehicleTypeModel vehicleTypeModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, vehicleTypeModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VehicleTypeModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vehicleTypeModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, VehicleTypeModel vehicleTypeModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (vehicleTypeModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", vehicleTypeModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (vehicleTypeModel.CreateUserIdOption.IsSet)
                if (vehicleTypeModel.CreateUserIdOption.Value != null)
                {
                    writer.WriteString("createUserId", vehicleTypeModel.CreateUserIdOption!.Value);
                    //var __value = vehicleTypeModel.CreateUserIdOption.Value;
                    //writer.WriteString("createUserId", __value);
                }
                else
                    writer.WriteNull("createUserId");

            if (vehicleTypeModel.CreateUserNameOption.IsSet)
                if (vehicleTypeModel.CreateUserNameOption.Value != null)
                {
                    writer.WriteString("createUserName", vehicleTypeModel.CreateUserName);
                    //var __value = vehicleTypeModel.CreateUserNameOption.Value;
                    //writer.WriteString("createUserName", __value);
                }
                else
                    writer.WriteNull("createUserName");

            if (vehicleTypeModel.DisplayNameOption.IsSet)
                if (vehicleTypeModel.DisplayNameOption.Value != null)
                {
                    writer.WriteString("displayName", vehicleTypeModel.DisplayName);
                    //var __value = vehicleTypeModel.DisplayNameOption.Value;
                    //writer.WriteString("displayName", __value);
                }
                else
                    writer.WriteNull("displayName");

            if (vehicleTypeModel.IdOption.IsSet)
                writer.WriteString("id", vehicleTypeModel.IdOption!.Value);

            if (vehicleTypeModel.IsDeletedOption.IsSet)
                writer.WriteBoolean("isDeleted", vehicleTypeModel.IsDeletedOption!.Value);

            if (vehicleTypeModel.NameOption.IsSet)
                if (vehicleTypeModel.NameOption.Value != null)
                {
                    writer.WriteString("name", vehicleTypeModel.Name);
                    //var __value = vehicleTypeModel.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (vehicleTypeModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", vehicleTypeModel.OrganizationIdOption!.Value);

            if (vehicleTypeModel.UpdateDateTimeOption.IsSet)
                writer.WriteString("updateDateTime", vehicleTypeModel.UpdateDateTimeOption!.Value.ToString(UpdateDateTimeFormat));

            if (vehicleTypeModel.UpdateUserIdOption.IsSet)
                if (vehicleTypeModel.UpdateUserIdOption.Value != null)
                {
                    writer.WriteString("updateUserId", vehicleTypeModel.UpdateUserIdOption!.Value);
                    //var __value = vehicleTypeModel.UpdateUserIdOption.Value;
                    //writer.WriteString("updateUserId", __value);
                }
                else
                    writer.WriteNull("updateUserId");

            if (vehicleTypeModel.UpdateUserNameOption.IsSet)
                if (vehicleTypeModel.UpdateUserNameOption.Value != null)
                {
                    writer.WriteString("updateUserName", vehicleTypeModel.UpdateUserName);
                    //var __value = vehicleTypeModel.UpdateUserNameOption.Value;
                    //writer.WriteString("updateUserName", __value);
                }
                else
                    writer.WriteNull("updateUserName");

            if (vehicleTypeModel.VehicleSubTypeOption.IsSet)
                if (vehicleTypeModel.VehicleSubTypeOption.Value != null)
                {
                    writer.WritePropertyName("vehicleSubType");
                    JsonSerializer.Serialize(writer, vehicleTypeModel.VehicleSubType, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("vehicleSubType");
        }
    }
}
