/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle
{
    /// <summary>
    /// DeviceLoginRequest
    /// </summary>
    [DataContract(Name = "DeviceLoginRequest")]
    public partial class DeviceLoginRequest : IEquatable<DeviceLoginRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceLoginRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeviceLoginRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceLoginRequest" /> class.
        /// </summary>
        /// <param name="apiKey">apiKey (required).</param>
        /// <param name="deviceId">deviceId (required).</param>
        public DeviceLoginRequest(string apiKey = default(string), string deviceId = default(string))
        {
            // to ensure "apiKey" is required (not null)
            if (apiKey == null)
            {
                throw new ArgumentNullException("apiKey is a required property for DeviceLoginRequest and cannot be null");
            }
            this.ApiKey = apiKey;
            // to ensure "deviceId" is required (not null)
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId is a required property for DeviceLoginRequest and cannot be null");
            }
            this.DeviceId = deviceId;
        }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name = "apiKey", IsRequired = true, EmitDefaultValue = true)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name = "deviceId", IsRequired = true, EmitDefaultValue = true)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceLoginRequest {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceLoginRequest);
        }

        /// <summary>
        /// Returns true if DeviceLoginRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceLoginRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceLoginRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKey.GetHashCode();
                }
                if (this.DeviceId != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ApiKey (string) minLength
            if (this.ApiKey != null && this.ApiKey.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApiKey, length must be greater than 1.", new [] { "ApiKey" });
            }

            // DeviceId (string) maxLength
            if (this.DeviceId != null && this.DeviceId.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeviceId, length must be less than 255.", new [] { "DeviceId" });
            }

            // DeviceId (string) minLength
            if (this.DeviceId != null && this.DeviceId.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeviceId, length must be greater than 10.", new [] { "DeviceId" });
            }

            yield break;
        }
    }

}
