// <auto-generated>
/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle
{
    /// <summary>
    /// AdditionalTechnicalDataModel
    /// </summary>
    public partial class AdditionalTechnicalDataModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public AdditionalTechnicalDataModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalTechnicalDataModel" /> class.
        /// </summary>
        /// <param name="emptyWeight">emptyWeight</param>
        /// <param name="frameColor">frameColor</param>
        /// <param name="fuelAmount">fuelAmount</param>
        /// <param name="hasFixedSuperstructure">hasFixedSuperstructure</param>
        /// <param name="payload">payload</param>
        /// <param name="rimSizeAxle1">rimSizeAxle1</param>
        /// <param name="rimSizeAxle2">rimSizeAxle2</param>
        /// <param name="rimSizeAxle3">rimSizeAxle3</param>
        /// <param name="superstructureInsideHeight">superstructureInsideHeight</param>
        /// <param name="superstructureInsideLength">superstructureInsideLength</param>
        /// <param name="superstructureInsideWidth">superstructureInsideWidth</param>
        /// <param name="superstructureLoadingHeightBack">superstructureLoadingHeightBack</param>
        /// <param name="superstructureLoadingHeightFront">superstructureLoadingHeightFront</param>
        /// <param name="superstructureParkingSpaces">superstructureParkingSpaces</param>
        /// <param name="superstructureTireAmount">superstructureTireAmount</param>
        /// <param name="superstructureTireSizeLiftAxle">superstructureTireSizeLiftAxle</param>
        /// <param name="superstructureTireSizeNormalAxis">superstructureTireSizeNormalAxis</param>
        /// <param name="superstructureVolume">superstructureVolume</param>
        /// <param name="tireAmount">tireAmount</param>
        /// <param name="tireSizeDriveAxle">tireSizeDriveAxle</param>
        /// <param name="tireSizeLiftAxle">tireSizeLiftAxle</param>
        /// <param name="tireSizeSteeringAxle">tireSizeSteeringAxle</param>
        /// <param name="totalWeight">totalWeight</param>
        /// <param name="vehicleExecution">vehicleExecution</param>
        //[JsonConstructor]
        public AdditionalTechnicalDataModel(Option<double> emptyWeight = default, Option<string> frameColor = default, Option<double> fuelAmount = default, Option<bool> hasFixedSuperstructure = default, Option<double> payload = default, Option<string> rimSizeAxle1 = default, Option<string> rimSizeAxle2 = default, Option<string> rimSizeAxle3 = default, Option<double> superstructureInsideHeight = default, Option<double> superstructureInsideLength = default, Option<double> superstructureInsideWidth = default, Option<double> superstructureLoadingHeightBack = default, Option<double> superstructureLoadingHeightFront = default, Option<int> superstructureParkingSpaces = default, Option<int> superstructureTireAmount = default, Option<double> superstructureTireSizeLiftAxle = default, Option<double> superstructureTireSizeNormalAxis = default, Option<double> superstructureVolume = default, Option<int> tireAmount = default, Option<double> tireSizeDriveAxle = default, Option<double> tireSizeLiftAxle = default, Option<double> tireSizeSteeringAxle = default, Option<double> totalWeight = default, Option<string> vehicleExecution = default)
        {
            EmptyWeightOption = emptyWeight;
            FrameColorOption = frameColor;
            FuelAmountOption = fuelAmount;
            HasFixedSuperstructureOption = hasFixedSuperstructure;
            PayloadOption = payload;
            RimSizeAxle1Option = rimSizeAxle1;
            RimSizeAxle2Option = rimSizeAxle2;
            RimSizeAxle3Option = rimSizeAxle3;
            SuperstructureInsideHeightOption = superstructureInsideHeight;
            SuperstructureInsideLengthOption = superstructureInsideLength;
            SuperstructureInsideWidthOption = superstructureInsideWidth;
            SuperstructureLoadingHeightBackOption = superstructureLoadingHeightBack;
            SuperstructureLoadingHeightFrontOption = superstructureLoadingHeightFront;
            SuperstructureParkingSpacesOption = superstructureParkingSpaces;
            SuperstructureTireAmountOption = superstructureTireAmount;
            SuperstructureTireSizeLiftAxleOption = superstructureTireSizeLiftAxle;
            SuperstructureTireSizeNormalAxisOption = superstructureTireSizeNormalAxis;
            SuperstructureVolumeOption = superstructureVolume;
            TireAmountOption = tireAmount;
            TireSizeDriveAxleOption = tireSizeDriveAxle;
            TireSizeLiftAxleOption = tireSizeLiftAxle;
            TireSizeSteeringAxleOption = tireSizeSteeringAxle;
            TotalWeightOption = totalWeight;
            VehicleExecutionOption = vehicleExecution;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EmptyWeight
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> EmptyWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmptyWeight
        /// </summary>
        [JsonPropertyName("emptyWeight")]
        public double? EmptyWeight { get { return this. EmptyWeightOption; } set { this.EmptyWeightOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of FrameColor
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> FrameColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets FrameColor
        /// </summary>
        [JsonPropertyName("frameColor")]
        public string? FrameColor { get { return this. FrameColorOption; } set { this.FrameColorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FuelAmount
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> FuelAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets FuelAmount
        /// </summary>
        [JsonPropertyName("fuelAmount")]
        public double? FuelAmount { get { return this. FuelAmountOption; } set { this.FuelAmountOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of HasFixedSuperstructure
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> HasFixedSuperstructureOption { get; private set; }

        /// <summary>
        /// Gets or Sets HasFixedSuperstructure
        /// </summary>
        [JsonPropertyName("hasFixedSuperstructure")]
        public bool? HasFixedSuperstructure { get { return this. HasFixedSuperstructureOption; } set { this.HasFixedSuperstructureOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Payload
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> PayloadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [JsonPropertyName("payload")]
        public double? Payload { get { return this. PayloadOption; } set { this.PayloadOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of RimSizeAxle1
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> RimSizeAxle1Option { get; private set; }

        /// <summary>
        /// Gets or Sets RimSizeAxle1
        /// </summary>
        [JsonPropertyName("rimSizeAxle1")]
        public string? RimSizeAxle1 { get { return this. RimSizeAxle1Option; } set { this.RimSizeAxle1Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RimSizeAxle2
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> RimSizeAxle2Option { get; private set; }

        /// <summary>
        /// Gets or Sets RimSizeAxle2
        /// </summary>
        [JsonPropertyName("rimSizeAxle2")]
        public string? RimSizeAxle2 { get { return this. RimSizeAxle2Option; } set { this.RimSizeAxle2Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RimSizeAxle3
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> RimSizeAxle3Option { get; private set; }

        /// <summary>
        /// Gets or Sets RimSizeAxle3
        /// </summary>
        [JsonPropertyName("rimSizeAxle3")]
        public string? RimSizeAxle3 { get { return this. RimSizeAxle3Option; } set { this.RimSizeAxle3Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SuperstructureInsideHeight
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SuperstructureInsideHeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuperstructureInsideHeight
        /// </summary>
        [JsonPropertyName("superstructureInsideHeight")]
        public double? SuperstructureInsideHeight { get { return this. SuperstructureInsideHeightOption; } set { this.SuperstructureInsideHeightOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SuperstructureInsideLength
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SuperstructureInsideLengthOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuperstructureInsideLength
        /// </summary>
        [JsonPropertyName("superstructureInsideLength")]
        public double? SuperstructureInsideLength { get { return this. SuperstructureInsideLengthOption; } set { this.SuperstructureInsideLengthOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SuperstructureInsideWidth
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SuperstructureInsideWidthOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuperstructureInsideWidth
        /// </summary>
        [JsonPropertyName("superstructureInsideWidth")]
        public double? SuperstructureInsideWidth { get { return this. SuperstructureInsideWidthOption; } set { this.SuperstructureInsideWidthOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SuperstructureLoadingHeightBack
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SuperstructureLoadingHeightBackOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuperstructureLoadingHeightBack
        /// </summary>
        [JsonPropertyName("superstructureLoadingHeightBack")]
        public double? SuperstructureLoadingHeightBack { get { return this. SuperstructureLoadingHeightBackOption; } set { this.SuperstructureLoadingHeightBackOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SuperstructureLoadingHeightFront
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SuperstructureLoadingHeightFrontOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuperstructureLoadingHeightFront
        /// </summary>
        [JsonPropertyName("superstructureLoadingHeightFront")]
        public double? SuperstructureLoadingHeightFront { get { return this. SuperstructureLoadingHeightFrontOption; } set { this.SuperstructureLoadingHeightFrontOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SuperstructureParkingSpaces
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> SuperstructureParkingSpacesOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuperstructureParkingSpaces
        /// </summary>
        [JsonPropertyName("superstructureParkingSpaces")]
        public int? SuperstructureParkingSpaces { get { return this. SuperstructureParkingSpacesOption; } set { this.SuperstructureParkingSpacesOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of SuperstructureTireAmount
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> SuperstructureTireAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuperstructureTireAmount
        /// </summary>
        [JsonPropertyName("superstructureTireAmount")]
        public int? SuperstructureTireAmount { get { return this. SuperstructureTireAmountOption; } set { this.SuperstructureTireAmountOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of SuperstructureTireSizeLiftAxle
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SuperstructureTireSizeLiftAxleOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuperstructureTireSizeLiftAxle
        /// </summary>
        [JsonPropertyName("superstructureTireSizeLiftAxle")]
        public double? SuperstructureTireSizeLiftAxle { get { return this. SuperstructureTireSizeLiftAxleOption; } set { this.SuperstructureTireSizeLiftAxleOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SuperstructureTireSizeNormalAxis
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SuperstructureTireSizeNormalAxisOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuperstructureTireSizeNormalAxis
        /// </summary>
        [JsonPropertyName("superstructureTireSizeNormalAxis")]
        public double? SuperstructureTireSizeNormalAxis { get { return this. SuperstructureTireSizeNormalAxisOption; } set { this.SuperstructureTireSizeNormalAxisOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SuperstructureVolume
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SuperstructureVolumeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuperstructureVolume
        /// </summary>
        [JsonPropertyName("superstructureVolume")]
        public double? SuperstructureVolume { get { return this. SuperstructureVolumeOption; } set { this.SuperstructureVolumeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TireAmount
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> TireAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets TireAmount
        /// </summary>
        [JsonPropertyName("tireAmount")]
        public int? TireAmount { get { return this. TireAmountOption; } set { this.TireAmountOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of TireSizeDriveAxle
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TireSizeDriveAxleOption { get; private set; }

        /// <summary>
        /// Gets or Sets TireSizeDriveAxle
        /// </summary>
        [JsonPropertyName("tireSizeDriveAxle")]
        public double? TireSizeDriveAxle { get { return this. TireSizeDriveAxleOption; } set { this.TireSizeDriveAxleOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TireSizeLiftAxle
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TireSizeLiftAxleOption { get; private set; }

        /// <summary>
        /// Gets or Sets TireSizeLiftAxle
        /// </summary>
        [JsonPropertyName("tireSizeLiftAxle")]
        public double? TireSizeLiftAxle { get { return this. TireSizeLiftAxleOption; } set { this.TireSizeLiftAxleOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TireSizeSteeringAxle
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TireSizeSteeringAxleOption { get; private set; }

        /// <summary>
        /// Gets or Sets TireSizeSteeringAxle
        /// </summary>
        [JsonPropertyName("tireSizeSteeringAxle")]
        public double? TireSizeSteeringAxle { get { return this. TireSizeSteeringAxleOption; } set { this.TireSizeSteeringAxleOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TotalWeight
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalWeight
        /// </summary>
        [JsonPropertyName("totalWeight")]
        public double? TotalWeight { get { return this. TotalWeightOption; } set { this.TotalWeightOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of VehicleExecution
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> VehicleExecutionOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleExecution
        /// </summary>
        [JsonPropertyName("vehicleExecution")]
        public string? VehicleExecution { get { return this. VehicleExecutionOption; } set { this.VehicleExecutionOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalTechnicalDataModel {\n");
            sb.Append("  EmptyWeight: ").Append(EmptyWeight).Append("\n");
            sb.Append("  FrameColor: ").Append(FrameColor).Append("\n");
            sb.Append("  FuelAmount: ").Append(FuelAmount).Append("\n");
            sb.Append("  HasFixedSuperstructure: ").Append(HasFixedSuperstructure).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  RimSizeAxle1: ").Append(RimSizeAxle1).Append("\n");
            sb.Append("  RimSizeAxle2: ").Append(RimSizeAxle2).Append("\n");
            sb.Append("  RimSizeAxle3: ").Append(RimSizeAxle3).Append("\n");
            sb.Append("  SuperstructureInsideHeight: ").Append(SuperstructureInsideHeight).Append("\n");
            sb.Append("  SuperstructureInsideLength: ").Append(SuperstructureInsideLength).Append("\n");
            sb.Append("  SuperstructureInsideWidth: ").Append(SuperstructureInsideWidth).Append("\n");
            sb.Append("  SuperstructureLoadingHeightBack: ").Append(SuperstructureLoadingHeightBack).Append("\n");
            sb.Append("  SuperstructureLoadingHeightFront: ").Append(SuperstructureLoadingHeightFront).Append("\n");
            sb.Append("  SuperstructureParkingSpaces: ").Append(SuperstructureParkingSpaces).Append("\n");
            sb.Append("  SuperstructureTireAmount: ").Append(SuperstructureTireAmount).Append("\n");
            sb.Append("  SuperstructureTireSizeLiftAxle: ").Append(SuperstructureTireSizeLiftAxle).Append("\n");
            sb.Append("  SuperstructureTireSizeNormalAxis: ").Append(SuperstructureTireSizeNormalAxis).Append("\n");
            sb.Append("  SuperstructureVolume: ").Append(SuperstructureVolume).Append("\n");
            sb.Append("  TireAmount: ").Append(TireAmount).Append("\n");
            sb.Append("  TireSizeDriveAxle: ").Append(TireSizeDriveAxle).Append("\n");
            sb.Append("  TireSizeLiftAxle: ").Append(TireSizeLiftAxle).Append("\n");
            sb.Append("  TireSizeSteeringAxle: ").Append(TireSizeSteeringAxle).Append("\n");
            sb.Append("  TotalWeight: ").Append(TotalWeight).Append("\n");
            sb.Append("  VehicleExecution: ").Append(VehicleExecution).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalTechnicalDataModel" />
    /// </summary>
    public class AdditionalTechnicalDataModelJsonConverter : JsonConverter<AdditionalTechnicalDataModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalTechnicalDataModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalTechnicalDataModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double> emptyWeight = default;
            Option<string> frameColor = default;
            Option<double> fuelAmount = default;
            Option<bool> hasFixedSuperstructure = default;
            Option<double> payload = default;
            Option<string> rimSizeAxle1 = default;
            Option<string> rimSizeAxle2 = default;
            Option<string> rimSizeAxle3 = default;
            Option<double> superstructureInsideHeight = default;
            Option<double> superstructureInsideLength = default;
            Option<double> superstructureInsideWidth = default;
            Option<double> superstructureLoadingHeightBack = default;
            Option<double> superstructureLoadingHeightFront = default;
            Option<int> superstructureParkingSpaces = default;
            Option<int> superstructureTireAmount = default;
            Option<double> superstructureTireSizeLiftAxle = default;
            Option<double> superstructureTireSizeNormalAxis = default;
            Option<double> superstructureVolume = default;
            Option<int> tireAmount = default;
            Option<double> tireSizeDriveAxle = default;
            Option<double> tireSizeLiftAxle = default;
            Option<double> tireSizeSteeringAxle = default;
            Option<double> totalWeight = default;
            Option<string> vehicleExecution = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "emptyWeight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                emptyWeight = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "frameColor":
                            frameColor = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fuelAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fuelAmount = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "hasFixedSuperstructure":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hasFixedSuperstructure = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "payload":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payload = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "rimSizeAxle1":
                            rimSizeAxle1 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rimSizeAxle2":
                            rimSizeAxle2 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rimSizeAxle3":
                            rimSizeAxle3 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "superstructureInsideHeight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                superstructureInsideHeight = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "superstructureInsideLength":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                superstructureInsideLength = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "superstructureInsideWidth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                superstructureInsideWidth = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "superstructureLoadingHeightBack":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                superstructureLoadingHeightBack = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "superstructureLoadingHeightFront":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                superstructureLoadingHeightFront = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "superstructureParkingSpaces":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                superstructureParkingSpaces = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "superstructureTireAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                superstructureTireAmount = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "superstructureTireSizeLiftAxle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                superstructureTireSizeLiftAxle = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "superstructureTireSizeNormalAxis":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                superstructureTireSizeNormalAxis = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "superstructureVolume":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                superstructureVolume = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "tireAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tireAmount = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "tireSizeDriveAxle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tireSizeDriveAxle = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "tireSizeLiftAxle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tireSizeLiftAxle = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "tireSizeSteeringAxle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tireSizeSteeringAxle = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalWeight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalWeight = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "vehicleExecution":
                            vehicleExecution = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new AdditionalTechnicalDataModel(emptyWeight, frameColor, fuelAmount, hasFixedSuperstructure, payload, rimSizeAxle1, rimSizeAxle2, rimSizeAxle3, superstructureInsideHeight, superstructureInsideLength, superstructureInsideWidth, superstructureLoadingHeightBack, superstructureLoadingHeightFront, superstructureParkingSpaces, superstructureTireAmount, superstructureTireSizeLiftAxle, superstructureTireSizeNormalAxis, superstructureVolume, tireAmount, tireSizeDriveAxle, tireSizeLiftAxle, tireSizeSteeringAxle, totalWeight, vehicleExecution);
            return new AdditionalTechnicalDataModel(emptyWeight, frameColor, fuelAmount, hasFixedSuperstructure, payload, rimSizeAxle1, rimSizeAxle2, rimSizeAxle3, superstructureInsideHeight, superstructureInsideLength, superstructureInsideWidth, superstructureLoadingHeightBack, superstructureLoadingHeightFront, superstructureParkingSpaces, superstructureTireAmount, superstructureTireSizeLiftAxle, superstructureTireSizeNormalAxis, superstructureVolume, tireAmount, tireSizeDriveAxle, tireSizeLiftAxle, tireSizeSteeringAxle, totalWeight, vehicleExecution);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalTechnicalDataModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalTechnicalDataModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalTechnicalDataModel additionalTechnicalDataModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, additionalTechnicalDataModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalTechnicalDataModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalTechnicalDataModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, AdditionalTechnicalDataModel additionalTechnicalDataModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalTechnicalDataModel.EmptyWeightOption.IsSet)
                if (additionalTechnicalDataModel.EmptyWeightOption.Value != null)
                {
                    writer.WriteNumber("emptyWeight", additionalTechnicalDataModel.EmptyWeightOption!.Value);
                    //var __value = additionalTechnicalDataModel.EmptyWeightOption.Value;
                    //writer.WriteString("emptyWeight", __value);
                }
                else
                    writer.WriteNull("emptyWeight");

            if (additionalTechnicalDataModel.FrameColorOption.IsSet)
                if (additionalTechnicalDataModel.FrameColorOption.Value != null)
                {
                    writer.WriteString("frameColor", additionalTechnicalDataModel.FrameColor);
                    //var __value = additionalTechnicalDataModel.FrameColorOption.Value;
                    //writer.WriteString("frameColor", __value);
                }
                else
                    writer.WriteNull("frameColor");

            if (additionalTechnicalDataModel.FuelAmountOption.IsSet)
                if (additionalTechnicalDataModel.FuelAmountOption.Value != null)
                {
                    writer.WriteNumber("fuelAmount", additionalTechnicalDataModel.FuelAmountOption!.Value);
                    //var __value = additionalTechnicalDataModel.FuelAmountOption.Value;
                    //writer.WriteString("fuelAmount", __value);
                }
                else
                    writer.WriteNull("fuelAmount");

            if (additionalTechnicalDataModel.HasFixedSuperstructureOption.IsSet)
                if (additionalTechnicalDataModel.HasFixedSuperstructureOption.Value != null)
                {
                    writer.WriteBoolean("hasFixedSuperstructure", additionalTechnicalDataModel.HasFixedSuperstructureOption!.Value);
                    //var __value = additionalTechnicalDataModel.HasFixedSuperstructureOption.Value;
                    //writer.WriteString("hasFixedSuperstructure", __value);
                }
                else
                    writer.WriteNull("hasFixedSuperstructure");

            if (additionalTechnicalDataModel.PayloadOption.IsSet)
                if (additionalTechnicalDataModel.PayloadOption.Value != null)
                {
                    writer.WriteNumber("payload", additionalTechnicalDataModel.PayloadOption!.Value);
                    //var __value = additionalTechnicalDataModel.PayloadOption.Value;
                    //writer.WriteString("payload", __value);
                }
                else
                    writer.WriteNull("payload");

            if (additionalTechnicalDataModel.RimSizeAxle1Option.IsSet)
                if (additionalTechnicalDataModel.RimSizeAxle1Option.Value != null)
                {
                    writer.WriteString("rimSizeAxle1", additionalTechnicalDataModel.RimSizeAxle1);
                    //var __value = additionalTechnicalDataModel.RimSizeAxle1Option.Value;
                    //writer.WriteString("rimSizeAxle1", __value);
                }
                else
                    writer.WriteNull("rimSizeAxle1");

            if (additionalTechnicalDataModel.RimSizeAxle2Option.IsSet)
                if (additionalTechnicalDataModel.RimSizeAxle2Option.Value != null)
                {
                    writer.WriteString("rimSizeAxle2", additionalTechnicalDataModel.RimSizeAxle2);
                    //var __value = additionalTechnicalDataModel.RimSizeAxle2Option.Value;
                    //writer.WriteString("rimSizeAxle2", __value);
                }
                else
                    writer.WriteNull("rimSizeAxle2");

            if (additionalTechnicalDataModel.RimSizeAxle3Option.IsSet)
                if (additionalTechnicalDataModel.RimSizeAxle3Option.Value != null)
                {
                    writer.WriteString("rimSizeAxle3", additionalTechnicalDataModel.RimSizeAxle3);
                    //var __value = additionalTechnicalDataModel.RimSizeAxle3Option.Value;
                    //writer.WriteString("rimSizeAxle3", __value);
                }
                else
                    writer.WriteNull("rimSizeAxle3");

            if (additionalTechnicalDataModel.SuperstructureInsideHeightOption.IsSet)
                if (additionalTechnicalDataModel.SuperstructureInsideHeightOption.Value != null)
                {
                    writer.WriteNumber("superstructureInsideHeight", additionalTechnicalDataModel.SuperstructureInsideHeightOption!.Value);
                    //var __value = additionalTechnicalDataModel.SuperstructureInsideHeightOption.Value;
                    //writer.WriteString("superstructureInsideHeight", __value);
                }
                else
                    writer.WriteNull("superstructureInsideHeight");

            if (additionalTechnicalDataModel.SuperstructureInsideLengthOption.IsSet)
                if (additionalTechnicalDataModel.SuperstructureInsideLengthOption.Value != null)
                {
                    writer.WriteNumber("superstructureInsideLength", additionalTechnicalDataModel.SuperstructureInsideLengthOption!.Value);
                    //var __value = additionalTechnicalDataModel.SuperstructureInsideLengthOption.Value;
                    //writer.WriteString("superstructureInsideLength", __value);
                }
                else
                    writer.WriteNull("superstructureInsideLength");

            if (additionalTechnicalDataModel.SuperstructureInsideWidthOption.IsSet)
                if (additionalTechnicalDataModel.SuperstructureInsideWidthOption.Value != null)
                {
                    writer.WriteNumber("superstructureInsideWidth", additionalTechnicalDataModel.SuperstructureInsideWidthOption!.Value);
                    //var __value = additionalTechnicalDataModel.SuperstructureInsideWidthOption.Value;
                    //writer.WriteString("superstructureInsideWidth", __value);
                }
                else
                    writer.WriteNull("superstructureInsideWidth");

            if (additionalTechnicalDataModel.SuperstructureLoadingHeightBackOption.IsSet)
                if (additionalTechnicalDataModel.SuperstructureLoadingHeightBackOption.Value != null)
                {
                    writer.WriteNumber("superstructureLoadingHeightBack", additionalTechnicalDataModel.SuperstructureLoadingHeightBackOption!.Value);
                    //var __value = additionalTechnicalDataModel.SuperstructureLoadingHeightBackOption.Value;
                    //writer.WriteString("superstructureLoadingHeightBack", __value);
                }
                else
                    writer.WriteNull("superstructureLoadingHeightBack");

            if (additionalTechnicalDataModel.SuperstructureLoadingHeightFrontOption.IsSet)
                if (additionalTechnicalDataModel.SuperstructureLoadingHeightFrontOption.Value != null)
                {
                    writer.WriteNumber("superstructureLoadingHeightFront", additionalTechnicalDataModel.SuperstructureLoadingHeightFrontOption!.Value);
                    //var __value = additionalTechnicalDataModel.SuperstructureLoadingHeightFrontOption.Value;
                    //writer.WriteString("superstructureLoadingHeightFront", __value);
                }
                else
                    writer.WriteNull("superstructureLoadingHeightFront");

            if (additionalTechnicalDataModel.SuperstructureParkingSpacesOption.IsSet)
                if (additionalTechnicalDataModel.SuperstructureParkingSpacesOption.Value != null)
                {
                    writer.WriteNumber("superstructureParkingSpaces", additionalTechnicalDataModel.SuperstructureParkingSpacesOption!.Value);
                    //var __value = additionalTechnicalDataModel.SuperstructureParkingSpacesOption.Value;
                    //writer.WriteString("superstructureParkingSpaces", __value);
                }
                else
                    writer.WriteNull("superstructureParkingSpaces");

            if (additionalTechnicalDataModel.SuperstructureTireAmountOption.IsSet)
                if (additionalTechnicalDataModel.SuperstructureTireAmountOption.Value != null)
                {
                    writer.WriteNumber("superstructureTireAmount", additionalTechnicalDataModel.SuperstructureTireAmountOption!.Value);
                    //var __value = additionalTechnicalDataModel.SuperstructureTireAmountOption.Value;
                    //writer.WriteString("superstructureTireAmount", __value);
                }
                else
                    writer.WriteNull("superstructureTireAmount");

            if (additionalTechnicalDataModel.SuperstructureTireSizeLiftAxleOption.IsSet)
                if (additionalTechnicalDataModel.SuperstructureTireSizeLiftAxleOption.Value != null)
                {
                    writer.WriteNumber("superstructureTireSizeLiftAxle", additionalTechnicalDataModel.SuperstructureTireSizeLiftAxleOption!.Value);
                    //var __value = additionalTechnicalDataModel.SuperstructureTireSizeLiftAxleOption.Value;
                    //writer.WriteString("superstructureTireSizeLiftAxle", __value);
                }
                else
                    writer.WriteNull("superstructureTireSizeLiftAxle");

            if (additionalTechnicalDataModel.SuperstructureTireSizeNormalAxisOption.IsSet)
                if (additionalTechnicalDataModel.SuperstructureTireSizeNormalAxisOption.Value != null)
                {
                    writer.WriteNumber("superstructureTireSizeNormalAxis", additionalTechnicalDataModel.SuperstructureTireSizeNormalAxisOption!.Value);
                    //var __value = additionalTechnicalDataModel.SuperstructureTireSizeNormalAxisOption.Value;
                    //writer.WriteString("superstructureTireSizeNormalAxis", __value);
                }
                else
                    writer.WriteNull("superstructureTireSizeNormalAxis");

            if (additionalTechnicalDataModel.SuperstructureVolumeOption.IsSet)
                if (additionalTechnicalDataModel.SuperstructureVolumeOption.Value != null)
                {
                    writer.WriteNumber("superstructureVolume", additionalTechnicalDataModel.SuperstructureVolumeOption!.Value);
                    //var __value = additionalTechnicalDataModel.SuperstructureVolumeOption.Value;
                    //writer.WriteString("superstructureVolume", __value);
                }
                else
                    writer.WriteNull("superstructureVolume");

            if (additionalTechnicalDataModel.TireAmountOption.IsSet)
                if (additionalTechnicalDataModel.TireAmountOption.Value != null)
                {
                    writer.WriteNumber("tireAmount", additionalTechnicalDataModel.TireAmountOption!.Value);
                    //var __value = additionalTechnicalDataModel.TireAmountOption.Value;
                    //writer.WriteString("tireAmount", __value);
                }
                else
                    writer.WriteNull("tireAmount");

            if (additionalTechnicalDataModel.TireSizeDriveAxleOption.IsSet)
                if (additionalTechnicalDataModel.TireSizeDriveAxleOption.Value != null)
                {
                    writer.WriteNumber("tireSizeDriveAxle", additionalTechnicalDataModel.TireSizeDriveAxleOption!.Value);
                    //var __value = additionalTechnicalDataModel.TireSizeDriveAxleOption.Value;
                    //writer.WriteString("tireSizeDriveAxle", __value);
                }
                else
                    writer.WriteNull("tireSizeDriveAxle");

            if (additionalTechnicalDataModel.TireSizeLiftAxleOption.IsSet)
                if (additionalTechnicalDataModel.TireSizeLiftAxleOption.Value != null)
                {
                    writer.WriteNumber("tireSizeLiftAxle", additionalTechnicalDataModel.TireSizeLiftAxleOption!.Value);
                    //var __value = additionalTechnicalDataModel.TireSizeLiftAxleOption.Value;
                    //writer.WriteString("tireSizeLiftAxle", __value);
                }
                else
                    writer.WriteNull("tireSizeLiftAxle");

            if (additionalTechnicalDataModel.TireSizeSteeringAxleOption.IsSet)
                if (additionalTechnicalDataModel.TireSizeSteeringAxleOption.Value != null)
                {
                    writer.WriteNumber("tireSizeSteeringAxle", additionalTechnicalDataModel.TireSizeSteeringAxleOption!.Value);
                    //var __value = additionalTechnicalDataModel.TireSizeSteeringAxleOption.Value;
                    //writer.WriteString("tireSizeSteeringAxle", __value);
                }
                else
                    writer.WriteNull("tireSizeSteeringAxle");

            if (additionalTechnicalDataModel.TotalWeightOption.IsSet)
                if (additionalTechnicalDataModel.TotalWeightOption.Value != null)
                {
                    writer.WriteNumber("totalWeight", additionalTechnicalDataModel.TotalWeightOption!.Value);
                    //var __value = additionalTechnicalDataModel.TotalWeightOption.Value;
                    //writer.WriteString("totalWeight", __value);
                }
                else
                    writer.WriteNull("totalWeight");

            if (additionalTechnicalDataModel.VehicleExecutionOption.IsSet)
                if (additionalTechnicalDataModel.VehicleExecutionOption.Value != null)
                {
                    writer.WriteString("vehicleExecution", additionalTechnicalDataModel.VehicleExecution);
                    //var __value = additionalTechnicalDataModel.VehicleExecutionOption.Value;
                    //writer.WriteString("vehicleExecution", __value);
                }
                else
                    writer.WriteNull("vehicleExecution");
        }
    }
}
