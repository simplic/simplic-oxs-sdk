/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Vehicle.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Vehicle
{
    /// <summary>
    /// AdditionalTechnicalDataModel
    /// </summary>
    [DataContract(Name = "AdditionalTechnicalDataModel")]
    public partial class AdditionalTechnicalDataModel : IEquatable<AdditionalTechnicalDataModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalTechnicalDataModel" /> class.
        /// </summary>
        /// <param name="emptyWeight">emptyWeight.</param>
        /// <param name="totalWeight">totalWeight.</param>
        /// <param name="tireAmount">tireAmount.</param>
        /// <param name="tireSizeSteeringAxle">tireSizeSteeringAxle.</param>
        /// <param name="tireSizeLiftAxle">tireSizeLiftAxle.</param>
        /// <param name="tireSizeDriveAxle">tireSizeDriveAxle.</param>
        /// <param name="payload">payload.</param>
        /// <param name="fuelAmount">fuelAmount.</param>
        /// <param name="rimSizeAxle1">rimSizeAxle1.</param>
        /// <param name="rimSizeAxle2">rimSizeAxle2.</param>
        /// <param name="rimSizeAxle3">rimSizeAxle3.</param>
        /// <param name="frameColor">frameColor.</param>
        /// <param name="vehicleExecution">vehicleExecution.</param>
        /// <param name="hasFixedSuperstructure">hasFixedSuperstructure.</param>
        /// <param name="superstructureParkingSpaces">superstructureParkingSpaces.</param>
        /// <param name="superstructureVolume">superstructureVolume.</param>
        /// <param name="superstructureInsideLength">superstructureInsideLength.</param>
        /// <param name="superstructureInsideWidth">superstructureInsideWidth.</param>
        /// <param name="superstructureInsideHeight">superstructureInsideHeight.</param>
        /// <param name="superstructureLoadingHeightBack">superstructureLoadingHeightBack.</param>
        /// <param name="superstructureLoadingHeightFront">superstructureLoadingHeightFront.</param>
        /// <param name="superstructureTireAmount">superstructureTireAmount.</param>
        /// <param name="superstructureTireSizeNormalAxis">superstructureTireSizeNormalAxis.</param>
        /// <param name="superstructureTireSizeLiftAxle">superstructureTireSizeLiftAxle.</param>
        public AdditionalTechnicalDataModel(double? emptyWeight = default(double?), double? totalWeight = default(double?), int? tireAmount = default(int?), double? tireSizeSteeringAxle = default(double?), double? tireSizeLiftAxle = default(double?), double? tireSizeDriveAxle = default(double?), double? payload = default(double?), double? fuelAmount = default(double?), string rimSizeAxle1 = default(string), string rimSizeAxle2 = default(string), string rimSizeAxle3 = default(string), string frameColor = default(string), string vehicleExecution = default(string), bool? hasFixedSuperstructure = default(bool?), int? superstructureParkingSpaces = default(int?), double? superstructureVolume = default(double?), double? superstructureInsideLength = default(double?), double? superstructureInsideWidth = default(double?), double? superstructureInsideHeight = default(double?), double? superstructureLoadingHeightBack = default(double?), double? superstructureLoadingHeightFront = default(double?), int? superstructureTireAmount = default(int?), double? superstructureTireSizeNormalAxis = default(double?), double? superstructureTireSizeLiftAxle = default(double?))
        {
            this.EmptyWeight = emptyWeight;
            this.TotalWeight = totalWeight;
            this.TireAmount = tireAmount;
            this.TireSizeSteeringAxle = tireSizeSteeringAxle;
            this.TireSizeLiftAxle = tireSizeLiftAxle;
            this.TireSizeDriveAxle = tireSizeDriveAxle;
            this.Payload = payload;
            this.FuelAmount = fuelAmount;
            this.RimSizeAxle1 = rimSizeAxle1;
            this.RimSizeAxle2 = rimSizeAxle2;
            this.RimSizeAxle3 = rimSizeAxle3;
            this.FrameColor = frameColor;
            this.VehicleExecution = vehicleExecution;
            this.HasFixedSuperstructure = hasFixedSuperstructure;
            this.SuperstructureParkingSpaces = superstructureParkingSpaces;
            this.SuperstructureVolume = superstructureVolume;
            this.SuperstructureInsideLength = superstructureInsideLength;
            this.SuperstructureInsideWidth = superstructureInsideWidth;
            this.SuperstructureInsideHeight = superstructureInsideHeight;
            this.SuperstructureLoadingHeightBack = superstructureLoadingHeightBack;
            this.SuperstructureLoadingHeightFront = superstructureLoadingHeightFront;
            this.SuperstructureTireAmount = superstructureTireAmount;
            this.SuperstructureTireSizeNormalAxis = superstructureTireSizeNormalAxis;
            this.SuperstructureTireSizeLiftAxle = superstructureTireSizeLiftAxle;
        }

        /// <summary>
        /// Gets or Sets EmptyWeight
        /// </summary>
        [DataMember(Name = "emptyWeight", EmitDefaultValue = true)]
        public double? EmptyWeight { get; set; }

        /// <summary>
        /// Gets or Sets TotalWeight
        /// </summary>
        [DataMember(Name = "totalWeight", EmitDefaultValue = true)]
        public double? TotalWeight { get; set; }

        /// <summary>
        /// Gets or Sets TireAmount
        /// </summary>
        [DataMember(Name = "tireAmount", EmitDefaultValue = true)]
        public int? TireAmount { get; set; }

        /// <summary>
        /// Gets or Sets TireSizeSteeringAxle
        /// </summary>
        [DataMember(Name = "tireSizeSteeringAxle", EmitDefaultValue = true)]
        public double? TireSizeSteeringAxle { get; set; }

        /// <summary>
        /// Gets or Sets TireSizeLiftAxle
        /// </summary>
        [DataMember(Name = "tireSizeLiftAxle", EmitDefaultValue = true)]
        public double? TireSizeLiftAxle { get; set; }

        /// <summary>
        /// Gets or Sets TireSizeDriveAxle
        /// </summary>
        [DataMember(Name = "tireSizeDriveAxle", EmitDefaultValue = true)]
        public double? TireSizeDriveAxle { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name = "payload", EmitDefaultValue = true)]
        public double? Payload { get; set; }

        /// <summary>
        /// Gets or Sets FuelAmount
        /// </summary>
        [DataMember(Name = "fuelAmount", EmitDefaultValue = true)]
        public double? FuelAmount { get; set; }

        /// <summary>
        /// Gets or Sets RimSizeAxle1
        /// </summary>
        [DataMember(Name = "rimSizeAxle1", EmitDefaultValue = true)]
        public string RimSizeAxle1 { get; set; }

        /// <summary>
        /// Gets or Sets RimSizeAxle2
        /// </summary>
        [DataMember(Name = "rimSizeAxle2", EmitDefaultValue = true)]
        public string RimSizeAxle2 { get; set; }

        /// <summary>
        /// Gets or Sets RimSizeAxle3
        /// </summary>
        [DataMember(Name = "rimSizeAxle3", EmitDefaultValue = true)]
        public string RimSizeAxle3 { get; set; }

        /// <summary>
        /// Gets or Sets FrameColor
        /// </summary>
        [DataMember(Name = "frameColor", EmitDefaultValue = true)]
        public string FrameColor { get; set; }

        /// <summary>
        /// Gets or Sets VehicleExecution
        /// </summary>
        [DataMember(Name = "vehicleExecution", EmitDefaultValue = true)]
        public string VehicleExecution { get; set; }

        /// <summary>
        /// Gets or Sets HasFixedSuperstructure
        /// </summary>
        [DataMember(Name = "hasFixedSuperstructure", EmitDefaultValue = true)]
        public bool? HasFixedSuperstructure { get; set; }

        /// <summary>
        /// Gets or Sets SuperstructureParkingSpaces
        /// </summary>
        [DataMember(Name = "superstructureParkingSpaces", EmitDefaultValue = true)]
        public int? SuperstructureParkingSpaces { get; set; }

        /// <summary>
        /// Gets or Sets SuperstructureVolume
        /// </summary>
        [DataMember(Name = "superstructureVolume", EmitDefaultValue = true)]
        public double? SuperstructureVolume { get; set; }

        /// <summary>
        /// Gets or Sets SuperstructureInsideLength
        /// </summary>
        [DataMember(Name = "superstructureInsideLength", EmitDefaultValue = true)]
        public double? SuperstructureInsideLength { get; set; }

        /// <summary>
        /// Gets or Sets SuperstructureInsideWidth
        /// </summary>
        [DataMember(Name = "superstructureInsideWidth", EmitDefaultValue = true)]
        public double? SuperstructureInsideWidth { get; set; }

        /// <summary>
        /// Gets or Sets SuperstructureInsideHeight
        /// </summary>
        [DataMember(Name = "superstructureInsideHeight", EmitDefaultValue = true)]
        public double? SuperstructureInsideHeight { get; set; }

        /// <summary>
        /// Gets or Sets SuperstructureLoadingHeightBack
        /// </summary>
        [DataMember(Name = "superstructureLoadingHeightBack", EmitDefaultValue = true)]
        public double? SuperstructureLoadingHeightBack { get; set; }

        /// <summary>
        /// Gets or Sets SuperstructureLoadingHeightFront
        /// </summary>
        [DataMember(Name = "superstructureLoadingHeightFront", EmitDefaultValue = true)]
        public double? SuperstructureLoadingHeightFront { get; set; }

        /// <summary>
        /// Gets or Sets SuperstructureTireAmount
        /// </summary>
        [DataMember(Name = "superstructureTireAmount", EmitDefaultValue = true)]
        public int? SuperstructureTireAmount { get; set; }

        /// <summary>
        /// Gets or Sets SuperstructureTireSizeNormalAxis
        /// </summary>
        [DataMember(Name = "superstructureTireSizeNormalAxis", EmitDefaultValue = true)]
        public double? SuperstructureTireSizeNormalAxis { get; set; }

        /// <summary>
        /// Gets or Sets SuperstructureTireSizeLiftAxle
        /// </summary>
        [DataMember(Name = "superstructureTireSizeLiftAxle", EmitDefaultValue = true)]
        public double? SuperstructureTireSizeLiftAxle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalTechnicalDataModel {\n");
            sb.Append("  EmptyWeight: ").Append(EmptyWeight).Append("\n");
            sb.Append("  TotalWeight: ").Append(TotalWeight).Append("\n");
            sb.Append("  TireAmount: ").Append(TireAmount).Append("\n");
            sb.Append("  TireSizeSteeringAxle: ").Append(TireSizeSteeringAxle).Append("\n");
            sb.Append("  TireSizeLiftAxle: ").Append(TireSizeLiftAxle).Append("\n");
            sb.Append("  TireSizeDriveAxle: ").Append(TireSizeDriveAxle).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  FuelAmount: ").Append(FuelAmount).Append("\n");
            sb.Append("  RimSizeAxle1: ").Append(RimSizeAxle1).Append("\n");
            sb.Append("  RimSizeAxle2: ").Append(RimSizeAxle2).Append("\n");
            sb.Append("  RimSizeAxle3: ").Append(RimSizeAxle3).Append("\n");
            sb.Append("  FrameColor: ").Append(FrameColor).Append("\n");
            sb.Append("  VehicleExecution: ").Append(VehicleExecution).Append("\n");
            sb.Append("  HasFixedSuperstructure: ").Append(HasFixedSuperstructure).Append("\n");
            sb.Append("  SuperstructureParkingSpaces: ").Append(SuperstructureParkingSpaces).Append("\n");
            sb.Append("  SuperstructureVolume: ").Append(SuperstructureVolume).Append("\n");
            sb.Append("  SuperstructureInsideLength: ").Append(SuperstructureInsideLength).Append("\n");
            sb.Append("  SuperstructureInsideWidth: ").Append(SuperstructureInsideWidth).Append("\n");
            sb.Append("  SuperstructureInsideHeight: ").Append(SuperstructureInsideHeight).Append("\n");
            sb.Append("  SuperstructureLoadingHeightBack: ").Append(SuperstructureLoadingHeightBack).Append("\n");
            sb.Append("  SuperstructureLoadingHeightFront: ").Append(SuperstructureLoadingHeightFront).Append("\n");
            sb.Append("  SuperstructureTireAmount: ").Append(SuperstructureTireAmount).Append("\n");
            sb.Append("  SuperstructureTireSizeNormalAxis: ").Append(SuperstructureTireSizeNormalAxis).Append("\n");
            sb.Append("  SuperstructureTireSizeLiftAxle: ").Append(SuperstructureTireSizeLiftAxle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalTechnicalDataModel);
        }

        /// <summary>
        /// Returns true if AdditionalTechnicalDataModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalTechnicalDataModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalTechnicalDataModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EmptyWeight == input.EmptyWeight ||
                    (this.EmptyWeight != null &&
                    this.EmptyWeight.Equals(input.EmptyWeight))
                ) && 
                (
                    this.TotalWeight == input.TotalWeight ||
                    (this.TotalWeight != null &&
                    this.TotalWeight.Equals(input.TotalWeight))
                ) && 
                (
                    this.TireAmount == input.TireAmount ||
                    (this.TireAmount != null &&
                    this.TireAmount.Equals(input.TireAmount))
                ) && 
                (
                    this.TireSizeSteeringAxle == input.TireSizeSteeringAxle ||
                    (this.TireSizeSteeringAxle != null &&
                    this.TireSizeSteeringAxle.Equals(input.TireSizeSteeringAxle))
                ) && 
                (
                    this.TireSizeLiftAxle == input.TireSizeLiftAxle ||
                    (this.TireSizeLiftAxle != null &&
                    this.TireSizeLiftAxle.Equals(input.TireSizeLiftAxle))
                ) && 
                (
                    this.TireSizeDriveAxle == input.TireSizeDriveAxle ||
                    (this.TireSizeDriveAxle != null &&
                    this.TireSizeDriveAxle.Equals(input.TireSizeDriveAxle))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.FuelAmount == input.FuelAmount ||
                    (this.FuelAmount != null &&
                    this.FuelAmount.Equals(input.FuelAmount))
                ) && 
                (
                    this.RimSizeAxle1 == input.RimSizeAxle1 ||
                    (this.RimSizeAxle1 != null &&
                    this.RimSizeAxle1.Equals(input.RimSizeAxle1))
                ) && 
                (
                    this.RimSizeAxle2 == input.RimSizeAxle2 ||
                    (this.RimSizeAxle2 != null &&
                    this.RimSizeAxle2.Equals(input.RimSizeAxle2))
                ) && 
                (
                    this.RimSizeAxle3 == input.RimSizeAxle3 ||
                    (this.RimSizeAxle3 != null &&
                    this.RimSizeAxle3.Equals(input.RimSizeAxle3))
                ) && 
                (
                    this.FrameColor == input.FrameColor ||
                    (this.FrameColor != null &&
                    this.FrameColor.Equals(input.FrameColor))
                ) && 
                (
                    this.VehicleExecution == input.VehicleExecution ||
                    (this.VehicleExecution != null &&
                    this.VehicleExecution.Equals(input.VehicleExecution))
                ) && 
                (
                    this.HasFixedSuperstructure == input.HasFixedSuperstructure ||
                    (this.HasFixedSuperstructure != null &&
                    this.HasFixedSuperstructure.Equals(input.HasFixedSuperstructure))
                ) && 
                (
                    this.SuperstructureParkingSpaces == input.SuperstructureParkingSpaces ||
                    (this.SuperstructureParkingSpaces != null &&
                    this.SuperstructureParkingSpaces.Equals(input.SuperstructureParkingSpaces))
                ) && 
                (
                    this.SuperstructureVolume == input.SuperstructureVolume ||
                    (this.SuperstructureVolume != null &&
                    this.SuperstructureVolume.Equals(input.SuperstructureVolume))
                ) && 
                (
                    this.SuperstructureInsideLength == input.SuperstructureInsideLength ||
                    (this.SuperstructureInsideLength != null &&
                    this.SuperstructureInsideLength.Equals(input.SuperstructureInsideLength))
                ) && 
                (
                    this.SuperstructureInsideWidth == input.SuperstructureInsideWidth ||
                    (this.SuperstructureInsideWidth != null &&
                    this.SuperstructureInsideWidth.Equals(input.SuperstructureInsideWidth))
                ) && 
                (
                    this.SuperstructureInsideHeight == input.SuperstructureInsideHeight ||
                    (this.SuperstructureInsideHeight != null &&
                    this.SuperstructureInsideHeight.Equals(input.SuperstructureInsideHeight))
                ) && 
                (
                    this.SuperstructureLoadingHeightBack == input.SuperstructureLoadingHeightBack ||
                    (this.SuperstructureLoadingHeightBack != null &&
                    this.SuperstructureLoadingHeightBack.Equals(input.SuperstructureLoadingHeightBack))
                ) && 
                (
                    this.SuperstructureLoadingHeightFront == input.SuperstructureLoadingHeightFront ||
                    (this.SuperstructureLoadingHeightFront != null &&
                    this.SuperstructureLoadingHeightFront.Equals(input.SuperstructureLoadingHeightFront))
                ) && 
                (
                    this.SuperstructureTireAmount == input.SuperstructureTireAmount ||
                    (this.SuperstructureTireAmount != null &&
                    this.SuperstructureTireAmount.Equals(input.SuperstructureTireAmount))
                ) && 
                (
                    this.SuperstructureTireSizeNormalAxis == input.SuperstructureTireSizeNormalAxis ||
                    (this.SuperstructureTireSizeNormalAxis != null &&
                    this.SuperstructureTireSizeNormalAxis.Equals(input.SuperstructureTireSizeNormalAxis))
                ) && 
                (
                    this.SuperstructureTireSizeLiftAxle == input.SuperstructureTireSizeLiftAxle ||
                    (this.SuperstructureTireSizeLiftAxle != null &&
                    this.SuperstructureTireSizeLiftAxle.Equals(input.SuperstructureTireSizeLiftAxle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmptyWeight != null)
                {
                    hashCode = (hashCode * 59) + this.EmptyWeight.GetHashCode();
                }
                if (this.TotalWeight != null)
                {
                    hashCode = (hashCode * 59) + this.TotalWeight.GetHashCode();
                }
                if (this.TireAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TireAmount.GetHashCode();
                }
                if (this.TireSizeSteeringAxle != null)
                {
                    hashCode = (hashCode * 59) + this.TireSizeSteeringAxle.GetHashCode();
                }
                if (this.TireSizeLiftAxle != null)
                {
                    hashCode = (hashCode * 59) + this.TireSizeLiftAxle.GetHashCode();
                }
                if (this.TireSizeDriveAxle != null)
                {
                    hashCode = (hashCode * 59) + this.TireSizeDriveAxle.GetHashCode();
                }
                if (this.Payload != null)
                {
                    hashCode = (hashCode * 59) + this.Payload.GetHashCode();
                }
                if (this.FuelAmount != null)
                {
                    hashCode = (hashCode * 59) + this.FuelAmount.GetHashCode();
                }
                if (this.RimSizeAxle1 != null)
                {
                    hashCode = (hashCode * 59) + this.RimSizeAxle1.GetHashCode();
                }
                if (this.RimSizeAxle2 != null)
                {
                    hashCode = (hashCode * 59) + this.RimSizeAxle2.GetHashCode();
                }
                if (this.RimSizeAxle3 != null)
                {
                    hashCode = (hashCode * 59) + this.RimSizeAxle3.GetHashCode();
                }
                if (this.FrameColor != null)
                {
                    hashCode = (hashCode * 59) + this.FrameColor.GetHashCode();
                }
                if (this.VehicleExecution != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleExecution.GetHashCode();
                }
                if (this.HasFixedSuperstructure != null)
                {
                    hashCode = (hashCode * 59) + this.HasFixedSuperstructure.GetHashCode();
                }
                if (this.SuperstructureParkingSpaces != null)
                {
                    hashCode = (hashCode * 59) + this.SuperstructureParkingSpaces.GetHashCode();
                }
                if (this.SuperstructureVolume != null)
                {
                    hashCode = (hashCode * 59) + this.SuperstructureVolume.GetHashCode();
                }
                if (this.SuperstructureInsideLength != null)
                {
                    hashCode = (hashCode * 59) + this.SuperstructureInsideLength.GetHashCode();
                }
                if (this.SuperstructureInsideWidth != null)
                {
                    hashCode = (hashCode * 59) + this.SuperstructureInsideWidth.GetHashCode();
                }
                if (this.SuperstructureInsideHeight != null)
                {
                    hashCode = (hashCode * 59) + this.SuperstructureInsideHeight.GetHashCode();
                }
                if (this.SuperstructureLoadingHeightBack != null)
                {
                    hashCode = (hashCode * 59) + this.SuperstructureLoadingHeightBack.GetHashCode();
                }
                if (this.SuperstructureLoadingHeightFront != null)
                {
                    hashCode = (hashCode * 59) + this.SuperstructureLoadingHeightFront.GetHashCode();
                }
                if (this.SuperstructureTireAmount != null)
                {
                    hashCode = (hashCode * 59) + this.SuperstructureTireAmount.GetHashCode();
                }
                if (this.SuperstructureTireSizeNormalAxis != null)
                {
                    hashCode = (hashCode * 59) + this.SuperstructureTireSizeNormalAxis.GetHashCode();
                }
                if (this.SuperstructureTireSizeLiftAxle != null)
                {
                    hashCode = (hashCode * 59) + this.SuperstructureTireSizeLiftAxle.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
