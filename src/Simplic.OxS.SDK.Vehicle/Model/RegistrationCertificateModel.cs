// <auto-generated>
/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle
{
    /// <summary>
    /// RegistrationCertificateModel
    /// </summary>
    public partial class RegistrationCertificateModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public RegistrationCertificateModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationCertificateModel" /> class.
        /// </summary>
        /// <param name="axleAmount">axleAmount</param>
        /// <param name="colorCode">colorCode</param>
        /// <param name="commercialDesignation">commercialDesignation</param>
        /// <param name="displacement">displacement</param>
        /// <param name="driveAxleAmount">driveAxleAmount</param>
        /// <param name="drivingNoise">drivingNoise</param>
        /// <param name="egTypeApprovalDate">egTypeApprovalDate</param>
        /// <param name="egTypeApprovalNumber">egTypeApprovalNumber</param>
        /// <param name="egTypeEmissionClass">egTypeEmissionClass</param>
        /// <param name="emissionClassCode">emissionClassCode</param>
        /// <param name="emissions">emissions</param>
        /// <param name="emptyWeight">emptyWeight</param>
        /// <param name="firstRegistrationDate">firstRegistrationDate</param>
        /// <param name="fuelType">fuelType</param>
        /// <param name="fuelTypeCode">fuelTypeCode</param>
        /// <param name="height">height</param>
        /// <param name="length">length</param>
        /// <param name="manufacturer">manufacturer</param>
        /// <param name="manufacturerCode">manufacturerCode</param>
        /// <param name="manufacturerShortName">manufacturerShortName</param>
        /// <param name="nationalEmissionClass">nationalEmissionClass</param>
        /// <param name="number">number</param>
        /// <param name="operatingPermitFeature">operatingPermitFeature</param>
        /// <param name="otherNotes">otherNotes</param>
        /// <param name="permissableBrakedTrailerLoad">permissableBrakedTrailerLoad</param>
        /// <param name="permissableMaximumLoadAxle1">permissableMaximumLoadAxle1</param>
        /// <param name="permissableMaximumLoadAxle1InRegistrationState">permissableMaximumLoadAxle1InRegistrationState</param>
        /// <param name="permissableMaximumLoadAxle2">permissableMaximumLoadAxle2</param>
        /// <param name="permissableMaximumLoadAxle2InRegistrationState">permissableMaximumLoadAxle2InRegistrationState</param>
        /// <param name="permissableMaximumLoadAxle3">permissableMaximumLoadAxle3</param>
        /// <param name="permissableMaximumLoadAxle3InRegistrationState">permissableMaximumLoadAxle3InRegistrationState</param>
        /// <param name="permissableTotalWeight">permissableTotalWeight</param>
        /// <param name="permissableTotalWeightInRegistrationState">permissableTotalWeightInRegistrationState</param>
        /// <param name="permissableUnbrakedTrailerLoad">permissableUnbrakedTrailerLoad</param>
        /// <param name="powerToWeightRatio">powerToWeightRatio</param>
        /// <param name="ratedPower">ratedPower</param>
        /// <param name="ratedRPM">ratedRPM</param>
        /// <param name="registrationCertificateNumberPart2">registrationCertificateNumberPart2</param>
        /// <param name="registrationDate">registrationDate</param>
        /// <param name="registrationValidityPeriod">registrationValidityPeriod</param>
        /// <param name="registratorId">registratorId</param>
        /// <param name="remarks">remarks</param>
        /// <param name="remarksAndExeptions">remarksAndExeptions</param>
        /// <param name="seatsIncludingDriverSeat">seatsIncludingDriverSeat</param>
        /// <param name="standingNoise">standingNoise</param>
        /// <param name="standingNoiseRPM">standingNoiseRPM</param>
        /// <param name="standingPlaces">standingPlaces</param>
        /// <param name="superStructureType">superStructureType</param>
        /// <param name="tankerTankCapacity">tankerTankCapacity</param>
        /// <param name="tiresAxle1">tiresAxle1</param>
        /// <param name="tiresAxle2">tiresAxle2</param>
        /// <param name="tiresAxle3">tiresAxle3</param>
        /// <param name="topSpeed">topSpeed</param>
        /// <param name="trailerNoseWeight">trailerNoseWeight</param>
        /// <param name="type">type</param>
        /// <param name="typeCodeWithCheckDigit">typeCodeWithCheckDigit</param>
        /// <param name="vehicleClass">vehicleClass</param>
        /// <param name="vehicleClassDesignation">vehicleClassDesignation</param>
        /// <param name="vehicleColor">vehicleColor</param>
        /// <param name="vehicleIdentificationCheckDigit">vehicleIdentificationCheckDigit</param>
        /// <param name="vehicleIdentificationNumber">vehicleIdentificationNumber</param>
        /// <param name="width">width</param>
        /// <param name="zlbiIatId">zlbiIatId</param>
        //[JsonConstructor]
        public RegistrationCertificateModel(Option<int> axleAmount = default, Option<string> colorCode = default, Option<string> commercialDesignation = default, Option<int> displacement = default, Option<int> driveAxleAmount = default, Option<int> drivingNoise = default, Option<DateTime> egTypeApprovalDate = default, Option<string> egTypeApprovalNumber = default, Option<string> egTypeEmissionClass = default, Option<string> emissionClassCode = default, Option<int> emissions = default, Option<int> emptyWeight = default, Option<DateTime> firstRegistrationDate = default, Option<string> fuelType = default, Option<string> fuelTypeCode = default, Option<int> height = default, Option<int> length = default, Option<string> manufacturer = default, Option<int> manufacturerCode = default, Option<string> manufacturerShortName = default, Option<string> nationalEmissionClass = default, Option<string> number = default, Option<string> operatingPermitFeature = default, Option<string> otherNotes = default, Option<int> permissableBrakedTrailerLoad = default, Option<int> permissableMaximumLoadAxle1 = default, Option<int> permissableMaximumLoadAxle1InRegistrationState = default, Option<int> permissableMaximumLoadAxle2 = default, Option<int> permissableMaximumLoadAxle2InRegistrationState = default, Option<int> permissableMaximumLoadAxle3 = default, Option<int> permissableMaximumLoadAxle3InRegistrationState = default, Option<int> permissableTotalWeight = default, Option<int> permissableTotalWeightInRegistrationState = default, Option<int> permissableUnbrakedTrailerLoad = default, Option<double> powerToWeightRatio = default, Option<int> ratedPower = default, Option<int> ratedRPM = default, Option<string> registrationCertificateNumberPart2 = default, Option<DateTime> registrationDate = default, Option<DateTime> registrationValidityPeriod = default, Option<Guid> registratorId = default, Option<string> remarks = default, Option<string> remarksAndExeptions = default, Option<int> seatsIncludingDriverSeat = default, Option<int> standingNoise = default, Option<int> standingNoiseRPM = default, Option<int> standingPlaces = default, Option<string> superStructureType = default, Option<int> tankerTankCapacity = default, Option<string> tiresAxle1 = default, Option<string> tiresAxle2 = default, Option<string> tiresAxle3 = default, Option<int> topSpeed = default, Option<int> trailerNoseWeight = default, Option<string> type = default, Option<string> typeCodeWithCheckDigit = default, Option<string> vehicleClass = default, Option<string> vehicleClassDesignation = default, Option<string> vehicleColor = default, Option<int> vehicleIdentificationCheckDigit = default, Option<string> vehicleIdentificationNumber = default, Option<int> width = default, Option<Guid> zlbiIatId = default)
        {
            AxleAmountOption = axleAmount;
            ColorCodeOption = colorCode;
            CommercialDesignationOption = commercialDesignation;
            DisplacementOption = displacement;
            DriveAxleAmountOption = driveAxleAmount;
            DrivingNoiseOption = drivingNoise;
            EgTypeApprovalDateOption = egTypeApprovalDate;
            EgTypeApprovalNumberOption = egTypeApprovalNumber;
            EgTypeEmissionClassOption = egTypeEmissionClass;
            EmissionClassCodeOption = emissionClassCode;
            EmissionsOption = emissions;
            EmptyWeightOption = emptyWeight;
            FirstRegistrationDateOption = firstRegistrationDate;
            FuelTypeOption = fuelType;
            FuelTypeCodeOption = fuelTypeCode;
            HeightOption = height;
            LengthOption = length;
            ManufacturerOption = manufacturer;
            ManufacturerCodeOption = manufacturerCode;
            ManufacturerShortNameOption = manufacturerShortName;
            NationalEmissionClassOption = nationalEmissionClass;
            NumberOption = number;
            OperatingPermitFeatureOption = operatingPermitFeature;
            OtherNotesOption = otherNotes;
            PermissableBrakedTrailerLoadOption = permissableBrakedTrailerLoad;
            PermissableMaximumLoadAxle1Option = permissableMaximumLoadAxle1;
            PermissableMaximumLoadAxle1InRegistrationStateOption = permissableMaximumLoadAxle1InRegistrationState;
            PermissableMaximumLoadAxle2Option = permissableMaximumLoadAxle2;
            PermissableMaximumLoadAxle2InRegistrationStateOption = permissableMaximumLoadAxle2InRegistrationState;
            PermissableMaximumLoadAxle3Option = permissableMaximumLoadAxle3;
            PermissableMaximumLoadAxle3InRegistrationStateOption = permissableMaximumLoadAxle3InRegistrationState;
            PermissableTotalWeightOption = permissableTotalWeight;
            PermissableTotalWeightInRegistrationStateOption = permissableTotalWeightInRegistrationState;
            PermissableUnbrakedTrailerLoadOption = permissableUnbrakedTrailerLoad;
            PowerToWeightRatioOption = powerToWeightRatio;
            RatedPowerOption = ratedPower;
            RatedRPMOption = ratedRPM;
            RegistrationCertificateNumberPart2Option = registrationCertificateNumberPart2;
            RegistrationDateOption = registrationDate;
            RegistrationValidityPeriodOption = registrationValidityPeriod;
            RegistratorIdOption = registratorId;
            RemarksOption = remarks;
            RemarksAndExeptionsOption = remarksAndExeptions;
            SeatsIncludingDriverSeatOption = seatsIncludingDriverSeat;
            StandingNoiseOption = standingNoise;
            StandingNoiseRPMOption = standingNoiseRPM;
            StandingPlacesOption = standingPlaces;
            SuperStructureTypeOption = superStructureType;
            TankerTankCapacityOption = tankerTankCapacity;
            TiresAxle1Option = tiresAxle1;
            TiresAxle2Option = tiresAxle2;
            TiresAxle3Option = tiresAxle3;
            TopSpeedOption = topSpeed;
            TrailerNoseWeightOption = trailerNoseWeight;
            TypeOption = type;
            TypeCodeWithCheckDigitOption = typeCodeWithCheckDigit;
            VehicleClassOption = vehicleClass;
            VehicleClassDesignationOption = vehicleClassDesignation;
            VehicleColorOption = vehicleColor;
            VehicleIdentificationCheckDigitOption = vehicleIdentificationCheckDigit;
            VehicleIdentificationNumberOption = vehicleIdentificationNumber;
            WidthOption = width;
            ZlbiIatIdOption = zlbiIatId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AxleAmount
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> AxleAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets AxleAmount
        /// </summary>
        [JsonPropertyName("axleAmount")]
        public int? AxleAmount { get { return this. AxleAmountOption; } set { this.AxleAmountOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of ColorCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ColorCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ColorCode
        /// </summary>
        [JsonPropertyName("colorCode")]
        public string? ColorCode { get { return this. ColorCodeOption; } set { this.ColorCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CommercialDesignation
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CommercialDesignationOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommercialDesignation
        /// </summary>
        [JsonPropertyName("commercialDesignation")]
        public string? CommercialDesignation { get { return this. CommercialDesignationOption; } set { this.CommercialDesignationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Displacement
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> DisplacementOption { get; private set; }

        /// <summary>
        /// Gets or Sets Displacement
        /// </summary>
        [JsonPropertyName("displacement")]
        public int? Displacement { get { return this. DisplacementOption; } set { this.DisplacementOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of DriveAxleAmount
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> DriveAxleAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets DriveAxleAmount
        /// </summary>
        [JsonPropertyName("driveAxleAmount")]
        public int? DriveAxleAmount { get { return this. DriveAxleAmountOption; } set { this.DriveAxleAmountOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of DrivingNoise
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> DrivingNoiseOption { get; private set; }

        /// <summary>
        /// Gets or Sets DrivingNoise
        /// </summary>
        [JsonPropertyName("drivingNoise")]
        public int? DrivingNoise { get { return this. DrivingNoiseOption; } set { this.DrivingNoiseOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of EgTypeApprovalDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EgTypeApprovalDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets EgTypeApprovalDate
        /// </summary>
        [JsonPropertyName("egTypeApprovalDate")]
        public DateTime? EgTypeApprovalDate { get { return this. EgTypeApprovalDateOption; } set { this.EgTypeApprovalDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of EgTypeApprovalNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> EgTypeApprovalNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets EgTypeApprovalNumber
        /// </summary>
        [JsonPropertyName("egTypeApprovalNumber")]
        public string? EgTypeApprovalNumber { get { return this. EgTypeApprovalNumberOption; } set { this.EgTypeApprovalNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EgTypeEmissionClass
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> EgTypeEmissionClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets EgTypeEmissionClass
        /// </summary>
        [JsonPropertyName("egTypeEmissionClass")]
        public string? EgTypeEmissionClass { get { return this. EgTypeEmissionClassOption; } set { this.EgTypeEmissionClassOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EmissionClassCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> EmissionClassCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmissionClassCode
        /// </summary>
        [JsonPropertyName("emissionClassCode")]
        public string? EmissionClassCode { get { return this. EmissionClassCodeOption; } set { this.EmissionClassCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Emissions
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> EmissionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Emissions
        /// </summary>
        [JsonPropertyName("emissions")]
        public int? Emissions { get { return this. EmissionsOption; } set { this.EmissionsOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of EmptyWeight
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> EmptyWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmptyWeight
        /// </summary>
        [JsonPropertyName("emptyWeight")]
        public int? EmptyWeight { get { return this. EmptyWeightOption; } set { this.EmptyWeightOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of FirstRegistrationDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> FirstRegistrationDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstRegistrationDate
        /// </summary>
        [JsonPropertyName("firstRegistrationDate")]
        public DateTime? FirstRegistrationDate { get { return this. FirstRegistrationDateOption; } set { this.FirstRegistrationDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of FuelType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> FuelTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets FuelType
        /// </summary>
        [JsonPropertyName("fuelType")]
        public string? FuelType { get { return this. FuelTypeOption; } set { this.FuelTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FuelTypeCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> FuelTypeCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets FuelTypeCode
        /// </summary>
        [JsonPropertyName("fuelTypeCode")]
        public string? FuelTypeCode { get { return this. FuelTypeCodeOption; } set { this.FuelTypeCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Height
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> HeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [JsonPropertyName("height")]
        public int? Height { get { return this. HeightOption; } set { this.HeightOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of Length
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> LengthOption { get; private set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [JsonPropertyName("length")]
        public int? Length { get { return this. LengthOption; } set { this.LengthOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of Manufacturer
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ManufacturerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [JsonPropertyName("manufacturer")]
        public string? Manufacturer { get { return this. ManufacturerOption; } set { this.ManufacturerOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ManufacturerCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> ManufacturerCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ManufacturerCode
        /// </summary>
        [JsonPropertyName("manufacturerCode")]
        public int? ManufacturerCode { get { return this. ManufacturerCodeOption; } set { this.ManufacturerCodeOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of ManufacturerShortName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ManufacturerShortNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ManufacturerShortName
        /// </summary>
        [JsonPropertyName("manufacturerShortName")]
        public string? ManufacturerShortName { get { return this. ManufacturerShortNameOption; } set { this.ManufacturerShortNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NationalEmissionClass
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NationalEmissionClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets NationalEmissionClass
        /// </summary>
        [JsonPropertyName("nationalEmissionClass")]
        public string? NationalEmissionClass { get { return this. NationalEmissionClassOption; } set { this.NationalEmissionClassOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OperatingPermitFeature
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> OperatingPermitFeatureOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperatingPermitFeature
        /// </summary>
        [JsonPropertyName("operatingPermitFeature")]
        public string? OperatingPermitFeature { get { return this. OperatingPermitFeatureOption; } set { this.OperatingPermitFeatureOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OtherNotes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> OtherNotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets OtherNotes
        /// </summary>
        [JsonPropertyName("otherNotes")]
        public string? OtherNotes { get { return this. OtherNotesOption; } set { this.OtherNotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PermissableBrakedTrailerLoad
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> PermissableBrakedTrailerLoadOption { get; private set; }

        /// <summary>
        /// Gets or Sets PermissableBrakedTrailerLoad
        /// </summary>
        [JsonPropertyName("permissableBrakedTrailerLoad")]
        public int? PermissableBrakedTrailerLoad { get { return this. PermissableBrakedTrailerLoadOption; } set { this.PermissableBrakedTrailerLoadOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of PermissableMaximumLoadAxle1
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> PermissableMaximumLoadAxle1Option { get; private set; }

        /// <summary>
        /// Gets or Sets PermissableMaximumLoadAxle1
        /// </summary>
        [JsonPropertyName("permissableMaximumLoadAxle1")]
        public int? PermissableMaximumLoadAxle1 { get { return this. PermissableMaximumLoadAxle1Option; } set { this.PermissableMaximumLoadAxle1Option = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of PermissableMaximumLoadAxle1InRegistrationState
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> PermissableMaximumLoadAxle1InRegistrationStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets PermissableMaximumLoadAxle1InRegistrationState
        /// </summary>
        [JsonPropertyName("permissableMaximumLoadAxle1InRegistrationState")]
        public int? PermissableMaximumLoadAxle1InRegistrationState { get { return this. PermissableMaximumLoadAxle1InRegistrationStateOption; } set { this.PermissableMaximumLoadAxle1InRegistrationStateOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of PermissableMaximumLoadAxle2
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> PermissableMaximumLoadAxle2Option { get; private set; }

        /// <summary>
        /// Gets or Sets PermissableMaximumLoadAxle2
        /// </summary>
        [JsonPropertyName("permissableMaximumLoadAxle2")]
        public int? PermissableMaximumLoadAxle2 { get { return this. PermissableMaximumLoadAxle2Option; } set { this.PermissableMaximumLoadAxle2Option = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of PermissableMaximumLoadAxle2InRegistrationState
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> PermissableMaximumLoadAxle2InRegistrationStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets PermissableMaximumLoadAxle2InRegistrationState
        /// </summary>
        [JsonPropertyName("permissableMaximumLoadAxle2InRegistrationState")]
        public int? PermissableMaximumLoadAxle2InRegistrationState { get { return this. PermissableMaximumLoadAxle2InRegistrationStateOption; } set { this.PermissableMaximumLoadAxle2InRegistrationStateOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of PermissableMaximumLoadAxle3
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> PermissableMaximumLoadAxle3Option { get; private set; }

        /// <summary>
        /// Gets or Sets PermissableMaximumLoadAxle3
        /// </summary>
        [JsonPropertyName("permissableMaximumLoadAxle3")]
        public int? PermissableMaximumLoadAxle3 { get { return this. PermissableMaximumLoadAxle3Option; } set { this.PermissableMaximumLoadAxle3Option = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of PermissableMaximumLoadAxle3InRegistrationState
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> PermissableMaximumLoadAxle3InRegistrationStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets PermissableMaximumLoadAxle3InRegistrationState
        /// </summary>
        [JsonPropertyName("permissableMaximumLoadAxle3InRegistrationState")]
        public int? PermissableMaximumLoadAxle3InRegistrationState { get { return this. PermissableMaximumLoadAxle3InRegistrationStateOption; } set { this.PermissableMaximumLoadAxle3InRegistrationStateOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of PermissableTotalWeight
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> PermissableTotalWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets PermissableTotalWeight
        /// </summary>
        [JsonPropertyName("permissableTotalWeight")]
        public int? PermissableTotalWeight { get { return this. PermissableTotalWeightOption; } set { this.PermissableTotalWeightOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of PermissableTotalWeightInRegistrationState
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> PermissableTotalWeightInRegistrationStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets PermissableTotalWeightInRegistrationState
        /// </summary>
        [JsonPropertyName("permissableTotalWeightInRegistrationState")]
        public int? PermissableTotalWeightInRegistrationState { get { return this. PermissableTotalWeightInRegistrationStateOption; } set { this.PermissableTotalWeightInRegistrationStateOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of PermissableUnbrakedTrailerLoad
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> PermissableUnbrakedTrailerLoadOption { get; private set; }

        /// <summary>
        /// Gets or Sets PermissableUnbrakedTrailerLoad
        /// </summary>
        [JsonPropertyName("permissableUnbrakedTrailerLoad")]
        public int? PermissableUnbrakedTrailerLoad { get { return this. PermissableUnbrakedTrailerLoadOption; } set { this.PermissableUnbrakedTrailerLoadOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of PowerToWeightRatio
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> PowerToWeightRatioOption { get; private set; }

        /// <summary>
        /// Gets or Sets PowerToWeightRatio
        /// </summary>
        [JsonPropertyName("powerToWeightRatio")]
        public double? PowerToWeightRatio { get { return this. PowerToWeightRatioOption; } set { this.PowerToWeightRatioOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of RatedPower
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> RatedPowerOption { get; private set; }

        /// <summary>
        /// Gets or Sets RatedPower
        /// </summary>
        [JsonPropertyName("ratedPower")]
        public int? RatedPower { get { return this. RatedPowerOption; } set { this.RatedPowerOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of RatedRPM
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> RatedRPMOption { get; private set; }

        /// <summary>
        /// Gets or Sets RatedRPM
        /// </summary>
        [JsonPropertyName("ratedRPM")]
        public int? RatedRPM { get { return this. RatedRPMOption; } set { this.RatedRPMOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationCertificateNumberPart2
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> RegistrationCertificateNumberPart2Option { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationCertificateNumberPart2
        /// </summary>
        [JsonPropertyName("registrationCertificateNumberPart2")]
        public string? RegistrationCertificateNumberPart2 { get { return this. RegistrationCertificateNumberPart2Option; } set { this.RegistrationCertificateNumberPart2Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> RegistrationDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationDate
        /// </summary>
        [JsonPropertyName("registrationDate")]
        public DateTime? RegistrationDate { get { return this. RegistrationDateOption; } set { this.RegistrationDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of RegistrationValidityPeriod
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> RegistrationValidityPeriodOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationValidityPeriod
        /// </summary>
        [JsonPropertyName("registrationValidityPeriod")]
        public DateTime? RegistrationValidityPeriod { get { return this. RegistrationValidityPeriodOption; } set { this.RegistrationValidityPeriodOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of RegistratorId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> RegistratorIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistratorId
        /// </summary>
        [JsonPropertyName("registratorId")]
        public Guid? RegistratorId { get { return this. RegistratorIdOption; } set { this.RegistratorIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Remarks
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> RemarksOption { get; private set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [JsonPropertyName("remarks")]
        public string? Remarks { get { return this. RemarksOption; } set { this.RemarksOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RemarksAndExeptions
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> RemarksAndExeptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets RemarksAndExeptions
        /// </summary>
        [JsonPropertyName("remarksAndExeptions")]
        public string? RemarksAndExeptions { get { return this. RemarksAndExeptionsOption; } set { this.RemarksAndExeptionsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SeatsIncludingDriverSeat
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> SeatsIncludingDriverSeatOption { get; private set; }

        /// <summary>
        /// Gets or Sets SeatsIncludingDriverSeat
        /// </summary>
        [JsonPropertyName("seatsIncludingDriverSeat")]
        public int? SeatsIncludingDriverSeat { get { return this. SeatsIncludingDriverSeatOption; } set { this.SeatsIncludingDriverSeatOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of StandingNoise
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> StandingNoiseOption { get; private set; }

        /// <summary>
        /// Gets or Sets StandingNoise
        /// </summary>
        [JsonPropertyName("standingNoise")]
        public int? StandingNoise { get { return this. StandingNoiseOption; } set { this.StandingNoiseOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of StandingNoiseRPM
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> StandingNoiseRPMOption { get; private set; }

        /// <summary>
        /// Gets or Sets StandingNoiseRPM
        /// </summary>
        [JsonPropertyName("standingNoiseRPM")]
        public int? StandingNoiseRPM { get { return this. StandingNoiseRPMOption; } set { this.StandingNoiseRPMOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of StandingPlaces
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> StandingPlacesOption { get; private set; }

        /// <summary>
        /// Gets or Sets StandingPlaces
        /// </summary>
        [JsonPropertyName("standingPlaces")]
        public int? StandingPlaces { get { return this. StandingPlacesOption; } set { this.StandingPlacesOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of SuperStructureType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> SuperStructureTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuperStructureType
        /// </summary>
        [JsonPropertyName("superStructureType")]
        public string? SuperStructureType { get { return this. SuperStructureTypeOption; } set { this.SuperStructureTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TankerTankCapacity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> TankerTankCapacityOption { get; private set; }

        /// <summary>
        /// Gets or Sets TankerTankCapacity
        /// </summary>
        [JsonPropertyName("tankerTankCapacity")]
        public int? TankerTankCapacity { get { return this. TankerTankCapacityOption; } set { this.TankerTankCapacityOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of TiresAxle1
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TiresAxle1Option { get; private set; }

        /// <summary>
        /// Gets or Sets TiresAxle1
        /// </summary>
        [JsonPropertyName("tiresAxle1")]
        public string? TiresAxle1 { get { return this. TiresAxle1Option; } set { this.TiresAxle1Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TiresAxle2
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TiresAxle2Option { get; private set; }

        /// <summary>
        /// Gets or Sets TiresAxle2
        /// </summary>
        [JsonPropertyName("tiresAxle2")]
        public string? TiresAxle2 { get { return this. TiresAxle2Option; } set { this.TiresAxle2Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TiresAxle3
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TiresAxle3Option { get; private set; }

        /// <summary>
        /// Gets or Sets TiresAxle3
        /// </summary>
        [JsonPropertyName("tiresAxle3")]
        public string? TiresAxle3 { get { return this. TiresAxle3Option; } set { this.TiresAxle3Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TopSpeed
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> TopSpeedOption { get; private set; }

        /// <summary>
        /// Gets or Sets TopSpeed
        /// </summary>
        [JsonPropertyName("topSpeed")]
        public int? TopSpeed { get { return this. TopSpeedOption; } set { this.TopSpeedOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of TrailerNoseWeight
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> TrailerNoseWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets TrailerNoseWeight
        /// </summary>
        [JsonPropertyName("trailerNoseWeight")]
        public int? TrailerNoseWeight { get { return this. TrailerNoseWeightOption; } set { this.TrailerNoseWeightOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this. TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TypeCodeWithCheckDigit
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TypeCodeWithCheckDigitOption { get; private set; }

        /// <summary>
        /// Gets or Sets TypeCodeWithCheckDigit
        /// </summary>
        [JsonPropertyName("typeCodeWithCheckDigit")]
        public string? TypeCodeWithCheckDigit { get { return this. TypeCodeWithCheckDigitOption; } set { this.TypeCodeWithCheckDigitOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VehicleClass
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> VehicleClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleClass
        /// </summary>
        [JsonPropertyName("vehicleClass")]
        public string? VehicleClass { get { return this. VehicleClassOption; } set { this.VehicleClassOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VehicleClassDesignation
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> VehicleClassDesignationOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleClassDesignation
        /// </summary>
        [JsonPropertyName("vehicleClassDesignation")]
        public string? VehicleClassDesignation { get { return this. VehicleClassDesignationOption; } set { this.VehicleClassDesignationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VehicleColor
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> VehicleColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleColor
        /// </summary>
        [JsonPropertyName("vehicleColor")]
        public string? VehicleColor { get { return this. VehicleColorOption; } set { this.VehicleColorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VehicleIdentificationCheckDigit
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> VehicleIdentificationCheckDigitOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleIdentificationCheckDigit
        /// </summary>
        [JsonPropertyName("vehicleIdentificationCheckDigit")]
        public int? VehicleIdentificationCheckDigit { get { return this. VehicleIdentificationCheckDigitOption; } set { this.VehicleIdentificationCheckDigitOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of VehicleIdentificationNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> VehicleIdentificationNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleIdentificationNumber
        /// </summary>
        [JsonPropertyName("vehicleIdentificationNumber")]
        public string? VehicleIdentificationNumber { get { return this. VehicleIdentificationNumberOption; } set { this.VehicleIdentificationNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Width
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> WidthOption { get; private set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [JsonPropertyName("width")]
        public int? Width { get { return this. WidthOption; } set { this.WidthOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of ZlbiIatId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ZlbiIatIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ZlbiIatId
        /// </summary>
        [JsonPropertyName("zlbiIatId")]
        public Guid? ZlbiIatId { get { return this. ZlbiIatIdOption; } set { this.ZlbiIatIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegistrationCertificateModel {\n");
            sb.Append("  AxleAmount: ").Append(AxleAmount).Append("\n");
            sb.Append("  ColorCode: ").Append(ColorCode).Append("\n");
            sb.Append("  CommercialDesignation: ").Append(CommercialDesignation).Append("\n");
            sb.Append("  Displacement: ").Append(Displacement).Append("\n");
            sb.Append("  DriveAxleAmount: ").Append(DriveAxleAmount).Append("\n");
            sb.Append("  DrivingNoise: ").Append(DrivingNoise).Append("\n");
            sb.Append("  EgTypeApprovalDate: ").Append(EgTypeApprovalDate).Append("\n");
            sb.Append("  EgTypeApprovalNumber: ").Append(EgTypeApprovalNumber).Append("\n");
            sb.Append("  EgTypeEmissionClass: ").Append(EgTypeEmissionClass).Append("\n");
            sb.Append("  EmissionClassCode: ").Append(EmissionClassCode).Append("\n");
            sb.Append("  Emissions: ").Append(Emissions).Append("\n");
            sb.Append("  EmptyWeight: ").Append(EmptyWeight).Append("\n");
            sb.Append("  FirstRegistrationDate: ").Append(FirstRegistrationDate).Append("\n");
            sb.Append("  FuelType: ").Append(FuelType).Append("\n");
            sb.Append("  FuelTypeCode: ").Append(FuelTypeCode).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ManufacturerCode: ").Append(ManufacturerCode).Append("\n");
            sb.Append("  ManufacturerShortName: ").Append(ManufacturerShortName).Append("\n");
            sb.Append("  NationalEmissionClass: ").Append(NationalEmissionClass).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OperatingPermitFeature: ").Append(OperatingPermitFeature).Append("\n");
            sb.Append("  OtherNotes: ").Append(OtherNotes).Append("\n");
            sb.Append("  PermissableBrakedTrailerLoad: ").Append(PermissableBrakedTrailerLoad).Append("\n");
            sb.Append("  PermissableMaximumLoadAxle1: ").Append(PermissableMaximumLoadAxle1).Append("\n");
            sb.Append("  PermissableMaximumLoadAxle1InRegistrationState: ").Append(PermissableMaximumLoadAxle1InRegistrationState).Append("\n");
            sb.Append("  PermissableMaximumLoadAxle2: ").Append(PermissableMaximumLoadAxle2).Append("\n");
            sb.Append("  PermissableMaximumLoadAxle2InRegistrationState: ").Append(PermissableMaximumLoadAxle2InRegistrationState).Append("\n");
            sb.Append("  PermissableMaximumLoadAxle3: ").Append(PermissableMaximumLoadAxle3).Append("\n");
            sb.Append("  PermissableMaximumLoadAxle3InRegistrationState: ").Append(PermissableMaximumLoadAxle3InRegistrationState).Append("\n");
            sb.Append("  PermissableTotalWeight: ").Append(PermissableTotalWeight).Append("\n");
            sb.Append("  PermissableTotalWeightInRegistrationState: ").Append(PermissableTotalWeightInRegistrationState).Append("\n");
            sb.Append("  PermissableUnbrakedTrailerLoad: ").Append(PermissableUnbrakedTrailerLoad).Append("\n");
            sb.Append("  PowerToWeightRatio: ").Append(PowerToWeightRatio).Append("\n");
            sb.Append("  RatedPower: ").Append(RatedPower).Append("\n");
            sb.Append("  RatedRPM: ").Append(RatedRPM).Append("\n");
            sb.Append("  RegistrationCertificateNumberPart2: ").Append(RegistrationCertificateNumberPart2).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  RegistrationValidityPeriod: ").Append(RegistrationValidityPeriod).Append("\n");
            sb.Append("  RegistratorId: ").Append(RegistratorId).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  RemarksAndExeptions: ").Append(RemarksAndExeptions).Append("\n");
            sb.Append("  SeatsIncludingDriverSeat: ").Append(SeatsIncludingDriverSeat).Append("\n");
            sb.Append("  StandingNoise: ").Append(StandingNoise).Append("\n");
            sb.Append("  StandingNoiseRPM: ").Append(StandingNoiseRPM).Append("\n");
            sb.Append("  StandingPlaces: ").Append(StandingPlaces).Append("\n");
            sb.Append("  SuperStructureType: ").Append(SuperStructureType).Append("\n");
            sb.Append("  TankerTankCapacity: ").Append(TankerTankCapacity).Append("\n");
            sb.Append("  TiresAxle1: ").Append(TiresAxle1).Append("\n");
            sb.Append("  TiresAxle2: ").Append(TiresAxle2).Append("\n");
            sb.Append("  TiresAxle3: ").Append(TiresAxle3).Append("\n");
            sb.Append("  TopSpeed: ").Append(TopSpeed).Append("\n");
            sb.Append("  TrailerNoseWeight: ").Append(TrailerNoseWeight).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeCodeWithCheckDigit: ").Append(TypeCodeWithCheckDigit).Append("\n");
            sb.Append("  VehicleClass: ").Append(VehicleClass).Append("\n");
            sb.Append("  VehicleClassDesignation: ").Append(VehicleClassDesignation).Append("\n");
            sb.Append("  VehicleColor: ").Append(VehicleColor).Append("\n");
            sb.Append("  VehicleIdentificationCheckDigit: ").Append(VehicleIdentificationCheckDigit).Append("\n");
            sb.Append("  VehicleIdentificationNumber: ").Append(VehicleIdentificationNumber).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  ZlbiIatId: ").Append(ZlbiIatId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RegistrationCertificateModel" />
    /// </summary>
    public class RegistrationCertificateModelJsonConverter : JsonConverter<RegistrationCertificateModel>
    {
        /// <summary>
        /// The format to use to serialize EgTypeApprovalDate
        /// </summary>
        public static string EgTypeApprovalDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize FirstRegistrationDate
        /// </summary>
        public static string FirstRegistrationDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize RegistrationDate
        /// </summary>
        public static string RegistrationDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize RegistrationValidityPeriod
        /// </summary>
        public static string RegistrationValidityPeriodFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="RegistrationCertificateModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RegistrationCertificateModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int> axleAmount = default;
            Option<string> colorCode = default;
            Option<string> commercialDesignation = default;
            Option<int> displacement = default;
            Option<int> driveAxleAmount = default;
            Option<int> drivingNoise = default;
            Option<DateTime> egTypeApprovalDate = default;
            Option<string> egTypeApprovalNumber = default;
            Option<string> egTypeEmissionClass = default;
            Option<string> emissionClassCode = default;
            Option<int> emissions = default;
            Option<int> emptyWeight = default;
            Option<DateTime> firstRegistrationDate = default;
            Option<string> fuelType = default;
            Option<string> fuelTypeCode = default;
            Option<int> height = default;
            Option<int> length = default;
            Option<string> manufacturer = default;
            Option<int> manufacturerCode = default;
            Option<string> manufacturerShortName = default;
            Option<string> nationalEmissionClass = default;
            Option<string> number = default;
            Option<string> operatingPermitFeature = default;
            Option<string> otherNotes = default;
            Option<int> permissableBrakedTrailerLoad = default;
            Option<int> permissableMaximumLoadAxle1 = default;
            Option<int> permissableMaximumLoadAxle1InRegistrationState = default;
            Option<int> permissableMaximumLoadAxle2 = default;
            Option<int> permissableMaximumLoadAxle2InRegistrationState = default;
            Option<int> permissableMaximumLoadAxle3 = default;
            Option<int> permissableMaximumLoadAxle3InRegistrationState = default;
            Option<int> permissableTotalWeight = default;
            Option<int> permissableTotalWeightInRegistrationState = default;
            Option<int> permissableUnbrakedTrailerLoad = default;
            Option<double> powerToWeightRatio = default;
            Option<int> ratedPower = default;
            Option<int> ratedRPM = default;
            Option<string> registrationCertificateNumberPart2 = default;
            Option<DateTime> registrationDate = default;
            Option<DateTime> registrationValidityPeriod = default;
            Option<Guid> registratorId = default;
            Option<string> remarks = default;
            Option<string> remarksAndExeptions = default;
            Option<int> seatsIncludingDriverSeat = default;
            Option<int> standingNoise = default;
            Option<int> standingNoiseRPM = default;
            Option<int> standingPlaces = default;
            Option<string> superStructureType = default;
            Option<int> tankerTankCapacity = default;
            Option<string> tiresAxle1 = default;
            Option<string> tiresAxle2 = default;
            Option<string> tiresAxle3 = default;
            Option<int> topSpeed = default;
            Option<int> trailerNoseWeight = default;
            Option<string> type = default;
            Option<string> typeCodeWithCheckDigit = default;
            Option<string> vehicleClass = default;
            Option<string> vehicleClassDesignation = default;
            Option<string> vehicleColor = default;
            Option<int> vehicleIdentificationCheckDigit = default;
            Option<string> vehicleIdentificationNumber = default;
            Option<int> width = default;
            Option<Guid> zlbiIatId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "axleAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                axleAmount = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "colorCode":
                            colorCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "commercialDesignation":
                            commercialDesignation = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "displacement":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                displacement = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "driveAxleAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                driveAxleAmount = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "drivingNoise":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                drivingNoise = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "egTypeApprovalDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                egTypeApprovalDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "egTypeApprovalNumber":
                            egTypeApprovalNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "egTypeEmissionClass":
                            egTypeEmissionClass = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "emissionClassCode":
                            emissionClassCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "emissions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                emissions = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "emptyWeight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                emptyWeight = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "firstRegistrationDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                firstRegistrationDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fuelType":
                            fuelType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fuelTypeCode":
                            fuelTypeCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "height":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                height = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "length":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                length = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "manufacturer":
                            manufacturer = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "manufacturerCode":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                manufacturerCode = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "manufacturerShortName":
                            manufacturerShortName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "nationalEmissionClass":
                            nationalEmissionClass = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "operatingPermitFeature":
                            operatingPermitFeature = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "otherNotes":
                            otherNotes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "permissableBrakedTrailerLoad":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissableBrakedTrailerLoad = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "permissableMaximumLoadAxle1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissableMaximumLoadAxle1 = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "permissableMaximumLoadAxle1InRegistrationState":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissableMaximumLoadAxle1InRegistrationState = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "permissableMaximumLoadAxle2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissableMaximumLoadAxle2 = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "permissableMaximumLoadAxle2InRegistrationState":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissableMaximumLoadAxle2InRegistrationState = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "permissableMaximumLoadAxle3":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissableMaximumLoadAxle3 = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "permissableMaximumLoadAxle3InRegistrationState":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissableMaximumLoadAxle3InRegistrationState = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "permissableTotalWeight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissableTotalWeight = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "permissableTotalWeightInRegistrationState":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissableTotalWeightInRegistrationState = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "permissableUnbrakedTrailerLoad":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissableUnbrakedTrailerLoad = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "powerToWeightRatio":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                powerToWeightRatio = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "ratedPower":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ratedPower = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "ratedRPM":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ratedRPM = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "registrationCertificateNumberPart2":
                            registrationCertificateNumberPart2 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "registrationDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                registrationDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "registrationValidityPeriod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                registrationValidityPeriod = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "registratorId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                registratorId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "remarks":
                            remarks = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "remarksAndExeptions":
                            remarksAndExeptions = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "seatsIncludingDriverSeat":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                seatsIncludingDriverSeat = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "standingNoise":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                standingNoise = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "standingNoiseRPM":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                standingNoiseRPM = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "standingPlaces":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                standingPlaces = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "superStructureType":
                            superStructureType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tankerTankCapacity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tankerTankCapacity = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "tiresAxle1":
                            tiresAxle1 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tiresAxle2":
                            tiresAxle2 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tiresAxle3":
                            tiresAxle3 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "topSpeed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                topSpeed = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "trailerNoseWeight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                trailerNoseWeight = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "typeCodeWithCheckDigit":
                            typeCodeWithCheckDigit = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vehicleClass":
                            vehicleClass = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vehicleClassDesignation":
                            vehicleClassDesignation = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vehicleColor":
                            vehicleColor = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vehicleIdentificationCheckDigit":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vehicleIdentificationCheckDigit = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "vehicleIdentificationNumber":
                            vehicleIdentificationNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "width":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                width = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "zlbiIatId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                zlbiIatId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new RegistrationCertificateModel(axleAmount, colorCode, commercialDesignation, displacement, driveAxleAmount, drivingNoise, egTypeApprovalDate, egTypeApprovalNumber, egTypeEmissionClass, emissionClassCode, emissions, emptyWeight, firstRegistrationDate, fuelType, fuelTypeCode, height, length, manufacturer, manufacturerCode, manufacturerShortName, nationalEmissionClass, number, operatingPermitFeature, otherNotes, permissableBrakedTrailerLoad, permissableMaximumLoadAxle1, permissableMaximumLoadAxle1InRegistrationState, permissableMaximumLoadAxle2, permissableMaximumLoadAxle2InRegistrationState, permissableMaximumLoadAxle3, permissableMaximumLoadAxle3InRegistrationState, permissableTotalWeight, permissableTotalWeightInRegistrationState, permissableUnbrakedTrailerLoad, powerToWeightRatio, ratedPower, ratedRPM, registrationCertificateNumberPart2, registrationDate, registrationValidityPeriod, registratorId, remarks, remarksAndExeptions, seatsIncludingDriverSeat, standingNoise, standingNoiseRPM, standingPlaces, superStructureType, tankerTankCapacity, tiresAxle1, tiresAxle2, tiresAxle3, topSpeed, trailerNoseWeight, type, typeCodeWithCheckDigit, vehicleClass, vehicleClassDesignation, vehicleColor, vehicleIdentificationCheckDigit, vehicleIdentificationNumber, width, zlbiIatId);
            return new RegistrationCertificateModel(axleAmount, colorCode, commercialDesignation, displacement, driveAxleAmount, drivingNoise, egTypeApprovalDate, egTypeApprovalNumber, egTypeEmissionClass, emissionClassCode, emissions, emptyWeight, firstRegistrationDate, fuelType, fuelTypeCode, height, length, manufacturer, manufacturerCode, manufacturerShortName, nationalEmissionClass, number, operatingPermitFeature, otherNotes, permissableBrakedTrailerLoad, permissableMaximumLoadAxle1, permissableMaximumLoadAxle1InRegistrationState, permissableMaximumLoadAxle2, permissableMaximumLoadAxle2InRegistrationState, permissableMaximumLoadAxle3, permissableMaximumLoadAxle3InRegistrationState, permissableTotalWeight, permissableTotalWeightInRegistrationState, permissableUnbrakedTrailerLoad, powerToWeightRatio, ratedPower, ratedRPM, registrationCertificateNumberPart2, registrationDate, registrationValidityPeriod, registratorId, remarks, remarksAndExeptions, seatsIncludingDriverSeat, standingNoise, standingNoiseRPM, standingPlaces, superStructureType, tankerTankCapacity, tiresAxle1, tiresAxle2, tiresAxle3, topSpeed, trailerNoseWeight, type, typeCodeWithCheckDigit, vehicleClass, vehicleClassDesignation, vehicleColor, vehicleIdentificationCheckDigit, vehicleIdentificationNumber, width, zlbiIatId);
        }

        /// <summary>
        /// Serializes a <see cref="RegistrationCertificateModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="registrationCertificateModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RegistrationCertificateModel registrationCertificateModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, registrationCertificateModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RegistrationCertificateModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="registrationCertificateModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, RegistrationCertificateModel registrationCertificateModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (registrationCertificateModel.AxleAmountOption.IsSet)
                if (registrationCertificateModel.AxleAmountOption.Value != null)
                {
                    writer.WriteNumber("axleAmount", registrationCertificateModel.AxleAmountOption!.Value);
                    //var __value = registrationCertificateModel.AxleAmountOption.Value;
                    //writer.WriteString("axleAmount", __value);
                }
                else
                    writer.WriteNull("axleAmount");

            if (registrationCertificateModel.ColorCodeOption.IsSet)
                if (registrationCertificateModel.ColorCodeOption.Value != null)
                {
                    writer.WriteString("colorCode", registrationCertificateModel.ColorCode);
                    //var __value = registrationCertificateModel.ColorCodeOption.Value;
                    //writer.WriteString("colorCode", __value);
                }
                else
                    writer.WriteNull("colorCode");

            if (registrationCertificateModel.CommercialDesignationOption.IsSet)
                if (registrationCertificateModel.CommercialDesignationOption.Value != null)
                {
                    writer.WriteString("commercialDesignation", registrationCertificateModel.CommercialDesignation);
                    //var __value = registrationCertificateModel.CommercialDesignationOption.Value;
                    //writer.WriteString("commercialDesignation", __value);
                }
                else
                    writer.WriteNull("commercialDesignation");

            if (registrationCertificateModel.DisplacementOption.IsSet)
                if (registrationCertificateModel.DisplacementOption.Value != null)
                {
                    writer.WriteNumber("displacement", registrationCertificateModel.DisplacementOption!.Value);
                    //var __value = registrationCertificateModel.DisplacementOption.Value;
                    //writer.WriteString("displacement", __value);
                }
                else
                    writer.WriteNull("displacement");

            if (registrationCertificateModel.DriveAxleAmountOption.IsSet)
                if (registrationCertificateModel.DriveAxleAmountOption.Value != null)
                {
                    writer.WriteNumber("driveAxleAmount", registrationCertificateModel.DriveAxleAmountOption!.Value);
                    //var __value = registrationCertificateModel.DriveAxleAmountOption.Value;
                    //writer.WriteString("driveAxleAmount", __value);
                }
                else
                    writer.WriteNull("driveAxleAmount");

            if (registrationCertificateModel.DrivingNoiseOption.IsSet)
                if (registrationCertificateModel.DrivingNoiseOption.Value != null)
                {
                    writer.WriteNumber("drivingNoise", registrationCertificateModel.DrivingNoiseOption!.Value);
                    //var __value = registrationCertificateModel.DrivingNoiseOption.Value;
                    //writer.WriteString("drivingNoise", __value);
                }
                else
                    writer.WriteNull("drivingNoise");

            if (registrationCertificateModel.EgTypeApprovalDateOption.IsSet)
                if (registrationCertificateModel.EgTypeApprovalDateOption.Value != null)
                {
                    writer.WriteString("egTypeApprovalDate", registrationCertificateModel.EgTypeApprovalDateOption!.Value.ToString(EgTypeApprovalDateFormat));
                    //var __value = registrationCertificateModel.EgTypeApprovalDateOption.Value;
                    //writer.WriteString("egTypeApprovalDate", __value);
                }
                else
                    writer.WriteNull("egTypeApprovalDate");

            if (registrationCertificateModel.EgTypeApprovalNumberOption.IsSet)
                if (registrationCertificateModel.EgTypeApprovalNumberOption.Value != null)
                {
                    writer.WriteString("egTypeApprovalNumber", registrationCertificateModel.EgTypeApprovalNumber);
                    //var __value = registrationCertificateModel.EgTypeApprovalNumberOption.Value;
                    //writer.WriteString("egTypeApprovalNumber", __value);
                }
                else
                    writer.WriteNull("egTypeApprovalNumber");

            if (registrationCertificateModel.EgTypeEmissionClassOption.IsSet)
                if (registrationCertificateModel.EgTypeEmissionClassOption.Value != null)
                {
                    writer.WriteString("egTypeEmissionClass", registrationCertificateModel.EgTypeEmissionClass);
                    //var __value = registrationCertificateModel.EgTypeEmissionClassOption.Value;
                    //writer.WriteString("egTypeEmissionClass", __value);
                }
                else
                    writer.WriteNull("egTypeEmissionClass");

            if (registrationCertificateModel.EmissionClassCodeOption.IsSet)
                if (registrationCertificateModel.EmissionClassCodeOption.Value != null)
                {
                    writer.WriteString("emissionClassCode", registrationCertificateModel.EmissionClassCode);
                    //var __value = registrationCertificateModel.EmissionClassCodeOption.Value;
                    //writer.WriteString("emissionClassCode", __value);
                }
                else
                    writer.WriteNull("emissionClassCode");

            if (registrationCertificateModel.EmissionsOption.IsSet)
                if (registrationCertificateModel.EmissionsOption.Value != null)
                {
                    writer.WriteNumber("emissions", registrationCertificateModel.EmissionsOption!.Value);
                    //var __value = registrationCertificateModel.EmissionsOption.Value;
                    //writer.WriteString("emissions", __value);
                }
                else
                    writer.WriteNull("emissions");

            if (registrationCertificateModel.EmptyWeightOption.IsSet)
                if (registrationCertificateModel.EmptyWeightOption.Value != null)
                {
                    writer.WriteNumber("emptyWeight", registrationCertificateModel.EmptyWeightOption!.Value);
                    //var __value = registrationCertificateModel.EmptyWeightOption.Value;
                    //writer.WriteString("emptyWeight", __value);
                }
                else
                    writer.WriteNull("emptyWeight");

            if (registrationCertificateModel.FirstRegistrationDateOption.IsSet)
                if (registrationCertificateModel.FirstRegistrationDateOption.Value != null)
                {
                    writer.WriteString("firstRegistrationDate", registrationCertificateModel.FirstRegistrationDateOption!.Value.ToString(FirstRegistrationDateFormat));
                    //var __value = registrationCertificateModel.FirstRegistrationDateOption.Value;
                    //writer.WriteString("firstRegistrationDate", __value);
                }
                else
                    writer.WriteNull("firstRegistrationDate");

            if (registrationCertificateModel.FuelTypeOption.IsSet)
                if (registrationCertificateModel.FuelTypeOption.Value != null)
                {
                    writer.WriteString("fuelType", registrationCertificateModel.FuelType);
                    //var __value = registrationCertificateModel.FuelTypeOption.Value;
                    //writer.WriteString("fuelType", __value);
                }
                else
                    writer.WriteNull("fuelType");

            if (registrationCertificateModel.FuelTypeCodeOption.IsSet)
                if (registrationCertificateModel.FuelTypeCodeOption.Value != null)
                {
                    writer.WriteString("fuelTypeCode", registrationCertificateModel.FuelTypeCode);
                    //var __value = registrationCertificateModel.FuelTypeCodeOption.Value;
                    //writer.WriteString("fuelTypeCode", __value);
                }
                else
                    writer.WriteNull("fuelTypeCode");

            if (registrationCertificateModel.HeightOption.IsSet)
                if (registrationCertificateModel.HeightOption.Value != null)
                {
                    writer.WriteNumber("height", registrationCertificateModel.HeightOption!.Value);
                    //var __value = registrationCertificateModel.HeightOption.Value;
                    //writer.WriteString("height", __value);
                }
                else
                    writer.WriteNull("height");

            if (registrationCertificateModel.LengthOption.IsSet)
                if (registrationCertificateModel.LengthOption.Value != null)
                {
                    writer.WriteNumber("length", registrationCertificateModel.LengthOption!.Value);
                    //var __value = registrationCertificateModel.LengthOption.Value;
                    //writer.WriteString("length", __value);
                }
                else
                    writer.WriteNull("length");

            if (registrationCertificateModel.ManufacturerOption.IsSet)
                if (registrationCertificateModel.ManufacturerOption.Value != null)
                {
                    writer.WriteString("manufacturer", registrationCertificateModel.Manufacturer);
                    //var __value = registrationCertificateModel.ManufacturerOption.Value;
                    //writer.WriteString("manufacturer", __value);
                }
                else
                    writer.WriteNull("manufacturer");

            if (registrationCertificateModel.ManufacturerCodeOption.IsSet)
                if (registrationCertificateModel.ManufacturerCodeOption.Value != null)
                {
                    writer.WriteNumber("manufacturerCode", registrationCertificateModel.ManufacturerCodeOption!.Value);
                    //var __value = registrationCertificateModel.ManufacturerCodeOption.Value;
                    //writer.WriteString("manufacturerCode", __value);
                }
                else
                    writer.WriteNull("manufacturerCode");

            if (registrationCertificateModel.ManufacturerShortNameOption.IsSet)
                if (registrationCertificateModel.ManufacturerShortNameOption.Value != null)
                {
                    writer.WriteString("manufacturerShortName", registrationCertificateModel.ManufacturerShortName);
                    //var __value = registrationCertificateModel.ManufacturerShortNameOption.Value;
                    //writer.WriteString("manufacturerShortName", __value);
                }
                else
                    writer.WriteNull("manufacturerShortName");

            if (registrationCertificateModel.NationalEmissionClassOption.IsSet)
                if (registrationCertificateModel.NationalEmissionClassOption.Value != null)
                {
                    writer.WriteString("nationalEmissionClass", registrationCertificateModel.NationalEmissionClass);
                    //var __value = registrationCertificateModel.NationalEmissionClassOption.Value;
                    //writer.WriteString("nationalEmissionClass", __value);
                }
                else
                    writer.WriteNull("nationalEmissionClass");

            if (registrationCertificateModel.NumberOption.IsSet)
                if (registrationCertificateModel.NumberOption.Value != null)
                {
                    writer.WriteString("number", registrationCertificateModel.Number);
                    //var __value = registrationCertificateModel.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (registrationCertificateModel.OperatingPermitFeatureOption.IsSet)
                if (registrationCertificateModel.OperatingPermitFeatureOption.Value != null)
                {
                    writer.WriteString("operatingPermitFeature", registrationCertificateModel.OperatingPermitFeature);
                    //var __value = registrationCertificateModel.OperatingPermitFeatureOption.Value;
                    //writer.WriteString("operatingPermitFeature", __value);
                }
                else
                    writer.WriteNull("operatingPermitFeature");

            if (registrationCertificateModel.OtherNotesOption.IsSet)
                if (registrationCertificateModel.OtherNotesOption.Value != null)
                {
                    writer.WriteString("otherNotes", registrationCertificateModel.OtherNotes);
                    //var __value = registrationCertificateModel.OtherNotesOption.Value;
                    //writer.WriteString("otherNotes", __value);
                }
                else
                    writer.WriteNull("otherNotes");

            if (registrationCertificateModel.PermissableBrakedTrailerLoadOption.IsSet)
                if (registrationCertificateModel.PermissableBrakedTrailerLoadOption.Value != null)
                {
                    writer.WriteNumber("permissableBrakedTrailerLoad", registrationCertificateModel.PermissableBrakedTrailerLoadOption!.Value);
                    //var __value = registrationCertificateModel.PermissableBrakedTrailerLoadOption.Value;
                    //writer.WriteString("permissableBrakedTrailerLoad", __value);
                }
                else
                    writer.WriteNull("permissableBrakedTrailerLoad");

            if (registrationCertificateModel.PermissableMaximumLoadAxle1Option.IsSet)
                if (registrationCertificateModel.PermissableMaximumLoadAxle1Option.Value != null)
                {
                    writer.WriteNumber("permissableMaximumLoadAxle1", registrationCertificateModel.PermissableMaximumLoadAxle1Option!.Value);
                    //var __value = registrationCertificateModel.PermissableMaximumLoadAxle1Option.Value;
                    //writer.WriteString("permissableMaximumLoadAxle1", __value);
                }
                else
                    writer.WriteNull("permissableMaximumLoadAxle1");

            if (registrationCertificateModel.PermissableMaximumLoadAxle1InRegistrationStateOption.IsSet)
                if (registrationCertificateModel.PermissableMaximumLoadAxle1InRegistrationStateOption.Value != null)
                {
                    writer.WriteNumber("permissableMaximumLoadAxle1InRegistrationState", registrationCertificateModel.PermissableMaximumLoadAxle1InRegistrationStateOption!.Value);
                    //var __value = registrationCertificateModel.PermissableMaximumLoadAxle1InRegistrationStateOption.Value;
                    //writer.WriteString("permissableMaximumLoadAxle1InRegistrationState", __value);
                }
                else
                    writer.WriteNull("permissableMaximumLoadAxle1InRegistrationState");

            if (registrationCertificateModel.PermissableMaximumLoadAxle2Option.IsSet)
                if (registrationCertificateModel.PermissableMaximumLoadAxle2Option.Value != null)
                {
                    writer.WriteNumber("permissableMaximumLoadAxle2", registrationCertificateModel.PermissableMaximumLoadAxle2Option!.Value);
                    //var __value = registrationCertificateModel.PermissableMaximumLoadAxle2Option.Value;
                    //writer.WriteString("permissableMaximumLoadAxle2", __value);
                }
                else
                    writer.WriteNull("permissableMaximumLoadAxle2");

            if (registrationCertificateModel.PermissableMaximumLoadAxle2InRegistrationStateOption.IsSet)
                if (registrationCertificateModel.PermissableMaximumLoadAxle2InRegistrationStateOption.Value != null)
                {
                    writer.WriteNumber("permissableMaximumLoadAxle2InRegistrationState", registrationCertificateModel.PermissableMaximumLoadAxle2InRegistrationStateOption!.Value);
                    //var __value = registrationCertificateModel.PermissableMaximumLoadAxle2InRegistrationStateOption.Value;
                    //writer.WriteString("permissableMaximumLoadAxle2InRegistrationState", __value);
                }
                else
                    writer.WriteNull("permissableMaximumLoadAxle2InRegistrationState");

            if (registrationCertificateModel.PermissableMaximumLoadAxle3Option.IsSet)
                if (registrationCertificateModel.PermissableMaximumLoadAxle3Option.Value != null)
                {
                    writer.WriteNumber("permissableMaximumLoadAxle3", registrationCertificateModel.PermissableMaximumLoadAxle3Option!.Value);
                    //var __value = registrationCertificateModel.PermissableMaximumLoadAxle3Option.Value;
                    //writer.WriteString("permissableMaximumLoadAxle3", __value);
                }
                else
                    writer.WriteNull("permissableMaximumLoadAxle3");

            if (registrationCertificateModel.PermissableMaximumLoadAxle3InRegistrationStateOption.IsSet)
                if (registrationCertificateModel.PermissableMaximumLoadAxle3InRegistrationStateOption.Value != null)
                {
                    writer.WriteNumber("permissableMaximumLoadAxle3InRegistrationState", registrationCertificateModel.PermissableMaximumLoadAxle3InRegistrationStateOption!.Value);
                    //var __value = registrationCertificateModel.PermissableMaximumLoadAxle3InRegistrationStateOption.Value;
                    //writer.WriteString("permissableMaximumLoadAxle3InRegistrationState", __value);
                }
                else
                    writer.WriteNull("permissableMaximumLoadAxle3InRegistrationState");

            if (registrationCertificateModel.PermissableTotalWeightOption.IsSet)
                if (registrationCertificateModel.PermissableTotalWeightOption.Value != null)
                {
                    writer.WriteNumber("permissableTotalWeight", registrationCertificateModel.PermissableTotalWeightOption!.Value);
                    //var __value = registrationCertificateModel.PermissableTotalWeightOption.Value;
                    //writer.WriteString("permissableTotalWeight", __value);
                }
                else
                    writer.WriteNull("permissableTotalWeight");

            if (registrationCertificateModel.PermissableTotalWeightInRegistrationStateOption.IsSet)
                if (registrationCertificateModel.PermissableTotalWeightInRegistrationStateOption.Value != null)
                {
                    writer.WriteNumber("permissableTotalWeightInRegistrationState", registrationCertificateModel.PermissableTotalWeightInRegistrationStateOption!.Value);
                    //var __value = registrationCertificateModel.PermissableTotalWeightInRegistrationStateOption.Value;
                    //writer.WriteString("permissableTotalWeightInRegistrationState", __value);
                }
                else
                    writer.WriteNull("permissableTotalWeightInRegistrationState");

            if (registrationCertificateModel.PermissableUnbrakedTrailerLoadOption.IsSet)
                if (registrationCertificateModel.PermissableUnbrakedTrailerLoadOption.Value != null)
                {
                    writer.WriteNumber("permissableUnbrakedTrailerLoad", registrationCertificateModel.PermissableUnbrakedTrailerLoadOption!.Value);
                    //var __value = registrationCertificateModel.PermissableUnbrakedTrailerLoadOption.Value;
                    //writer.WriteString("permissableUnbrakedTrailerLoad", __value);
                }
                else
                    writer.WriteNull("permissableUnbrakedTrailerLoad");

            if (registrationCertificateModel.PowerToWeightRatioOption.IsSet)
                if (registrationCertificateModel.PowerToWeightRatioOption.Value != null)
                {
                    writer.WriteNumber("powerToWeightRatio", registrationCertificateModel.PowerToWeightRatioOption!.Value);
                    //var __value = registrationCertificateModel.PowerToWeightRatioOption.Value;
                    //writer.WriteString("powerToWeightRatio", __value);
                }
                else
                    writer.WriteNull("powerToWeightRatio");

            if (registrationCertificateModel.RatedPowerOption.IsSet)
                if (registrationCertificateModel.RatedPowerOption.Value != null)
                {
                    writer.WriteNumber("ratedPower", registrationCertificateModel.RatedPowerOption!.Value);
                    //var __value = registrationCertificateModel.RatedPowerOption.Value;
                    //writer.WriteString("ratedPower", __value);
                }
                else
                    writer.WriteNull("ratedPower");

            if (registrationCertificateModel.RatedRPMOption.IsSet)
                if (registrationCertificateModel.RatedRPMOption.Value != null)
                {
                    writer.WriteNumber("ratedRPM", registrationCertificateModel.RatedRPMOption!.Value);
                    //var __value = registrationCertificateModel.RatedRPMOption.Value;
                    //writer.WriteString("ratedRPM", __value);
                }
                else
                    writer.WriteNull("ratedRPM");

            if (registrationCertificateModel.RegistrationCertificateNumberPart2Option.IsSet)
                if (registrationCertificateModel.RegistrationCertificateNumberPart2Option.Value != null)
                {
                    writer.WriteString("registrationCertificateNumberPart2", registrationCertificateModel.RegistrationCertificateNumberPart2);
                    //var __value = registrationCertificateModel.RegistrationCertificateNumberPart2Option.Value;
                    //writer.WriteString("registrationCertificateNumberPart2", __value);
                }
                else
                    writer.WriteNull("registrationCertificateNumberPart2");

            if (registrationCertificateModel.RegistrationDateOption.IsSet)
                if (registrationCertificateModel.RegistrationDateOption.Value != null)
                {
                    writer.WriteString("registrationDate", registrationCertificateModel.RegistrationDateOption!.Value.ToString(RegistrationDateFormat));
                    //var __value = registrationCertificateModel.RegistrationDateOption.Value;
                    //writer.WriteString("registrationDate", __value);
                }
                else
                    writer.WriteNull("registrationDate");

            if (registrationCertificateModel.RegistrationValidityPeriodOption.IsSet)
                if (registrationCertificateModel.RegistrationValidityPeriodOption.Value != null)
                {
                    writer.WriteString("registrationValidityPeriod", registrationCertificateModel.RegistrationValidityPeriodOption!.Value.ToString(RegistrationValidityPeriodFormat));
                    //var __value = registrationCertificateModel.RegistrationValidityPeriodOption.Value;
                    //writer.WriteString("registrationValidityPeriod", __value);
                }
                else
                    writer.WriteNull("registrationValidityPeriod");

            if (registrationCertificateModel.RegistratorIdOption.IsSet)
                if (registrationCertificateModel.RegistratorIdOption.Value != null)
                {
                    writer.WriteString("registratorId", registrationCertificateModel.RegistratorIdOption!.Value);
                    //var __value = registrationCertificateModel.RegistratorIdOption.Value;
                    //writer.WriteString("registratorId", __value);
                }
                else
                    writer.WriteNull("registratorId");

            if (registrationCertificateModel.RemarksOption.IsSet)
                if (registrationCertificateModel.RemarksOption.Value != null)
                {
                    writer.WriteString("remarks", registrationCertificateModel.Remarks);
                    //var __value = registrationCertificateModel.RemarksOption.Value;
                    //writer.WriteString("remarks", __value);
                }
                else
                    writer.WriteNull("remarks");

            if (registrationCertificateModel.RemarksAndExeptionsOption.IsSet)
                if (registrationCertificateModel.RemarksAndExeptionsOption.Value != null)
                {
                    writer.WriteString("remarksAndExeptions", registrationCertificateModel.RemarksAndExeptions);
                    //var __value = registrationCertificateModel.RemarksAndExeptionsOption.Value;
                    //writer.WriteString("remarksAndExeptions", __value);
                }
                else
                    writer.WriteNull("remarksAndExeptions");

            if (registrationCertificateModel.SeatsIncludingDriverSeatOption.IsSet)
                if (registrationCertificateModel.SeatsIncludingDriverSeatOption.Value != null)
                {
                    writer.WriteNumber("seatsIncludingDriverSeat", registrationCertificateModel.SeatsIncludingDriverSeatOption!.Value);
                    //var __value = registrationCertificateModel.SeatsIncludingDriverSeatOption.Value;
                    //writer.WriteString("seatsIncludingDriverSeat", __value);
                }
                else
                    writer.WriteNull("seatsIncludingDriverSeat");

            if (registrationCertificateModel.StandingNoiseOption.IsSet)
                if (registrationCertificateModel.StandingNoiseOption.Value != null)
                {
                    writer.WriteNumber("standingNoise", registrationCertificateModel.StandingNoiseOption!.Value);
                    //var __value = registrationCertificateModel.StandingNoiseOption.Value;
                    //writer.WriteString("standingNoise", __value);
                }
                else
                    writer.WriteNull("standingNoise");

            if (registrationCertificateModel.StandingNoiseRPMOption.IsSet)
                if (registrationCertificateModel.StandingNoiseRPMOption.Value != null)
                {
                    writer.WriteNumber("standingNoiseRPM", registrationCertificateModel.StandingNoiseRPMOption!.Value);
                    //var __value = registrationCertificateModel.StandingNoiseRPMOption.Value;
                    //writer.WriteString("standingNoiseRPM", __value);
                }
                else
                    writer.WriteNull("standingNoiseRPM");

            if (registrationCertificateModel.StandingPlacesOption.IsSet)
                if (registrationCertificateModel.StandingPlacesOption.Value != null)
                {
                    writer.WriteNumber("standingPlaces", registrationCertificateModel.StandingPlacesOption!.Value);
                    //var __value = registrationCertificateModel.StandingPlacesOption.Value;
                    //writer.WriteString("standingPlaces", __value);
                }
                else
                    writer.WriteNull("standingPlaces");

            if (registrationCertificateModel.SuperStructureTypeOption.IsSet)
                if (registrationCertificateModel.SuperStructureTypeOption.Value != null)
                {
                    writer.WriteString("superStructureType", registrationCertificateModel.SuperStructureType);
                    //var __value = registrationCertificateModel.SuperStructureTypeOption.Value;
                    //writer.WriteString("superStructureType", __value);
                }
                else
                    writer.WriteNull("superStructureType");

            if (registrationCertificateModel.TankerTankCapacityOption.IsSet)
                if (registrationCertificateModel.TankerTankCapacityOption.Value != null)
                {
                    writer.WriteNumber("tankerTankCapacity", registrationCertificateModel.TankerTankCapacityOption!.Value);
                    //var __value = registrationCertificateModel.TankerTankCapacityOption.Value;
                    //writer.WriteString("tankerTankCapacity", __value);
                }
                else
                    writer.WriteNull("tankerTankCapacity");

            if (registrationCertificateModel.TiresAxle1Option.IsSet)
                if (registrationCertificateModel.TiresAxle1Option.Value != null)
                {
                    writer.WriteString("tiresAxle1", registrationCertificateModel.TiresAxle1);
                    //var __value = registrationCertificateModel.TiresAxle1Option.Value;
                    //writer.WriteString("tiresAxle1", __value);
                }
                else
                    writer.WriteNull("tiresAxle1");

            if (registrationCertificateModel.TiresAxle2Option.IsSet)
                if (registrationCertificateModel.TiresAxle2Option.Value != null)
                {
                    writer.WriteString("tiresAxle2", registrationCertificateModel.TiresAxle2);
                    //var __value = registrationCertificateModel.TiresAxle2Option.Value;
                    //writer.WriteString("tiresAxle2", __value);
                }
                else
                    writer.WriteNull("tiresAxle2");

            if (registrationCertificateModel.TiresAxle3Option.IsSet)
                if (registrationCertificateModel.TiresAxle3Option.Value != null)
                {
                    writer.WriteString("tiresAxle3", registrationCertificateModel.TiresAxle3);
                    //var __value = registrationCertificateModel.TiresAxle3Option.Value;
                    //writer.WriteString("tiresAxle3", __value);
                }
                else
                    writer.WriteNull("tiresAxle3");

            if (registrationCertificateModel.TopSpeedOption.IsSet)
                if (registrationCertificateModel.TopSpeedOption.Value != null)
                {
                    writer.WriteNumber("topSpeed", registrationCertificateModel.TopSpeedOption!.Value);
                    //var __value = registrationCertificateModel.TopSpeedOption.Value;
                    //writer.WriteString("topSpeed", __value);
                }
                else
                    writer.WriteNull("topSpeed");

            if (registrationCertificateModel.TrailerNoseWeightOption.IsSet)
                if (registrationCertificateModel.TrailerNoseWeightOption.Value != null)
                {
                    writer.WriteNumber("trailerNoseWeight", registrationCertificateModel.TrailerNoseWeightOption!.Value);
                    //var __value = registrationCertificateModel.TrailerNoseWeightOption.Value;
                    //writer.WriteString("trailerNoseWeight", __value);
                }
                else
                    writer.WriteNull("trailerNoseWeight");

            if (registrationCertificateModel.TypeOption.IsSet)
                if (registrationCertificateModel.TypeOption.Value != null)
                {
                    writer.WriteString("type", registrationCertificateModel.Type);
                    //var __value = registrationCertificateModel.TypeOption.Value;
                    //writer.WriteString("type", __value);
                }
                else
                    writer.WriteNull("type");

            if (registrationCertificateModel.TypeCodeWithCheckDigitOption.IsSet)
                if (registrationCertificateModel.TypeCodeWithCheckDigitOption.Value != null)
                {
                    writer.WriteString("typeCodeWithCheckDigit", registrationCertificateModel.TypeCodeWithCheckDigit);
                    //var __value = registrationCertificateModel.TypeCodeWithCheckDigitOption.Value;
                    //writer.WriteString("typeCodeWithCheckDigit", __value);
                }
                else
                    writer.WriteNull("typeCodeWithCheckDigit");

            if (registrationCertificateModel.VehicleClassOption.IsSet)
                if (registrationCertificateModel.VehicleClassOption.Value != null)
                {
                    writer.WriteString("vehicleClass", registrationCertificateModel.VehicleClass);
                    //var __value = registrationCertificateModel.VehicleClassOption.Value;
                    //writer.WriteString("vehicleClass", __value);
                }
                else
                    writer.WriteNull("vehicleClass");

            if (registrationCertificateModel.VehicleClassDesignationOption.IsSet)
                if (registrationCertificateModel.VehicleClassDesignationOption.Value != null)
                {
                    writer.WriteString("vehicleClassDesignation", registrationCertificateModel.VehicleClassDesignation);
                    //var __value = registrationCertificateModel.VehicleClassDesignationOption.Value;
                    //writer.WriteString("vehicleClassDesignation", __value);
                }
                else
                    writer.WriteNull("vehicleClassDesignation");

            if (registrationCertificateModel.VehicleColorOption.IsSet)
                if (registrationCertificateModel.VehicleColorOption.Value != null)
                {
                    writer.WriteString("vehicleColor", registrationCertificateModel.VehicleColor);
                    //var __value = registrationCertificateModel.VehicleColorOption.Value;
                    //writer.WriteString("vehicleColor", __value);
                }
                else
                    writer.WriteNull("vehicleColor");

            if (registrationCertificateModel.VehicleIdentificationCheckDigitOption.IsSet)
                if (registrationCertificateModel.VehicleIdentificationCheckDigitOption.Value != null)
                {
                    writer.WriteNumber("vehicleIdentificationCheckDigit", registrationCertificateModel.VehicleIdentificationCheckDigitOption!.Value);
                    //var __value = registrationCertificateModel.VehicleIdentificationCheckDigitOption.Value;
                    //writer.WriteString("vehicleIdentificationCheckDigit", __value);
                }
                else
                    writer.WriteNull("vehicleIdentificationCheckDigit");

            if (registrationCertificateModel.VehicleIdentificationNumberOption.IsSet)
                if (registrationCertificateModel.VehicleIdentificationNumberOption.Value != null)
                {
                    writer.WriteString("vehicleIdentificationNumber", registrationCertificateModel.VehicleIdentificationNumber);
                    //var __value = registrationCertificateModel.VehicleIdentificationNumberOption.Value;
                    //writer.WriteString("vehicleIdentificationNumber", __value);
                }
                else
                    writer.WriteNull("vehicleIdentificationNumber");

            if (registrationCertificateModel.WidthOption.IsSet)
                if (registrationCertificateModel.WidthOption.Value != null)
                {
                    writer.WriteNumber("width", registrationCertificateModel.WidthOption!.Value);
                    //var __value = registrationCertificateModel.WidthOption.Value;
                    //writer.WriteString("width", __value);
                }
                else
                    writer.WriteNull("width");

            if (registrationCertificateModel.ZlbiIatIdOption.IsSet)
                if (registrationCertificateModel.ZlbiIatIdOption.Value != null)
                {
                    writer.WriteString("zlbiIatId", registrationCertificateModel.ZlbiIatIdOption!.Value);
                    //var __value = registrationCertificateModel.ZlbiIatIdOption.Value;
                    //writer.WriteString("zlbiIatId", __value);
                }
                else
                    writer.WriteNull("zlbiIatId");
        }
    }
}
