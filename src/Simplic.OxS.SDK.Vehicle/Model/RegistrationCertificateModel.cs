/*
 * Simplic.OxS.Vehicle
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Vehicle
{
    /// <summary>
    /// RegistrationCertificateModel
    /// </summary>
    [DataContract(Name = "RegistrationCertificateModel")]
    public partial class RegistrationCertificateModel : IEquatable<RegistrationCertificateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationCertificateModel" /> class.
        /// </summary>
        /// <param name="number">number.</param>
        /// <param name="registratorId">registratorId.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="firstRegistrationDate">firstRegistrationDate.</param>
        /// <param name="manufacturer">manufacturer.</param>
        /// <param name="type">type.</param>
        /// <param name="commercialDesignation">commercialDesignation.</param>
        /// <param name="vehicleIdentificationNumber">vehicleIdentificationNumber.</param>
        /// <param name="permissableTotalWeight">permissableTotalWeight.</param>
        /// <param name="permissableTotalWeightInRegistrationState">permissableTotalWeightInRegistrationState.</param>
        /// <param name="emptyWeight">emptyWeight.</param>
        /// <param name="registrationValidityPeriod">registrationValidityPeriod.</param>
        /// <param name="registrationDate">registrationDate.</param>
        /// <param name="vehicleClass">vehicleClass.</param>
        /// <param name="egTypeApprovalNumber">egTypeApprovalNumber.</param>
        /// <param name="axleAmount">axleAmount.</param>
        /// <param name="permissableBrakedTrailerLoad">permissableBrakedTrailerLoad.</param>
        /// <param name="permissableUnbrakedTrailerLoad">permissableUnbrakedTrailerLoad.</param>
        /// <param name="displacement">displacement.</param>
        /// <param name="ratedPower">ratedPower.</param>
        /// <param name="ratedRPM">ratedRPM.</param>
        /// <param name="fuelType">fuelType.</param>
        /// <param name="powerToWeightRatio">powerToWeightRatio.</param>
        /// <param name="vehicleColor">vehicleColor.</param>
        /// <param name="seatsIncludingDriverSeat">seatsIncludingDriverSeat.</param>
        /// <param name="standingPlaces">standingPlaces.</param>
        /// <param name="topSpeed">topSpeed.</param>
        /// <param name="standingNoise">standingNoise.</param>
        /// <param name="standingNoiseRPM">standingNoiseRPM.</param>
        /// <param name="drivingNoise">drivingNoise.</param>
        /// <param name="emissions">emissions.</param>
        /// <param name="egTypeEmissionClass">egTypeEmissionClass.</param>
        /// <param name="manufacturerShortName">manufacturerShortName.</param>
        /// <param name="manufacturerCode">manufacturerCode.</param>
        /// <param name="typeCodeWithCheckDigit">typeCodeWithCheckDigit.</param>
        /// <param name="vehicleIdentificationCheckDigit">vehicleIdentificationCheckDigit.</param>
        /// <param name="superStructureType">superStructureType.</param>
        /// <param name="vehicleClassDesignation">vehicleClassDesignation.</param>
        /// <param name="egTypeApprovalDate">egTypeApprovalDate.</param>
        /// <param name="permissableMaximumLoadAxle1">permissableMaximumLoadAxle1.</param>
        /// <param name="permissableMaximumLoadAxle2">permissableMaximumLoadAxle2.</param>
        /// <param name="permissableMaximumLoadAxle3">permissableMaximumLoadAxle3.</param>
        /// <param name="permissableMaximumLoadAxle1InRegistrationState">permissableMaximumLoadAxle1InRegistrationState.</param>
        /// <param name="permissableMaximumLoadAxle2InRegistrationState">permissableMaximumLoadAxle2InRegistrationState.</param>
        /// <param name="permissableMaximumLoadAxle3InRegistrationState">permissableMaximumLoadAxle3InRegistrationState.</param>
        /// <param name="driveAxleAmount">driveAxleAmount.</param>
        /// <param name="fuelTypeCode">fuelTypeCode.</param>
        /// <param name="colorCode">colorCode.</param>
        /// <param name="tankerTankCapacity">tankerTankCapacity.</param>
        /// <param name="trailerNoseWeight">trailerNoseWeight.</param>
        /// <param name="nationalEmissionClass">nationalEmissionClass.</param>
        /// <param name="emissionClassCode">emissionClassCode.</param>
        /// <param name="tiresAxle1">tiresAxle1.</param>
        /// <param name="tiresAxle2">tiresAxle2.</param>
        /// <param name="tiresAxle3">tiresAxle3.</param>
        /// <param name="registrationCertificateNumberPart2">registrationCertificateNumberPart2.</param>
        /// <param name="operatingPermitFeature">operatingPermitFeature.</param>
        /// <param name="length">length.</param>
        /// <param name="width">width.</param>
        /// <param name="height">height.</param>
        /// <param name="otherNotes">otherNotes.</param>
        /// <param name="remarksAndExeptions">remarksAndExeptions.</param>
        /// <param name="zlbiIatId">zlbiIatId.</param>
        public RegistrationCertificateModel(string number = default(string), Guid? registratorId = default(Guid?), string remarks = default(string), DateTime? firstRegistrationDate = default(DateTime?), string manufacturer = default(string), string type = default(string), string commercialDesignation = default(string), string vehicleIdentificationNumber = default(string), int? permissableTotalWeight = default(int?), int? permissableTotalWeightInRegistrationState = default(int?), int? emptyWeight = default(int?), DateTime? registrationValidityPeriod = default(DateTime?), DateTime? registrationDate = default(DateTime?), string vehicleClass = default(string), string egTypeApprovalNumber = default(string), int? axleAmount = default(int?), int? permissableBrakedTrailerLoad = default(int?), int? permissableUnbrakedTrailerLoad = default(int?), int? displacement = default(int?), int? ratedPower = default(int?), int? ratedRPM = default(int?), string fuelType = default(string), double? powerToWeightRatio = default(double?), string vehicleColor = default(string), int? seatsIncludingDriverSeat = default(int?), int? standingPlaces = default(int?), int? topSpeed = default(int?), int? standingNoise = default(int?), int? standingNoiseRPM = default(int?), int? drivingNoise = default(int?), int? emissions = default(int?), string egTypeEmissionClass = default(string), string manufacturerShortName = default(string), int? manufacturerCode = default(int?), string typeCodeWithCheckDigit = default(string), int? vehicleIdentificationCheckDigit = default(int?), string superStructureType = default(string), string vehicleClassDesignation = default(string), DateTime? egTypeApprovalDate = default(DateTime?), int? permissableMaximumLoadAxle1 = default(int?), int? permissableMaximumLoadAxle2 = default(int?), int? permissableMaximumLoadAxle3 = default(int?), int? permissableMaximumLoadAxle1InRegistrationState = default(int?), int? permissableMaximumLoadAxle2InRegistrationState = default(int?), int? permissableMaximumLoadAxle3InRegistrationState = default(int?), int? driveAxleAmount = default(int?), string fuelTypeCode = default(string), string colorCode = default(string), int? tankerTankCapacity = default(int?), int? trailerNoseWeight = default(int?), string nationalEmissionClass = default(string), string emissionClassCode = default(string), string tiresAxle1 = default(string), string tiresAxle2 = default(string), string tiresAxle3 = default(string), string registrationCertificateNumberPart2 = default(string), string operatingPermitFeature = default(string), int? length = default(int?), int? width = default(int?), int? height = default(int?), string otherNotes = default(string), string remarksAndExeptions = default(string), Guid? zlbiIatId = default(Guid?))
        {
            this.Number = number;
            this.RegistratorId = registratorId;
            this.Remarks = remarks;
            this.FirstRegistrationDate = firstRegistrationDate;
            this.Manufacturer = manufacturer;
            this.Type = type;
            this.CommercialDesignation = commercialDesignation;
            this.VehicleIdentificationNumber = vehicleIdentificationNumber;
            this.PermissableTotalWeight = permissableTotalWeight;
            this.PermissableTotalWeightInRegistrationState = permissableTotalWeightInRegistrationState;
            this.EmptyWeight = emptyWeight;
            this.RegistrationValidityPeriod = registrationValidityPeriod;
            this.RegistrationDate = registrationDate;
            this.VehicleClass = vehicleClass;
            this.EgTypeApprovalNumber = egTypeApprovalNumber;
            this.AxleAmount = axleAmount;
            this.PermissableBrakedTrailerLoad = permissableBrakedTrailerLoad;
            this.PermissableUnbrakedTrailerLoad = permissableUnbrakedTrailerLoad;
            this.Displacement = displacement;
            this.RatedPower = ratedPower;
            this.RatedRPM = ratedRPM;
            this.FuelType = fuelType;
            this.PowerToWeightRatio = powerToWeightRatio;
            this.VehicleColor = vehicleColor;
            this.SeatsIncludingDriverSeat = seatsIncludingDriverSeat;
            this.StandingPlaces = standingPlaces;
            this.TopSpeed = topSpeed;
            this.StandingNoise = standingNoise;
            this.StandingNoiseRPM = standingNoiseRPM;
            this.DrivingNoise = drivingNoise;
            this.Emissions = emissions;
            this.EgTypeEmissionClass = egTypeEmissionClass;
            this.ManufacturerShortName = manufacturerShortName;
            this.ManufacturerCode = manufacturerCode;
            this.TypeCodeWithCheckDigit = typeCodeWithCheckDigit;
            this.VehicleIdentificationCheckDigit = vehicleIdentificationCheckDigit;
            this.SuperStructureType = superStructureType;
            this.VehicleClassDesignation = vehicleClassDesignation;
            this.EgTypeApprovalDate = egTypeApprovalDate;
            this.PermissableMaximumLoadAxle1 = permissableMaximumLoadAxle1;
            this.PermissableMaximumLoadAxle2 = permissableMaximumLoadAxle2;
            this.PermissableMaximumLoadAxle3 = permissableMaximumLoadAxle3;
            this.PermissableMaximumLoadAxle1InRegistrationState = permissableMaximumLoadAxle1InRegistrationState;
            this.PermissableMaximumLoadAxle2InRegistrationState = permissableMaximumLoadAxle2InRegistrationState;
            this.PermissableMaximumLoadAxle3InRegistrationState = permissableMaximumLoadAxle3InRegistrationState;
            this.DriveAxleAmount = driveAxleAmount;
            this.FuelTypeCode = fuelTypeCode;
            this.ColorCode = colorCode;
            this.TankerTankCapacity = tankerTankCapacity;
            this.TrailerNoseWeight = trailerNoseWeight;
            this.NationalEmissionClass = nationalEmissionClass;
            this.EmissionClassCode = emissionClassCode;
            this.TiresAxle1 = tiresAxle1;
            this.TiresAxle2 = tiresAxle2;
            this.TiresAxle3 = tiresAxle3;
            this.RegistrationCertificateNumberPart2 = registrationCertificateNumberPart2;
            this.OperatingPermitFeature = operatingPermitFeature;
            this.Length = length;
            this.Width = width;
            this.Height = height;
            this.OtherNotes = otherNotes;
            this.RemarksAndExeptions = remarksAndExeptions;
            this.ZlbiIatId = zlbiIatId;
        }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets RegistratorId
        /// </summary>
        [DataMember(Name = "registratorId", EmitDefaultValue = true)]
        public Guid? RegistratorId { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name = "remarks", EmitDefaultValue = true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets FirstRegistrationDate
        /// </summary>
        [DataMember(Name = "firstRegistrationDate", EmitDefaultValue = true)]
        public DateTime? FirstRegistrationDate { get; set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name = "manufacturer", EmitDefaultValue = true)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets CommercialDesignation
        /// </summary>
        [DataMember(Name = "commercialDesignation", EmitDefaultValue = true)]
        public string CommercialDesignation { get; set; }

        /// <summary>
        /// Gets or Sets VehicleIdentificationNumber
        /// </summary>
        [DataMember(Name = "vehicleIdentificationNumber", EmitDefaultValue = true)]
        public string VehicleIdentificationNumber { get; set; }

        /// <summary>
        /// Gets or Sets PermissableTotalWeight
        /// </summary>
        [DataMember(Name = "permissableTotalWeight", EmitDefaultValue = true)]
        public int? PermissableTotalWeight { get; set; }

        /// <summary>
        /// Gets or Sets PermissableTotalWeightInRegistrationState
        /// </summary>
        [DataMember(Name = "permissableTotalWeightInRegistrationState", EmitDefaultValue = true)]
        public int? PermissableTotalWeightInRegistrationState { get; set; }

        /// <summary>
        /// Gets or Sets EmptyWeight
        /// </summary>
        [DataMember(Name = "emptyWeight", EmitDefaultValue = true)]
        public int? EmptyWeight { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationValidityPeriod
        /// </summary>
        [DataMember(Name = "registrationValidityPeriod", EmitDefaultValue = true)]
        public DateTime? RegistrationValidityPeriod { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationDate
        /// </summary>
        [DataMember(Name = "registrationDate", EmitDefaultValue = true)]
        public DateTime? RegistrationDate { get; set; }

        /// <summary>
        /// Gets or Sets VehicleClass
        /// </summary>
        [DataMember(Name = "vehicleClass", EmitDefaultValue = true)]
        public string VehicleClass { get; set; }

        /// <summary>
        /// Gets or Sets EgTypeApprovalNumber
        /// </summary>
        [DataMember(Name = "egTypeApprovalNumber", EmitDefaultValue = true)]
        public string EgTypeApprovalNumber { get; set; }

        /// <summary>
        /// Gets or Sets AxleAmount
        /// </summary>
        [DataMember(Name = "axleAmount", EmitDefaultValue = true)]
        public int? AxleAmount { get; set; }

        /// <summary>
        /// Gets or Sets PermissableBrakedTrailerLoad
        /// </summary>
        [DataMember(Name = "permissableBrakedTrailerLoad", EmitDefaultValue = true)]
        public int? PermissableBrakedTrailerLoad { get; set; }

        /// <summary>
        /// Gets or Sets PermissableUnbrakedTrailerLoad
        /// </summary>
        [DataMember(Name = "permissableUnbrakedTrailerLoad", EmitDefaultValue = true)]
        public int? PermissableUnbrakedTrailerLoad { get; set; }

        /// <summary>
        /// Gets or Sets Displacement
        /// </summary>
        [DataMember(Name = "displacement", EmitDefaultValue = true)]
        public int? Displacement { get; set; }

        /// <summary>
        /// Gets or Sets RatedPower
        /// </summary>
        [DataMember(Name = "ratedPower", EmitDefaultValue = true)]
        public int? RatedPower { get; set; }

        /// <summary>
        /// Gets or Sets RatedRPM
        /// </summary>
        [DataMember(Name = "ratedRPM", EmitDefaultValue = true)]
        public int? RatedRPM { get; set; }

        /// <summary>
        /// Gets or Sets FuelType
        /// </summary>
        [DataMember(Name = "fuelType", EmitDefaultValue = true)]
        public string FuelType { get; set; }

        /// <summary>
        /// Gets or Sets PowerToWeightRatio
        /// </summary>
        [DataMember(Name = "powerToWeightRatio", EmitDefaultValue = true)]
        public double? PowerToWeightRatio { get; set; }

        /// <summary>
        /// Gets or Sets VehicleColor
        /// </summary>
        [DataMember(Name = "vehicleColor", EmitDefaultValue = true)]
        public string VehicleColor { get; set; }

        /// <summary>
        /// Gets or Sets SeatsIncludingDriverSeat
        /// </summary>
        [DataMember(Name = "seatsIncludingDriverSeat", EmitDefaultValue = true)]
        public int? SeatsIncludingDriverSeat { get; set; }

        /// <summary>
        /// Gets or Sets StandingPlaces
        /// </summary>
        [DataMember(Name = "standingPlaces", EmitDefaultValue = true)]
        public int? StandingPlaces { get; set; }

        /// <summary>
        /// Gets or Sets TopSpeed
        /// </summary>
        [DataMember(Name = "topSpeed", EmitDefaultValue = true)]
        public int? TopSpeed { get; set; }

        /// <summary>
        /// Gets or Sets StandingNoise
        /// </summary>
        [DataMember(Name = "standingNoise", EmitDefaultValue = true)]
        public int? StandingNoise { get; set; }

        /// <summary>
        /// Gets or Sets StandingNoiseRPM
        /// </summary>
        [DataMember(Name = "standingNoiseRPM", EmitDefaultValue = true)]
        public int? StandingNoiseRPM { get; set; }

        /// <summary>
        /// Gets or Sets DrivingNoise
        /// </summary>
        [DataMember(Name = "drivingNoise", EmitDefaultValue = true)]
        public int? DrivingNoise { get; set; }

        /// <summary>
        /// Gets or Sets Emissions
        /// </summary>
        [DataMember(Name = "emissions", EmitDefaultValue = true)]
        public int? Emissions { get; set; }

        /// <summary>
        /// Gets or Sets EgTypeEmissionClass
        /// </summary>
        [DataMember(Name = "egTypeEmissionClass", EmitDefaultValue = true)]
        public string EgTypeEmissionClass { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerShortName
        /// </summary>
        [DataMember(Name = "manufacturerShortName", EmitDefaultValue = true)]
        public string ManufacturerShortName { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerCode
        /// </summary>
        [DataMember(Name = "manufacturerCode", EmitDefaultValue = true)]
        public int? ManufacturerCode { get; set; }

        /// <summary>
        /// Gets or Sets TypeCodeWithCheckDigit
        /// </summary>
        [DataMember(Name = "typeCodeWithCheckDigit", EmitDefaultValue = true)]
        public string TypeCodeWithCheckDigit { get; set; }

        /// <summary>
        /// Gets or Sets VehicleIdentificationCheckDigit
        /// </summary>
        [DataMember(Name = "vehicleIdentificationCheckDigit", EmitDefaultValue = true)]
        public int? VehicleIdentificationCheckDigit { get; set; }

        /// <summary>
        /// Gets or Sets SuperStructureType
        /// </summary>
        [DataMember(Name = "superStructureType", EmitDefaultValue = true)]
        public string SuperStructureType { get; set; }

        /// <summary>
        /// Gets or Sets VehicleClassDesignation
        /// </summary>
        [DataMember(Name = "vehicleClassDesignation", EmitDefaultValue = true)]
        public string VehicleClassDesignation { get; set; }

        /// <summary>
        /// Gets or Sets EgTypeApprovalDate
        /// </summary>
        [DataMember(Name = "egTypeApprovalDate", EmitDefaultValue = true)]
        public DateTime? EgTypeApprovalDate { get; set; }

        /// <summary>
        /// Gets or Sets PermissableMaximumLoadAxle1
        /// </summary>
        [DataMember(Name = "permissableMaximumLoadAxle1", EmitDefaultValue = true)]
        public int? PermissableMaximumLoadAxle1 { get; set; }

        /// <summary>
        /// Gets or Sets PermissableMaximumLoadAxle2
        /// </summary>
        [DataMember(Name = "permissableMaximumLoadAxle2", EmitDefaultValue = true)]
        public int? PermissableMaximumLoadAxle2 { get; set; }

        /// <summary>
        /// Gets or Sets PermissableMaximumLoadAxle3
        /// </summary>
        [DataMember(Name = "permissableMaximumLoadAxle3", EmitDefaultValue = true)]
        public int? PermissableMaximumLoadAxle3 { get; set; }

        /// <summary>
        /// Gets or Sets PermissableMaximumLoadAxle1InRegistrationState
        /// </summary>
        [DataMember(Name = "permissableMaximumLoadAxle1InRegistrationState", EmitDefaultValue = true)]
        public int? PermissableMaximumLoadAxle1InRegistrationState { get; set; }

        /// <summary>
        /// Gets or Sets PermissableMaximumLoadAxle2InRegistrationState
        /// </summary>
        [DataMember(Name = "permissableMaximumLoadAxle2InRegistrationState", EmitDefaultValue = true)]
        public int? PermissableMaximumLoadAxle2InRegistrationState { get; set; }

        /// <summary>
        /// Gets or Sets PermissableMaximumLoadAxle3InRegistrationState
        /// </summary>
        [DataMember(Name = "permissableMaximumLoadAxle3InRegistrationState", EmitDefaultValue = true)]
        public int? PermissableMaximumLoadAxle3InRegistrationState { get; set; }

        /// <summary>
        /// Gets or Sets DriveAxleAmount
        /// </summary>
        [DataMember(Name = "driveAxleAmount", EmitDefaultValue = true)]
        public int? DriveAxleAmount { get; set; }

        /// <summary>
        /// Gets or Sets FuelTypeCode
        /// </summary>
        [DataMember(Name = "fuelTypeCode", EmitDefaultValue = true)]
        public string FuelTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets ColorCode
        /// </summary>
        [DataMember(Name = "colorCode", EmitDefaultValue = true)]
        public string ColorCode { get; set; }

        /// <summary>
        /// Gets or Sets TankerTankCapacity
        /// </summary>
        [DataMember(Name = "tankerTankCapacity", EmitDefaultValue = true)]
        public int? TankerTankCapacity { get; set; }

        /// <summary>
        /// Gets or Sets TrailerNoseWeight
        /// </summary>
        [DataMember(Name = "trailerNoseWeight", EmitDefaultValue = true)]
        public int? TrailerNoseWeight { get; set; }

        /// <summary>
        /// Gets or Sets NationalEmissionClass
        /// </summary>
        [DataMember(Name = "nationalEmissionClass", EmitDefaultValue = true)]
        public string NationalEmissionClass { get; set; }

        /// <summary>
        /// Gets or Sets EmissionClassCode
        /// </summary>
        [DataMember(Name = "emissionClassCode", EmitDefaultValue = true)]
        public string EmissionClassCode { get; set; }

        /// <summary>
        /// Gets or Sets TiresAxle1
        /// </summary>
        [DataMember(Name = "tiresAxle1", EmitDefaultValue = true)]
        public string TiresAxle1 { get; set; }

        /// <summary>
        /// Gets or Sets TiresAxle2
        /// </summary>
        [DataMember(Name = "tiresAxle2", EmitDefaultValue = true)]
        public string TiresAxle2 { get; set; }

        /// <summary>
        /// Gets or Sets TiresAxle3
        /// </summary>
        [DataMember(Name = "tiresAxle3", EmitDefaultValue = true)]
        public string TiresAxle3 { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationCertificateNumberPart2
        /// </summary>
        [DataMember(Name = "registrationCertificateNumberPart2", EmitDefaultValue = true)]
        public string RegistrationCertificateNumberPart2 { get; set; }

        /// <summary>
        /// Gets or Sets OperatingPermitFeature
        /// </summary>
        [DataMember(Name = "operatingPermitFeature", EmitDefaultValue = true)]
        public string OperatingPermitFeature { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name = "length", EmitDefaultValue = true)]
        public int? Length { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", EmitDefaultValue = true)]
        public int? Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", EmitDefaultValue = true)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets OtherNotes
        /// </summary>
        [DataMember(Name = "otherNotes", EmitDefaultValue = true)]
        public string OtherNotes { get; set; }

        /// <summary>
        /// Gets or Sets RemarksAndExeptions
        /// </summary>
        [DataMember(Name = "remarksAndExeptions", EmitDefaultValue = true)]
        public string RemarksAndExeptions { get; set; }

        /// <summary>
        /// Gets or Sets ZlbiIatId
        /// </summary>
        [DataMember(Name = "zlbiIatId", EmitDefaultValue = true)]
        public Guid? ZlbiIatId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegistrationCertificateModel {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  RegistratorId: ").Append(RegistratorId).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  FirstRegistrationDate: ").Append(FirstRegistrationDate).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CommercialDesignation: ").Append(CommercialDesignation).Append("\n");
            sb.Append("  VehicleIdentificationNumber: ").Append(VehicleIdentificationNumber).Append("\n");
            sb.Append("  PermissableTotalWeight: ").Append(PermissableTotalWeight).Append("\n");
            sb.Append("  PermissableTotalWeightInRegistrationState: ").Append(PermissableTotalWeightInRegistrationState).Append("\n");
            sb.Append("  EmptyWeight: ").Append(EmptyWeight).Append("\n");
            sb.Append("  RegistrationValidityPeriod: ").Append(RegistrationValidityPeriod).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  VehicleClass: ").Append(VehicleClass).Append("\n");
            sb.Append("  EgTypeApprovalNumber: ").Append(EgTypeApprovalNumber).Append("\n");
            sb.Append("  AxleAmount: ").Append(AxleAmount).Append("\n");
            sb.Append("  PermissableBrakedTrailerLoad: ").Append(PermissableBrakedTrailerLoad).Append("\n");
            sb.Append("  PermissableUnbrakedTrailerLoad: ").Append(PermissableUnbrakedTrailerLoad).Append("\n");
            sb.Append("  Displacement: ").Append(Displacement).Append("\n");
            sb.Append("  RatedPower: ").Append(RatedPower).Append("\n");
            sb.Append("  RatedRPM: ").Append(RatedRPM).Append("\n");
            sb.Append("  FuelType: ").Append(FuelType).Append("\n");
            sb.Append("  PowerToWeightRatio: ").Append(PowerToWeightRatio).Append("\n");
            sb.Append("  VehicleColor: ").Append(VehicleColor).Append("\n");
            sb.Append("  SeatsIncludingDriverSeat: ").Append(SeatsIncludingDriverSeat).Append("\n");
            sb.Append("  StandingPlaces: ").Append(StandingPlaces).Append("\n");
            sb.Append("  TopSpeed: ").Append(TopSpeed).Append("\n");
            sb.Append("  StandingNoise: ").Append(StandingNoise).Append("\n");
            sb.Append("  StandingNoiseRPM: ").Append(StandingNoiseRPM).Append("\n");
            sb.Append("  DrivingNoise: ").Append(DrivingNoise).Append("\n");
            sb.Append("  Emissions: ").Append(Emissions).Append("\n");
            sb.Append("  EgTypeEmissionClass: ").Append(EgTypeEmissionClass).Append("\n");
            sb.Append("  ManufacturerShortName: ").Append(ManufacturerShortName).Append("\n");
            sb.Append("  ManufacturerCode: ").Append(ManufacturerCode).Append("\n");
            sb.Append("  TypeCodeWithCheckDigit: ").Append(TypeCodeWithCheckDigit).Append("\n");
            sb.Append("  VehicleIdentificationCheckDigit: ").Append(VehicleIdentificationCheckDigit).Append("\n");
            sb.Append("  SuperStructureType: ").Append(SuperStructureType).Append("\n");
            sb.Append("  VehicleClassDesignation: ").Append(VehicleClassDesignation).Append("\n");
            sb.Append("  EgTypeApprovalDate: ").Append(EgTypeApprovalDate).Append("\n");
            sb.Append("  PermissableMaximumLoadAxle1: ").Append(PermissableMaximumLoadAxle1).Append("\n");
            sb.Append("  PermissableMaximumLoadAxle2: ").Append(PermissableMaximumLoadAxle2).Append("\n");
            sb.Append("  PermissableMaximumLoadAxle3: ").Append(PermissableMaximumLoadAxle3).Append("\n");
            sb.Append("  PermissableMaximumLoadAxle1InRegistrationState: ").Append(PermissableMaximumLoadAxle1InRegistrationState).Append("\n");
            sb.Append("  PermissableMaximumLoadAxle2InRegistrationState: ").Append(PermissableMaximumLoadAxle2InRegistrationState).Append("\n");
            sb.Append("  PermissableMaximumLoadAxle3InRegistrationState: ").Append(PermissableMaximumLoadAxle3InRegistrationState).Append("\n");
            sb.Append("  DriveAxleAmount: ").Append(DriveAxleAmount).Append("\n");
            sb.Append("  FuelTypeCode: ").Append(FuelTypeCode).Append("\n");
            sb.Append("  ColorCode: ").Append(ColorCode).Append("\n");
            sb.Append("  TankerTankCapacity: ").Append(TankerTankCapacity).Append("\n");
            sb.Append("  TrailerNoseWeight: ").Append(TrailerNoseWeight).Append("\n");
            sb.Append("  NationalEmissionClass: ").Append(NationalEmissionClass).Append("\n");
            sb.Append("  EmissionClassCode: ").Append(EmissionClassCode).Append("\n");
            sb.Append("  TiresAxle1: ").Append(TiresAxle1).Append("\n");
            sb.Append("  TiresAxle2: ").Append(TiresAxle2).Append("\n");
            sb.Append("  TiresAxle3: ").Append(TiresAxle3).Append("\n");
            sb.Append("  RegistrationCertificateNumberPart2: ").Append(RegistrationCertificateNumberPart2).Append("\n");
            sb.Append("  OperatingPermitFeature: ").Append(OperatingPermitFeature).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  OtherNotes: ").Append(OtherNotes).Append("\n");
            sb.Append("  RemarksAndExeptions: ").Append(RemarksAndExeptions).Append("\n");
            sb.Append("  ZlbiIatId: ").Append(ZlbiIatId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegistrationCertificateModel);
        }

        /// <summary>
        /// Returns true if RegistrationCertificateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RegistrationCertificateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationCertificateModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.RegistratorId == input.RegistratorId ||
                    (this.RegistratorId != null &&
                    this.RegistratorId.Equals(input.RegistratorId))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.FirstRegistrationDate == input.FirstRegistrationDate ||
                    (this.FirstRegistrationDate != null &&
                    this.FirstRegistrationDate.Equals(input.FirstRegistrationDate))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CommercialDesignation == input.CommercialDesignation ||
                    (this.CommercialDesignation != null &&
                    this.CommercialDesignation.Equals(input.CommercialDesignation))
                ) && 
                (
                    this.VehicleIdentificationNumber == input.VehicleIdentificationNumber ||
                    (this.VehicleIdentificationNumber != null &&
                    this.VehicleIdentificationNumber.Equals(input.VehicleIdentificationNumber))
                ) && 
                (
                    this.PermissableTotalWeight == input.PermissableTotalWeight ||
                    (this.PermissableTotalWeight != null &&
                    this.PermissableTotalWeight.Equals(input.PermissableTotalWeight))
                ) && 
                (
                    this.PermissableTotalWeightInRegistrationState == input.PermissableTotalWeightInRegistrationState ||
                    (this.PermissableTotalWeightInRegistrationState != null &&
                    this.PermissableTotalWeightInRegistrationState.Equals(input.PermissableTotalWeightInRegistrationState))
                ) && 
                (
                    this.EmptyWeight == input.EmptyWeight ||
                    (this.EmptyWeight != null &&
                    this.EmptyWeight.Equals(input.EmptyWeight))
                ) && 
                (
                    this.RegistrationValidityPeriod == input.RegistrationValidityPeriod ||
                    (this.RegistrationValidityPeriod != null &&
                    this.RegistrationValidityPeriod.Equals(input.RegistrationValidityPeriod))
                ) && 
                (
                    this.RegistrationDate == input.RegistrationDate ||
                    (this.RegistrationDate != null &&
                    this.RegistrationDate.Equals(input.RegistrationDate))
                ) && 
                (
                    this.VehicleClass == input.VehicleClass ||
                    (this.VehicleClass != null &&
                    this.VehicleClass.Equals(input.VehicleClass))
                ) && 
                (
                    this.EgTypeApprovalNumber == input.EgTypeApprovalNumber ||
                    (this.EgTypeApprovalNumber != null &&
                    this.EgTypeApprovalNumber.Equals(input.EgTypeApprovalNumber))
                ) && 
                (
                    this.AxleAmount == input.AxleAmount ||
                    (this.AxleAmount != null &&
                    this.AxleAmount.Equals(input.AxleAmount))
                ) && 
                (
                    this.PermissableBrakedTrailerLoad == input.PermissableBrakedTrailerLoad ||
                    (this.PermissableBrakedTrailerLoad != null &&
                    this.PermissableBrakedTrailerLoad.Equals(input.PermissableBrakedTrailerLoad))
                ) && 
                (
                    this.PermissableUnbrakedTrailerLoad == input.PermissableUnbrakedTrailerLoad ||
                    (this.PermissableUnbrakedTrailerLoad != null &&
                    this.PermissableUnbrakedTrailerLoad.Equals(input.PermissableUnbrakedTrailerLoad))
                ) && 
                (
                    this.Displacement == input.Displacement ||
                    (this.Displacement != null &&
                    this.Displacement.Equals(input.Displacement))
                ) && 
                (
                    this.RatedPower == input.RatedPower ||
                    (this.RatedPower != null &&
                    this.RatedPower.Equals(input.RatedPower))
                ) && 
                (
                    this.RatedRPM == input.RatedRPM ||
                    (this.RatedRPM != null &&
                    this.RatedRPM.Equals(input.RatedRPM))
                ) && 
                (
                    this.FuelType == input.FuelType ||
                    (this.FuelType != null &&
                    this.FuelType.Equals(input.FuelType))
                ) && 
                (
                    this.PowerToWeightRatio == input.PowerToWeightRatio ||
                    (this.PowerToWeightRatio != null &&
                    this.PowerToWeightRatio.Equals(input.PowerToWeightRatio))
                ) && 
                (
                    this.VehicleColor == input.VehicleColor ||
                    (this.VehicleColor != null &&
                    this.VehicleColor.Equals(input.VehicleColor))
                ) && 
                (
                    this.SeatsIncludingDriverSeat == input.SeatsIncludingDriverSeat ||
                    (this.SeatsIncludingDriverSeat != null &&
                    this.SeatsIncludingDriverSeat.Equals(input.SeatsIncludingDriverSeat))
                ) && 
                (
                    this.StandingPlaces == input.StandingPlaces ||
                    (this.StandingPlaces != null &&
                    this.StandingPlaces.Equals(input.StandingPlaces))
                ) && 
                (
                    this.TopSpeed == input.TopSpeed ||
                    (this.TopSpeed != null &&
                    this.TopSpeed.Equals(input.TopSpeed))
                ) && 
                (
                    this.StandingNoise == input.StandingNoise ||
                    (this.StandingNoise != null &&
                    this.StandingNoise.Equals(input.StandingNoise))
                ) && 
                (
                    this.StandingNoiseRPM == input.StandingNoiseRPM ||
                    (this.StandingNoiseRPM != null &&
                    this.StandingNoiseRPM.Equals(input.StandingNoiseRPM))
                ) && 
                (
                    this.DrivingNoise == input.DrivingNoise ||
                    (this.DrivingNoise != null &&
                    this.DrivingNoise.Equals(input.DrivingNoise))
                ) && 
                (
                    this.Emissions == input.Emissions ||
                    (this.Emissions != null &&
                    this.Emissions.Equals(input.Emissions))
                ) && 
                (
                    this.EgTypeEmissionClass == input.EgTypeEmissionClass ||
                    (this.EgTypeEmissionClass != null &&
                    this.EgTypeEmissionClass.Equals(input.EgTypeEmissionClass))
                ) && 
                (
                    this.ManufacturerShortName == input.ManufacturerShortName ||
                    (this.ManufacturerShortName != null &&
                    this.ManufacturerShortName.Equals(input.ManufacturerShortName))
                ) && 
                (
                    this.ManufacturerCode == input.ManufacturerCode ||
                    (this.ManufacturerCode != null &&
                    this.ManufacturerCode.Equals(input.ManufacturerCode))
                ) && 
                (
                    this.TypeCodeWithCheckDigit == input.TypeCodeWithCheckDigit ||
                    (this.TypeCodeWithCheckDigit != null &&
                    this.TypeCodeWithCheckDigit.Equals(input.TypeCodeWithCheckDigit))
                ) && 
                (
                    this.VehicleIdentificationCheckDigit == input.VehicleIdentificationCheckDigit ||
                    (this.VehicleIdentificationCheckDigit != null &&
                    this.VehicleIdentificationCheckDigit.Equals(input.VehicleIdentificationCheckDigit))
                ) && 
                (
                    this.SuperStructureType == input.SuperStructureType ||
                    (this.SuperStructureType != null &&
                    this.SuperStructureType.Equals(input.SuperStructureType))
                ) && 
                (
                    this.VehicleClassDesignation == input.VehicleClassDesignation ||
                    (this.VehicleClassDesignation != null &&
                    this.VehicleClassDesignation.Equals(input.VehicleClassDesignation))
                ) && 
                (
                    this.EgTypeApprovalDate == input.EgTypeApprovalDate ||
                    (this.EgTypeApprovalDate != null &&
                    this.EgTypeApprovalDate.Equals(input.EgTypeApprovalDate))
                ) && 
                (
                    this.PermissableMaximumLoadAxle1 == input.PermissableMaximumLoadAxle1 ||
                    (this.PermissableMaximumLoadAxle1 != null &&
                    this.PermissableMaximumLoadAxle1.Equals(input.PermissableMaximumLoadAxle1))
                ) && 
                (
                    this.PermissableMaximumLoadAxle2 == input.PermissableMaximumLoadAxle2 ||
                    (this.PermissableMaximumLoadAxle2 != null &&
                    this.PermissableMaximumLoadAxle2.Equals(input.PermissableMaximumLoadAxle2))
                ) && 
                (
                    this.PermissableMaximumLoadAxle3 == input.PermissableMaximumLoadAxle3 ||
                    (this.PermissableMaximumLoadAxle3 != null &&
                    this.PermissableMaximumLoadAxle3.Equals(input.PermissableMaximumLoadAxle3))
                ) && 
                (
                    this.PermissableMaximumLoadAxle1InRegistrationState == input.PermissableMaximumLoadAxle1InRegistrationState ||
                    (this.PermissableMaximumLoadAxle1InRegistrationState != null &&
                    this.PermissableMaximumLoadAxle1InRegistrationState.Equals(input.PermissableMaximumLoadAxle1InRegistrationState))
                ) && 
                (
                    this.PermissableMaximumLoadAxle2InRegistrationState == input.PermissableMaximumLoadAxle2InRegistrationState ||
                    (this.PermissableMaximumLoadAxle2InRegistrationState != null &&
                    this.PermissableMaximumLoadAxle2InRegistrationState.Equals(input.PermissableMaximumLoadAxle2InRegistrationState))
                ) && 
                (
                    this.PermissableMaximumLoadAxle3InRegistrationState == input.PermissableMaximumLoadAxle3InRegistrationState ||
                    (this.PermissableMaximumLoadAxle3InRegistrationState != null &&
                    this.PermissableMaximumLoadAxle3InRegistrationState.Equals(input.PermissableMaximumLoadAxle3InRegistrationState))
                ) && 
                (
                    this.DriveAxleAmount == input.DriveAxleAmount ||
                    (this.DriveAxleAmount != null &&
                    this.DriveAxleAmount.Equals(input.DriveAxleAmount))
                ) && 
                (
                    this.FuelTypeCode == input.FuelTypeCode ||
                    (this.FuelTypeCode != null &&
                    this.FuelTypeCode.Equals(input.FuelTypeCode))
                ) && 
                (
                    this.ColorCode == input.ColorCode ||
                    (this.ColorCode != null &&
                    this.ColorCode.Equals(input.ColorCode))
                ) && 
                (
                    this.TankerTankCapacity == input.TankerTankCapacity ||
                    (this.TankerTankCapacity != null &&
                    this.TankerTankCapacity.Equals(input.TankerTankCapacity))
                ) && 
                (
                    this.TrailerNoseWeight == input.TrailerNoseWeight ||
                    (this.TrailerNoseWeight != null &&
                    this.TrailerNoseWeight.Equals(input.TrailerNoseWeight))
                ) && 
                (
                    this.NationalEmissionClass == input.NationalEmissionClass ||
                    (this.NationalEmissionClass != null &&
                    this.NationalEmissionClass.Equals(input.NationalEmissionClass))
                ) && 
                (
                    this.EmissionClassCode == input.EmissionClassCode ||
                    (this.EmissionClassCode != null &&
                    this.EmissionClassCode.Equals(input.EmissionClassCode))
                ) && 
                (
                    this.TiresAxle1 == input.TiresAxle1 ||
                    (this.TiresAxle1 != null &&
                    this.TiresAxle1.Equals(input.TiresAxle1))
                ) && 
                (
                    this.TiresAxle2 == input.TiresAxle2 ||
                    (this.TiresAxle2 != null &&
                    this.TiresAxle2.Equals(input.TiresAxle2))
                ) && 
                (
                    this.TiresAxle3 == input.TiresAxle3 ||
                    (this.TiresAxle3 != null &&
                    this.TiresAxle3.Equals(input.TiresAxle3))
                ) && 
                (
                    this.RegistrationCertificateNumberPart2 == input.RegistrationCertificateNumberPart2 ||
                    (this.RegistrationCertificateNumberPart2 != null &&
                    this.RegistrationCertificateNumberPart2.Equals(input.RegistrationCertificateNumberPart2))
                ) && 
                (
                    this.OperatingPermitFeature == input.OperatingPermitFeature ||
                    (this.OperatingPermitFeature != null &&
                    this.OperatingPermitFeature.Equals(input.OperatingPermitFeature))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.OtherNotes == input.OtherNotes ||
                    (this.OtherNotes != null &&
                    this.OtherNotes.Equals(input.OtherNotes))
                ) && 
                (
                    this.RemarksAndExeptions == input.RemarksAndExeptions ||
                    (this.RemarksAndExeptions != null &&
                    this.RemarksAndExeptions.Equals(input.RemarksAndExeptions))
                ) && 
                (
                    this.ZlbiIatId == input.ZlbiIatId ||
                    (this.ZlbiIatId != null &&
                    this.ZlbiIatId.Equals(input.ZlbiIatId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.RegistratorId != null)
                {
                    hashCode = (hashCode * 59) + this.RegistratorId.GetHashCode();
                }
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                if (this.FirstRegistrationDate != null)
                {
                    hashCode = (hashCode * 59) + this.FirstRegistrationDate.GetHashCode();
                }
                if (this.Manufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.Manufacturer.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.CommercialDesignation != null)
                {
                    hashCode = (hashCode * 59) + this.CommercialDesignation.GetHashCode();
                }
                if (this.VehicleIdentificationNumber != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleIdentificationNumber.GetHashCode();
                }
                if (this.PermissableTotalWeight != null)
                {
                    hashCode = (hashCode * 59) + this.PermissableTotalWeight.GetHashCode();
                }
                if (this.PermissableTotalWeightInRegistrationState != null)
                {
                    hashCode = (hashCode * 59) + this.PermissableTotalWeightInRegistrationState.GetHashCode();
                }
                if (this.EmptyWeight != null)
                {
                    hashCode = (hashCode * 59) + this.EmptyWeight.GetHashCode();
                }
                if (this.RegistrationValidityPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationValidityPeriod.GetHashCode();
                }
                if (this.RegistrationDate != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationDate.GetHashCode();
                }
                if (this.VehicleClass != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleClass.GetHashCode();
                }
                if (this.EgTypeApprovalNumber != null)
                {
                    hashCode = (hashCode * 59) + this.EgTypeApprovalNumber.GetHashCode();
                }
                if (this.AxleAmount != null)
                {
                    hashCode = (hashCode * 59) + this.AxleAmount.GetHashCode();
                }
                if (this.PermissableBrakedTrailerLoad != null)
                {
                    hashCode = (hashCode * 59) + this.PermissableBrakedTrailerLoad.GetHashCode();
                }
                if (this.PermissableUnbrakedTrailerLoad != null)
                {
                    hashCode = (hashCode * 59) + this.PermissableUnbrakedTrailerLoad.GetHashCode();
                }
                if (this.Displacement != null)
                {
                    hashCode = (hashCode * 59) + this.Displacement.GetHashCode();
                }
                if (this.RatedPower != null)
                {
                    hashCode = (hashCode * 59) + this.RatedPower.GetHashCode();
                }
                if (this.RatedRPM != null)
                {
                    hashCode = (hashCode * 59) + this.RatedRPM.GetHashCode();
                }
                if (this.FuelType != null)
                {
                    hashCode = (hashCode * 59) + this.FuelType.GetHashCode();
                }
                if (this.PowerToWeightRatio != null)
                {
                    hashCode = (hashCode * 59) + this.PowerToWeightRatio.GetHashCode();
                }
                if (this.VehicleColor != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleColor.GetHashCode();
                }
                if (this.SeatsIncludingDriverSeat != null)
                {
                    hashCode = (hashCode * 59) + this.SeatsIncludingDriverSeat.GetHashCode();
                }
                if (this.StandingPlaces != null)
                {
                    hashCode = (hashCode * 59) + this.StandingPlaces.GetHashCode();
                }
                if (this.TopSpeed != null)
                {
                    hashCode = (hashCode * 59) + this.TopSpeed.GetHashCode();
                }
                if (this.StandingNoise != null)
                {
                    hashCode = (hashCode * 59) + this.StandingNoise.GetHashCode();
                }
                if (this.StandingNoiseRPM != null)
                {
                    hashCode = (hashCode * 59) + this.StandingNoiseRPM.GetHashCode();
                }
                if (this.DrivingNoise != null)
                {
                    hashCode = (hashCode * 59) + this.DrivingNoise.GetHashCode();
                }
                if (this.Emissions != null)
                {
                    hashCode = (hashCode * 59) + this.Emissions.GetHashCode();
                }
                if (this.EgTypeEmissionClass != null)
                {
                    hashCode = (hashCode * 59) + this.EgTypeEmissionClass.GetHashCode();
                }
                if (this.ManufacturerShortName != null)
                {
                    hashCode = (hashCode * 59) + this.ManufacturerShortName.GetHashCode();
                }
                if (this.ManufacturerCode != null)
                {
                    hashCode = (hashCode * 59) + this.ManufacturerCode.GetHashCode();
                }
                if (this.TypeCodeWithCheckDigit != null)
                {
                    hashCode = (hashCode * 59) + this.TypeCodeWithCheckDigit.GetHashCode();
                }
                if (this.VehicleIdentificationCheckDigit != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleIdentificationCheckDigit.GetHashCode();
                }
                if (this.SuperStructureType != null)
                {
                    hashCode = (hashCode * 59) + this.SuperStructureType.GetHashCode();
                }
                if (this.VehicleClassDesignation != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleClassDesignation.GetHashCode();
                }
                if (this.EgTypeApprovalDate != null)
                {
                    hashCode = (hashCode * 59) + this.EgTypeApprovalDate.GetHashCode();
                }
                if (this.PermissableMaximumLoadAxle1 != null)
                {
                    hashCode = (hashCode * 59) + this.PermissableMaximumLoadAxle1.GetHashCode();
                }
                if (this.PermissableMaximumLoadAxle2 != null)
                {
                    hashCode = (hashCode * 59) + this.PermissableMaximumLoadAxle2.GetHashCode();
                }
                if (this.PermissableMaximumLoadAxle3 != null)
                {
                    hashCode = (hashCode * 59) + this.PermissableMaximumLoadAxle3.GetHashCode();
                }
                if (this.PermissableMaximumLoadAxle1InRegistrationState != null)
                {
                    hashCode = (hashCode * 59) + this.PermissableMaximumLoadAxle1InRegistrationState.GetHashCode();
                }
                if (this.PermissableMaximumLoadAxle2InRegistrationState != null)
                {
                    hashCode = (hashCode * 59) + this.PermissableMaximumLoadAxle2InRegistrationState.GetHashCode();
                }
                if (this.PermissableMaximumLoadAxle3InRegistrationState != null)
                {
                    hashCode = (hashCode * 59) + this.PermissableMaximumLoadAxle3InRegistrationState.GetHashCode();
                }
                if (this.DriveAxleAmount != null)
                {
                    hashCode = (hashCode * 59) + this.DriveAxleAmount.GetHashCode();
                }
                if (this.FuelTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.FuelTypeCode.GetHashCode();
                }
                if (this.ColorCode != null)
                {
                    hashCode = (hashCode * 59) + this.ColorCode.GetHashCode();
                }
                if (this.TankerTankCapacity != null)
                {
                    hashCode = (hashCode * 59) + this.TankerTankCapacity.GetHashCode();
                }
                if (this.TrailerNoseWeight != null)
                {
                    hashCode = (hashCode * 59) + this.TrailerNoseWeight.GetHashCode();
                }
                if (this.NationalEmissionClass != null)
                {
                    hashCode = (hashCode * 59) + this.NationalEmissionClass.GetHashCode();
                }
                if (this.EmissionClassCode != null)
                {
                    hashCode = (hashCode * 59) + this.EmissionClassCode.GetHashCode();
                }
                if (this.TiresAxle1 != null)
                {
                    hashCode = (hashCode * 59) + this.TiresAxle1.GetHashCode();
                }
                if (this.TiresAxle2 != null)
                {
                    hashCode = (hashCode * 59) + this.TiresAxle2.GetHashCode();
                }
                if (this.TiresAxle3 != null)
                {
                    hashCode = (hashCode * 59) + this.TiresAxle3.GetHashCode();
                }
                if (this.RegistrationCertificateNumberPart2 != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationCertificateNumberPart2.GetHashCode();
                }
                if (this.OperatingPermitFeature != null)
                {
                    hashCode = (hashCode * 59) + this.OperatingPermitFeature.GetHashCode();
                }
                if (this.Length != null)
                {
                    hashCode = (hashCode * 59) + this.Length.GetHashCode();
                }
                if (this.Width != null)
                {
                    hashCode = (hashCode * 59) + this.Width.GetHashCode();
                }
                if (this.Height != null)
                {
                    hashCode = (hashCode * 59) + this.Height.GetHashCode();
                }
                if (this.OtherNotes != null)
                {
                    hashCode = (hashCode * 59) + this.OtherNotes.GetHashCode();
                }
                if (this.RemarksAndExeptions != null)
                {
                    hashCode = (hashCode * 59) + this.RemarksAndExeptions.GetHashCode();
                }
                if (this.ZlbiIatId != null)
                {
                    hashCode = (hashCode * 59) + this.ZlbiIatId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
