// <auto-generated>
/*
 * Simplic.OxS.Auth
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Auth
{
    /// <summary>
    /// Response from the simplic /auth/login endpoint
    /// </summary>
    public partial class LoginResponse : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public LoginResponse()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginResponse" /> class.
        /// </summary>
        /// <param name="errorState">Gets or sets the actual error state. Will be set to &#x60;mail_not_verified&#x60; if the login  was successful, but the mail address is not verified.</param>
        /// <param name="token">Gets or sets the produced token (e.g. jwt token or two-factor token)</param>
        /// <param name="tokenType">Gets or sets the produced token.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;  &#x60;jwt&#x60;: Login completed, no two-factor required  &#x60;two-factor&#x60;: A second two-factor auth is required  Empty when mail address is not verified.  &lt;/list&gt;</param>
        /// <param name="userId">Gets or sets the user-id.</param>
        //[JsonConstructor]
        public LoginResponse(Option<string> errorState = default, Option<string> token = default, Option<string> tokenType = default, Option<Guid> userId = default)
        {
            ErrorStateOption = errorState;
            TokenOption = token;
            TokenTypeOption = tokenType;
            UserIdOption = userId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ErrorState
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ErrorStateOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual error state. Will be set to &#x60;mail_not_verified&#x60; if the login  was successful, but the mail address is not verified.
        /// </summary>
        /// <value>Gets or sets the actual error state. Will be set to &#x60;mail_not_verified&#x60; if the login  was successful, but the mail address is not verified.</value>
        [JsonPropertyName("errorState")]
        public string? ErrorState { get { return this. ErrorStateOption; } set { this.ErrorStateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Token
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TokenOption { get; private set; }

        /// <summary>
        /// Gets or sets the produced token (e.g. jwt token or two-factor token)
        /// </summary>
        /// <value>Gets or sets the produced token (e.g. jwt token or two-factor token)</value>
        [JsonPropertyName("token")]
        public string? Token { get { return this. TokenOption; } set { this.TokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TokenType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TokenTypeOption { get; private set; }

        /// <summary>
        /// Gets or sets the produced token.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;  &#x60;jwt&#x60;: Login completed, no two-factor required  &#x60;two-factor&#x60;: A second two-factor auth is required  Empty when mail address is not verified.  &lt;/list&gt;
        /// </summary>
        /// <value>Gets or sets the produced token.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;  &#x60;jwt&#x60;: Login completed, no two-factor required  &#x60;two-factor&#x60;: A second two-factor auth is required  Empty when mail address is not verified.  &lt;/list&gt;</value>
        [JsonPropertyName("tokenType")]
        public string? TokenType { get { return this. TokenTypeOption; } set { this.TokenTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the user-id.
        /// </summary>
        /// <value>Gets or sets the user-id.</value>
        [JsonPropertyName("userId")]
        public Guid? UserId { get { return this. UserIdOption; } set { this.UserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoginResponse {\n");
            sb.Append("  ErrorState: ").Append(ErrorState).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LoginResponse" />
    /// </summary>
    public class LoginResponseJsonConverter : JsonConverter<LoginResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoginResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoginResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> errorState = default;
            Option<string> token = default;
            Option<string> tokenType = default;
            Option<Guid> userId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "errorState":
                            errorState = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "token":
                            token = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tokenType":
                            tokenType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "userId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class LoginResponse.");

            //2return new LoginResponse(errorState, token, tokenType, userId);
            return new LoginResponse(errorState, token, tokenType, userId);
        }

        /// <summary>
        /// Serializes a <see cref="LoginResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoginResponse loginResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, loginResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LoginResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, LoginResponse loginResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loginResponse.ErrorStateOption.IsSet)
                if (loginResponse.ErrorStateOption.Value != null)
                {
                    writer.WriteString("errorState", loginResponse.ErrorState);
                    //var __value = loginResponse.ErrorStateOption.Value;
                    //writer.WriteString("errorState", __value);
                }
                else
                    writer.WriteNull("errorState");

            if (loginResponse.TokenOption.IsSet)
                if (loginResponse.TokenOption.Value != null)
                {
                    writer.WriteString("token", loginResponse.Token);
                    //var __value = loginResponse.TokenOption.Value;
                    //writer.WriteString("token", __value);
                }
                else
                    writer.WriteNull("token");

            if (loginResponse.TokenTypeOption.IsSet)
                if (loginResponse.TokenTypeOption.Value != null)
                {
                    writer.WriteString("tokenType", loginResponse.TokenType);
                    //var __value = loginResponse.TokenTypeOption.Value;
                    //writer.WriteString("tokenType", __value);
                }
                else
                    writer.WriteNull("tokenType");

            if (loginResponse.UserIdOption.IsSet)
                writer.WriteString("userId", loginResponse.UserIdOption!.Value);
        }
    }
}
