/*
 * Simplic.OxS.Auth
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Auth
{
    /// <summary>
    /// Response from the simplic /auth/login endpoint
    /// </summary>
    [DataContract(Name = "LoginResponse")]
    public partial class LoginResponse : IEquatable<LoginResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginResponse" /> class.
        /// </summary>
        /// <param name="token">Gets or sets the produced token (e.g. jwt token or two-factor token).</param>
        /// <param name="errorState">Gets or sets the actual error state. Will be set to &#x60;mail_not_verified&#x60; if the login  was successful, but the mail address is not verified..</param>
        /// <param name="tokenType">Gets or sets the produced token.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;  &#x60;jwt&#x60;: Login completed, no two-factor required  &#x60;two-factor&#x60;: A second two-factor auth is required  Empty when mail address is not verified.  &lt;/list&gt;.</param>
        /// <param name="userId">Gets or sets the user-id..</param>
        public LoginResponse(string token = default(string), string errorState = default(string), string tokenType = default(string), Guid userId = default(Guid))
        {
            this.Token = token;
            this.ErrorState = errorState;
            this.TokenType = tokenType;
            this.UserId = userId;
        }

        /// <summary>
        /// Gets or sets the produced token (e.g. jwt token or two-factor token)
        /// </summary>
        /// <value>Gets or sets the produced token (e.g. jwt token or two-factor token)</value>
        [DataMember(Name = "token", EmitDefaultValue = true)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or sets the actual error state. Will be set to &#x60;mail_not_verified&#x60; if the login  was successful, but the mail address is not verified.
        /// </summary>
        /// <value>Gets or sets the actual error state. Will be set to &#x60;mail_not_verified&#x60; if the login  was successful, but the mail address is not verified.</value>
        [DataMember(Name = "errorState", EmitDefaultValue = true)]
        public string ErrorState { get; set; }

        /// <summary>
        /// Gets or sets the produced token.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;  &#x60;jwt&#x60;: Login completed, no two-factor required  &#x60;two-factor&#x60;: A second two-factor auth is required  Empty when mail address is not verified.  &lt;/list&gt;
        /// </summary>
        /// <value>Gets or sets the produced token.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;  &#x60;jwt&#x60;: Login completed, no two-factor required  &#x60;two-factor&#x60;: A second two-factor auth is required  Empty when mail address is not verified.  &lt;/list&gt;</value>
        [DataMember(Name = "tokenType", EmitDefaultValue = true)]
        public string TokenType { get; set; }

        /// <summary>
        /// Gets or sets the user-id.
        /// </summary>
        /// <value>Gets or sets the user-id.</value>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoginResponse {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  ErrorState: ").Append(ErrorState).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoginResponse);
        }

        /// <summary>
        /// Returns true if LoginResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LoginResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoginResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.ErrorState == input.ErrorState ||
                    (this.ErrorState != null &&
                    this.ErrorState.Equals(input.ErrorState))
                ) && 
                (
                    this.TokenType == input.TokenType ||
                    (this.TokenType != null &&
                    this.TokenType.Equals(input.TokenType))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.ErrorState != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorState.GetHashCode();
                }
                if (this.TokenType != null)
                {
                    hashCode = (hashCode * 59) + this.TokenType.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
