// <auto-generated>
/*
 * Simplic.OxS.Auth
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Auth
{
    /// <summary>
    /// Result of a successfully requested user
    /// </summary>
    public partial class RequestUserResponse : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public RequestUserResponse()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestUserResponse" /> class.
        /// </summary>
        /// <param name="eMail">Gets or sets the mail address for the request user</param>
        /// <param name="id">Gets or sets the id of the requested user</param>
        /// <param name="userName">Gets or sets the name for the requested user.</param>
        //[JsonConstructor]
        public RequestUserResponse(Option<string> eMail = default, Option<Guid> id = default, Option<string> userName = default)
        {
            EMailOption = eMail;
            IdOption = id;
            UserNameOption = userName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EMail
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> EMailOption { get; private set; }

        /// <summary>
        /// Gets or sets the mail address for the request user
        /// </summary>
        /// <value>Gets or sets the mail address for the request user</value>
        [JsonPropertyName("eMail")]
        public string? EMail { get { return this. EMailOption; } set { this.EMailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the requested user
        /// </summary>
        /// <value>Gets or sets the id of the requested user</value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of UserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> UserNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the name for the requested user.
        /// </summary>
        /// <value>Gets or sets the name for the requested user.</value>
        [JsonPropertyName("userName")]
        public string? UserName { get { return this. UserNameOption; } set { this.UserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestUserResponse {\n");
            sb.Append("  EMail: ").Append(EMail).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RequestUserResponse" />
    /// </summary>
    public class RequestUserResponseJsonConverter : JsonConverter<RequestUserResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="RequestUserResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RequestUserResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> eMail = default;
            Option<Guid> id = default;
            Option<string> userName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "eMail":
                            eMail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "userName":
                            userName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class RequestUserResponse.");

            //2return new RequestUserResponse(eMail, id, userName);
            return new RequestUserResponse(eMail, id, userName);
        }

        /// <summary>
        /// Serializes a <see cref="RequestUserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requestUserResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RequestUserResponse requestUserResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, requestUserResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RequestUserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requestUserResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, RequestUserResponse requestUserResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (requestUserResponse.EMailOption.IsSet)
                if (requestUserResponse.EMailOption.Value != null)
                {
                    writer.WriteString("eMail", requestUserResponse.EMail);
                    //var __value = requestUserResponse.EMailOption.Value;
                    //writer.WriteString("eMail", __value);
                }
                else
                    writer.WriteNull("eMail");

            if (requestUserResponse.IdOption.IsSet)
                writer.WriteString("id", requestUserResponse.IdOption!.Value);

            if (requestUserResponse.UserNameOption.IsSet)
                if (requestUserResponse.UserNameOption.Value != null)
                {
                    writer.WriteString("userName", requestUserResponse.UserName);
                    //var __value = requestUserResponse.UserNameOption.Value;
                    //writer.WriteString("userName", __value);
                }
                else
                    writer.WriteNull("userName");
        }
    }
}
