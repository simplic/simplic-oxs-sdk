/*
 * Simplic.OxS.Auth
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Auth.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Auth
{
    /// <summary>
    /// Result of a successfully requested user
    /// </summary>
    [DataContract(Name = "RequestUserResponse")]
    public partial class RequestUserResponse : IEquatable<RequestUserResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestUserResponse" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id of the requested user.</param>
        /// <param name="eMail">Gets or sets the mail address for the request user.</param>
        /// <param name="userName">Gets or sets the name for the requested user..</param>
        public RequestUserResponse(Guid id = default(Guid), string eMail = default(string), string userName = default(string))
        {
            this.Id = id;
            this.EMail = eMail;
            this.UserName = userName;
        }

        /// <summary>
        /// Gets or sets the id of the requested user
        /// </summary>
        /// <value>Gets or sets the id of the requested user</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the mail address for the request user
        /// </summary>
        /// <value>Gets or sets the mail address for the request user</value>
        [DataMember(Name = "eMail", EmitDefaultValue = true)]
        public string EMail { get; set; }

        /// <summary>
        /// Gets or sets the name for the requested user.
        /// </summary>
        /// <value>Gets or sets the name for the requested user.</value>
        [DataMember(Name = "userName", EmitDefaultValue = true)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestUserResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EMail: ").Append(EMail).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestUserResponse);
        }

        /// <summary>
        /// Returns true if RequestUserResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestUserResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestUserResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EMail == input.EMail ||
                    (this.EMail != null &&
                    this.EMail.Equals(input.EMail))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.EMail != null)
                {
                    hashCode = (hashCode * 59) + this.EMail.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
