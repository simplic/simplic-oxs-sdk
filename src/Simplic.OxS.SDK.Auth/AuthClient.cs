/*
 * Simplic.OxS.Auth
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;

namespace Simplic.OxS.SDK.Auth
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthClientSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChangePasswordResponse</returns>
        ChangePasswordResponse ChangePassword(ChangePasswordRequest? changePasswordRequest = default(ChangePasswordRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChangePasswordResponse</returns>
        ApiResponse<ChangePasswordResponse> ChangePasswordWithHttpInfo(ChangePasswordRequest? changePasswordRequest = default(ChangePasswordRequest?), int operationIndex = 0);
        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoginResponse</returns>
        LoginResponse Login(LoginRequest? loginRequest = default(LoginRequest?), int operationIndex = 0);

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        ApiResponse<LoginResponse> LoginWithHttpInfo(LoginRequest? loginRequest = default(LoginRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterResponse</returns>
        RegisterResponse Register(RegisterRequest? registerRequest = default(RegisterRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegisterResponse</returns>
        ApiResponse<RegisterResponse> RegisterWithHttpInfo(RegisterRequest? registerRequest = default(RegisterRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResetPasswordResponse</returns>
        ResetPasswordResponse RestorePassword(ResetPasswordRequest? resetPasswordRequest = default(ResetPasswordRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResetPasswordResponse</returns>
        ApiResponse<ResetPasswordResponse> RestorePasswordWithHttpInfo(ResetPasswordRequest? resetPasswordRequest = default(ResetPasswordRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoginResponse</returns>
        LoginResponse SelectOrganization(SelectOrganizationRequest? selectOrganizationRequest = default(SelectOrganizationRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        ApiResponse<LoginResponse> SelectOrganizationWithHttpInfo(SelectOrganizationRequest? selectOrganizationRequest = default(SelectOrganizationRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AuthSendVerificationCodePost(SendVerificationCodeRequest? sendVerificationCodeRequest = default(SendVerificationCodeRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendVerificationCodeWithHttpInfo(SendVerificationCodeRequest? sendVerificationCodeRequest = default(SendVerificationCodeRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AuthVerifyMailPost(VerifyMailRequest? verifyMailRequest = default(VerifyMailRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VerifyMailWithHttpInfo(VerifyMailRequest? verifyMailRequest = default(VerifyMailRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TwoFactorResponse</returns>
        TwoFactorResponse VerifyTwoFactor(TwoFactorRequest? twoFactorRequest = default(TwoFactorRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TwoFactorResponse</returns>
        ApiResponse<TwoFactorResponse> VerifyTwoFactorWithHttpInfo(TwoFactorRequest? twoFactorRequest = default(TwoFactorRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthClientAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChangePasswordResponse</returns>
        System.Threading.Tasks.Task<ChangePasswordResponse> ChangePasswordAsync(ChangePasswordRequest? changePasswordRequest = default(ChangePasswordRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChangePasswordResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangePasswordResponse>> ChangePasswordWithHttpInfoAsync(ChangePasswordRequest? changePasswordRequest = default(ChangePasswordRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        System.Threading.Tasks.Task<LoginResponse> LoginAsync(LoginRequest? loginRequest = default(LoginRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginResponse>> LoginWithHttpInfoAsync(LoginRequest? loginRequest = default(LoginRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterResponse</returns>
        System.Threading.Tasks.Task<RegisterResponse> RegisterAsync(RegisterRequest? registerRequest = default(RegisterRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterResponse>> RegisterWithHttpInfoAsync(RegisterRequest? registerRequest = default(RegisterRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResetPasswordResponse</returns>
        System.Threading.Tasks.Task<ResetPasswordResponse> RestorePasswordAsync(ResetPasswordRequest? resetPasswordRequest = default(ResetPasswordRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResetPasswordResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResetPasswordResponse>> RestorePasswordWithHttpInfoAsync(ResetPasswordRequest? resetPasswordRequest = default(ResetPasswordRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        System.Threading.Tasks.Task<LoginResponse> SelectOrganizationAsync(SelectOrganizationRequest? selectOrganizationRequest = default(SelectOrganizationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginResponse>> SelectOrganizationWithHttpInfoAsync(SelectOrganizationRequest? selectOrganizationRequest = default(SelectOrganizationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendVerificationCodeAsync(SendVerificationCodeRequest? sendVerificationCodeRequest = default(SendVerificationCodeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendVerificationCodeWithHttpInfoAsync(SendVerificationCodeRequest? sendVerificationCodeRequest = default(SendVerificationCodeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VerifyMailAsync(VerifyMailRequest? verifyMailRequest = default(VerifyMailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VerifyMailWithHttpInfoAsync(VerifyMailRequest? verifyMailRequest = default(VerifyMailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TwoFactorResponse</returns>
        System.Threading.Tasks.Task<TwoFactorResponse> VerifyTwoFactorAsync(TwoFactorRequest? twoFactorRequest = default(TwoFactorRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TwoFactorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TwoFactorResponse>> VerifyTwoFactorWithHttpInfoAsync(TwoFactorRequest? twoFactorRequest = default(TwoFactorRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthClient : IAuthClientSync, IAuthClientAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthClient : IAuthClient
    {
        private Simplic.OxS.SDK.Auth.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthClient"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthClient() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthClient"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthClient(string basePath)
        {
            this.Configuration = Simplic.OxS.SDK.Auth.Configuration.MergeConfigurations(
                Simplic.OxS.SDK.Auth.GlobalConfiguration.Instance,
                new Simplic.OxS.SDK.Auth.Configuration { BasePath = basePath }
            );
            this.Client = new Simplic.OxS.SDK.Auth.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Simplic.OxS.SDK.Auth.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Simplic.OxS.SDK.Auth.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthClient"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthClient(Simplic.OxS.SDK.Auth.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Simplic.OxS.SDK.Auth.Configuration.MergeConfigurations(
                Simplic.OxS.SDK.Auth.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Simplic.OxS.SDK.Auth.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Simplic.OxS.SDK.Auth.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Simplic.OxS.SDK.Auth.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthClient"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthClient(Simplic.OxS.SDK.Auth.ISynchronousClient client, Simplic.OxS.SDK.Auth.IAsynchronousClient asyncClient, Simplic.OxS.SDK.Auth.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Simplic.OxS.SDK.Auth.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Simplic.OxS.SDK.Auth.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Simplic.OxS.SDK.Auth.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Simplic.OxS.SDK.Auth.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Simplic.OxS.SDK.Auth.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChangePasswordResponse</returns>
        public ChangePasswordResponse ChangePassword(ChangePasswordRequest? changePasswordRequest = default(ChangePasswordRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.ApiResponse<ChangePasswordResponse> localVarResponse = ChangePasswordWithHttpInfo(changePasswordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChangePasswordResponse</returns>
        public Simplic.OxS.SDK.Auth.ApiResponse<ChangePasswordResponse> ChangePasswordWithHttpInfo(ChangePasswordRequest? changePasswordRequest = default(ChangePasswordRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = changePasswordRequest;

            localVarRequestOptions.Operation = "AuthClient.ChangePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChangePasswordResponse>("/Auth/change-password", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChangePasswordResponse</returns>
        public async System.Threading.Tasks.Task<ChangePasswordResponse> ChangePasswordAsync(ChangePasswordRequest? changePasswordRequest = default(ChangePasswordRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Auth.ApiResponse<ChangePasswordResponse> localVarResponse = await ChangePasswordWithHttpInfoAsync(changePasswordRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChangePasswordResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Auth.ApiResponse<ChangePasswordResponse>> ChangePasswordWithHttpInfoAsync(ChangePasswordRequest? changePasswordRequest = default(ChangePasswordRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = changePasswordRequest;

            localVarRequestOptions.Operation = "AuthClient.ChangePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChangePasswordResponse>("/Auth/change-password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoginResponse</returns>
        public LoginResponse Login(LoginRequest? loginRequest = default(LoginRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.ApiResponse<LoginResponse> localVarResponse = LoginWithHttpInfo(loginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        public Simplic.OxS.SDK.Auth.ApiResponse<LoginResponse> LoginWithHttpInfo(LoginRequest? loginRequest = default(LoginRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = loginRequest;

            localVarRequestOptions.Operation = "AuthClient.Login";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoginResponse>("/Auth/login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Login", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        public async System.Threading.Tasks.Task<LoginResponse> LoginAsync(LoginRequest? loginRequest = default(LoginRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Auth.ApiResponse<LoginResponse> localVarResponse = await LoginWithHttpInfoAsync(loginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Auth.ApiResponse<LoginResponse>> LoginWithHttpInfoAsync(LoginRequest? loginRequest = default(LoginRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = loginRequest;

            localVarRequestOptions.Operation = "AuthClient.Login";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoginResponse>("/Auth/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Login", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterResponse</returns>
        public RegisterResponse Register(RegisterRequest? registerRequest = default(RegisterRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.ApiResponse<RegisterResponse> localVarResponse = RegisterWithHttpInfo(registerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegisterResponse</returns>
        public Simplic.OxS.SDK.Auth.ApiResponse<RegisterResponse> RegisterWithHttpInfo(RegisterRequest? registerRequest = default(RegisterRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerRequest;

            localVarRequestOptions.Operation = "AuthClient.Register";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RegisterResponse>("/Auth/register", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Register", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterResponse</returns>
        public async System.Threading.Tasks.Task<RegisterResponse> RegisterAsync(RegisterRequest? registerRequest = default(RegisterRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Auth.ApiResponse<RegisterResponse> localVarResponse = await RegisterWithHttpInfoAsync(registerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Auth.ApiResponse<RegisterResponse>> RegisterWithHttpInfoAsync(RegisterRequest? registerRequest = default(RegisterRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerRequest;

            localVarRequestOptions.Operation = "AuthClient.Register";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RegisterResponse>("/Auth/register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Register", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResetPasswordResponse</returns>
        public ResetPasswordResponse RestorePassword(ResetPasswordRequest? resetPasswordRequest = default(ResetPasswordRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.ApiResponse<ResetPasswordResponse> localVarResponse = RestorePasswordWithHttpInfo(resetPasswordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResetPasswordResponse</returns>
        public Simplic.OxS.SDK.Auth.ApiResponse<ResetPasswordResponse> RestorePasswordWithHttpInfo(ResetPasswordRequest? resetPasswordRequest = default(ResetPasswordRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = resetPasswordRequest;

            localVarRequestOptions.Operation = "AuthClient.RestorePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResetPasswordResponse>("/Auth/restore-password", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestorePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResetPasswordResponse</returns>
        public async System.Threading.Tasks.Task<ResetPasswordResponse> RestorePasswordAsync(ResetPasswordRequest? resetPasswordRequest = default(ResetPasswordRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Auth.ApiResponse<ResetPasswordResponse> localVarResponse = await RestorePasswordWithHttpInfoAsync(resetPasswordRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResetPasswordResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Auth.ApiResponse<ResetPasswordResponse>> RestorePasswordWithHttpInfoAsync(ResetPasswordRequest? resetPasswordRequest = default(ResetPasswordRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = resetPasswordRequest;

            localVarRequestOptions.Operation = "AuthClient.RestorePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResetPasswordResponse>("/Auth/restore-password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestorePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoginResponse</returns>
        public LoginResponse SelectOrganization(SelectOrganizationRequest? selectOrganizationRequest = default(SelectOrganizationRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.ApiResponse<LoginResponse> localVarResponse = SelectOrganizationWithHttpInfo(selectOrganizationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        public Simplic.OxS.SDK.Auth.ApiResponse<LoginResponse> SelectOrganizationWithHttpInfo(SelectOrganizationRequest? selectOrganizationRequest = default(SelectOrganizationRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = selectOrganizationRequest;

            localVarRequestOptions.Operation = "AuthClient.SelectOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoginResponse>("/Auth/select-organization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SelectOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        public async System.Threading.Tasks.Task<LoginResponse> SelectOrganizationAsync(SelectOrganizationRequest? selectOrganizationRequest = default(SelectOrganizationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Auth.ApiResponse<LoginResponse> localVarResponse = await SelectOrganizationWithHttpInfoAsync(selectOrganizationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Auth.ApiResponse<LoginResponse>> SelectOrganizationWithHttpInfoAsync(SelectOrganizationRequest? selectOrganizationRequest = default(SelectOrganizationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = selectOrganizationRequest;

            localVarRequestOptions.Operation = "AuthClient.SelectOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoginResponse>("/Auth/select-organization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SelectOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AuthSendVerificationCodePost(SendVerificationCodeRequest? sendVerificationCodeRequest = default(SendVerificationCodeRequest?), int operationIndex = 0)
        {
            SendVerificationCodeWithHttpInfo(sendVerificationCodeRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.Auth.ApiResponse<Object> SendVerificationCodeWithHttpInfo(SendVerificationCodeRequest? sendVerificationCodeRequest = default(SendVerificationCodeRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendVerificationCodeRequest;

            localVarRequestOptions.Operation = "AuthClient.AuthSendVerificationCodePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Auth/send-verification-code", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSendVerificationCodePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendVerificationCodeAsync(SendVerificationCodeRequest? sendVerificationCodeRequest = default(SendVerificationCodeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SendVerificationCodeWithHttpInfoAsync(sendVerificationCodeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Auth.ApiResponse<Object>> SendVerificationCodeWithHttpInfoAsync(SendVerificationCodeRequest? sendVerificationCodeRequest = default(SendVerificationCodeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendVerificationCodeRequest;

            localVarRequestOptions.Operation = "AuthClient.AuthSendVerificationCodePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Auth/send-verification-code", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSendVerificationCodePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AuthVerifyMailPost(VerifyMailRequest? verifyMailRequest = default(VerifyMailRequest?), int operationIndex = 0)
        {
            VerifyMailWithHttpInfo(verifyMailRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.Auth.ApiResponse<Object> VerifyMailWithHttpInfo(VerifyMailRequest? verifyMailRequest = default(VerifyMailRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = verifyMailRequest;

            localVarRequestOptions.Operation = "AuthClient.AuthVerifyMailPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Auth/verify-mail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthVerifyMailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VerifyMailAsync(VerifyMailRequest? verifyMailRequest = default(VerifyMailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await VerifyMailWithHttpInfoAsync(verifyMailRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Auth.ApiResponse<Object>> VerifyMailWithHttpInfoAsync(VerifyMailRequest? verifyMailRequest = default(VerifyMailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = verifyMailRequest;

            localVarRequestOptions.Operation = "AuthClient.AuthVerifyMailPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Auth/verify-mail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthVerifyMailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TwoFactorResponse</returns>
        public TwoFactorResponse VerifyTwoFactor(TwoFactorRequest? twoFactorRequest = default(TwoFactorRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.ApiResponse<TwoFactorResponse> localVarResponse = VerifyTwoFactorWithHttpInfo(twoFactorRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TwoFactorResponse</returns>
        public Simplic.OxS.SDK.Auth.ApiResponse<TwoFactorResponse> VerifyTwoFactorWithHttpInfo(TwoFactorRequest? twoFactorRequest = default(TwoFactorRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = twoFactorRequest;

            localVarRequestOptions.Operation = "AuthClient.VerifyTwoFactor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TwoFactorResponse>("/Auth/verify-two-factor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyTwoFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TwoFactorResponse</returns>
        public async System.Threading.Tasks.Task<TwoFactorResponse> VerifyTwoFactorAsync(TwoFactorRequest? twoFactorRequest = default(TwoFactorRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Auth.ApiResponse<TwoFactorResponse> localVarResponse = await VerifyTwoFactorWithHttpInfoAsync(twoFactorRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Auth.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TwoFactorResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Auth.ApiResponse<TwoFactorResponse>> VerifyTwoFactorWithHttpInfoAsync(TwoFactorRequest? twoFactorRequest = default(TwoFactorRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Auth.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Auth.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Auth.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = twoFactorRequest;

            localVarRequestOptions.Operation = "AuthClient.VerifyTwoFactor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TwoFactorResponse>("/Auth/verify-two-factor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyTwoFactor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
