// <auto-generated>
/*
 * Simplic.OxS.Auth
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Auth
{
    //--Custom wrapper start
    /// <summary>
    /// Client to interact with the API endpoints of the auth service.
    /// </summary>
    public interface IAuthClient
    {
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        string GetBasePath();

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        //IReadableConfiguration Configuration;

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChangePasswordResponse</returns>
        ChangePasswordResponse ChangePassword(ChangePasswordRequest changePasswordRequest = default(ChangePasswordRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <returns>ApiResponse of ChangePasswordResponse</returns>
        ApiResponse<ChangePasswordResponse> ChangePasswordWithHttpInfo(ChangePasswordRequest changePasswordRequest = default(ChangePasswordRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChangePasswordResponse</returns>
        Task<ChangePasswordResponse> ChangePasswordAsync(ChangePasswordRequest changePasswordRequest = default(ChangePasswordRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChangePasswordResponse)</returns>
        Task<ApiResponse<ChangePasswordResponse>> ChangePasswordWithHttpInfoAsync(ChangePasswordRequest changePasswordRequest = default(ChangePasswordRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoginResponse</returns>
        LoginResponse Login(LoginRequest loginRequest = default(LoginRequest));

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        ApiResponse<LoginResponse> LoginWithHttpInfo(LoginRequest loginRequest = default(LoginRequest));
         
        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        Task<LoginResponse> LoginAsync(LoginRequest loginRequest = default(LoginRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        Task<ApiResponse<LoginResponse>> LoginWithHttpInfoAsync(LoginRequest loginRequest = default(LoginRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterResponse</returns>
        RegisterResponse Register(RegisterRequest registerRequest = default(RegisterRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <returns>ApiResponse of RegisterResponse</returns>
        ApiResponse<RegisterResponse> RegisterWithHttpInfo(RegisterRequest registerRequest = default(RegisterRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterResponse</returns>
        Task<RegisterResponse> RegisterAsync(RegisterRequest registerRequest = default(RegisterRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterResponse)</returns>
        Task<ApiResponse<RegisterResponse>> RegisterWithHttpInfoAsync(RegisterRequest registerRequest = default(RegisterRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResetPasswordResponse</returns>
        ResetPasswordResponse RestorePassword(ResetPasswordRequest resetPasswordRequest = default(ResetPasswordRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <returns>ApiResponse of ResetPasswordResponse</returns>
        ApiResponse<ResetPasswordResponse> RestorePasswordWithHttpInfo(ResetPasswordRequest resetPasswordRequest = default(ResetPasswordRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResetPasswordResponse</returns>
        Task<ResetPasswordResponse> RestorePasswordAsync(ResetPasswordRequest resetPasswordRequest = default(ResetPasswordRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResetPasswordResponse)</returns>
        Task<ApiResponse<ResetPasswordResponse>> RestorePasswordWithHttpInfoAsync(ResetPasswordRequest resetPasswordRequest = default(ResetPasswordRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoginResponse</returns>
        LoginResponse SelectOrganization(SelectOrganizationRequest selectOrganizationRequest = default(SelectOrganizationRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        ApiResponse<LoginResponse> SelectOrganizationWithHttpInfo(SelectOrganizationRequest selectOrganizationRequest = default(SelectOrganizationRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        Task<LoginResponse> SelectOrganizationAsync(SelectOrganizationRequest selectOrganizationRequest = default(SelectOrganizationRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        Task<ApiResponse<LoginResponse>> SelectOrganizationWithHttpInfoAsync(SelectOrganizationRequest selectOrganizationRequest = default(SelectOrganizationRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SendVerificationCode(SendVerificationCodeRequest sendVerificationCodeRequest = default(SendVerificationCodeRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendVerificationCodeWithHttpInfo(SendVerificationCodeRequest sendVerificationCodeRequest = default(SendVerificationCodeRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task SendVerificationCodeAsync(SendVerificationCodeRequest sendVerificationCodeRequest = default(SendVerificationCodeRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> SendVerificationCodeWithHttpInfoAsync(SendVerificationCodeRequest sendVerificationCodeRequest = default(SendVerificationCodeRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void VerifyMail(VerifyMailRequest verifyMailRequest = default(VerifyMailRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VerifyMailWithHttpInfo(VerifyMailRequest verifyMailRequest = default(VerifyMailRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task VerifyMailAsync(VerifyMailRequest verifyMailRequest = default(VerifyMailRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> VerifyMailWithHttpInfoAsync(VerifyMailRequest verifyMailRequest = default(VerifyMailRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TwoFactorResponse</returns>
        TwoFactorResponse VerifyTwoFactor(TwoFactorRequest twoFactorRequest = default(TwoFactorRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <returns>ApiResponse of TwoFactorResponse</returns>
        ApiResponse<TwoFactorResponse> VerifyTwoFactorWithHttpInfo(TwoFactorRequest twoFactorRequest = default(TwoFactorRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TwoFactorResponse</returns>
        Task<TwoFactorResponse> VerifyTwoFactorAsync(TwoFactorRequest twoFactorRequest = default(TwoFactorRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TwoFactorResponse)</returns>
        Task<ApiResponse<TwoFactorResponse>> VerifyTwoFactorWithHttpInfoAsync(TwoFactorRequest twoFactorRequest = default(TwoFactorRequest), CancellationToken cancellationToken = default(CancellationToken));

    }

    /// <inheritdoc cref="IAuthClient">
    public class AuthClient : IAuthClient
    {
        private __AuthClient _internalClient;
        private HttpClient _httpClient;

        public AuthClient(string host, string? authorization = null)
        {
            _httpClient = new HttpClient() { BaseAddress = new Uri($"{host}/auth-api/v1") };
            var jsonSerializerOptions = new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            var jsonSerializerOptionsProvider = new JsonSerializerOptionsProvider(jsonSerializerOptions);
            var events = new AuthClientEvents();
            if (authorization is null)
            {
                _internalClient = new __AuthClient(_httpClient, jsonSerializerOptionsProvider, events, new NullTokenProvider<ApiKeyToken>());
            }
            else
            {
                var token = new ApiKeyToken(authorization, "Authorization", "");
                _internalClient = new __AuthClient(_httpClient, jsonSerializerOptionsProvider, events, new ApiKeyTokenProvider(new[] { token }));
            }
        }

        public AuthClient(Environment env, string? authorization = null)
            : this(
                env == Environment.Development
                    ? "https://dev-oxs.simplic.io"
                    : "https://oxs.simplic.io",
                authorization
            ) { }

        /// <inheritdoc />
        public string GetBasePath() => _httpClient.BaseAddress.ToString();

        /// <inheritdoc />
        public ChangePasswordResponse ChangePassword(ChangePasswordRequest changePasswordRequest = default(ChangePasswordRequest))
        {
            try
            {
                var response = _internalClient.ChangePasswordAsync(changePasswordRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<ChangePasswordResponse> ChangePasswordWithHttpInfo(ChangePasswordRequest changePasswordRequest = default(ChangePasswordRequest))
        {
            try
            {
                var response = _internalClient.ChangePasswordAsync(changePasswordRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ChangePasswordResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<ChangePasswordResponse> ChangePasswordAsync(ChangePasswordRequest changePasswordRequest = default(ChangePasswordRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.ChangePasswordAsync(changePasswordRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<ChangePasswordResponse>> ChangePasswordWithHttpInfoAsync(ChangePasswordRequest changePasswordRequest = default(ChangePasswordRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.ChangePasswordAsync(changePasswordRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ChangePasswordResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public LoginResponse Login(LoginRequest loginRequest = default(LoginRequest))
        {
            try
            {
                var response = _internalClient.LoginAsync(loginRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<LoginResponse> LoginWithHttpInfo(LoginRequest loginRequest = default(LoginRequest))
        {
            try
            {
                var response = _internalClient.LoginAsync(loginRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<LoginResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<LoginResponse> LoginAsync(LoginRequest loginRequest = default(LoginRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.LoginAsync(loginRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<LoginResponse>> LoginWithHttpInfoAsync(LoginRequest loginRequest = default(LoginRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.LoginAsync(loginRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<LoginResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public RegisterResponse Register(RegisterRequest registerRequest = default(RegisterRequest))
        {
            try
            {
                var response = _internalClient.RegisterAsync(registerRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<RegisterResponse> RegisterWithHttpInfo(RegisterRequest registerRequest = default(RegisterRequest))
        {
            try
            {
                var response = _internalClient.RegisterAsync(registerRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<RegisterResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<RegisterResponse> RegisterAsync(RegisterRequest registerRequest = default(RegisterRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.RegisterAsync(registerRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<RegisterResponse>> RegisterWithHttpInfoAsync(RegisterRequest registerRequest = default(RegisterRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.RegisterAsync(registerRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<RegisterResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public ResetPasswordResponse RestorePassword(ResetPasswordRequest resetPasswordRequest = default(ResetPasswordRequest))
        {
            try
            {
                var response = _internalClient.RestorePasswordAsync(resetPasswordRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<ResetPasswordResponse> RestorePasswordWithHttpInfo(ResetPasswordRequest resetPasswordRequest = default(ResetPasswordRequest))
        {
            try
            {
                var response = _internalClient.RestorePasswordAsync(resetPasswordRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ResetPasswordResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<ResetPasswordResponse> RestorePasswordAsync(ResetPasswordRequest resetPasswordRequest = default(ResetPasswordRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.RestorePasswordAsync(resetPasswordRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<ResetPasswordResponse>> RestorePasswordWithHttpInfoAsync(ResetPasswordRequest resetPasswordRequest = default(ResetPasswordRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.RestorePasswordAsync(resetPasswordRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ResetPasswordResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public LoginResponse SelectOrganization(SelectOrganizationRequest selectOrganizationRequest = default(SelectOrganizationRequest))
        {
            try
            {
                var response = _internalClient.SelectOrganizationAsync(selectOrganizationRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<LoginResponse> SelectOrganizationWithHttpInfo(SelectOrganizationRequest selectOrganizationRequest = default(SelectOrganizationRequest))
        {
            try
            {
                var response = _internalClient.SelectOrganizationAsync(selectOrganizationRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<LoginResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<LoginResponse> SelectOrganizationAsync(SelectOrganizationRequest selectOrganizationRequest = default(SelectOrganizationRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.SelectOrganizationAsync(selectOrganizationRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<LoginResponse>> SelectOrganizationWithHttpInfoAsync(SelectOrganizationRequest selectOrganizationRequest = default(SelectOrganizationRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.SelectOrganizationAsync(selectOrganizationRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<LoginResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void SendVerificationCode(SendVerificationCodeRequest sendVerificationCodeRequest = default(SendVerificationCodeRequest))
        {
            try
            {
                var response = _internalClient.SendVerificationCodeAsync(sendVerificationCodeRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> SendVerificationCodeWithHttpInfo(SendVerificationCodeRequest sendVerificationCodeRequest = default(SendVerificationCodeRequest))
        {
            try
            {
                var response = _internalClient.SendVerificationCodeAsync(sendVerificationCodeRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task SendVerificationCodeAsync(SendVerificationCodeRequest sendVerificationCodeRequest = default(SendVerificationCodeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.SendVerificationCodeAsync(sendVerificationCodeRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> SendVerificationCodeWithHttpInfoAsync(SendVerificationCodeRequest sendVerificationCodeRequest = default(SendVerificationCodeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.SendVerificationCodeAsync(sendVerificationCodeRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void VerifyMail(VerifyMailRequest verifyMailRequest = default(VerifyMailRequest))
        {
            try
            {
                var response = _internalClient.VerifyMailAsync(verifyMailRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> VerifyMailWithHttpInfo(VerifyMailRequest verifyMailRequest = default(VerifyMailRequest))
        {
            try
            {
                var response = _internalClient.VerifyMailAsync(verifyMailRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task VerifyMailAsync(VerifyMailRequest verifyMailRequest = default(VerifyMailRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.VerifyMailAsync(verifyMailRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> VerifyMailWithHttpInfoAsync(VerifyMailRequest verifyMailRequest = default(VerifyMailRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.VerifyMailAsync(verifyMailRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public TwoFactorResponse VerifyTwoFactor(TwoFactorRequest twoFactorRequest = default(TwoFactorRequest))
        {
            try
            {
                var response = _internalClient.VerifyTwoFactorAsync(twoFactorRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<TwoFactorResponse> VerifyTwoFactorWithHttpInfo(TwoFactorRequest twoFactorRequest = default(TwoFactorRequest))
        {
            try
            {
                var response = _internalClient.VerifyTwoFactorAsync(twoFactorRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<TwoFactorResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<TwoFactorResponse> VerifyTwoFactorAsync(TwoFactorRequest twoFactorRequest = default(TwoFactorRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.VerifyTwoFactorAsync(twoFactorRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<TwoFactorResponse>> VerifyTwoFactorWithHttpInfoAsync(TwoFactorRequest twoFactorRequest = default(TwoFactorRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.VerifyTwoFactorAsync(twoFactorRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<TwoFactorResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    

        private string FormatErrorMessage(string message, int errorCode) => $"<{errorCode} - {(HttpStatusCode)errorCode}> {message}";
    }
    //--Custom wrapper end
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    internal interface __IAuthClient : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AuthClientEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthChangePasswordPostApiResponse"/>&gt;</returns>
        Task<__AuthClient.IAuthClientAuthChangePasswordPostApiResponse> ChangePasswordAsync(Option<ChangePasswordRequest> changePasswordRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthChangePasswordPostApiResponse"/>?&gt;</returns>
        Task<__AuthClient.IAuthClientAuthChangePasswordPostApiResponse?> ChangePasswordOrDefaultAsync(Option<ChangePasswordRequest> changePasswordRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthLoginPostApiResponse"/>&gt;</returns>
        Task<__AuthClient.IAuthClientAuthLoginPostApiResponse> LoginAsync(Option<LoginRequest> loginRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthLoginPostApiResponse"/>?&gt;</returns>
        Task<__AuthClient.IAuthClientAuthLoginPostApiResponse?> LoginOrDefaultAsync(Option<LoginRequest> loginRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthRegisterPostApiResponse"/>&gt;</returns>
        Task<__AuthClient.IAuthClientAuthRegisterPostApiResponse> RegisterAsync(Option<RegisterRequest> registerRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthRegisterPostApiResponse"/>?&gt;</returns>
        Task<__AuthClient.IAuthClientAuthRegisterPostApiResponse?> RegisterOrDefaultAsync(Option<RegisterRequest> registerRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthRestorePasswordPostApiResponse"/>&gt;</returns>
        Task<__AuthClient.IAuthClientAuthRestorePasswordPostApiResponse> RestorePasswordAsync(Option<ResetPasswordRequest> resetPasswordRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthRestorePasswordPostApiResponse"/>?&gt;</returns>
        Task<__AuthClient.IAuthClientAuthRestorePasswordPostApiResponse?> RestorePasswordOrDefaultAsync(Option<ResetPasswordRequest> resetPasswordRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthSelectOrganizationPostApiResponse"/>&gt;</returns>
        Task<__AuthClient.IAuthClientAuthSelectOrganizationPostApiResponse> SelectOrganizationAsync(Option<SelectOrganizationRequest> selectOrganizationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthSelectOrganizationPostApiResponse"/>?&gt;</returns>
        Task<__AuthClient.IAuthClientAuthSelectOrganizationPostApiResponse?> SelectOrganizationOrDefaultAsync(Option<SelectOrganizationRequest> selectOrganizationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthSendVerificationCodePostApiResponse"/>&gt;</returns>
        Task<__AuthClient.IAuthClientAuthSendVerificationCodePostApiResponse> SendVerificationCodeAsync(Option<SendVerificationCodeRequest> sendVerificationCodeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthSendVerificationCodePostApiResponse"/>?&gt;</returns>
        Task<__AuthClient.IAuthClientAuthSendVerificationCodePostApiResponse?> SendVerificationCodeOrDefaultAsync(Option<SendVerificationCodeRequest> sendVerificationCodeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthVerifyMailPostApiResponse"/>&gt;</returns>
        Task<__AuthClient.IAuthClientAuthVerifyMailPostApiResponse> VerifyMailAsync(Option<VerifyMailRequest> verifyMailRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthVerifyMailPostApiResponse"/>?&gt;</returns>
        Task<__AuthClient.IAuthClientAuthVerifyMailPostApiResponse?> VerifyMailOrDefaultAsync(Option<VerifyMailRequest> verifyMailRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthVerifyTwoFactorPostApiResponse"/>&gt;</returns>
        Task<__AuthClient.IAuthClientAuthVerifyTwoFactorPostApiResponse> VerifyTwoFactorAsync(Option<TwoFactorRequest> twoFactorRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthVerifyTwoFactorPostApiResponse"/>?&gt;</returns>
        Task<__AuthClient.IAuthClientAuthVerifyTwoFactorPostApiResponse?> VerifyTwoFactorOrDefaultAsync(Option<TwoFactorRequest> twoFactorRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AuthClientEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAuthChangePasswordPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAuthChangePasswordPost;

        internal void ExecuteOnAuthChangePasswordPost(__AuthClient.AuthClientAuthChangePasswordPostApiResponse apiResponse)
        {
            OnAuthChangePasswordPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAuthChangePasswordPost(Exception exception)
        {
            OnErrorAuthChangePasswordPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAuthLoginPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAuthLoginPost;

        internal void ExecuteOnAuthLoginPost(__AuthClient.AuthClientAuthLoginPostApiResponse apiResponse)
        {
            OnAuthLoginPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAuthLoginPost(Exception exception)
        {
            OnErrorAuthLoginPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAuthRegisterPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAuthRegisterPost;

        internal void ExecuteOnAuthRegisterPost(__AuthClient.AuthClientAuthRegisterPostApiResponse apiResponse)
        {
            OnAuthRegisterPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAuthRegisterPost(Exception exception)
        {
            OnErrorAuthRegisterPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAuthRestorePasswordPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAuthRestorePasswordPost;

        internal void ExecuteOnAuthRestorePasswordPost(__AuthClient.AuthClientAuthRestorePasswordPostApiResponse apiResponse)
        {
            OnAuthRestorePasswordPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAuthRestorePasswordPost(Exception exception)
        {
            OnErrorAuthRestorePasswordPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAuthSelectOrganizationPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAuthSelectOrganizationPost;

        internal void ExecuteOnAuthSelectOrganizationPost(__AuthClient.AuthClientAuthSelectOrganizationPostApiResponse apiResponse)
        {
            OnAuthSelectOrganizationPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAuthSelectOrganizationPost(Exception exception)
        {
            OnErrorAuthSelectOrganizationPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAuthSendVerificationCodePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAuthSendVerificationCodePost;

        internal void ExecuteOnAuthSendVerificationCodePost(__AuthClient.AuthClientAuthSendVerificationCodePostApiResponse apiResponse)
        {
            OnAuthSendVerificationCodePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAuthSendVerificationCodePost(Exception exception)
        {
            OnErrorAuthSendVerificationCodePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAuthVerifyMailPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAuthVerifyMailPost;

        internal void ExecuteOnAuthVerifyMailPost(__AuthClient.AuthClientAuthVerifyMailPostApiResponse apiResponse)
        {
            OnAuthVerifyMailPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAuthVerifyMailPost(Exception exception)
        {
            OnErrorAuthVerifyMailPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAuthVerifyTwoFactorPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAuthVerifyTwoFactorPost;

        internal void ExecuteOnAuthVerifyTwoFactorPost(__AuthClient.AuthClientAuthVerifyTwoFactorPostApiResponse apiResponse)
        {
            OnAuthVerifyTwoFactorPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAuthVerifyTwoFactorPost(Exception exception)
        {
            OnErrorAuthVerifyTwoFactorPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal sealed partial class __AuthClient : __IAuthClient
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AuthClientEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __AuthClient(
            HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            AuthClientEvents authClientEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider
        )
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            HttpClient = httpClient;
            Events = authClientEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatAuthChangePasswordPost(Option<ChangePasswordRequest> changePasswordRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="changePasswordRequest"></param>
        /// <returns></returns>
        private void ValidateAuthChangePasswordPost(Option<ChangePasswordRequest> changePasswordRequest)
        {
            if (changePasswordRequest.IsSet && changePasswordRequest.Value == null)
                throw new ArgumentNullException(nameof(changePasswordRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="changePasswordRequest"></param>
        private void AfterAuthChangePasswordPostDefaultImplementation(__AuthClient.IAuthClientAuthChangePasswordPostApiResponse apiResponseLocalVar, Option<ChangePasswordRequest> changePasswordRequest)
        {
            bool suppressDefaultLog = false;
            AfterAuthChangePasswordPost(ref suppressDefaultLog, apiResponseLocalVar, changePasswordRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="changePasswordRequest"></param>
        partial void AfterAuthChangePasswordPost(ref bool suppressDefaultLog, __AuthClient.IAuthClientAuthChangePasswordPostApiResponse apiResponseLocalVar, Option<ChangePasswordRequest> changePasswordRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="changePasswordRequest"></param>
        private void OnErrorAuthChangePasswordPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<ChangePasswordRequest> changePasswordRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorAuthChangePasswordPost(ref suppressDefaultLog, exception, pathFormat, path, changePasswordRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="changePasswordRequest"></param>
        partial void OnErrorAuthChangePasswordPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<ChangePasswordRequest> changePasswordRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthChangePasswordPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthChangePasswordPostApiResponse?> ChangePasswordOrDefaultAsync(Option<ChangePasswordRequest> changePasswordRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ChangePasswordAsync(changePasswordRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthChangePasswordPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthChangePasswordPostApiResponse> ChangePasswordAsync(Option<ChangePasswordRequest> changePasswordRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAuthChangePasswordPost(changePasswordRequest);

                FormatAuthChangePasswordPost(changePasswordRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Auth/change-password";

                    if (changePasswordRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (changePasswordRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(changePasswordRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        AuthClientAuthChangePasswordPostApiResponse apiResponseLocalVar = new AuthClientAuthChangePasswordPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Auth/change-password", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAuthChangePasswordPostDefaultImplementation(apiResponseLocalVar, changePasswordRequest);

                        Events.ExecuteOnAuthChangePasswordPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthChangePasswordPostDefaultImplementation(e, "/Auth/change-password", uriBuilderLocalVar.Path, changePasswordRequest);
                Events.ExecuteOnErrorAuthChangePasswordPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IAuthClientAuthChangePasswordPostApiResponse"/>
        /// </summary>
        internal interface IAuthClientAuthChangePasswordPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<ChangePasswordResponse>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
        }

        /// <summary>
        /// The <see cref="AuthClientAuthChangePasswordPostApiResponse"/>
        /// </summary>
        internal partial class AuthClientAuthChangePasswordPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IAuthClientAuthChangePasswordPostApiResponse
        {
            /// <summary>
            /// The <see cref="AuthClientAuthChangePasswordPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthClientAuthChangePasswordPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ChangePasswordResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ChangePasswordResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ChangePasswordResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAuthLoginPost(Option<LoginRequest> loginRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="loginRequest"></param>
        /// <returns></returns>
        private void ValidateAuthLoginPost(Option<LoginRequest> loginRequest)
        {
            if (loginRequest.IsSet && loginRequest.Value == null)
                throw new ArgumentNullException(nameof(loginRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="loginRequest"></param>
        private void AfterAuthLoginPostDefaultImplementation(__AuthClient.IAuthClientAuthLoginPostApiResponse apiResponseLocalVar, Option<LoginRequest> loginRequest)
        {
            bool suppressDefaultLog = false;
            AfterAuthLoginPost(ref suppressDefaultLog, apiResponseLocalVar, loginRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="loginRequest"></param>
        partial void AfterAuthLoginPost(ref bool suppressDefaultLog, __AuthClient.IAuthClientAuthLoginPostApiResponse apiResponseLocalVar, Option<LoginRequest> loginRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="loginRequest"></param>
        private void OnErrorAuthLoginPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<LoginRequest> loginRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorAuthLoginPost(ref suppressDefaultLog, exception, pathFormat, path, loginRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="loginRequest"></param>
        partial void OnErrorAuthLoginPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<LoginRequest> loginRequest);

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful. 
        /// </summary>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthLoginPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthLoginPostApiResponse?> LoginOrDefaultAsync(Option<LoginRequest> loginRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LoginAsync(loginRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Login using username and password. Will return a JWT when logging in was successful. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login model containing credentials. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthLoginPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthLoginPostApiResponse> LoginAsync(Option<LoginRequest> loginRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAuthLoginPost(loginRequest);

                FormatAuthLoginPost(loginRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Auth/login";

                    if (loginRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (loginRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(loginRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        AuthClientAuthLoginPostApiResponse apiResponseLocalVar = new AuthClientAuthLoginPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Auth/login", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAuthLoginPostDefaultImplementation(apiResponseLocalVar, loginRequest);

                        Events.ExecuteOnAuthLoginPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthLoginPostDefaultImplementation(e, "/Auth/login", uriBuilderLocalVar.Path, loginRequest);
                Events.ExecuteOnErrorAuthLoginPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IAuthClientAuthLoginPostApiResponse"/>
        /// </summary>
        internal interface IAuthClientAuthLoginPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<LoginResponse>, IUnauthorized<ProblemDetails>, IBadRequest<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
        }

        /// <summary>
        /// The <see cref="AuthClientAuthLoginPostApiResponse"/>
        /// </summary>
        internal partial class AuthClientAuthLoginPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IAuthClientAuthLoginPostApiResponse
        {
            /// <summary>
            /// The <see cref="AuthClientAuthLoginPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthClientAuthLoginPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public LoginResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LoginResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out LoginResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAuthRegisterPost(Option<RegisterRequest> registerRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="registerRequest"></param>
        /// <returns></returns>
        private void ValidateAuthRegisterPost(Option<RegisterRequest> registerRequest)
        {
            if (registerRequest.IsSet && registerRequest.Value == null)
                throw new ArgumentNullException(nameof(registerRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="registerRequest"></param>
        private void AfterAuthRegisterPostDefaultImplementation(__AuthClient.IAuthClientAuthRegisterPostApiResponse apiResponseLocalVar, Option<RegisterRequest> registerRequest)
        {
            bool suppressDefaultLog = false;
            AfterAuthRegisterPost(ref suppressDefaultLog, apiResponseLocalVar, registerRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="registerRequest"></param>
        partial void AfterAuthRegisterPost(ref bool suppressDefaultLog, __AuthClient.IAuthClientAuthRegisterPostApiResponse apiResponseLocalVar, Option<RegisterRequest> registerRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="registerRequest"></param>
        private void OnErrorAuthRegisterPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<RegisterRequest> registerRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorAuthRegisterPost(ref suppressDefaultLog, exception, pathFormat, path, registerRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="registerRequest"></param>
        partial void OnErrorAuthRegisterPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<RegisterRequest> registerRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthRegisterPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthRegisterPostApiResponse?> RegisterOrDefaultAsync(Option<RegisterRequest> registerRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RegisterAsync(registerRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthRegisterPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthRegisterPostApiResponse> RegisterAsync(Option<RegisterRequest> registerRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAuthRegisterPost(registerRequest);

                FormatAuthRegisterPost(registerRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Auth/register";

                    if (registerRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (registerRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(registerRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        AuthClientAuthRegisterPostApiResponse apiResponseLocalVar = new AuthClientAuthRegisterPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Auth/register", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAuthRegisterPostDefaultImplementation(apiResponseLocalVar, registerRequest);

                        Events.ExecuteOnAuthRegisterPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthRegisterPostDefaultImplementation(e, "/Auth/register", uriBuilderLocalVar.Path, registerRequest);
                Events.ExecuteOnErrorAuthRegisterPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IAuthClientAuthRegisterPostApiResponse"/>
        /// </summary>
        internal interface IAuthClientAuthRegisterPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<RegisterResponse>, IBadRequest<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
        }

        /// <summary>
        /// The <see cref="AuthClientAuthRegisterPostApiResponse"/>
        /// </summary>
        internal partial class AuthClientAuthRegisterPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IAuthClientAuthRegisterPostApiResponse
        {
            /// <summary>
            /// The <see cref="AuthClientAuthRegisterPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthClientAuthRegisterPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public RegisterResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<RegisterResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out RegisterResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAuthRestorePasswordPost(Option<ResetPasswordRequest> resetPasswordRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="resetPasswordRequest"></param>
        /// <returns></returns>
        private void ValidateAuthRestorePasswordPost(Option<ResetPasswordRequest> resetPasswordRequest)
        {
            if (resetPasswordRequest.IsSet && resetPasswordRequest.Value == null)
                throw new ArgumentNullException(nameof(resetPasswordRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="resetPasswordRequest"></param>
        private void AfterAuthRestorePasswordPostDefaultImplementation(__AuthClient.IAuthClientAuthRestorePasswordPostApiResponse apiResponseLocalVar, Option<ResetPasswordRequest> resetPasswordRequest)
        {
            bool suppressDefaultLog = false;
            AfterAuthRestorePasswordPost(ref suppressDefaultLog, apiResponseLocalVar, resetPasswordRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="resetPasswordRequest"></param>
        partial void AfterAuthRestorePasswordPost(ref bool suppressDefaultLog, __AuthClient.IAuthClientAuthRestorePasswordPostApiResponse apiResponseLocalVar, Option<ResetPasswordRequest> resetPasswordRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="resetPasswordRequest"></param>
        private void OnErrorAuthRestorePasswordPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<ResetPasswordRequest> resetPasswordRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorAuthRestorePasswordPost(ref suppressDefaultLog, exception, pathFormat, path, resetPasswordRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="resetPasswordRequest"></param>
        partial void OnErrorAuthRestorePasswordPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<ResetPasswordRequest> resetPasswordRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthRestorePasswordPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthRestorePasswordPostApiResponse?> RestorePasswordOrDefaultAsync(Option<ResetPasswordRequest> resetPasswordRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RestorePasswordAsync(resetPasswordRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthRestorePasswordPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthRestorePasswordPostApiResponse> RestorePasswordAsync(Option<ResetPasswordRequest> resetPasswordRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAuthRestorePasswordPost(resetPasswordRequest);

                FormatAuthRestorePasswordPost(resetPasswordRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Auth/restore-password";

                    if (resetPasswordRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (resetPasswordRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(resetPasswordRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        AuthClientAuthRestorePasswordPostApiResponse apiResponseLocalVar = new AuthClientAuthRestorePasswordPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Auth/restore-password", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAuthRestorePasswordPostDefaultImplementation(apiResponseLocalVar, resetPasswordRequest);

                        Events.ExecuteOnAuthRestorePasswordPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthRestorePasswordPostDefaultImplementation(e, "/Auth/restore-password", uriBuilderLocalVar.Path, resetPasswordRequest);
                Events.ExecuteOnErrorAuthRestorePasswordPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IAuthClientAuthRestorePasswordPostApiResponse"/>
        /// </summary>
        internal interface IAuthClientAuthRestorePasswordPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<ResetPasswordResponse>, IBadRequest<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
        }

        /// <summary>
        /// The <see cref="AuthClientAuthRestorePasswordPostApiResponse"/>
        /// </summary>
        internal partial class AuthClientAuthRestorePasswordPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IAuthClientAuthRestorePasswordPostApiResponse
        {
            /// <summary>
            /// The <see cref="AuthClientAuthRestorePasswordPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthClientAuthRestorePasswordPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ResetPasswordResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ResetPasswordResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ResetPasswordResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAuthSelectOrganizationPost(Option<SelectOrganizationRequest> selectOrganizationRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="selectOrganizationRequest"></param>
        /// <returns></returns>
        private void ValidateAuthSelectOrganizationPost(Option<SelectOrganizationRequest> selectOrganizationRequest)
        {
            if (selectOrganizationRequest.IsSet && selectOrganizationRequest.Value == null)
                throw new ArgumentNullException(nameof(selectOrganizationRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="selectOrganizationRequest"></param>
        private void AfterAuthSelectOrganizationPostDefaultImplementation(__AuthClient.IAuthClientAuthSelectOrganizationPostApiResponse apiResponseLocalVar, Option<SelectOrganizationRequest> selectOrganizationRequest)
        {
            bool suppressDefaultLog = false;
            AfterAuthSelectOrganizationPost(ref suppressDefaultLog, apiResponseLocalVar, selectOrganizationRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="selectOrganizationRequest"></param>
        partial void AfterAuthSelectOrganizationPost(ref bool suppressDefaultLog, __AuthClient.IAuthClientAuthSelectOrganizationPostApiResponse apiResponseLocalVar, Option<SelectOrganizationRequest> selectOrganizationRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="selectOrganizationRequest"></param>
        private void OnErrorAuthSelectOrganizationPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<SelectOrganizationRequest> selectOrganizationRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorAuthSelectOrganizationPost(ref suppressDefaultLog, exception, pathFormat, path, selectOrganizationRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="selectOrganizationRequest"></param>
        partial void OnErrorAuthSelectOrganizationPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<SelectOrganizationRequest> selectOrganizationRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthSelectOrganizationPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthSelectOrganizationPostApiResponse?> SelectOrganizationOrDefaultAsync(Option<SelectOrganizationRequest> selectOrganizationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SelectOrganizationAsync(selectOrganizationRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectOrganizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthSelectOrganizationPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthSelectOrganizationPostApiResponse> SelectOrganizationAsync(Option<SelectOrganizationRequest> selectOrganizationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAuthSelectOrganizationPost(selectOrganizationRequest);

                FormatAuthSelectOrganizationPost(selectOrganizationRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Auth/select-organization";

                    if (selectOrganizationRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (selectOrganizationRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(selectOrganizationRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        AuthClientAuthSelectOrganizationPostApiResponse apiResponseLocalVar = new AuthClientAuthSelectOrganizationPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Auth/select-organization", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAuthSelectOrganizationPostDefaultImplementation(apiResponseLocalVar, selectOrganizationRequest);

                        Events.ExecuteOnAuthSelectOrganizationPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthSelectOrganizationPostDefaultImplementation(e, "/Auth/select-organization", uriBuilderLocalVar.Path, selectOrganizationRequest);
                Events.ExecuteOnErrorAuthSelectOrganizationPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IAuthClientAuthSelectOrganizationPostApiResponse"/>
        /// </summary>
        internal interface IAuthClientAuthSelectOrganizationPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<LoginResponse>, IUnauthorized<ProblemDetails>, IBadRequest<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
        }

        /// <summary>
        /// The <see cref="AuthClientAuthSelectOrganizationPostApiResponse"/>
        /// </summary>
        internal partial class AuthClientAuthSelectOrganizationPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IAuthClientAuthSelectOrganizationPostApiResponse
        {
            /// <summary>
            /// The <see cref="AuthClientAuthSelectOrganizationPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthClientAuthSelectOrganizationPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public LoginResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LoginResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out LoginResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAuthSendVerificationCodePost(Option<SendVerificationCodeRequest> sendVerificationCodeRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sendVerificationCodeRequest"></param>
        /// <returns></returns>
        private void ValidateAuthSendVerificationCodePost(Option<SendVerificationCodeRequest> sendVerificationCodeRequest)
        {
            if (sendVerificationCodeRequest.IsSet && sendVerificationCodeRequest.Value == null)
                throw new ArgumentNullException(nameof(sendVerificationCodeRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sendVerificationCodeRequest"></param>
        private void AfterAuthSendVerificationCodePostDefaultImplementation(__AuthClient.IAuthClientAuthSendVerificationCodePostApiResponse apiResponseLocalVar, Option<SendVerificationCodeRequest> sendVerificationCodeRequest)
        {
            bool suppressDefaultLog = false;
            AfterAuthSendVerificationCodePost(ref suppressDefaultLog, apiResponseLocalVar, sendVerificationCodeRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sendVerificationCodeRequest"></param>
        partial void AfterAuthSendVerificationCodePost(ref bool suppressDefaultLog, __AuthClient.IAuthClientAuthSendVerificationCodePostApiResponse apiResponseLocalVar, Option<SendVerificationCodeRequest> sendVerificationCodeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="sendVerificationCodeRequest"></param>
        private void OnErrorAuthSendVerificationCodePostDefaultImplementation(Exception exception, string pathFormat, string path, Option<SendVerificationCodeRequest> sendVerificationCodeRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorAuthSendVerificationCodePost(ref suppressDefaultLog, exception, pathFormat, path, sendVerificationCodeRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="sendVerificationCodeRequest"></param>
        partial void OnErrorAuthSendVerificationCodePost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<SendVerificationCodeRequest> sendVerificationCodeRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthSendVerificationCodePostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthSendVerificationCodePostApiResponse?> SendVerificationCodeOrDefaultAsync(Option<SendVerificationCodeRequest> sendVerificationCodeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendVerificationCodeAsync(sendVerificationCodeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendVerificationCodeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthSendVerificationCodePostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthSendVerificationCodePostApiResponse> SendVerificationCodeAsync(Option<SendVerificationCodeRequest> sendVerificationCodeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAuthSendVerificationCodePost(sendVerificationCodeRequest);

                FormatAuthSendVerificationCodePost(sendVerificationCodeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Auth/send-verification-code";

                    if (sendVerificationCodeRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (sendVerificationCodeRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sendVerificationCodeRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        AuthClientAuthSendVerificationCodePostApiResponse apiResponseLocalVar = new AuthClientAuthSendVerificationCodePostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Auth/send-verification-code", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAuthSendVerificationCodePostDefaultImplementation(apiResponseLocalVar, sendVerificationCodeRequest);

                        Events.ExecuteOnAuthSendVerificationCodePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthSendVerificationCodePostDefaultImplementation(e, "/Auth/send-verification-code", uriBuilderLocalVar.Path, sendVerificationCodeRequest);
                Events.ExecuteOnErrorAuthSendVerificationCodePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IAuthClientAuthSendVerificationCodePostApiResponse"/>
        /// </summary>
        internal interface IAuthClientAuthSendVerificationCodePostApiResponse : Simplic.OxS.SDK.__IApiResponse
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
        }

        /// <summary>
        /// The <see cref="AuthClientAuthSendVerificationCodePostApiResponse"/>
        /// </summary>
        internal partial class AuthClientAuthSendVerificationCodePostApiResponse : Simplic.OxS.SDK.__ApiResponse, IAuthClientAuthSendVerificationCodePostApiResponse
        {
            /// <summary>
            /// The <see cref="AuthClientAuthSendVerificationCodePostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthClientAuthSendVerificationCodePostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAuthVerifyMailPost(Option<VerifyMailRequest> verifyMailRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="verifyMailRequest"></param>
        /// <returns></returns>
        private void ValidateAuthVerifyMailPost(Option<VerifyMailRequest> verifyMailRequest)
        {
            if (verifyMailRequest.IsSet && verifyMailRequest.Value == null)
                throw new ArgumentNullException(nameof(verifyMailRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="verifyMailRequest"></param>
        private void AfterAuthVerifyMailPostDefaultImplementation(__AuthClient.IAuthClientAuthVerifyMailPostApiResponse apiResponseLocalVar, Option<VerifyMailRequest> verifyMailRequest)
        {
            bool suppressDefaultLog = false;
            AfterAuthVerifyMailPost(ref suppressDefaultLog, apiResponseLocalVar, verifyMailRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="verifyMailRequest"></param>
        partial void AfterAuthVerifyMailPost(ref bool suppressDefaultLog, __AuthClient.IAuthClientAuthVerifyMailPostApiResponse apiResponseLocalVar, Option<VerifyMailRequest> verifyMailRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="verifyMailRequest"></param>
        private void OnErrorAuthVerifyMailPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<VerifyMailRequest> verifyMailRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorAuthVerifyMailPost(ref suppressDefaultLog, exception, pathFormat, path, verifyMailRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="verifyMailRequest"></param>
        partial void OnErrorAuthVerifyMailPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<VerifyMailRequest> verifyMailRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthVerifyMailPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthVerifyMailPostApiResponse?> VerifyMailOrDefaultAsync(Option<VerifyMailRequest> verifyMailRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifyMailAsync(verifyMailRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthVerifyMailPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthVerifyMailPostApiResponse> VerifyMailAsync(Option<VerifyMailRequest> verifyMailRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAuthVerifyMailPost(verifyMailRequest);

                FormatAuthVerifyMailPost(verifyMailRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Auth/verify-mail";

                    if (verifyMailRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (verifyMailRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(verifyMailRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        AuthClientAuthVerifyMailPostApiResponse apiResponseLocalVar = new AuthClientAuthVerifyMailPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Auth/verify-mail", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAuthVerifyMailPostDefaultImplementation(apiResponseLocalVar, verifyMailRequest);

                        Events.ExecuteOnAuthVerifyMailPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthVerifyMailPostDefaultImplementation(e, "/Auth/verify-mail", uriBuilderLocalVar.Path, verifyMailRequest);
                Events.ExecuteOnErrorAuthVerifyMailPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IAuthClientAuthVerifyMailPostApiResponse"/>
        /// </summary>
        internal interface IAuthClientAuthVerifyMailPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IBadRequest<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
        }

        /// <summary>
        /// The <see cref="AuthClientAuthVerifyMailPostApiResponse"/>
        /// </summary>
        internal partial class AuthClientAuthVerifyMailPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IAuthClientAuthVerifyMailPostApiResponse
        {
            /// <summary>
            /// The <see cref="AuthClientAuthVerifyMailPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthClientAuthVerifyMailPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAuthVerifyTwoFactorPost(Option<TwoFactorRequest> twoFactorRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="twoFactorRequest"></param>
        /// <returns></returns>
        private void ValidateAuthVerifyTwoFactorPost(Option<TwoFactorRequest> twoFactorRequest)
        {
            if (twoFactorRequest.IsSet && twoFactorRequest.Value == null)
                throw new ArgumentNullException(nameof(twoFactorRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="twoFactorRequest"></param>
        private void AfterAuthVerifyTwoFactorPostDefaultImplementation(__AuthClient.IAuthClientAuthVerifyTwoFactorPostApiResponse apiResponseLocalVar, Option<TwoFactorRequest> twoFactorRequest)
        {
            bool suppressDefaultLog = false;
            AfterAuthVerifyTwoFactorPost(ref suppressDefaultLog, apiResponseLocalVar, twoFactorRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="twoFactorRequest"></param>
        partial void AfterAuthVerifyTwoFactorPost(ref bool suppressDefaultLog, __AuthClient.IAuthClientAuthVerifyTwoFactorPostApiResponse apiResponseLocalVar, Option<TwoFactorRequest> twoFactorRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="twoFactorRequest"></param>
        private void OnErrorAuthVerifyTwoFactorPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<TwoFactorRequest> twoFactorRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorAuthVerifyTwoFactorPost(ref suppressDefaultLog, exception, pathFormat, path, twoFactorRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="twoFactorRequest"></param>
        partial void OnErrorAuthVerifyTwoFactorPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<TwoFactorRequest> twoFactorRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthVerifyTwoFactorPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthVerifyTwoFactorPostApiResponse?> VerifyTwoFactorOrDefaultAsync(Option<TwoFactorRequest> twoFactorRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifyTwoFactorAsync(twoFactorRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="twoFactorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__AuthClient.IAuthClientAuthVerifyTwoFactorPostApiResponse"/>&gt;</returns>
        public async Task<__AuthClient.IAuthClientAuthVerifyTwoFactorPostApiResponse> VerifyTwoFactorAsync(Option<TwoFactorRequest> twoFactorRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAuthVerifyTwoFactorPost(twoFactorRequest);

                FormatAuthVerifyTwoFactorPost(twoFactorRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Auth/verify-two-factor";

                    if (twoFactorRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (twoFactorRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(twoFactorRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        AuthClientAuthVerifyTwoFactorPostApiResponse apiResponseLocalVar = new AuthClientAuthVerifyTwoFactorPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Auth/verify-two-factor", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAuthVerifyTwoFactorPostDefaultImplementation(apiResponseLocalVar, twoFactorRequest);

                        Events.ExecuteOnAuthVerifyTwoFactorPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthVerifyTwoFactorPostDefaultImplementation(e, "/Auth/verify-two-factor", uriBuilderLocalVar.Path, twoFactorRequest);
                Events.ExecuteOnErrorAuthVerifyTwoFactorPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IAuthClientAuthVerifyTwoFactorPostApiResponse"/>
        /// </summary>
        internal interface IAuthClientAuthVerifyTwoFactorPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<TwoFactorResponse>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
        }

        /// <summary>
        /// The <see cref="AuthClientAuthVerifyTwoFactorPostApiResponse"/>
        /// </summary>
        internal partial class AuthClientAuthVerifyTwoFactorPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IAuthClientAuthVerifyTwoFactorPostApiResponse
        {
            /// <summary>
            /// The <see cref="AuthClientAuthVerifyTwoFactorPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthClientAuthVerifyTwoFactorPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public TwoFactorResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwoFactorResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out TwoFactorResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
