/*
 * Simplic.OxS.sensor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Sensor
{
    /// <summary>
    /// PatchSensorResponse
    /// </summary>
    [DataContract(Name = "PatchSensorResponse")]
    public partial class PatchSensorResponse : IEquatable<PatchSensorResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public State? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchSensorResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="tagId">tagId.</param>
        /// <param name="organizationSite">organizationSite.</param>
        /// <param name="location">location.</param>
        /// <param name="state">state.</param>
        /// <param name="properties">properties.</param>
        /// <param name="manufacturer">manufacturer.</param>
        /// <param name="notes">notes.</param>
        /// <param name="notificationTeamId">notificationTeamId.</param>
        public PatchSensorResponse(Guid id = default(Guid), string name = default(string), SensorTypeReference type = default(SensorTypeReference), string tagId = default(string), OrganizationSite organizationSite = default(OrganizationSite), Location location = default(Location), State? state = default(State?), List<Property> properties = default(List<Property>), string manufacturer = default(string), string notes = default(string), Guid? notificationTeamId = default(Guid?))
        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.TagId = tagId;
            this.OrganizationSite = organizationSite;
            this.Location = location;
            this.State = state;
            this.Properties = properties;
            this.Manufacturer = manufacturer;
            this.Notes = notes;
            this.NotificationTeamId = notificationTeamId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public SensorTypeReference Type { get; set; }

        /// <summary>
        /// Gets or Sets TagId
        /// </summary>
        [DataMember(Name = "tagId", EmitDefaultValue = true)]
        public string TagId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationSite
        /// </summary>
        [DataMember(Name = "organizationSite", EmitDefaultValue = false)]
        public OrganizationSite OrganizationSite { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public List<Property> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name = "manufacturer", EmitDefaultValue = true)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets NotificationTeamId
        /// </summary>
        [DataMember(Name = "notificationTeamId", EmitDefaultValue = true)]
        public Guid? NotificationTeamId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchSensorResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TagId: ").Append(TagId).Append("\n");
            sb.Append("  OrganizationSite: ").Append(OrganizationSite).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  NotificationTeamId: ").Append(NotificationTeamId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatchSensorResponse);
        }

        /// <summary>
        /// Returns true if PatchSensorResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PatchSensorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchSensorResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TagId == input.TagId ||
                    (this.TagId != null &&
                    this.TagId.Equals(input.TagId))
                ) && 
                (
                    this.OrganizationSite == input.OrganizationSite ||
                    (this.OrganizationSite != null &&
                    this.OrganizationSite.Equals(input.OrganizationSite))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.NotificationTeamId == input.NotificationTeamId ||
                    (this.NotificationTeamId != null &&
                    this.NotificationTeamId.Equals(input.NotificationTeamId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.TagId != null)
                {
                    hashCode = (hashCode * 59) + this.TagId.GetHashCode();
                }
                if (this.OrganizationSite != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationSite.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Manufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.Manufacturer.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.NotificationTeamId != null)
                {
                    hashCode = (hashCode * 59) + this.NotificationTeamId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
