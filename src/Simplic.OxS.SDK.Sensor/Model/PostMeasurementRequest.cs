/*
 * Simplic.OxS.sensor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Sensor
{
    /// <summary>
    /// PostMeasurementRequest
    /// </summary>
    [DataContract(Name = "PostMeasurementRequest")]
    public partial class PostMeasurementRequest : IEquatable<PostMeasurementRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostMeasurementRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostMeasurementRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostMeasurementRequest" /> class.
        /// </summary>
        /// <param name="dateTime">dateTime (required).</param>
        /// <param name="values">values (required).</param>
        public PostMeasurementRequest(DateTime dateTime = default(DateTime), List<MeasurementValue> values = default(List<MeasurementValue>))
        {
            this.DateTime = dateTime;
            // to ensure "values" is required (not null)
            if (values == null)
            {
                throw new ArgumentNullException("values is a required property for PostMeasurementRequest and cannot be null");
            }
            this.Values = values;
        }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name = "dateTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", IsRequired = true, EmitDefaultValue = true)]
        public List<MeasurementValue> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostMeasurementRequest {\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostMeasurementRequest);
        }

        /// <summary>
        /// Returns true if PostMeasurementRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostMeasurementRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostMeasurementRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
