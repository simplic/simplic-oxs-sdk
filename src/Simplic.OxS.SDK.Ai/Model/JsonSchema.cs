/*
 * Simplic.OxS.ai
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Ai
{
    /// <summary>
    /// JsonSchema
    /// </summary>
    [DataContract(Name = "JsonSchema")]
    public partial class JsonSchema : IEquatable<JsonSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonSchema" /> class.
        /// </summary>
        /// <param name="schema">schema.</param>
        /// <param name="title">title.</param>
        /// <param name="type">type.</param>
        /// <param name="singleType">singleType.</param>
        /// <param name="description">description.</param>
        /// <param name="format">format.</param>
        /// <param name="varRef">varRef.</param>
        /// <param name="varEnum">varEnum.</param>
        /// <param name="varConst">varConst.</param>
        /// <param name="properties">properties.</param>
        /// <param name="required">required.</param>
        /// <param name="additionalProperties">additionalProperties.</param>
        /// <param name="items">items.</param>
        /// <param name="prefixItems">prefixItems.</param>
        /// <param name="minItems">minItems.</param>
        /// <param name="maxItems">maxItems.</param>
        public JsonSchema(string schema = default(string), string title = default(string), List<string> type = default(List<string>), string singleType = default(string), string description = default(string), string format = default(string), string varRef = default(string), List<string> varEnum = default(List<string>), Object varConst = default(Object), Dictionary<string, JsonSchema> properties = default(Dictionary<string, JsonSchema>), List<string> required = default(List<string>), JsonSchema additionalProperties = default(JsonSchema), JsonSchema items = default(JsonSchema), List<JsonSchema> prefixItems = default(List<JsonSchema>), int? minItems = default(int?), int? maxItems = default(int?))
        {
            this.Schema = schema;
            this.Title = title;
            this.Type = type;
            this.SingleType = singleType;
            this.Description = description;
            this.Format = format;
            this.VarRef = varRef;
            this.VarEnum = varEnum;
            this.VarConst = varConst;
            this.Properties = properties;
            this.Required = required;
            this.AdditionalProperties = additionalProperties;
            this.Items = items;
            this.PrefixItems = prefixItems;
            this.MinItems = minItems;
            this.MaxItems = maxItems;
        }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = true)]
        public string Schema { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public List<string> Type { get; set; }

        /// <summary>
        /// Gets or Sets SingleType
        /// </summary>
        [DataMember(Name = "singleType", EmitDefaultValue = true)]
        public string SingleType { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", EmitDefaultValue = true)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets VarRef
        /// </summary>
        [DataMember(Name = "ref", EmitDefaultValue = true)]
        public string VarRef { get; set; }

        /// <summary>
        /// Gets or Sets VarEnum
        /// </summary>
        [DataMember(Name = "enum", EmitDefaultValue = true)]
        public List<string> VarEnum { get; set; }

        /// <summary>
        /// Gets or Sets VarConst
        /// </summary>
        [DataMember(Name = "const", EmitDefaultValue = true)]
        public Object VarConst { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, JsonSchema> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public List<string> Required { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalProperties
        /// </summary>
        [DataMember(Name = "additionalProperties", EmitDefaultValue = false)]
        public JsonSchema AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public JsonSchema Items { get; set; }

        /// <summary>
        /// Gets or Sets PrefixItems
        /// </summary>
        [DataMember(Name = "prefixItems", EmitDefaultValue = true)]
        public List<JsonSchema> PrefixItems { get; set; }

        /// <summary>
        /// Gets or Sets MinItems
        /// </summary>
        [DataMember(Name = "minItems", EmitDefaultValue = true)]
        public int? MinItems { get; set; }

        /// <summary>
        /// Gets or Sets MaxItems
        /// </summary>
        [DataMember(Name = "maxItems", EmitDefaultValue = true)]
        public int? MaxItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JsonSchema {\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SingleType: ").Append(SingleType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  VarRef: ").Append(VarRef).Append("\n");
            sb.Append("  VarEnum: ").Append(VarEnum).Append("\n");
            sb.Append("  VarConst: ").Append(VarConst).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  PrefixItems: ").Append(PrefixItems).Append("\n");
            sb.Append("  MinItems: ").Append(MinItems).Append("\n");
            sb.Append("  MaxItems: ").Append(MaxItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonSchema);
        }

        /// <summary>
        /// Returns true if JsonSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonSchema input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Schema == input.Schema ||
                    (this.Schema != null &&
                    this.Schema.Equals(input.Schema))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type != null &&
                    input.Type != null &&
                    this.Type.SequenceEqual(input.Type)
                ) && 
                (
                    this.SingleType == input.SingleType ||
                    (this.SingleType != null &&
                    this.SingleType.Equals(input.SingleType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.VarRef == input.VarRef ||
                    (this.VarRef != null &&
                    this.VarRef.Equals(input.VarRef))
                ) && 
                (
                    this.VarEnum == input.VarEnum ||
                    this.VarEnum != null &&
                    input.VarEnum != null &&
                    this.VarEnum.SequenceEqual(input.VarEnum)
                ) && 
                (
                    this.VarConst == input.VarConst ||
                    (this.VarConst != null &&
                    this.VarConst.Equals(input.VarConst))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required != null &&
                    input.Required != null &&
                    this.Required.SequenceEqual(input.Required)
                ) && 
                (
                    this.AdditionalProperties == input.AdditionalProperties ||
                    (this.AdditionalProperties != null &&
                    this.AdditionalProperties.Equals(input.AdditionalProperties))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.PrefixItems == input.PrefixItems ||
                    this.PrefixItems != null &&
                    input.PrefixItems != null &&
                    this.PrefixItems.SequenceEqual(input.PrefixItems)
                ) && 
                (
                    this.MinItems == input.MinItems ||
                    (this.MinItems != null &&
                    this.MinItems.Equals(input.MinItems))
                ) && 
                (
                    this.MaxItems == input.MaxItems ||
                    (this.MaxItems != null &&
                    this.MaxItems.Equals(input.MaxItems))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Schema != null)
                {
                    hashCode = (hashCode * 59) + this.Schema.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.SingleType != null)
                {
                    hashCode = (hashCode * 59) + this.SingleType.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Format != null)
                {
                    hashCode = (hashCode * 59) + this.Format.GetHashCode();
                }
                if (this.VarRef != null)
                {
                    hashCode = (hashCode * 59) + this.VarRef.GetHashCode();
                }
                if (this.VarEnum != null)
                {
                    hashCode = (hashCode * 59) + this.VarEnum.GetHashCode();
                }
                if (this.VarConst != null)
                {
                    hashCode = (hashCode * 59) + this.VarConst.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Required != null)
                {
                    hashCode = (hashCode * 59) + this.Required.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                if (this.PrefixItems != null)
                {
                    hashCode = (hashCode * 59) + this.PrefixItems.GetHashCode();
                }
                if (this.MinItems != null)
                {
                    hashCode = (hashCode * 59) + this.MinItems.GetHashCode();
                }
                if (this.MaxItems != null)
                {
                    hashCode = (hashCode * 59) + this.MaxItems.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
