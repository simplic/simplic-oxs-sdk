/*
 * Simplic.OxS.ai
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Ai
{
    /// <summary>
    /// ServiceObject
    /// </summary>
    [DataContract(Name = "ServiceObject")]
    public partial class ServiceObject : IEquatable<ServiceObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="baseUrl">baseUrl.</param>
        /// <param name="swaggerJsonUrl">swaggerJsonUrl.</param>
        /// <param name="modelDefinitionUrl">modelDefinitionUrl.</param>
        /// <param name="type">type.</param>
        /// <param name="contract">contract.</param>
        public ServiceObject(string name = default(string), string varVersion = default(string), string baseUrl = default(string), string swaggerJsonUrl = default(string), string modelDefinitionUrl = default(string), string type = default(string), ServiceContract contract = default(ServiceContract))
        {
            this.Name = name;
            this.VarVersion = varVersion;
            this.BaseUrl = baseUrl;
            this.SwaggerJsonUrl = swaggerJsonUrl;
            this.ModelDefinitionUrl = modelDefinitionUrl;
            this.Type = type;
            this.Contract = contract;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets BaseUrl
        /// </summary>
        [DataMember(Name = "baseUrl", EmitDefaultValue = true)]
        public string BaseUrl { get; set; }

        /// <summary>
        /// Gets or Sets SwaggerJsonUrl
        /// </summary>
        [DataMember(Name = "swaggerJsonUrl", EmitDefaultValue = true)]
        public string SwaggerJsonUrl { get; set; }

        /// <summary>
        /// Gets or Sets ModelDefinitionUrl
        /// </summary>
        [DataMember(Name = "modelDefinitionUrl", EmitDefaultValue = true)]
        public string ModelDefinitionUrl { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [DataMember(Name = "contract", EmitDefaultValue = false)]
        public ServiceContract Contract { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceObject {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  BaseUrl: ").Append(BaseUrl).Append("\n");
            sb.Append("  SwaggerJsonUrl: ").Append(SwaggerJsonUrl).Append("\n");
            sb.Append("  ModelDefinitionUrl: ").Append(ModelDefinitionUrl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceObject);
        }

        /// <summary>
        /// Returns true if ServiceObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.BaseUrl == input.BaseUrl ||
                    (this.BaseUrl != null &&
                    this.BaseUrl.Equals(input.BaseUrl))
                ) && 
                (
                    this.SwaggerJsonUrl == input.SwaggerJsonUrl ||
                    (this.SwaggerJsonUrl != null &&
                    this.SwaggerJsonUrl.Equals(input.SwaggerJsonUrl))
                ) && 
                (
                    this.ModelDefinitionUrl == input.ModelDefinitionUrl ||
                    (this.ModelDefinitionUrl != null &&
                    this.ModelDefinitionUrl.Equals(input.ModelDefinitionUrl))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.BaseUrl != null)
                {
                    hashCode = (hashCode * 59) + this.BaseUrl.GetHashCode();
                }
                if (this.SwaggerJsonUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SwaggerJsonUrl.GetHashCode();
                }
                if (this.ModelDefinitionUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ModelDefinitionUrl.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Contract != null)
                {
                    hashCode = (hashCode * 59) + this.Contract.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
