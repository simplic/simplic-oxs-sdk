/*
 * Simplic.OxS.ai
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Ai
{
    /// <summary>
    /// Represents an llm task
    /// </summary>
    [DataContract(Name = "LLMTaskResponse")]
    public partial class LLMTaskResponse : IEquatable<LLMTaskResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LLMTaskResponse" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id of the task.</param>
        /// <param name="name">Gets or sets the name of the task.</param>
        /// <param name="reason">Gets or sets the reason that will be used from a llm, to use this task.</param>
        /// <param name="requires">Gets or sets the required information, to use this task.</param>
        /// <param name="definition">definition.</param>
        /// <param name="optionalSubtask">Gets or sets subtask, which should be included automatically.</param>
        public LLMTaskResponse(Guid id = default(Guid), string name = default(string), string reason = default(string), string requires = default(string), LLMTaskDefinitionModel definition = default(LLMTaskDefinitionModel), List<string> optionalSubtask = default(List<string>))
        {
            this.Id = id;
            this.Name = name;
            this.Reason = reason;
            this.Requires = requires;
            this.Definition = definition;
            this.OptionalSubtask = optionalSubtask;
        }

        /// <summary>
        /// Gets or sets the id of the task
        /// </summary>
        /// <value>Gets or sets the id of the task</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the task
        /// </summary>
        /// <value>Gets or sets the name of the task</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the reason that will be used from a llm, to use this task
        /// </summary>
        /// <value>Gets or sets the reason that will be used from a llm, to use this task</value>
        [DataMember(Name = "reason", EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or sets the required information, to use this task
        /// </summary>
        /// <value>Gets or sets the required information, to use this task</value>
        [DataMember(Name = "requires", EmitDefaultValue = true)]
        public string Requires { get; set; }

        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name = "definition", EmitDefaultValue = false)]
        public LLMTaskDefinitionModel Definition { get; set; }

        /// <summary>
        /// Gets or sets subtask, which should be included automatically
        /// </summary>
        /// <value>Gets or sets subtask, which should be included automatically</value>
        [DataMember(Name = "optionalSubtask", EmitDefaultValue = true)]
        public List<string> OptionalSubtask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LLMTaskResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Requires: ").Append(Requires).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  OptionalSubtask: ").Append(OptionalSubtask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LLMTaskResponse);
        }

        /// <summary>
        /// Returns true if LLMTaskResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LLMTaskResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LLMTaskResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Requires == input.Requires ||
                    (this.Requires != null &&
                    this.Requires.Equals(input.Requires))
                ) && 
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                ) && 
                (
                    this.OptionalSubtask == input.OptionalSubtask ||
                    this.OptionalSubtask != null &&
                    input.OptionalSubtask != null &&
                    this.OptionalSubtask.SequenceEqual(input.OptionalSubtask)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.Requires != null)
                {
                    hashCode = (hashCode * 59) + this.Requires.GetHashCode();
                }
                if (this.Definition != null)
                {
                    hashCode = (hashCode * 59) + this.Definition.GetHashCode();
                }
                if (this.OptionalSubtask != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalSubtask.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
