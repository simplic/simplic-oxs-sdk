/*
 * Simplic.OxS.ai
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Ai
{
    /// <summary>
    /// Represents an request to classify a text async.
    /// </summary>
    [DataContract(Name = "ClassifyTextAsyncRequest")]
    public partial class ClassifyTextAsyncRequest : IEquatable<ClassifyTextAsyncRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassifyTextAsyncRequest" /> class.
        /// </summary>
        /// <param name="modelId">Gets or sets the id of the model, which will be used..</param>
        /// <param name="text">Gets or sets the text to classify.</param>
        public ClassifyTextAsyncRequest(Guid modelId = default(Guid), string text = default(string))
        {
            this.ModelId = modelId;
            this.Text = text;
        }

        /// <summary>
        /// Gets or sets the id of the model, which will be used.
        /// </summary>
        /// <value>Gets or sets the id of the model, which will be used.</value>
        [DataMember(Name = "modelId", EmitDefaultValue = false)]
        public Guid ModelId { get; set; }

        /// <summary>
        /// Gets or sets the text to classify
        /// </summary>
        /// <value>Gets or sets the text to classify</value>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClassifyTextAsyncRequest {\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClassifyTextAsyncRequest);
        }

        /// <summary>
        /// Returns true if ClassifyTextAsyncRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ClassifyTextAsyncRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClassifyTextAsyncRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ModelId != null)
                {
                    hashCode = (hashCode * 59) + this.ModelId.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
