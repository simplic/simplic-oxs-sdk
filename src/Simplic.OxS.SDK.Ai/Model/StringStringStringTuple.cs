/*
 * Simplic.OxS.ai
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Ai
{
    /// <summary>
    /// StringStringStringTuple
    /// </summary>
    [DataContract(Name = "StringStringStringTuple")]
    public partial class StringStringStringTuple : IEquatable<StringStringStringTuple>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StringStringStringTuple" /> class.
        /// </summary>
        /// <param name="item1">item1.</param>
        /// <param name="item2">item2.</param>
        /// <param name="item3">item3.</param>
        public StringStringStringTuple(string item1 = default(string), string item2 = default(string), string item3 = default(string))
        {
            this.Item1 = item1;
            this.Item2 = item2;
            this.Item3 = item3;
        }

        /// <summary>
        /// Gets or Sets Item1
        /// </summary>
        [DataMember(Name = "item1", EmitDefaultValue = true)]
        public string Item1 { get; set; }

        /// <summary>
        /// Gets or Sets Item2
        /// </summary>
        [DataMember(Name = "item2", EmitDefaultValue = true)]
        public string Item2 { get; set; }

        /// <summary>
        /// Gets or Sets Item3
        /// </summary>
        [DataMember(Name = "item3", EmitDefaultValue = true)]
        public string Item3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StringStringStringTuple {\n");
            sb.Append("  Item1: ").Append(Item1).Append("\n");
            sb.Append("  Item2: ").Append(Item2).Append("\n");
            sb.Append("  Item3: ").Append(Item3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StringStringStringTuple);
        }

        /// <summary>
        /// Returns true if StringStringStringTuple instances are equal
        /// </summary>
        /// <param name="input">Instance of StringStringStringTuple to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StringStringStringTuple input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Item1 == input.Item1 ||
                    (this.Item1 != null &&
                    this.Item1.Equals(input.Item1))
                ) && 
                (
                    this.Item2 == input.Item2 ||
                    (this.Item2 != null &&
                    this.Item2.Equals(input.Item2))
                ) && 
                (
                    this.Item3 == input.Item3 ||
                    (this.Item3 != null &&
                    this.Item3.Equals(input.Item3))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Item1 != null)
                {
                    hashCode = (hashCode * 59) + this.Item1.GetHashCode();
                }
                if (this.Item2 != null)
                {
                    hashCode = (hashCode * 59) + this.Item2.GetHashCode();
                }
                if (this.Item3 != null)
                {
                    hashCode = (hashCode * 59) + this.Item3.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
