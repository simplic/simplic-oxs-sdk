/*
 * Simplic.OxS.ai
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Ai
{
    /// <summary>
    /// SetEndpointContractRequest
    /// </summary>
    [DataContract(Name = "SetEndpointContractRequest")]
    public partial class SetEndpointContractRequest : IEquatable<SetEndpointContractRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetEndpointContractRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetEndpointContractRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetEndpointContractRequest" /> class.
        /// </summary>
        /// <param name="contractName">contractName (required).</param>
        /// <param name="endpoint">endpoint (required).</param>
        public SetEndpointContractRequest(string contractName = default(string), string endpoint = default(string))
        {
            // to ensure "contractName" is required (not null)
            if (contractName == null)
            {
                throw new ArgumentNullException("contractName is a required property for SetEndpointContractRequest and cannot be null");
            }
            this.ContractName = contractName;
            // to ensure "endpoint" is required (not null)
            if (endpoint == null)
            {
                throw new ArgumentNullException("endpoint is a required property for SetEndpointContractRequest and cannot be null");
            }
            this.Endpoint = endpoint;
        }

        /// <summary>
        /// Gets or Sets ContractName
        /// </summary>
        [DataMember(Name = "contractName", IsRequired = true, EmitDefaultValue = true)]
        public string ContractName { get; set; }

        /// <summary>
        /// Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", IsRequired = true, EmitDefaultValue = true)]
        public string Endpoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetEndpointContractRequest {\n");
            sb.Append("  ContractName: ").Append(ContractName).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetEndpointContractRequest);
        }

        /// <summary>
        /// Returns true if SetEndpointContractRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SetEndpointContractRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetEndpointContractRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContractName == input.ContractName ||
                    (this.ContractName != null &&
                    this.ContractName.Equals(input.ContractName))
                ) && 
                (
                    this.Endpoint == input.Endpoint ||
                    (this.Endpoint != null &&
                    this.Endpoint.Equals(input.Endpoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractName != null)
                {
                    hashCode = (hashCode * 59) + this.ContractName.GetHashCode();
                }
                if (this.Endpoint != null)
                {
                    hashCode = (hashCode * 59) + this.Endpoint.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContractName (string) minLength
            if (this.ContractName != null && this.ContractName.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContractName, length must be greater than 5.", new [] { "ContractName" });
            }

            // Endpoint (string) minLength
            if (this.Endpoint != null && this.Endpoint.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Endpoint, length must be greater than 5.", new [] { "Endpoint" });
            }

            yield break;
        }
    }

}
