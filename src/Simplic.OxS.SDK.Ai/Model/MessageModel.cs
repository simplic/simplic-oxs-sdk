/*
 * Simplic.OxS.ai
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Ai
{
    /// <summary>
    /// Represents a conversation message
    /// </summary>
    [DataContract(Name = "MessageModel")]
    public partial class MessageModel : IEquatable<MessageModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public MessageType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the message id.</param>
        /// <param name="senderId">Gets or sets the sender. Ox user id, null for llm model.</param>
        /// <param name="dateTime">Gets or sets the datetime the message was created.</param>
        /// <param name="body">Gets or sets the message body.</param>
        /// <param name="modelReference">Gets or sets an optional model reference for the message.</param>
        /// <param name="type">type.</param>
        public MessageModel(Guid id = default(Guid), Guid? senderId = default(Guid?), DateTime dateTime = default(DateTime), string body = default(string), string modelReference = default(string), MessageType? type = default(MessageType?))
        {
            this.Id = id;
            this.SenderId = senderId;
            this.DateTime = dateTime;
            this.Body = body;
            this.ModelReference = modelReference;
            this.Type = type;
        }

        /// <summary>
        /// Gets or sets the message id
        /// </summary>
        /// <value>Gets or sets the message id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the sender. Ox user id, null for llm model
        /// </summary>
        /// <value>Gets or sets the sender. Ox user id, null for llm model</value>
        [DataMember(Name = "senderId", EmitDefaultValue = true)]
        public Guid? SenderId { get; set; }

        /// <summary>
        /// Gets or sets the datetime the message was created
        /// </summary>
        /// <value>Gets or sets the datetime the message was created</value>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Gets or sets the message body
        /// </summary>
        /// <value>Gets or sets the message body</value>
        [DataMember(Name = "body", EmitDefaultValue = true)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or sets an optional model reference for the message
        /// </summary>
        /// <value>Gets or sets an optional model reference for the message</value>
        [DataMember(Name = "modelReference", EmitDefaultValue = true)]
        public string ModelReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  ModelReference: ").Append(ModelReference).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageModel);
        }

        /// <summary>
        /// Returns true if MessageModel instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SenderId == input.SenderId ||
                    (this.SenderId != null &&
                    this.SenderId.Equals(input.SenderId))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.ModelReference == input.ModelReference ||
                    (this.ModelReference != null &&
                    this.ModelReference.Equals(input.ModelReference))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.SenderId != null)
                {
                    hashCode = (hashCode * 59) + this.SenderId.GetHashCode();
                }
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                if (this.ModelReference != null)
                {
                    hashCode = (hashCode * 59) + this.ModelReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
