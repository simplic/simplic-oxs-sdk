/*
 * Simplic.OxS.Article
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;

namespace Simplic.OxS.SDK.Article
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArticleClientSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleModel</returns>
        ArticleModel GetArticleBy(string? barcode = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleModel</returns>
        ApiResponse<ArticleModel> GetArticleByWithHttpInfo(string? barcode = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleNumber"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleModel</returns>
        ArticleModel GetArticleByNumber(string? articleNumber = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleNumber"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleModel</returns>
        ApiResponse<ArticleModel> GetArticleByNumberWithHttpInfo(string? articleNumber = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleModel&gt;</returns>
        List<ArticleModel> GetArticlesByGroupid(Guid? groupId = default(Guid?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleModel&gt;</returns>
        ApiResponse<List<ArticleModel>> GetArticlesByGroupidWithHttpInfo(Guid? groupId = default(Guid?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchName"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleModel&gt;</returns>
        List<ArticleModel> GetArticlesByName(string? searchName = default(string?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchName"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleModel&gt;</returns>
        ApiResponse<List<ArticleModel>> GetArticlesByNameWithHttpInfo(string? searchName = default(string?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ArticleIdDelete(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleModel</returns>
        ArticleModel Get(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleModel</returns>
        ApiResponse<ArticleModel> GetWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleModel</returns>
        ArticleModel Put(Guid id, UpdateArticleRequest? updateArticleRequest = default(UpdateArticleRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleModel</returns>
        ApiResponse<ArticleModel> PutWithHttpInfo(Guid id, UpdateArticleRequest? updateArticleRequest = default(UpdateArticleRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleModel</returns>
        ArticleModel Post(CreateArticleRequest? createArticleRequest = default(CreateArticleRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleModel</returns>
        ApiResponse<ArticleModel> PostWithHttpInfo(CreateArticleRequest? createArticleRequest = default(CreateArticleRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArticleClientAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleModel</returns>
        System.Threading.Tasks.Task<ArticleModel> GetArticleByAsync(string? barcode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleModel>> GetArticleByWithHttpInfoAsync(string? barcode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleNumber"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleModel</returns>
        System.Threading.Tasks.Task<ArticleModel> GetArticleByNumberAsync(string? articleNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleNumber"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleModel>> GetArticleByNumberWithHttpInfoAsync(string? articleNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleModel&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleModel>> GetArticlesByGroupidAsync(Guid? groupId = default(Guid?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleModel>>> GetArticlesByGroupidWithHttpInfoAsync(Guid? groupId = default(Guid?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchName"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleModel&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleModel>> GetArticlesByNameAsync(string? searchName = default(string?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchName"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleModel>>> GetArticlesByNameWithHttpInfoAsync(string? searchName = default(string?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleModel</returns>
        System.Threading.Tasks.Task<ArticleModel> GetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleModel>> GetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleModel</returns>
        System.Threading.Tasks.Task<ArticleModel> PutAsync(Guid id, UpdateArticleRequest? updateArticleRequest = default(UpdateArticleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleModel>> PutWithHttpInfoAsync(Guid id, UpdateArticleRequest? updateArticleRequest = default(UpdateArticleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleModel</returns>
        System.Threading.Tasks.Task<ArticleModel> PostAsync(CreateArticleRequest? createArticleRequest = default(CreateArticleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleModel>> PostWithHttpInfoAsync(CreateArticleRequest? createArticleRequest = default(CreateArticleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArticleClient : IArticleClientSync, IArticleClientAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArticleClient : IArticleClient
    {
        private Simplic.OxS.SDK.Article.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleClient"/> class.
        /// </summary>
        /// <returns></returns>
        public ArticleClient() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleClient"/> class.
        /// </summary>
        /// <returns></returns>
        public ArticleClient(string basePath)
        {
            this.Configuration = Simplic.OxS.SDK.Article.Configuration.MergeConfigurations(
                Simplic.OxS.SDK.Article.GlobalConfiguration.Instance,
                new Simplic.OxS.SDK.Article.Configuration { BasePath = basePath }
            );
            this.Client = new Simplic.OxS.SDK.Article.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Simplic.OxS.SDK.Article.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Simplic.OxS.SDK.Article.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleClient"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArticleClient(Simplic.OxS.SDK.Article.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Simplic.OxS.SDK.Article.Configuration.MergeConfigurations(
                Simplic.OxS.SDK.Article.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Simplic.OxS.SDK.Article.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Simplic.OxS.SDK.Article.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Simplic.OxS.SDK.Article.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleClient"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ArticleClient(Simplic.OxS.SDK.Article.ISynchronousClient client, Simplic.OxS.SDK.Article.IAsynchronousClient asyncClient, Simplic.OxS.SDK.Article.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Simplic.OxS.SDK.Article.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Simplic.OxS.SDK.Article.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Simplic.OxS.SDK.Article.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Simplic.OxS.SDK.Article.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Simplic.OxS.SDK.Article.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleModel</returns>
        public ArticleModel GetArticleBy(string? barcode = default(string?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> localVarResponse = GetArticleByWithHttpInfo(barcode);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleModel</returns>
        public Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> GetArticleByWithHttpInfo(string? barcode = default(string?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }

            localVarRequestOptions.Operation = "ArticleClient.GetArticleBy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArticleModel>("/Article/get-article-by-barcode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticleBy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleModel</returns>
        public async System.Threading.Tasks.Task<ArticleModel> GetArticleByAsync(string? barcode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> localVarResponse = await GetArticleByWithHttpInfoAsync(barcode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleModel)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Article.ApiResponse<ArticleModel>> GetArticleByWithHttpInfoAsync(string? barcode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }

            localVarRequestOptions.Operation = "ArticleClient.GetArticleBy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArticleModel>("/Article/get-article-by-barcode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticleBy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleNumber"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleModel</returns>
        public ArticleModel GetArticleByNumber(string? articleNumber = default(string?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> localVarResponse = GetArticleByNumberWithHttpInfo(articleNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleNumber"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleModel</returns>
        public Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> GetArticleByNumberWithHttpInfo(string? articleNumber = default(string?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (articleNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "articleNumber", articleNumber));
            }

            localVarRequestOptions.Operation = "ArticleClient.GetArticleByNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArticleModel>("/Article/get-article-by-number", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticleByNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleNumber"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleModel</returns>
        public async System.Threading.Tasks.Task<ArticleModel> GetArticleByNumberAsync(string? articleNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> localVarResponse = await GetArticleByNumberWithHttpInfoAsync(articleNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleNumber"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleModel)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Article.ApiResponse<ArticleModel>> GetArticleByNumberWithHttpInfoAsync(string? articleNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (articleNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "articleNumber", articleNumber));
            }

            localVarRequestOptions.Operation = "ArticleClient.GetArticleByNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArticleModel>("/Article/get-article-by-number", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticleByNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleModel&gt;</returns>
        public List<ArticleModel> GetArticlesByGroupid(Guid? groupId = default(Guid?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.ApiResponse<List<ArticleModel>> localVarResponse = GetArticlesByGroupidWithHttpInfo(groupId, skip, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleModel&gt;</returns>
        public Simplic.OxS.SDK.Article.ApiResponse<List<ArticleModel>> GetArticlesByGroupidWithHttpInfo(Guid? groupId = default(Guid?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ArticleClient.GetArticlesByGroupid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleModel>>("/Article/get-articles-by-groupid", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticlesByGroupid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleModel>> GetArticlesByGroupidAsync(Guid? groupId = default(Guid?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Article.ApiResponse<List<ArticleModel>> localVarResponse = await GetArticlesByGroupidWithHttpInfoAsync(groupId, skip, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleModel&gt;)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Article.ApiResponse<List<ArticleModel>>> GetArticlesByGroupidWithHttpInfoAsync(Guid? groupId = default(Guid?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ArticleClient.GetArticlesByGroupid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleModel>>("/Article/get-articles-by-groupid", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticlesByGroupid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchName"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleModel&gt;</returns>
        public List<ArticleModel> GetArticlesByName(string? searchName = default(string?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.ApiResponse<List<ArticleModel>> localVarResponse = GetArticlesByNameWithHttpInfo(searchName, skip, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchName"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleModel&gt;</returns>
        public Simplic.OxS.SDK.Article.ApiResponse<List<ArticleModel>> GetArticlesByNameWithHttpInfo(string? searchName = default(string?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (searchName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "searchName", searchName));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ArticleClient.GetArticlesByName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleModel>>("/Article/get-articles-by-name", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticlesByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchName"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleModel>> GetArticlesByNameAsync(string? searchName = default(string?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Article.ApiResponse<List<ArticleModel>> localVarResponse = await GetArticlesByNameWithHttpInfoAsync(searchName, skip, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchName"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleModel&gt;)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Article.ApiResponse<List<ArticleModel>>> GetArticlesByNameWithHttpInfoAsync(string? searchName = default(string?), int? skip = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (searchName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "searchName", searchName));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Article.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ArticleClient.GetArticlesByName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleModel>>("/Article/get-articles-by-name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticlesByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ArticleIdDelete(Guid id, int operationIndex = 0)
        {
            DeleteWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.Article.ApiResponse<Object> DeleteWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.Article.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ArticleClient.ArticleIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/Article/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArticleIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Article.ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.Article.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ArticleClient.ArticleIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/Article/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArticleIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleModel</returns>
        public ArticleModel Get(Guid id, int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> localVarResponse = GetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleModel</returns>
        public Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> GetWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.Article.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ArticleClient.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArticleModel>("/Article/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleModel</returns>
        public async System.Threading.Tasks.Task<ArticleModel> GetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> localVarResponse = await GetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleModel)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Article.ApiResponse<ArticleModel>> GetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.Article.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ArticleClient.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArticleModel>("/Article/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleModel</returns>
        public ArticleModel Put(Guid id, UpdateArticleRequest? updateArticleRequest = default(UpdateArticleRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> localVarResponse = PutWithHttpInfo(id, updateArticleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleModel</returns>
        public Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> PutWithHttpInfo(Guid id, UpdateArticleRequest? updateArticleRequest = default(UpdateArticleRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.Article.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateArticleRequest;

            localVarRequestOptions.Operation = "ArticleClient.Put";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ArticleModel>("/Article/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Put", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleModel</returns>
        public async System.Threading.Tasks.Task<ArticleModel> PutAsync(Guid id, UpdateArticleRequest? updateArticleRequest = default(UpdateArticleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> localVarResponse = await PutWithHttpInfoAsync(id, updateArticleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleModel)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Article.ApiResponse<ArticleModel>> PutWithHttpInfoAsync(Guid id, UpdateArticleRequest? updateArticleRequest = default(UpdateArticleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.Article.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateArticleRequest;

            localVarRequestOptions.Operation = "ArticleClient.Put";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ArticleModel>("/Article/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Put", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleModel</returns>
        public ArticleModel Post(CreateArticleRequest? createArticleRequest = default(CreateArticleRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> localVarResponse = PostWithHttpInfo(createArticleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleModel</returns>
        public Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> PostWithHttpInfo(CreateArticleRequest? createArticleRequest = default(CreateArticleRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createArticleRequest;

            localVarRequestOptions.Operation = "ArticleClient.Post";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ArticleModel>("/Article", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Post", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleModel</returns>
        public async System.Threading.Tasks.Task<ArticleModel> PostAsync(CreateArticleRequest? createArticleRequest = default(CreateArticleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Article.ApiResponse<ArticleModel> localVarResponse = await PostWithHttpInfoAsync(createArticleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Article.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createArticleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleModel)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Article.ApiResponse<ArticleModel>> PostWithHttpInfoAsync(CreateArticleRequest? createArticleRequest = default(CreateArticleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Article.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Article.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Article.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createArticleRequest;

            localVarRequestOptions.Operation = "ArticleClient.Post";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ArticleModel>("/Article", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Post", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
