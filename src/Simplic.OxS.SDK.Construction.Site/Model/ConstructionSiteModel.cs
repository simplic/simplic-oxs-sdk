// <auto-generated>
/*
 * Simplic.OxS.Construction-Site
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Construction.Site
{
    /// <summary>
    /// ConstructionSiteModel
    /// </summary>
    public partial class ConstructionSiteModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ConstructionSiteModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructionSiteModel" /> class.
        /// </summary>
        /// <param name="additionalInformation">additionalInformation</param>
        /// <param name="address">address</param>
        /// <param name="constructionTime">constructionTime</param>
        /// <param name="contactPerson">contactPerson</param>
        /// <param name="createDateTime">createDateTime</param>
        /// <param name="createUserId">createUserId</param>
        /// <param name="createUserName">createUserName</param>
        /// <param name="endDate">endDate</param>
        /// <param name="id">id</param>
        /// <param name="isDeleted">isDeleted</param>
        /// <param name="name">name</param>
        /// <param name="number">number</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="referenceNumber">referenceNumber</param>
        /// <param name="startDate">startDate</param>
        /// <param name="status">status</param>
        /// <param name="type">type</param>
        /// <param name="updateDateTime">updateDateTime</param>
        /// <param name="updateUserId">updateUserId</param>
        /// <param name="updateUserName">updateUserName</param>
        //[JsonConstructor]
        public ConstructionSiteModel(Option<string> additionalInformation = default, Option<AddressModel> address = default, Option<string> constructionTime = default, Option<AddressModel> contactPerson = default, Option<DateTime> createDateTime = default, Option<Guid> createUserId = default, Option<string> createUserName = default, Option<DateTime> endDate = default, Option<Guid> id = default, Option<bool> isDeleted = default, Option<string> name = default, Option<string> number = default, Option<Guid> organizationId = default, Option<string> referenceNumber = default, Option<DateTime> startDate = default, Option<ConstructionSiteStatusModel> status = default, Option<ConstructionSiteTypeModel> type = default, Option<DateTime> updateDateTime = default, Option<Guid> updateUserId = default, Option<string> updateUserName = default)
        {
            AdditionalInformationOption = additionalInformation;
            AddressOption = address;
            ConstructionTimeOption = constructionTime;
            ContactPersonOption = contactPerson;
            CreateDateTimeOption = createDateTime;
            CreateUserIdOption = createUserId;
            CreateUserNameOption = createUserName;
            EndDateOption = endDate;
            IdOption = id;
            IsDeletedOption = isDeleted;
            NameOption = name;
            NumberOption = number;
            OrganizationIdOption = organizationId;
            ReferenceNumberOption = referenceNumber;
            StartDateOption = startDate;
            StatusOption = status;
            TypeOption = type;
            UpdateDateTimeOption = updateDateTime;
            UpdateUserIdOption = updateUserId;
            UpdateUserNameOption = updateUserName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AdditionalInformation
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> AdditionalInformationOption { get; private set; }

        /// <summary>
        /// Gets or Sets AdditionalInformation
        /// </summary>
        [JsonPropertyName("additionalInformation")]
        public string? AdditionalInformation { get { return this. AdditionalInformationOption; } set { this.AdditionalInformationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public AddressModel? Address { get { return this. AddressOption; } set { this.AddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of ConstructionTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ConstructionTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ConstructionTime
        /// </summary>
        [JsonPropertyName("constructionTime")]
        public string? ConstructionTime { get { return this. ConstructionTimeOption; } set { this.ConstructionTimeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ContactPerson
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> ContactPersonOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContactPerson
        /// </summary>
        [JsonPropertyName("contactPerson")]
        public AddressModel? ContactPerson { get { return this. ContactPersonOption; } set { this.ContactPersonOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CreateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserId
        /// </summary>
        [JsonPropertyName("createUserId")]
        public Guid? CreateUserId { get { return this. CreateUserIdOption; } set { this.CreateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserName
        /// </summary>
        [JsonPropertyName("createUserName")]
        public string? CreateUserName { get { return this. CreateUserNameOption; } set { this.CreateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [JsonPropertyName("endDate")]
        public DateTime? EndDate { get { return this. EndDateOption; } set { this.EndDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of ReferenceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get { return this. ReferenceNumberOption; } set { this.ReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [JsonPropertyName("startDate")]
        public DateTime? StartDate { get { return this. StartDateOption; } set { this.StartDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ConstructionSiteStatusModel>))]
        public Option<ConstructionSiteStatusModel> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public ConstructionSiteStatusModel? Status { get { return this. StatusOption; } set { this.StatusOption = new Option<ConstructionSiteStatusModel>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ConstructionSiteTypeModel>))]
        public Option<ConstructionSiteTypeModel> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public ConstructionSiteTypeModel? Type { get { return this. TypeOption; } set { this.TypeOption = new Option<ConstructionSiteTypeModel>(value); } }

        /// <summary>
        /// Used to track the state of UpdateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UpdateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateDateTime
        /// </summary>
        [JsonPropertyName("updateDateTime")]
        public DateTime? UpdateDateTime { get { return this. UpdateDateTimeOption; } set { this.UpdateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UpdateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserId
        /// </summary>
        [JsonPropertyName("updateUserId")]
        public Guid? UpdateUserId { get { return this. UpdateUserIdOption; } set { this.UpdateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> UpdateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserName
        /// </summary>
        [JsonPropertyName("updateUserName")]
        public string? UpdateUserName { get { return this. UpdateUserNameOption; } set { this.UpdateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConstructionSiteModel {\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ConstructionTime: ").Append(ConstructionTime).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  CreateUserName: ").Append(CreateUserName).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("  UpdateUserName: ").Append(UpdateUserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstructionSiteModel" />
    /// </summary>
    public class ConstructionSiteModelJsonConverter : JsonConverter<ConstructionSiteModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateDateTime
        /// </summary>
        public static string UpdateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ConstructionSiteModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ConstructionSiteModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> additionalInformation = default;
            Option<AddressModel> address = default;
            Option<string> constructionTime = default;
            Option<AddressModel> contactPerson = default;
            Option<DateTime> createDateTime = default;
            Option<Guid> createUserId = default;
            Option<string> createUserName = default;
            Option<DateTime> endDate = default;
            Option<Guid> id = default;
            Option<bool> isDeleted = default;
            Option<string> name = default;
            Option<string> number = default;
            Option<Guid> organizationId = default;
            Option<string> referenceNumber = default;
            Option<DateTime> startDate = default;
            Option<ConstructionSiteStatusModel> status = default;
            Option<ConstructionSiteTypeModel> type = default;
            Option<DateTime> updateDateTime = default;
            Option<Guid> updateUserId = default;
            Option<string> updateUserName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "additionalInformation":
                            additionalInformation = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                address = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "constructionTime":
                            constructionTime = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contactPerson":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactPerson = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "createUserName":
                            createUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "endDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "referenceNumber":
                            referenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "startDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<ConstructionSiteStatusModel>(JsonSerializer.Deserialize<ConstructionSiteStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                type = new Option<ConstructionSiteTypeModel>(JsonSerializer.Deserialize<ConstructionSiteTypeModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "updateDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "updateUserName":
                            updateUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class ConstructionSiteModel.");

            if (contactPerson.IsSet && contactPerson.Value == null)
                throw new ArgumentNullException(nameof(contactPerson), "Property is not nullable for class ConstructionSiteModel.");

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class ConstructionSiteModel.");

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate), "Property is not nullable for class ConstructionSiteModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ConstructionSiteModel.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class ConstructionSiteModel.");

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class ConstructionSiteModel.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class ConstructionSiteModel.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ConstructionSiteModel.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ConstructionSiteModel.");

            if (updateDateTime.IsSet && updateDateTime.Value == null)
                throw new ArgumentNullException(nameof(updateDateTime), "Property is not nullable for class ConstructionSiteModel.");

            //2return new ConstructionSiteModel(additionalInformation, address, constructionTime, contactPerson, createDateTime, createUserId, createUserName, endDate, id, isDeleted, name, number, organizationId, referenceNumber, startDate, status, type, updateDateTime, updateUserId, updateUserName);
            return new ConstructionSiteModel(additionalInformation, address, constructionTime, contactPerson, createDateTime, createUserId, createUserName, endDate, id, isDeleted, name, number, organizationId, referenceNumber, startDate, status, type, updateDateTime, updateUserId, updateUserName);
        }

        /// <summary>
        /// Serializes a <see cref="ConstructionSiteModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constructionSiteModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ConstructionSiteModel constructionSiteModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, constructionSiteModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ConstructionSiteModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constructionSiteModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ConstructionSiteModel constructionSiteModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (constructionSiteModel.AddressOption.IsSet && constructionSiteModel.Address == null)
                throw new ArgumentNullException(nameof(constructionSiteModel.Address), "Property is required for class ConstructionSiteModel.");

            if (constructionSiteModel.ContactPersonOption.IsSet && constructionSiteModel.ContactPerson == null)
                throw new ArgumentNullException(nameof(constructionSiteModel.ContactPerson), "Property is required for class ConstructionSiteModel.");

            if (constructionSiteModel.StatusOption.IsSet && constructionSiteModel.Status == null)
                throw new ArgumentNullException(nameof(constructionSiteModel.Status), "Property is required for class ConstructionSiteModel.");

            if (constructionSiteModel.TypeOption.IsSet && constructionSiteModel.Type == null)
                throw new ArgumentNullException(nameof(constructionSiteModel.Type), "Property is required for class ConstructionSiteModel.");

            if (constructionSiteModel.AdditionalInformationOption.IsSet)
                if (constructionSiteModel.AdditionalInformationOption.Value != null)
                {
                    writer.WriteString("additionalInformation", constructionSiteModel.AdditionalInformation);
                    //var __value = constructionSiteModel.AdditionalInformationOption.Value;
                    //writer.WriteString("additionalInformation", __value);
                }
                else
                    writer.WriteNull("additionalInformation");

            if (constructionSiteModel.AddressOption.IsSet)
            {
                writer.WritePropertyName("address");
                JsonSerializer.Serialize(writer, constructionSiteModel.Address, jsonSerializerOptions);
            }
            if (constructionSiteModel.ConstructionTimeOption.IsSet)
                if (constructionSiteModel.ConstructionTimeOption.Value != null)
                {
                    writer.WriteString("constructionTime", constructionSiteModel.ConstructionTime);
                    //var __value = constructionSiteModel.ConstructionTimeOption.Value;
                    //writer.WriteString("constructionTime", __value);
                }
                else
                    writer.WriteNull("constructionTime");

            if (constructionSiteModel.ContactPersonOption.IsSet)
            {
                writer.WritePropertyName("contactPerson");
                JsonSerializer.Serialize(writer, constructionSiteModel.ContactPerson, jsonSerializerOptions);
            }
            if (constructionSiteModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", constructionSiteModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (constructionSiteModel.CreateUserIdOption.IsSet)
                if (constructionSiteModel.CreateUserIdOption.Value != null)
                {
                    writer.WriteString("createUserId", constructionSiteModel.CreateUserIdOption!.Value);
                    //var __value = constructionSiteModel.CreateUserIdOption.Value;
                    //writer.WriteString("createUserId", __value);
                }
                else
                    writer.WriteNull("createUserId");

            if (constructionSiteModel.CreateUserNameOption.IsSet)
                if (constructionSiteModel.CreateUserNameOption.Value != null)
                {
                    writer.WriteString("createUserName", constructionSiteModel.CreateUserName);
                    //var __value = constructionSiteModel.CreateUserNameOption.Value;
                    //writer.WriteString("createUserName", __value);
                }
                else
                    writer.WriteNull("createUserName");

            if (constructionSiteModel.EndDateOption.IsSet)
                writer.WriteString("endDate", constructionSiteModel.EndDateOption!.Value.ToString(EndDateFormat));

            if (constructionSiteModel.IdOption.IsSet)
                writer.WriteString("id", constructionSiteModel.IdOption!.Value);

            if (constructionSiteModel.IsDeletedOption.IsSet)
                writer.WriteBoolean("isDeleted", constructionSiteModel.IsDeletedOption!.Value);

            if (constructionSiteModel.NameOption.IsSet)
                if (constructionSiteModel.NameOption.Value != null)
                {
                    writer.WriteString("name", constructionSiteModel.Name);
                    //var __value = constructionSiteModel.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (constructionSiteModel.NumberOption.IsSet)
                if (constructionSiteModel.NumberOption.Value != null)
                {
                    writer.WriteString("number", constructionSiteModel.Number);
                    //var __value = constructionSiteModel.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (constructionSiteModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", constructionSiteModel.OrganizationIdOption!.Value);

            if (constructionSiteModel.ReferenceNumberOption.IsSet)
                if (constructionSiteModel.ReferenceNumberOption.Value != null)
                {
                    writer.WriteString("referenceNumber", constructionSiteModel.ReferenceNumber);
                    //var __value = constructionSiteModel.ReferenceNumberOption.Value;
                    //writer.WriteString("referenceNumber", __value);
                }
                else
                    writer.WriteNull("referenceNumber");

            if (constructionSiteModel.StartDateOption.IsSet)
                writer.WriteString("startDate", constructionSiteModel.StartDateOption!.Value.ToString(StartDateFormat));

            if (constructionSiteModel.StatusOption.IsSet)
            {
                writer.WritePropertyName("status");
                JsonSerializer.Serialize(writer, constructionSiteModel.Status, jsonSerializerOptions);
            }
            if (constructionSiteModel.TypeOption.IsSet)
            {
                writer.WritePropertyName("type");
                JsonSerializer.Serialize(writer, constructionSiteModel.Type, jsonSerializerOptions);
            }
            if (constructionSiteModel.UpdateDateTimeOption.IsSet)
                writer.WriteString("updateDateTime", constructionSiteModel.UpdateDateTimeOption!.Value.ToString(UpdateDateTimeFormat));

            if (constructionSiteModel.UpdateUserIdOption.IsSet)
                if (constructionSiteModel.UpdateUserIdOption.Value != null)
                {
                    writer.WriteString("updateUserId", constructionSiteModel.UpdateUserIdOption!.Value);
                    //var __value = constructionSiteModel.UpdateUserIdOption.Value;
                    //writer.WriteString("updateUserId", __value);
                }
                else
                    writer.WriteNull("updateUserId");

            if (constructionSiteModel.UpdateUserNameOption.IsSet)
                if (constructionSiteModel.UpdateUserNameOption.Value != null)
                {
                    writer.WriteString("updateUserName", constructionSiteModel.UpdateUserName);
                    //var __value = constructionSiteModel.UpdateUserNameOption.Value;
                    //writer.WriteString("updateUserName", __value);
                }
                else
                    writer.WriteNull("updateUserName");
        }
    }
}
