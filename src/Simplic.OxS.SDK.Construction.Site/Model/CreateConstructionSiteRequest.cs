/*
 * Simplic.OxS.Construction-Site
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Construction.Site
{
    /// <summary>
    /// CreateConstructionSiteRequest
    /// </summary>
    [DataContract(Name = "CreateConstructionSiteRequest")]
    public partial class CreateConstructionSiteRequest : IEquatable<CreateConstructionSiteRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConstructionSiteRequest" /> class.
        /// </summary>
        /// <param name="number">number.</param>
        /// <param name="name">name.</param>
        /// <param name="referenceNumber">referenceNumber.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="additionalInformation">additionalInformation.</param>
        /// <param name="constructionTime">constructionTime.</param>
        /// <param name="statusId">statusId.</param>
        /// <param name="typeId">typeId.</param>
        /// <param name="addressContactId">addressContactId.</param>
        /// <param name="contactPersonContactId">contactPersonContactId.</param>
        public CreateConstructionSiteRequest(string number = default(string), string name = default(string), string referenceNumber = default(string), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), string additionalInformation = default(string), string constructionTime = default(string), Guid statusId = default(Guid), Guid typeId = default(Guid), Guid addressContactId = default(Guid), Guid? contactPersonContactId = default(Guid?))
        {
            this.Number = number;
            this.Name = name;
            this.ReferenceNumber = referenceNumber;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.AdditionalInformation = additionalInformation;
            this.ConstructionTime = constructionTime;
            this.StatusId = statusId;
            this.TypeId = typeId;
            this.AddressContactId = addressContactId;
            this.ContactPersonContactId = contactPersonContactId;
        }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [DataMember(Name = "referenceNumber", EmitDefaultValue = true)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInformation
        /// </summary>
        [DataMember(Name = "additionalInformation", EmitDefaultValue = true)]
        public string AdditionalInformation { get; set; }

        /// <summary>
        /// Gets or Sets ConstructionTime
        /// </summary>
        [DataMember(Name = "constructionTime", EmitDefaultValue = true)]
        public string ConstructionTime { get; set; }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [DataMember(Name = "statusId", EmitDefaultValue = false)]
        public Guid StatusId { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "typeId", EmitDefaultValue = false)]
        public Guid TypeId { get; set; }

        /// <summary>
        /// Gets or Sets AddressContactId
        /// </summary>
        [DataMember(Name = "addressContactId", EmitDefaultValue = false)]
        public Guid AddressContactId { get; set; }

        /// <summary>
        /// Gets or Sets ContactPersonContactId
        /// </summary>
        [DataMember(Name = "contactPersonContactId", EmitDefaultValue = true)]
        public Guid? ContactPersonContactId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConstructionSiteRequest {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  ConstructionTime: ").Append(ConstructionTime).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  AddressContactId: ").Append(AddressContactId).Append("\n");
            sb.Append("  ContactPersonContactId: ").Append(ContactPersonContactId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateConstructionSiteRequest);
        }

        /// <summary>
        /// Returns true if CreateConstructionSiteRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateConstructionSiteRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateConstructionSiteRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    (this.AdditionalInformation != null &&
                    this.AdditionalInformation.Equals(input.AdditionalInformation))
                ) && 
                (
                    this.ConstructionTime == input.ConstructionTime ||
                    (this.ConstructionTime != null &&
                    this.ConstructionTime.Equals(input.ConstructionTime))
                ) && 
                (
                    this.StatusId == input.StatusId ||
                    (this.StatusId != null &&
                    this.StatusId.Equals(input.StatusId))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.AddressContactId == input.AddressContactId ||
                    (this.AddressContactId != null &&
                    this.AddressContactId.Equals(input.AddressContactId))
                ) && 
                (
                    this.ContactPersonContactId == input.ContactPersonContactId ||
                    (this.ContactPersonContactId != null &&
                    this.ContactPersonContactId.Equals(input.ContactPersonContactId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceNumber.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.AdditionalInformation != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalInformation.GetHashCode();
                }
                if (this.ConstructionTime != null)
                {
                    hashCode = (hashCode * 59) + this.ConstructionTime.GetHashCode();
                }
                if (this.StatusId != null)
                {
                    hashCode = (hashCode * 59) + this.StatusId.GetHashCode();
                }
                if (this.TypeId != null)
                {
                    hashCode = (hashCode * 59) + this.TypeId.GetHashCode();
                }
                if (this.AddressContactId != null)
                {
                    hashCode = (hashCode * 59) + this.AddressContactId.GetHashCode();
                }
                if (this.ContactPersonContactId != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPersonContactId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
