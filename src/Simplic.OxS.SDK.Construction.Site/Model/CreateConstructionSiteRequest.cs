// <auto-generated>
/*
 * Simplic.OxS.Construction-Site
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Construction.Site
{
    /// <summary>
    /// CreateConstructionSiteRequest
    /// </summary>
    public partial class CreateConstructionSiteRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public CreateConstructionSiteRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConstructionSiteRequest" /> class.
        /// </summary>
        /// <param name="additionalInformation">additionalInformation</param>
        /// <param name="addressContactId">addressContactId</param>
        /// <param name="constructionTime">constructionTime</param>
        /// <param name="contactPersonContactId">contactPersonContactId</param>
        /// <param name="endDate">endDate</param>
        /// <param name="name">name</param>
        /// <param name="number">number</param>
        /// <param name="referenceNumber">referenceNumber</param>
        /// <param name="startDate">startDate</param>
        /// <param name="statusId">statusId</param>
        /// <param name="typeId">typeId</param>
        //[JsonConstructor]
        public CreateConstructionSiteRequest(Option<string> additionalInformation = default, Option<Guid> addressContactId = default, Option<string> constructionTime = default, Option<Guid> contactPersonContactId = default, Option<DateTime> endDate = default, Option<string> name = default, Option<string> number = default, Option<string> referenceNumber = default, Option<DateTime> startDate = default, Option<Guid> statusId = default, Option<Guid> typeId = default)
        {
            AdditionalInformationOption = additionalInformation;
            AddressContactIdOption = addressContactId;
            ConstructionTimeOption = constructionTime;
            ContactPersonContactIdOption = contactPersonContactId;
            EndDateOption = endDate;
            NameOption = name;
            NumberOption = number;
            ReferenceNumberOption = referenceNumber;
            StartDateOption = startDate;
            StatusIdOption = statusId;
            TypeIdOption = typeId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AdditionalInformation
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> AdditionalInformationOption { get; private set; }

        /// <summary>
        /// Gets or Sets AdditionalInformation
        /// </summary>
        [JsonPropertyName("additionalInformation")]
        public string? AdditionalInformation { get { return this. AdditionalInformationOption; } set { this.AdditionalInformationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressContactId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> AddressContactIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AddressContactId
        /// </summary>
        [JsonPropertyName("addressContactId")]
        public Guid? AddressContactId { get { return this. AddressContactIdOption; } set { this.AddressContactIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of ConstructionTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ConstructionTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ConstructionTime
        /// </summary>
        [JsonPropertyName("constructionTime")]
        public string? ConstructionTime { get { return this. ConstructionTimeOption; } set { this.ConstructionTimeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ContactPersonContactId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ContactPersonContactIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContactPersonContactId
        /// </summary>
        [JsonPropertyName("contactPersonContactId")]
        public Guid? ContactPersonContactId { get { return this. ContactPersonContactIdOption; } set { this.ContactPersonContactIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [JsonPropertyName("endDate")]
        public DateTime? EndDate { get { return this. EndDateOption; } set { this.EndDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReferenceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get { return this. ReferenceNumberOption; } set { this.ReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [JsonPropertyName("startDate")]
        public DateTime? StartDate { get { return this. StartDateOption; } set { this.StartDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of StatusId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> StatusIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [JsonPropertyName("statusId")]
        public Guid? StatusId { get { return this. StatusIdOption; } set { this.StatusIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of TypeId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TypeIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [JsonPropertyName("typeId")]
        public Guid? TypeId { get { return this. TypeIdOption; } set { this.TypeIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConstructionSiteRequest {\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  AddressContactId: ").Append(AddressContactId).Append("\n");
            sb.Append("  ConstructionTime: ").Append(ConstructionTime).Append("\n");
            sb.Append("  ContactPersonContactId: ").Append(ContactPersonContactId).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateConstructionSiteRequest" />
    /// </summary>
    public class CreateConstructionSiteRequestJsonConverter : JsonConverter<CreateConstructionSiteRequest>
    {
        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CreateConstructionSiteRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateConstructionSiteRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> additionalInformation = default;
            Option<Guid> addressContactId = default;
            Option<string> constructionTime = default;
            Option<Guid> contactPersonContactId = default;
            Option<DateTime> endDate = default;
            Option<string> name = default;
            Option<string> number = default;
            Option<string> referenceNumber = default;
            Option<DateTime> startDate = default;
            Option<Guid> statusId = default;
            Option<Guid> typeId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "additionalInformation":
                            additionalInformation = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "addressContactId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                addressContactId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "constructionTime":
                            constructionTime = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contactPersonContactId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactPersonContactId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "endDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "referenceNumber":
                            referenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "startDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "statusId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                statusId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "typeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                typeId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (addressContactId.IsSet && addressContactId.Value == null)
                throw new ArgumentNullException(nameof(addressContactId), "Property is not nullable for class CreateConstructionSiteRequest.");

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate), "Property is not nullable for class CreateConstructionSiteRequest.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class CreateConstructionSiteRequest.");

            if (statusId.IsSet && statusId.Value == null)
                throw new ArgumentNullException(nameof(statusId), "Property is not nullable for class CreateConstructionSiteRequest.");

            if (typeId.IsSet && typeId.Value == null)
                throw new ArgumentNullException(nameof(typeId), "Property is not nullable for class CreateConstructionSiteRequest.");

            //2return new CreateConstructionSiteRequest(additionalInformation, addressContactId, constructionTime, contactPersonContactId, endDate, name, number, referenceNumber, startDate, statusId, typeId);
            return new CreateConstructionSiteRequest(additionalInformation, addressContactId, constructionTime, contactPersonContactId, endDate, name, number, referenceNumber, startDate, statusId, typeId);
        }

        /// <summary>
        /// Serializes a <see cref="CreateConstructionSiteRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConstructionSiteRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateConstructionSiteRequest createConstructionSiteRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createConstructionSiteRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateConstructionSiteRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConstructionSiteRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateConstructionSiteRequest createConstructionSiteRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createConstructionSiteRequest.AdditionalInformationOption.IsSet)
                if (createConstructionSiteRequest.AdditionalInformationOption.Value != null)
                {
                    writer.WriteString("additionalInformation", createConstructionSiteRequest.AdditionalInformation);
                    //var __value = createConstructionSiteRequest.AdditionalInformationOption.Value;
                    //writer.WriteString("additionalInformation", __value);
                }
                else
                    writer.WriteNull("additionalInformation");

            if (createConstructionSiteRequest.AddressContactIdOption.IsSet)
                writer.WriteString("addressContactId", createConstructionSiteRequest.AddressContactIdOption!.Value);

            if (createConstructionSiteRequest.ConstructionTimeOption.IsSet)
                if (createConstructionSiteRequest.ConstructionTimeOption.Value != null)
                {
                    writer.WriteString("constructionTime", createConstructionSiteRequest.ConstructionTime);
                    //var __value = createConstructionSiteRequest.ConstructionTimeOption.Value;
                    //writer.WriteString("constructionTime", __value);
                }
                else
                    writer.WriteNull("constructionTime");

            if (createConstructionSiteRequest.ContactPersonContactIdOption.IsSet)
                if (createConstructionSiteRequest.ContactPersonContactIdOption.Value != null)
                {
                    writer.WriteString("contactPersonContactId", createConstructionSiteRequest.ContactPersonContactIdOption!.Value);
                    //var __value = createConstructionSiteRequest.ContactPersonContactIdOption.Value;
                    //writer.WriteString("contactPersonContactId", __value);
                }
                else
                    writer.WriteNull("contactPersonContactId");

            if (createConstructionSiteRequest.EndDateOption.IsSet)
                writer.WriteString("endDate", createConstructionSiteRequest.EndDateOption!.Value.ToString(EndDateFormat));

            if (createConstructionSiteRequest.NameOption.IsSet)
                if (createConstructionSiteRequest.NameOption.Value != null)
                {
                    writer.WriteString("name", createConstructionSiteRequest.Name);
                    //var __value = createConstructionSiteRequest.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (createConstructionSiteRequest.NumberOption.IsSet)
                if (createConstructionSiteRequest.NumberOption.Value != null)
                {
                    writer.WriteString("number", createConstructionSiteRequest.Number);
                    //var __value = createConstructionSiteRequest.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (createConstructionSiteRequest.ReferenceNumberOption.IsSet)
                if (createConstructionSiteRequest.ReferenceNumberOption.Value != null)
                {
                    writer.WriteString("referenceNumber", createConstructionSiteRequest.ReferenceNumber);
                    //var __value = createConstructionSiteRequest.ReferenceNumberOption.Value;
                    //writer.WriteString("referenceNumber", __value);
                }
                else
                    writer.WriteNull("referenceNumber");

            if (createConstructionSiteRequest.StartDateOption.IsSet)
                writer.WriteString("startDate", createConstructionSiteRequest.StartDateOption!.Value.ToString(StartDateFormat));

            if (createConstructionSiteRequest.StatusIdOption.IsSet)
                writer.WriteString("statusId", createConstructionSiteRequest.StatusIdOption!.Value);

            if (createConstructionSiteRequest.TypeIdOption.IsSet)
                writer.WriteString("typeId", createConstructionSiteRequest.TypeIdOption!.Value);
        }
    }
}
