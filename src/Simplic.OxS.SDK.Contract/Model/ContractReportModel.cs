// <auto-generated>
/*
 * Simplic.OxS.Contract
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Contract
{
    /// <summary>
    /// ContractReportModel
    /// </summary>
    public partial class ContractReportModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ContractReportModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractReportModel" /> class.
        /// </summary>
        /// <param name="billingType">billingType</param>
        /// <param name="businessPartner">businessPartner</param>
        /// <param name="contactPerson">contactPerson</param>
        /// <param name="createDateTime">createDateTime</param>
        /// <param name="createUserId">createUserId</param>
        /// <param name="createUserName">createUserName</param>
        /// <param name="creditLimit">creditLimit</param>
        /// <param name="creditworthiness">creditworthiness</param>
        /// <param name="customer">customer</param>
        /// <param name="endDate">endDate</param>
        /// <param name="id">id</param>
        /// <param name="insurance">insurance</param>
        /// <param name="items">items</param>
        /// <param name="name">name</param>
        /// <param name="number">number</param>
        /// <param name="orderDate">orderDate</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="projectId">projectId</param>
        /// <param name="referenceNumber">referenceNumber</param>
        /// <param name="representativeUser">representativeUser</param>
        /// <param name="startDate">startDate</param>
        /// <param name="status">status</param>
        /// <param name="submissionDate">submissionDate</param>
        /// <param name="termOfPayment">termOfPayment</param>
        /// <param name="updateDateTime">updateDateTime</param>
        /// <param name="updateUserId">updateUserId</param>
        /// <param name="updateUserName">updateUserName</param>
        //[JsonConstructor]
        public ContractReportModel(Option<BillingTypeModel> billingType = default, Option<BillableContactModel> businessPartner = default, Option<AddressModel> contactPerson = default, Option<DateTime> createDateTime = default, Option<Guid> createUserId = default, Option<string> createUserName = default, Option<string> creditLimit = default, Option<string> creditworthiness = default, Option<BillableContactModel> customer = default, Option<DateTime> endDate = default, Option<Guid> id = default, Option<double> insurance = default, Option<List<ContractItemModel>> items = default, Option<string> name = default, Option<string> number = default, Option<DateTime> orderDate = default, Option<Guid> organizationId = default, Option<Guid> projectId = default, Option<string> referenceNumber = default, Option<UserModel> representativeUser = default, Option<DateTime> startDate = default, Option<ContractStatusModel> status = default, Option<string> submissionDate = default, Option<TermsOfPaymentModel> termOfPayment = default, Option<DateTime> updateDateTime = default, Option<Guid> updateUserId = default, Option<string> updateUserName = default)
        {
            BillingTypeOption = billingType;
            BusinessPartnerOption = businessPartner;
            ContactPersonOption = contactPerson;
            CreateDateTimeOption = createDateTime;
            CreateUserIdOption = createUserId;
            CreateUserNameOption = createUserName;
            CreditLimitOption = creditLimit;
            CreditworthinessOption = creditworthiness;
            CustomerOption = customer;
            EndDateOption = endDate;
            IdOption = id;
            InsuranceOption = insurance;
            ItemsOption = items;
            NameOption = name;
            NumberOption = number;
            OrderDateOption = orderDate;
            OrganizationIdOption = organizationId;
            ProjectIdOption = projectId;
            ReferenceNumberOption = referenceNumber;
            RepresentativeUserOption = representativeUser;
            StartDateOption = startDate;
            StatusOption = status;
            SubmissionDateOption = submissionDate;
            TermOfPaymentOption = termOfPayment;
            UpdateDateTimeOption = updateDateTime;
            UpdateUserIdOption = updateUserId;
            UpdateUserNameOption = updateUserName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BillingType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillingTypeModel>))]
        public Option<BillingTypeModel> BillingTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillingType
        /// </summary>
        [JsonPropertyName("billingType")]
        public BillingTypeModel? BillingType { get { return this.BillingTypeOption; } set { this.BillingTypeOption = new Option<BillingTypeModel>(value); } }

        /// <summary>
        /// Used to track the state of BusinessPartner
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillableContactModel>))]
        public Option<BillableContactModel> BusinessPartnerOption { get; private set; }

        /// <summary>
        /// Gets or Sets BusinessPartner
        /// </summary>
        [JsonPropertyName("businessPartner")]
        public BillableContactModel? BusinessPartner { get { return this. BusinessPartnerOption; } set { this.BusinessPartnerOption = new Option<BillableContactModel>(value); } }

        /// <summary>
        /// Used to track the state of ContactPerson
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> ContactPersonOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContactPerson
        /// </summary>
        [JsonPropertyName("contactPerson")]
        public AddressModel? ContactPerson { get { return this. ContactPersonOption; } set { this.ContactPersonOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CreateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserId
        /// </summary>
        [JsonPropertyName("createUserId")]
        public Guid? CreateUserId { get { return this. CreateUserIdOption; } set { this.CreateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserName
        /// </summary>
        [JsonPropertyName("createUserName")]
        public string? CreateUserName { get { return this. CreateUserNameOption; } set { this.CreateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CreditLimit
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreditLimitOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditLimit
        /// </summary>
        [JsonPropertyName("creditLimit")]
        public string? CreditLimit { get { return this. CreditLimitOption; } set { this.CreditLimitOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Creditworthiness
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreditworthinessOption { get; private set; }

        /// <summary>
        /// Gets or Sets Creditworthiness
        /// </summary>
        [JsonPropertyName("creditworthiness")]
        public string? Creditworthiness { get { return this. CreditworthinessOption; } set { this.CreditworthinessOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Customer
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillableContactModel>))]
        public Option<BillableContactModel> CustomerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [JsonPropertyName("customer")]
        public BillableContactModel? Customer { get { return this. CustomerOption; } set { this.CustomerOption = new Option<BillableContactModel>(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [JsonPropertyName("endDate")]
        public DateTime? EndDate { get { return this. EndDateOption; } set { this.EndDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Insurance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> InsuranceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Insurance
        /// </summary>
        [JsonPropertyName("insurance")]
        public double? Insurance { get { return this. InsuranceOption; } set { this.InsuranceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Items
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<ContractItemModel>>))]
        public Option<List<ContractItemModel>> ItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [JsonPropertyName("items")]
        public List<ContractItemModel>? Items { get { return this. ItemsOption; } set { this.ItemsOption = new Option<List<ContractItemModel>>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OrderDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> OrderDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [JsonPropertyName("orderDate")]
        public DateTime? OrderDate { get { return this. OrderDateOption; } set { this.OrderDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ProjectIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [JsonPropertyName("projectId")]
        public Guid? ProjectId { get { return this. ProjectIdOption; } set { this.ProjectIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of ReferenceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get { return this. ReferenceNumberOption; } set { this.ReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RepresentativeUser
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<UserModel>))]
        public Option<UserModel> RepresentativeUserOption { get; private set; }

        /// <summary>
        /// Gets or Sets RepresentativeUser
        /// </summary>
        [JsonPropertyName("representativeUser")]
        public UserModel? RepresentativeUser { get { return this. RepresentativeUserOption; } set { this.RepresentativeUserOption = new Option<UserModel>(value); } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [JsonPropertyName("startDate")]
        public DateTime? StartDate { get { return this. StartDateOption; } set { this.StartDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ContractStatusModel>))]
        public Option<ContractStatusModel> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public ContractStatusModel? Status { get { return this. StatusOption; } set { this.StatusOption = new Option<ContractStatusModel>(value); } }

        /// <summary>
        /// Used to track the state of SubmissionDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> SubmissionDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubmissionDate
        /// </summary>
        [JsonPropertyName("submissionDate")]
        public string? SubmissionDate { get { return this. SubmissionDateOption; } set { this.SubmissionDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TermOfPayment
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TermsOfPaymentModel>))]
        public Option<TermsOfPaymentModel> TermOfPaymentOption { get; private set; }

        /// <summary>
        /// Gets or Sets TermOfPayment
        /// </summary>
        [JsonPropertyName("termOfPayment")]
        public TermsOfPaymentModel? TermOfPayment { get { return this. TermOfPaymentOption; } set { this.TermOfPaymentOption = new Option<TermsOfPaymentModel>(value); } }

        /// <summary>
        /// Used to track the state of UpdateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UpdateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateDateTime
        /// </summary>
        [JsonPropertyName("updateDateTime")]
        public DateTime? UpdateDateTime { get { return this. UpdateDateTimeOption; } set { this.UpdateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UpdateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserId
        /// </summary>
        [JsonPropertyName("updateUserId")]
        public Guid? UpdateUserId { get { return this. UpdateUserIdOption; } set { this.UpdateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> UpdateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserName
        /// </summary>
        [JsonPropertyName("updateUserName")]
        public string? UpdateUserName { get { return this. UpdateUserNameOption; } set { this.UpdateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContractReportModel {\n");
            sb.Append("  BillingType: ").Append(BillingType).Append("\n");
            sb.Append("  BusinessPartner: ").Append(BusinessPartner).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  CreateUserName: ").Append(CreateUserName).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("  Creditworthiness: ").Append(Creditworthiness).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Insurance: ").Append(Insurance).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  RepresentativeUser: ").Append(RepresentativeUser).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubmissionDate: ").Append(SubmissionDate).Append("\n");
            sb.Append("  TermOfPayment: ").Append(TermOfPayment).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("  UpdateUserName: ").Append(UpdateUserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ContractReportModel" />
    /// </summary>
    public class ContractReportModelJsonConverter : JsonConverter<ContractReportModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize OrderDate
        /// </summary>
        public static string OrderDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateDateTime
        /// </summary>
        public static string UpdateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ContractReportModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ContractReportModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<BillingTypeModel> billingType = default;
            Option<BillableContactModel> businessPartner = default;
            Option<AddressModel> contactPerson = default;
            Option<DateTime> createDateTime = default;
            Option<Guid> createUserId = default;
            Option<string> createUserName = default;
            Option<string> creditLimit = default;
            Option<string> creditworthiness = default;
            Option<BillableContactModel> customer = default;
            Option<DateTime> endDate = default;
            Option<Guid> id = default;
            Option<double> insurance = default;
            Option<List<ContractItemModel>> items = default;
            Option<string> name = default;
            Option<string> number = default;
            Option<DateTime> orderDate = default;
            Option<Guid> organizationId = default;
            Option<Guid> projectId = default;
            Option<string> referenceNumber = default;
            Option<UserModel> representativeUser = default;
            Option<DateTime> startDate = default;
            Option<ContractStatusModel> status = default;
            Option<string> submissionDate = default;
            Option<TermsOfPaymentModel> termOfPayment = default;
            Option<DateTime> updateDateTime = default;
            Option<Guid> updateUserId = default;
            Option<string> updateUserName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "billingType":
                            string? billingTypeRawValue = utf8JsonReader.GetString();
                            if (billingTypeRawValue != null)
                                billingType = new Option<BillingTypeModel>(BillingTypeModelValueConverter.FromStringOrDefault(billingTypeRawValue));
                            break;
                        case "businessPartner":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                businessPartner = new Option<BillableContactModel>(JsonSerializer.Deserialize<BillableContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "contactPerson":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactPerson = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "createUserName":
                            createUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "creditLimit":
                            creditLimit = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "creditworthiness":
                            creditworthiness = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "customer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customer = new Option<BillableContactModel>(JsonSerializer.Deserialize<BillableContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "insurance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                insurance = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "items":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                items = new Option<List<ContractItemModel>>(JsonSerializer.Deserialize<List<ContractItemModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "orderDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                orderDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "projectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "referenceNumber":
                            referenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "representativeUser":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                representativeUser = new Option<UserModel>(JsonSerializer.Deserialize<UserModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "startDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<ContractStatusModel>(JsonSerializer.Deserialize<ContractStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "submissionDate":
                            submissionDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "termOfPayment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                termOfPayment = new Option<TermsOfPaymentModel>(JsonSerializer.Deserialize<TermsOfPaymentModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "updateDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "updateUserName":
                            updateUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (billingType.IsSet && billingType.Value == null)
                throw new ArgumentNullException(nameof(billingType), "Property is not nullable for class ContractReportModel.");

            if (businessPartner.IsSet && businessPartner.Value == null)
                throw new ArgumentNullException(nameof(businessPartner), "Property is not nullable for class ContractReportModel.");

            if (contactPerson.IsSet && contactPerson.Value == null)
                throw new ArgumentNullException(nameof(contactPerson), "Property is not nullable for class ContractReportModel.");

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class ContractReportModel.");

            if (customer.IsSet && customer.Value == null)
                throw new ArgumentNullException(nameof(customer), "Property is not nullable for class ContractReportModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ContractReportModel.");

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class ContractReportModel.");

            if (representativeUser.IsSet && representativeUser.Value == null)
                throw new ArgumentNullException(nameof(representativeUser), "Property is not nullable for class ContractReportModel.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ContractReportModel.");

            if (termOfPayment.IsSet && termOfPayment.Value == null)
                throw new ArgumentNullException(nameof(termOfPayment), "Property is not nullable for class ContractReportModel.");

            if (updateDateTime.IsSet && updateDateTime.Value == null)
                throw new ArgumentNullException(nameof(updateDateTime), "Property is not nullable for class ContractReportModel.");

            //2return new ContractReportModel(billingType, businessPartner, contactPerson, createDateTime, createUserId, createUserName, creditLimit, creditworthiness, customer, endDate, id, insurance, items, name, number, orderDate, organizationId, projectId, referenceNumber, representativeUser, startDate, status, submissionDate, termOfPayment, updateDateTime, updateUserId, updateUserName);
            return new ContractReportModel(billingType, businessPartner, contactPerson, createDateTime, createUserId, createUserName, creditLimit, creditworthiness, customer, endDate, id, insurance, items, name, number, orderDate, organizationId, projectId, referenceNumber, representativeUser, startDate, status, submissionDate, termOfPayment, updateDateTime, updateUserId, updateUserName);
        }

        /// <summary>
        /// Serializes a <see cref="ContractReportModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contractReportModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ContractReportModel contractReportModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, contractReportModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ContractReportModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contractReportModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ContractReportModel contractReportModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (contractReportModel.BusinessPartnerOption.IsSet && contractReportModel.BusinessPartner == null)
                throw new ArgumentNullException(nameof(contractReportModel.BusinessPartner), "Property is required for class ContractReportModel.");

            if (contractReportModel.ContactPersonOption.IsSet && contractReportModel.ContactPerson == null)
                throw new ArgumentNullException(nameof(contractReportModel.ContactPerson), "Property is required for class ContractReportModel.");

            if (contractReportModel.CustomerOption.IsSet && contractReportModel.Customer == null)
                throw new ArgumentNullException(nameof(contractReportModel.Customer), "Property is required for class ContractReportModel.");

            if (contractReportModel.RepresentativeUserOption.IsSet && contractReportModel.RepresentativeUser == null)
                throw new ArgumentNullException(nameof(contractReportModel.RepresentativeUser), "Property is required for class ContractReportModel.");

            if (contractReportModel.StatusOption.IsSet && contractReportModel.Status == null)
                throw new ArgumentNullException(nameof(contractReportModel.Status), "Property is required for class ContractReportModel.");

            if (contractReportModel.TermOfPaymentOption.IsSet && contractReportModel.TermOfPayment == null)
                throw new ArgumentNullException(nameof(contractReportModel.TermOfPayment), "Property is required for class ContractReportModel.");

            if (contractReportModel.BillingTypeOption.IsSet)
            {
                var billingTypeRawValue = BillingTypeModelValueConverter.ToJsonValue(contractReportModel.BillingType!.Value);
                writer.WriteNumber("billingType", billingTypeRawValue);
            }
            if (contractReportModel.BusinessPartnerOption.IsSet)
            {
                writer.WritePropertyName("businessPartner");
                JsonSerializer.Serialize(writer, contractReportModel.BusinessPartner, jsonSerializerOptions);
            }
            if (contractReportModel.ContactPersonOption.IsSet)
            {
                writer.WritePropertyName("contactPerson");
                JsonSerializer.Serialize(writer, contractReportModel.ContactPerson, jsonSerializerOptions);
            }
            if (contractReportModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", contractReportModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (contractReportModel.CreateUserIdOption.IsSet)
                if (contractReportModel.CreateUserIdOption.Value != null)
                {
                    writer.WriteString("createUserId", contractReportModel.CreateUserIdOption!.Value);
                    //var __value = contractReportModel.CreateUserIdOption.Value;
                    //writer.WriteString("createUserId", __value);
                }
                else
                    writer.WriteNull("createUserId");

            if (contractReportModel.CreateUserNameOption.IsSet)
                if (contractReportModel.CreateUserNameOption.Value != null)
                {
                    writer.WriteString("createUserName", contractReportModel.CreateUserName);
                    //var __value = contractReportModel.CreateUserNameOption.Value;
                    //writer.WriteString("createUserName", __value);
                }
                else
                    writer.WriteNull("createUserName");

            if (contractReportModel.CreditLimitOption.IsSet)
                if (contractReportModel.CreditLimitOption.Value != null)
                {
                    writer.WriteString("creditLimit", contractReportModel.CreditLimit);
                    //var __value = contractReportModel.CreditLimitOption.Value;
                    //writer.WriteString("creditLimit", __value);
                }
                else
                    writer.WriteNull("creditLimit");

            if (contractReportModel.CreditworthinessOption.IsSet)
                if (contractReportModel.CreditworthinessOption.Value != null)
                {
                    writer.WriteString("creditworthiness", contractReportModel.Creditworthiness);
                    //var __value = contractReportModel.CreditworthinessOption.Value;
                    //writer.WriteString("creditworthiness", __value);
                }
                else
                    writer.WriteNull("creditworthiness");

            if (contractReportModel.CustomerOption.IsSet)
            {
                writer.WritePropertyName("customer");
                JsonSerializer.Serialize(writer, contractReportModel.Customer, jsonSerializerOptions);
            }
            if (contractReportModel.EndDateOption.IsSet)
                if (contractReportModel.EndDateOption.Value != null)
                {
                    writer.WriteString("endDate", contractReportModel.EndDateOption!.Value.ToString(EndDateFormat));
                    //var __value = contractReportModel.EndDateOption.Value;
                    //writer.WriteString("endDate", __value);
                }
                else
                    writer.WriteNull("endDate");

            if (contractReportModel.IdOption.IsSet)
                writer.WriteString("id", contractReportModel.IdOption!.Value);

            if (contractReportModel.InsuranceOption.IsSet)
                if (contractReportModel.InsuranceOption.Value != null)
                {
                    writer.WriteNumber("insurance", contractReportModel.InsuranceOption!.Value);
                    //var __value = contractReportModel.InsuranceOption.Value;
                    //writer.WriteString("insurance", __value);
                }
                else
                    writer.WriteNull("insurance");

            if (contractReportModel.ItemsOption.IsSet)
                if (contractReportModel.ItemsOption.Value != null)
                {
                    writer.WritePropertyName("items");
                    JsonSerializer.Serialize(writer, contractReportModel.Items, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items");
            if (contractReportModel.NameOption.IsSet)
                if (contractReportModel.NameOption.Value != null)
                {
                    writer.WriteString("name", contractReportModel.Name);
                    //var __value = contractReportModel.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (contractReportModel.NumberOption.IsSet)
                if (contractReportModel.NumberOption.Value != null)
                {
                    writer.WriteString("number", contractReportModel.Number);
                    //var __value = contractReportModel.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (contractReportModel.OrderDateOption.IsSet)
                if (contractReportModel.OrderDateOption.Value != null)
                {
                    writer.WriteString("orderDate", contractReportModel.OrderDateOption!.Value.ToString(OrderDateFormat));
                    //var __value = contractReportModel.OrderDateOption.Value;
                    //writer.WriteString("orderDate", __value);
                }
                else
                    writer.WriteNull("orderDate");

            if (contractReportModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", contractReportModel.OrganizationIdOption!.Value);

            if (contractReportModel.ProjectIdOption.IsSet)
                if (contractReportModel.ProjectIdOption.Value != null)
                {
                    writer.WriteString("projectId", contractReportModel.ProjectIdOption!.Value);
                    //var __value = contractReportModel.ProjectIdOption.Value;
                    //writer.WriteString("projectId", __value);
                }
                else
                    writer.WriteNull("projectId");

            if (contractReportModel.ReferenceNumberOption.IsSet)
                if (contractReportModel.ReferenceNumberOption.Value != null)
                {
                    writer.WriteString("referenceNumber", contractReportModel.ReferenceNumber);
                    //var __value = contractReportModel.ReferenceNumberOption.Value;
                    //writer.WriteString("referenceNumber", __value);
                }
                else
                    writer.WriteNull("referenceNumber");

            if (contractReportModel.RepresentativeUserOption.IsSet)
            {
                writer.WritePropertyName("representativeUser");
                JsonSerializer.Serialize(writer, contractReportModel.RepresentativeUser, jsonSerializerOptions);
            }
            if (contractReportModel.StartDateOption.IsSet)
                if (contractReportModel.StartDateOption.Value != null)
                {
                    writer.WriteString("startDate", contractReportModel.StartDateOption!.Value.ToString(StartDateFormat));
                    //var __value = contractReportModel.StartDateOption.Value;
                    //writer.WriteString("startDate", __value);
                }
                else
                    writer.WriteNull("startDate");

            if (contractReportModel.StatusOption.IsSet)
            {
                writer.WritePropertyName("status");
                JsonSerializer.Serialize(writer, contractReportModel.Status, jsonSerializerOptions);
            }
            if (contractReportModel.SubmissionDateOption.IsSet)
                if (contractReportModel.SubmissionDateOption.Value != null)
                {
                    writer.WriteString("submissionDate", contractReportModel.SubmissionDate);
                    //var __value = contractReportModel.SubmissionDateOption.Value;
                    //writer.WriteString("submissionDate", __value);
                }
                else
                    writer.WriteNull("submissionDate");

            if (contractReportModel.TermOfPaymentOption.IsSet)
            {
                writer.WritePropertyName("termOfPayment");
                JsonSerializer.Serialize(writer, contractReportModel.TermOfPayment, jsonSerializerOptions);
            }
            if (contractReportModel.UpdateDateTimeOption.IsSet)
                writer.WriteString("updateDateTime", contractReportModel.UpdateDateTimeOption!.Value.ToString(UpdateDateTimeFormat));

            if (contractReportModel.UpdateUserIdOption.IsSet)
                if (contractReportModel.UpdateUserIdOption.Value != null)
                {
                    writer.WriteString("updateUserId", contractReportModel.UpdateUserIdOption!.Value);
                    //var __value = contractReportModel.UpdateUserIdOption.Value;
                    //writer.WriteString("updateUserId", __value);
                }
                else
                    writer.WriteNull("updateUserId");

            if (contractReportModel.UpdateUserNameOption.IsSet)
                if (contractReportModel.UpdateUserNameOption.Value != null)
                {
                    writer.WriteString("updateUserName", contractReportModel.UpdateUserName);
                    //var __value = contractReportModel.UpdateUserNameOption.Value;
                    //writer.WriteString("updateUserName", __value);
                }
                else
                    writer.WriteNull("updateUserName");
        }
    }
}
