// <auto-generated>
/*
 * Simplic.OxS.Contract
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Contract
{
    /// <summary>
    /// ContractItemModel
    /// </summary>
    public partial class ContractItemModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ContractItemModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractItemModel" /> class.
        /// </summary>
        /// <param name="alternativeType">alternativeType</param>
        /// <param name="article">article</param>
        /// <param name="billingType">billingType</param>
        /// <param name="cashDiscount">cashDiscount</param>
        /// <param name="contractNumber">contractNumber</param>
        /// <param name="costs">costs</param>
        /// <param name="distance">distance</param>
        /// <param name="id">id</param>
        /// <param name="index">index</param>
        /// <param name="isDiscount">isDiscount</param>
        /// <param name="loadingAddress">loadingAddress</param>
        /// <param name="parentItem">parentItem</param>
        /// <param name="plannedQuantity">plannedQuantity</param>
        /// <param name="positionNumber">positionNumber</param>
        /// <param name="printToReporting">printToReporting</param>
        /// <param name="quantity">quantity</param>
        /// <param name="referenceNumber">referenceNumber</param>
        /// <param name="supplier">supplier</param>
        /// <param name="supplierReferenceNumber">supplierReferenceNumber</param>
        /// <param name="text">text</param>
        /// <param name="tollDistance">tollDistance</param>
        /// <param name="type">type</param>
        /// <param name="unloadingAddress">unloadingAddress</param>
        /// <param name="useInDisposition">useInDisposition</param>
        /// <param name="vehicleType">vehicleType</param>
        //[JsonConstructor]
        public ContractItemModel(Option<AlternativeTypeModel> alternativeType = default, Option<ArticleModel> article = default, Option<BillingType> billingType = default, Option<bool> cashDiscount = default, Option<string> contractNumber = default, Option<List<CostObjectModel>> costs = default, Option<double> distance = default, Option<Guid> id = default, Option<int> index = default, Option<bool> isDiscount = default, Option<Address> loadingAddress = default, Option<Guid> parentItem = default, Option<QuantityModel> plannedQuantity = default, Option<int> positionNumber = default, Option<bool> printToReporting = default, Option<QuantityModel> quantity = default, Option<string> referenceNumber = default, Option<Address> supplier = default, Option<string> supplierReferenceNumber = default, Option<string> text = default, Option<double> tollDistance = default, Option<string> type = default, Option<Address> unloadingAddress = default, Option<bool> useInDisposition = default, Option<VehicleTypeModel> vehicleType = default)
        {
            AlternativeTypeOption = alternativeType;
            ArticleOption = article;
            BillingTypeOption = billingType;
            CashDiscountOption = cashDiscount;
            ContractNumberOption = contractNumber;
            CostsOption = costs;
            DistanceOption = distance;
            IdOption = id;
            IndexOption = index;
            IsDiscountOption = isDiscount;
            LoadingAddressOption = loadingAddress;
            ParentItemOption = parentItem;
            PlannedQuantityOption = plannedQuantity;
            PositionNumberOption = positionNumber;
            PrintToReportingOption = printToReporting;
            QuantityOption = quantity;
            ReferenceNumberOption = referenceNumber;
            SupplierOption = supplier;
            SupplierReferenceNumberOption = supplierReferenceNumber;
            TextOption = text;
            TollDistanceOption = tollDistance;
            TypeOption = type;
            UnloadingAddressOption = unloadingAddress;
            UseInDispositionOption = useInDisposition;
            VehicleTypeOption = vehicleType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AlternativeType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AlternativeTypeModel>))]
        public Option<AlternativeTypeModel> AlternativeTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlternativeType
        /// </summary>
        [JsonPropertyName("alternativeType")]
        public AlternativeTypeModel? AlternativeType { get { return this.AlternativeTypeOption; } set { this.AlternativeTypeOption = new Option<AlternativeTypeModel>(value); } }

        /// <summary>
        /// Used to track the state of BillingType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillingType>))]
        public Option<BillingType> BillingTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillingType
        /// </summary>
        [JsonPropertyName("billingType")]
        public BillingType? BillingType { get { return this.BillingTypeOption; } set { this.BillingTypeOption = new Option<BillingType>(value); } }

        /// <summary>
        /// Used to track the state of Article
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ArticleModel>))]
        public Option<ArticleModel> ArticleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Article
        /// </summary>
        [JsonPropertyName("article")]
        public ArticleModel? Article { get { return this. ArticleOption; } set { this.ArticleOption = new Option<ArticleModel>(value); } }

        /// <summary>
        /// Used to track the state of CashDiscount
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> CashDiscountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CashDiscount
        /// </summary>
        [JsonPropertyName("cashDiscount")]
        public bool? CashDiscount { get { return this. CashDiscountOption; } set { this.CashDiscountOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of ContractNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ContractNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContractNumber
        /// </summary>
        [JsonPropertyName("contractNumber")]
        public string? ContractNumber { get { return this. ContractNumberOption; } set { this.ContractNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Costs
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<CostObjectModel>>))]
        public Option<List<CostObjectModel>> CostsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Costs
        /// </summary>
        [JsonPropertyName("costs")]
        public List<CostObjectModel>? Costs { get { return this. CostsOption; } set { this.CostsOption = new Option<List<CostObjectModel>>(value); } }

        /// <summary>
        /// Used to track the state of Distance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> DistanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [JsonPropertyName("distance")]
        public double? Distance { get { return this. DistanceOption; } set { this.DistanceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Index
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> IndexOption { get; private set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [JsonPropertyName("index")]
        public int? Index { get { return this. IndexOption; } set { this.IndexOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of IsDiscount
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDiscountOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDiscount
        /// </summary>
        [JsonPropertyName("isDiscount")]
        public bool? IsDiscount { get { return this. IsDiscountOption; } set { this.IsDiscountOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of LoadingAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Address>))]
        public Option<Address> LoadingAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets LoadingAddress
        /// </summary>
        [JsonPropertyName("loadingAddress")]
        public Address? LoadingAddress { get { return this. LoadingAddressOption; } set { this.LoadingAddressOption = new Option<Address>(value); } }

        /// <summary>
        /// Used to track the state of ParentItem
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ParentItemOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentItem
        /// </summary>
        [JsonPropertyName("parentItem")]
        public Guid? ParentItem { get { return this. ParentItemOption; } set { this.ParentItemOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of PlannedQuantity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<QuantityModel>))]
        public Option<QuantityModel> PlannedQuantityOption { get; private set; }

        /// <summary>
        /// Gets or Sets PlannedQuantity
        /// </summary>
        [JsonPropertyName("plannedQuantity")]
        public QuantityModel? PlannedQuantity { get { return this. PlannedQuantityOption; } set { this.PlannedQuantityOption = new Option<QuantityModel>(value); } }

        /// <summary>
        /// Used to track the state of PositionNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> PositionNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets PositionNumber
        /// </summary>
        [JsonPropertyName("positionNumber")]
        public int? PositionNumber { get { return this. PositionNumberOption; } set { this.PositionNumberOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of PrintToReporting
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> PrintToReportingOption { get; private set; }

        /// <summary>
        /// Gets or Sets PrintToReporting
        /// </summary>
        [JsonPropertyName("printToReporting")]
        public bool? PrintToReporting { get { return this. PrintToReportingOption; } set { this.PrintToReportingOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<QuantityModel>))]
        public Option<QuantityModel> QuantityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public QuantityModel? Quantity { get { return this. QuantityOption; } set { this.QuantityOption = new Option<QuantityModel>(value); } }

        /// <summary>
        /// Used to track the state of ReferenceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get { return this. ReferenceNumberOption; } set { this.ReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Supplier
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Address>))]
        public Option<Address> SupplierOption { get; private set; }

        /// <summary>
        /// Gets or Sets Supplier
        /// </summary>
        [JsonPropertyName("supplier")]
        public Address? Supplier { get { return this. SupplierOption; } set { this.SupplierOption = new Option<Address>(value); } }

        /// <summary>
        /// Used to track the state of SupplierReferenceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> SupplierReferenceNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets SupplierReferenceNumber
        /// </summary>
        [JsonPropertyName("supplierReferenceNumber")]
        public string? SupplierReferenceNumber { get { return this. SupplierReferenceNumberOption; } set { this.SupplierReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [JsonPropertyName("text")]
        public string? Text { get { return this. TextOption; } set { this.TextOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TollDistance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TollDistanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TollDistance
        /// </summary>
        [JsonPropertyName("tollDistance")]
        public double? TollDistance { get { return this. TollDistanceOption; } set { this.TollDistanceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this. TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UnloadingAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Address>))]
        public Option<Address> UnloadingAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnloadingAddress
        /// </summary>
        [JsonPropertyName("unloadingAddress")]
        public Address? UnloadingAddress { get { return this. UnloadingAddressOption; } set { this.UnloadingAddressOption = new Option<Address>(value); } }

        /// <summary>
        /// Used to track the state of UseInDisposition
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> UseInDispositionOption { get; private set; }

        /// <summary>
        /// Gets or Sets UseInDisposition
        /// </summary>
        [JsonPropertyName("useInDisposition")]
        public bool? UseInDisposition { get { return this. UseInDispositionOption; } set { this.UseInDispositionOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of VehicleType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<VehicleTypeModel>))]
        public Option<VehicleTypeModel> VehicleTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets VehicleType
        /// </summary>
        [JsonPropertyName("vehicleType")]
        public VehicleTypeModel? VehicleType { get { return this. VehicleTypeOption; } set { this.VehicleTypeOption = new Option<VehicleTypeModel>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContractItemModel {\n");
            sb.Append("  AlternativeType: ").Append(AlternativeType).Append("\n");
            sb.Append("  Article: ").Append(Article).Append("\n");
            sb.Append("  BillingType: ").Append(BillingType).Append("\n");
            sb.Append("  CashDiscount: ").Append(CashDiscount).Append("\n");
            sb.Append("  ContractNumber: ").Append(ContractNumber).Append("\n");
            sb.Append("  Costs: ").Append(Costs).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  IsDiscount: ").Append(IsDiscount).Append("\n");
            sb.Append("  LoadingAddress: ").Append(LoadingAddress).Append("\n");
            sb.Append("  ParentItem: ").Append(ParentItem).Append("\n");
            sb.Append("  PlannedQuantity: ").Append(PlannedQuantity).Append("\n");
            sb.Append("  PositionNumber: ").Append(PositionNumber).Append("\n");
            sb.Append("  PrintToReporting: ").Append(PrintToReporting).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  SupplierReferenceNumber: ").Append(SupplierReferenceNumber).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TollDistance: ").Append(TollDistance).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnloadingAddress: ").Append(UnloadingAddress).Append("\n");
            sb.Append("  UseInDisposition: ").Append(UseInDisposition).Append("\n");
            sb.Append("  VehicleType: ").Append(VehicleType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ContractItemModel" />
    /// </summary>
    public class ContractItemModelJsonConverter : JsonConverter<ContractItemModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ContractItemModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ContractItemModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AlternativeTypeModel> alternativeType = default;
            Option<ArticleModel> article = default;
            Option<BillingType> billingType = default;
            Option<bool> cashDiscount = default;
            Option<string> contractNumber = default;
            Option<List<CostObjectModel>> costs = default;
            Option<double> distance = default;
            Option<Guid> id = default;
            Option<int> index = default;
            Option<bool> isDiscount = default;
            Option<Address> loadingAddress = default;
            Option<Guid> parentItem = default;
            Option<QuantityModel> plannedQuantity = default;
            Option<int> positionNumber = default;
            Option<bool> printToReporting = default;
            Option<QuantityModel> quantity = default;
            Option<string> referenceNumber = default;
            Option<Address> supplier = default;
            Option<string> supplierReferenceNumber = default;
            Option<string> text = default;
            Option<double> tollDistance = default;
            Option<string> type = default;
            Option<Address> unloadingAddress = default;
            Option<bool> useInDisposition = default;
            Option<VehicleTypeModel> vehicleType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "alternativeType":
                            string? alternativeTypeRawValue = utf8JsonReader.GetString();
                            if (alternativeTypeRawValue != null)
                                alternativeType = new Option<AlternativeTypeModel>(AlternativeTypeModelValueConverter.FromStringOrDefault(alternativeTypeRawValue));
                            break;
                        case "article":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                article = new Option<ArticleModel>(JsonSerializer.Deserialize<ArticleModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "billingType":
                            string? billingTypeRawValue = utf8JsonReader.GetString();
                            if (billingTypeRawValue != null)
                                billingType = new Option<BillingType>(BillingTypeValueConverter.FromStringOrDefault(billingTypeRawValue));
                            break;
                        case "cashDiscount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cashDiscount = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "contractNumber":
                            contractNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "costs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                costs = new Option<List<CostObjectModel>>(JsonSerializer.Deserialize<List<CostObjectModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "distance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                distance = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "index":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                index = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "isDiscount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDiscount = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "loadingAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadingAddress = new Option<Address>(JsonSerializer.Deserialize<Address>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "parentItem":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                parentItem = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "plannedQuantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                plannedQuantity = new Option<QuantityModel>(JsonSerializer.Deserialize<QuantityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "positionNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                positionNumber = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "printToReporting":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                printToReporting = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<QuantityModel>(JsonSerializer.Deserialize<QuantityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "referenceNumber":
                            referenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "supplier":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplier = new Option<Address>(JsonSerializer.Deserialize<Address>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "supplierReferenceNumber":
                            supplierReferenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "text":
                            text = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tollDistance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tollDistance = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "unloadingAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                unloadingAddress = new Option<Address>(JsonSerializer.Deserialize<Address>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "useInDisposition":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                useInDisposition = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "vehicleType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vehicleType = new Option<VehicleTypeModel>(JsonSerializer.Deserialize<VehicleTypeModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (alternativeType.IsSet && alternativeType.Value == null)
                throw new ArgumentNullException(nameof(alternativeType), "Property is not nullable for class ContractItemModel.");

            if (article.IsSet && article.Value == null)
                throw new ArgumentNullException(nameof(article), "Property is not nullable for class ContractItemModel.");

            if (billingType.IsSet && billingType.Value == null)
                throw new ArgumentNullException(nameof(billingType), "Property is not nullable for class ContractItemModel.");

            if (cashDiscount.IsSet && cashDiscount.Value == null)
                throw new ArgumentNullException(nameof(cashDiscount), "Property is not nullable for class ContractItemModel.");

            if (distance.IsSet && distance.Value == null)
                throw new ArgumentNullException(nameof(distance), "Property is not nullable for class ContractItemModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ContractItemModel.");

            if (index.IsSet && index.Value == null)
                throw new ArgumentNullException(nameof(index), "Property is not nullable for class ContractItemModel.");

            if (loadingAddress.IsSet && loadingAddress.Value == null)
                throw new ArgumentNullException(nameof(loadingAddress), "Property is not nullable for class ContractItemModel.");

            if (plannedQuantity.IsSet && plannedQuantity.Value == null)
                throw new ArgumentNullException(nameof(plannedQuantity), "Property is not nullable for class ContractItemModel.");

            if (positionNumber.IsSet && positionNumber.Value == null)
                throw new ArgumentNullException(nameof(positionNumber), "Property is not nullable for class ContractItemModel.");

            if (printToReporting.IsSet && printToReporting.Value == null)
                throw new ArgumentNullException(nameof(printToReporting), "Property is not nullable for class ContractItemModel.");

            if (quantity.IsSet && quantity.Value == null)
                throw new ArgumentNullException(nameof(quantity), "Property is not nullable for class ContractItemModel.");

            if (supplier.IsSet && supplier.Value == null)
                throw new ArgumentNullException(nameof(supplier), "Property is not nullable for class ContractItemModel.");

            if (tollDistance.IsSet && tollDistance.Value == null)
                throw new ArgumentNullException(nameof(tollDistance), "Property is not nullable for class ContractItemModel.");

            if (unloadingAddress.IsSet && unloadingAddress.Value == null)
                throw new ArgumentNullException(nameof(unloadingAddress), "Property is not nullable for class ContractItemModel.");

            if (useInDisposition.IsSet && useInDisposition.Value == null)
                throw new ArgumentNullException(nameof(useInDisposition), "Property is not nullable for class ContractItemModel.");

            if (vehicleType.IsSet && vehicleType.Value == null)
                throw new ArgumentNullException(nameof(vehicleType), "Property is not nullable for class ContractItemModel.");

            //2return new ContractItemModel(alternativeType, article, billingType, cashDiscount, contractNumber, costs, distance, id, index, isDiscount, loadingAddress, parentItem, plannedQuantity, positionNumber, printToReporting, quantity, referenceNumber, supplier, supplierReferenceNumber, text, tollDistance, type, unloadingAddress, useInDisposition, vehicleType);
            return new ContractItemModel(alternativeType, article, billingType, cashDiscount, contractNumber, costs, distance, id, index, isDiscount, loadingAddress, parentItem, plannedQuantity, positionNumber, printToReporting, quantity, referenceNumber, supplier, supplierReferenceNumber, text, tollDistance, type, unloadingAddress, useInDisposition, vehicleType);
        }

        /// <summary>
        /// Serializes a <see cref="ContractItemModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contractItemModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ContractItemModel contractItemModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, contractItemModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ContractItemModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contractItemModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ContractItemModel contractItemModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (contractItemModel.ArticleOption.IsSet && contractItemModel.Article == null)
                throw new ArgumentNullException(nameof(contractItemModel.Article), "Property is required for class ContractItemModel.");

            if (contractItemModel.LoadingAddressOption.IsSet && contractItemModel.LoadingAddress == null)
                throw new ArgumentNullException(nameof(contractItemModel.LoadingAddress), "Property is required for class ContractItemModel.");

            if (contractItemModel.PlannedQuantityOption.IsSet && contractItemModel.PlannedQuantity == null)
                throw new ArgumentNullException(nameof(contractItemModel.PlannedQuantity), "Property is required for class ContractItemModel.");

            if (contractItemModel.QuantityOption.IsSet && contractItemModel.Quantity == null)
                throw new ArgumentNullException(nameof(contractItemModel.Quantity), "Property is required for class ContractItemModel.");

            if (contractItemModel.SupplierOption.IsSet && contractItemModel.Supplier == null)
                throw new ArgumentNullException(nameof(contractItemModel.Supplier), "Property is required for class ContractItemModel.");

            if (contractItemModel.UnloadingAddressOption.IsSet && contractItemModel.UnloadingAddress == null)
                throw new ArgumentNullException(nameof(contractItemModel.UnloadingAddress), "Property is required for class ContractItemModel.");

            if (contractItemModel.VehicleTypeOption.IsSet && contractItemModel.VehicleType == null)
                throw new ArgumentNullException(nameof(contractItemModel.VehicleType), "Property is required for class ContractItemModel.");

            if (contractItemModel.AlternativeTypeOption.IsSet)
            {
                var alternativeTypeRawValue = AlternativeTypeModelValueConverter.ToJsonValue(contractItemModel.AlternativeType!.Value);
                writer.WriteNumber("alternativeType", alternativeTypeRawValue);
            }
            if (contractItemModel.ArticleOption.IsSet)
            {
                writer.WritePropertyName("article");
                JsonSerializer.Serialize(writer, contractItemModel.Article, jsonSerializerOptions);
            }
            if (contractItemModel.BillingTypeOption.IsSet)
            {
                var billingTypeRawValue = BillingTypeValueConverter.ToJsonValue(contractItemModel.BillingType!.Value);
                writer.WriteNumber("billingType", billingTypeRawValue);
            }
            if (contractItemModel.CashDiscountOption.IsSet)
                writer.WriteBoolean("cashDiscount", contractItemModel.CashDiscountOption!.Value);

            if (contractItemModel.ContractNumberOption.IsSet)
                if (contractItemModel.ContractNumberOption.Value != null)
                {
                    writer.WriteString("contractNumber", contractItemModel.ContractNumber);
                    //var __value = contractItemModel.ContractNumberOption.Value;
                    //writer.WriteString("contractNumber", __value);
                }
                else
                    writer.WriteNull("contractNumber");

            if (contractItemModel.CostsOption.IsSet)
                if (contractItemModel.CostsOption.Value != null)
                {
                    writer.WritePropertyName("costs");
                    JsonSerializer.Serialize(writer, contractItemModel.Costs, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("costs");
            if (contractItemModel.DistanceOption.IsSet)
                writer.WriteNumber("distance", contractItemModel.DistanceOption!.Value);

            if (contractItemModel.IdOption.IsSet)
                writer.WriteString("id", contractItemModel.IdOption!.Value);

            if (contractItemModel.IndexOption.IsSet)
                writer.WriteNumber("index", contractItemModel.IndexOption!.Value);

            if (contractItemModel.IsDiscountOption.IsSet)
                if (contractItemModel.IsDiscountOption.Value != null)
                {
                    writer.WriteBoolean("isDiscount", contractItemModel.IsDiscountOption!.Value);
                    //var __value = contractItemModel.IsDiscountOption.Value;
                    //writer.WriteString("isDiscount", __value);
                }
                else
                    writer.WriteNull("isDiscount");

            if (contractItemModel.LoadingAddressOption.IsSet)
            {
                writer.WritePropertyName("loadingAddress");
                JsonSerializer.Serialize(writer, contractItemModel.LoadingAddress, jsonSerializerOptions);
            }
            if (contractItemModel.ParentItemOption.IsSet)
                if (contractItemModel.ParentItemOption.Value != null)
                {
                    writer.WriteString("parentItem", contractItemModel.ParentItemOption!.Value);
                    //var __value = contractItemModel.ParentItemOption.Value;
                    //writer.WriteString("parentItem", __value);
                }
                else
                    writer.WriteNull("parentItem");

            if (contractItemModel.PlannedQuantityOption.IsSet)
            {
                writer.WritePropertyName("plannedQuantity");
                JsonSerializer.Serialize(writer, contractItemModel.PlannedQuantity, jsonSerializerOptions);
            }
            if (contractItemModel.PositionNumberOption.IsSet)
                writer.WriteNumber("positionNumber", contractItemModel.PositionNumberOption!.Value);

            if (contractItemModel.PrintToReportingOption.IsSet)
                writer.WriteBoolean("printToReporting", contractItemModel.PrintToReportingOption!.Value);

            if (contractItemModel.QuantityOption.IsSet)
            {
                writer.WritePropertyName("quantity");
                JsonSerializer.Serialize(writer, contractItemModel.Quantity, jsonSerializerOptions);
            }
            if (contractItemModel.ReferenceNumberOption.IsSet)
                if (contractItemModel.ReferenceNumberOption.Value != null)
                {
                    writer.WriteString("referenceNumber", contractItemModel.ReferenceNumber);
                    //var __value = contractItemModel.ReferenceNumberOption.Value;
                    //writer.WriteString("referenceNumber", __value);
                }
                else
                    writer.WriteNull("referenceNumber");

            if (contractItemModel.SupplierOption.IsSet)
            {
                writer.WritePropertyName("supplier");
                JsonSerializer.Serialize(writer, contractItemModel.Supplier, jsonSerializerOptions);
            }
            if (contractItemModel.SupplierReferenceNumberOption.IsSet)
                if (contractItemModel.SupplierReferenceNumberOption.Value != null)
                {
                    writer.WriteString("supplierReferenceNumber", contractItemModel.SupplierReferenceNumber);
                    //var __value = contractItemModel.SupplierReferenceNumberOption.Value;
                    //writer.WriteString("supplierReferenceNumber", __value);
                }
                else
                    writer.WriteNull("supplierReferenceNumber");

            if (contractItemModel.TextOption.IsSet)
                if (contractItemModel.TextOption.Value != null)
                {
                    writer.WriteString("text", contractItemModel.Text);
                    //var __value = contractItemModel.TextOption.Value;
                    //writer.WriteString("text", __value);
                }
                else
                    writer.WriteNull("text");

            if (contractItemModel.TollDistanceOption.IsSet)
                writer.WriteNumber("tollDistance", contractItemModel.TollDistanceOption!.Value);

            if (contractItemModel.TypeOption.IsSet)
                if (contractItemModel.TypeOption.Value != null)
                {
                    writer.WriteString("type", contractItemModel.Type);
                    //var __value = contractItemModel.TypeOption.Value;
                    //writer.WriteString("type", __value);
                }
                else
                    writer.WriteNull("type");

            if (contractItemModel.UnloadingAddressOption.IsSet)
            {
                writer.WritePropertyName("unloadingAddress");
                JsonSerializer.Serialize(writer, contractItemModel.UnloadingAddress, jsonSerializerOptions);
            }
            if (contractItemModel.UseInDispositionOption.IsSet)
                writer.WriteBoolean("useInDisposition", contractItemModel.UseInDispositionOption!.Value);

            if (contractItemModel.VehicleTypeOption.IsSet)
            {
                writer.WritePropertyName("vehicleType");
                JsonSerializer.Serialize(writer, contractItemModel.VehicleType, jsonSerializerOptions);
            }
        }
    }
}
