// <auto-generated>
/*
 * Simplic.OxS.Contract
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Contract
{
    /// <summary>
    /// UpdateContractRequest
    /// </summary>
    public partial class UpdateContractRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public UpdateContractRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateContractRequest" /> class.
        /// </summary>
        /// <param name="billingType">billingType</param>
        /// <param name="businessPartnerContactId">businessPartnerContactId</param>
        /// <param name="businessPartnerPersonalAccountId">businessPartnerPersonalAccountId</param>
        /// <param name="contactPersonContactId">contactPersonContactId</param>
        /// <param name="creditLimit">creditLimit</param>
        /// <param name="creditworthiness">creditworthiness</param>
        /// <param name="customerContactId">customerContactId</param>
        /// <param name="customerPersonalAccountId">customerPersonalAccountId</param>
        /// <param name="endDate">endDate</param>
        /// <param name="insurance">insurance</param>
        /// <param name="isDeleted">isDeleted</param>
        /// <param name="items">items</param>
        /// <param name="name">name</param>
        /// <param name="number">number</param>
        /// <param name="orderDate">orderDate</param>
        /// <param name="projectId">projectId</param>
        /// <param name="referenceNumber">referenceNumber</param>
        /// <param name="representativeUserId">representativeUserId</param>
        /// <param name="startDate">startDate</param>
        /// <param name="statusId">statusId</param>
        /// <param name="submissionDate">submissionDate</param>
        /// <param name="termOfPayment">termOfPayment</param>
        //[JsonConstructor]
        public UpdateContractRequest(Option<BillingTypeModel> billingType = default, Option<Guid> businessPartnerContactId = default, Option<Guid> businessPartnerPersonalAccountId = default, Option<Guid> contactPersonContactId = default, Option<string> creditLimit = default, Option<string> creditworthiness = default, Option<Guid> customerContactId = default, Option<Guid> customerPersonalAccountId = default, Option<DateTime> endDate = default, Option<double> insurance = default, Option<bool> isDeleted = default, Option<List<PatchItemModel>> items = default, Option<string> name = default, Option<string> number = default, Option<DateTime> orderDate = default, Option<Guid> projectId = default, Option<string> referenceNumber = default, Option<Guid> representativeUserId = default, Option<DateTime> startDate = default, Option<Guid> statusId = default, Option<string> submissionDate = default, Option<TermsOfPaymentModel> termOfPayment = default)
        {
            BillingTypeOption = billingType;
            BusinessPartnerContactIdOption = businessPartnerContactId;
            BusinessPartnerPersonalAccountIdOption = businessPartnerPersonalAccountId;
            ContactPersonContactIdOption = contactPersonContactId;
            CreditLimitOption = creditLimit;
            CreditworthinessOption = creditworthiness;
            CustomerContactIdOption = customerContactId;
            CustomerPersonalAccountIdOption = customerPersonalAccountId;
            EndDateOption = endDate;
            InsuranceOption = insurance;
            IsDeletedOption = isDeleted;
            ItemsOption = items;
            NameOption = name;
            NumberOption = number;
            OrderDateOption = orderDate;
            ProjectIdOption = projectId;
            ReferenceNumberOption = referenceNumber;
            RepresentativeUserIdOption = representativeUserId;
            StartDateOption = startDate;
            StatusIdOption = statusId;
            SubmissionDateOption = submissionDate;
            TermOfPaymentOption = termOfPayment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BillingType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillingTypeModel>))]
        public Option<BillingTypeModel> BillingTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillingType
        /// </summary>
        [JsonPropertyName("billingType")]
        public BillingTypeModel? BillingType { get { return this.BillingTypeOption; } set { this.BillingTypeOption = new Option<BillingTypeModel>(value); } }

        /// <summary>
        /// Used to track the state of BusinessPartnerContactId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> BusinessPartnerContactIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets BusinessPartnerContactId
        /// </summary>
        [JsonPropertyName("businessPartnerContactId")]
        public Guid? BusinessPartnerContactId { get { return this. BusinessPartnerContactIdOption; } set { this.BusinessPartnerContactIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of BusinessPartnerPersonalAccountId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> BusinessPartnerPersonalAccountIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets BusinessPartnerPersonalAccountId
        /// </summary>
        [JsonPropertyName("businessPartnerPersonalAccountId")]
        public Guid? BusinessPartnerPersonalAccountId { get { return this. BusinessPartnerPersonalAccountIdOption; } set { this.BusinessPartnerPersonalAccountIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of ContactPersonContactId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ContactPersonContactIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContactPersonContactId
        /// </summary>
        [JsonPropertyName("contactPersonContactId")]
        public Guid? ContactPersonContactId { get { return this. ContactPersonContactIdOption; } set { this.ContactPersonContactIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of CreditLimit
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreditLimitOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditLimit
        /// </summary>
        [JsonPropertyName("creditLimit")]
        public string? CreditLimit { get { return this. CreditLimitOption; } set { this.CreditLimitOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Creditworthiness
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreditworthinessOption { get; private set; }

        /// <summary>
        /// Gets or Sets Creditworthiness
        /// </summary>
        [JsonPropertyName("creditworthiness")]
        public string? Creditworthiness { get { return this. CreditworthinessOption; } set { this.CreditworthinessOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CustomerContactId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CustomerContactIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomerContactId
        /// </summary>
        [JsonPropertyName("customerContactId")]
        public Guid? CustomerContactId { get { return this. CustomerContactIdOption; } set { this.CustomerContactIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of CustomerPersonalAccountId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CustomerPersonalAccountIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomerPersonalAccountId
        /// </summary>
        [JsonPropertyName("customerPersonalAccountId")]
        public Guid? CustomerPersonalAccountId { get { return this. CustomerPersonalAccountIdOption; } set { this.CustomerPersonalAccountIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [JsonPropertyName("endDate")]
        public DateTime? EndDate { get { return this. EndDateOption; } set { this.EndDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Insurance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> InsuranceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Insurance
        /// </summary>
        [JsonPropertyName("insurance")]
        public double? Insurance { get { return this. InsuranceOption; } set { this.InsuranceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Items
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<PatchItemModel>>))]
        public Option<List<PatchItemModel>> ItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [JsonPropertyName("items")]
        public List<PatchItemModel>? Items { get { return this. ItemsOption; } set { this.ItemsOption = new Option<List<PatchItemModel>>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OrderDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> OrderDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [JsonPropertyName("orderDate")]
        public DateTime? OrderDate { get { return this. OrderDateOption; } set { this.OrderDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ProjectIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [JsonPropertyName("projectId")]
        public Guid? ProjectId { get { return this. ProjectIdOption; } set { this.ProjectIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of ReferenceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get { return this. ReferenceNumberOption; } set { this.ReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RepresentativeUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> RepresentativeUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets RepresentativeUserId
        /// </summary>
        [JsonPropertyName("representativeUserId")]
        public Guid? RepresentativeUserId { get { return this. RepresentativeUserIdOption; } set { this.RepresentativeUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [JsonPropertyName("startDate")]
        public DateTime? StartDate { get { return this. StartDateOption; } set { this.StartDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of StatusId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> StatusIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [JsonPropertyName("statusId")]
        public Guid? StatusId { get { return this. StatusIdOption; } set { this.StatusIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of SubmissionDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> SubmissionDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubmissionDate
        /// </summary>
        [JsonPropertyName("submissionDate")]
        public string? SubmissionDate { get { return this. SubmissionDateOption; } set { this.SubmissionDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TermOfPayment
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TermsOfPaymentModel>))]
        public Option<TermsOfPaymentModel> TermOfPaymentOption { get; private set; }

        /// <summary>
        /// Gets or Sets TermOfPayment
        /// </summary>
        [JsonPropertyName("termOfPayment")]
        public TermsOfPaymentModel? TermOfPayment { get { return this. TermOfPaymentOption; } set { this.TermOfPaymentOption = new Option<TermsOfPaymentModel>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateContractRequest {\n");
            sb.Append("  BillingType: ").Append(BillingType).Append("\n");
            sb.Append("  BusinessPartnerContactId: ").Append(BusinessPartnerContactId).Append("\n");
            sb.Append("  BusinessPartnerPersonalAccountId: ").Append(BusinessPartnerPersonalAccountId).Append("\n");
            sb.Append("  ContactPersonContactId: ").Append(ContactPersonContactId).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("  Creditworthiness: ").Append(Creditworthiness).Append("\n");
            sb.Append("  CustomerContactId: ").Append(CustomerContactId).Append("\n");
            sb.Append("  CustomerPersonalAccountId: ").Append(CustomerPersonalAccountId).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Insurance: ").Append(Insurance).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  RepresentativeUserId: ").Append(RepresentativeUserId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  SubmissionDate: ").Append(SubmissionDate).Append("\n");
            sb.Append("  TermOfPayment: ").Append(TermOfPayment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateContractRequest" />
    /// </summary>
    public class UpdateContractRequestJsonConverter : JsonConverter<UpdateContractRequest>
    {
        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize OrderDate
        /// </summary>
        public static string OrderDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UpdateContractRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateContractRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<BillingTypeModel> billingType = default;
            Option<Guid> businessPartnerContactId = default;
            Option<Guid> businessPartnerPersonalAccountId = default;
            Option<Guid> contactPersonContactId = default;
            Option<string> creditLimit = default;
            Option<string> creditworthiness = default;
            Option<Guid> customerContactId = default;
            Option<Guid> customerPersonalAccountId = default;
            Option<DateTime> endDate = default;
            Option<double> insurance = default;
            Option<bool> isDeleted = default;
            Option<List<PatchItemModel>> items = default;
            Option<string> name = default;
            Option<string> number = default;
            Option<DateTime> orderDate = default;
            Option<Guid> projectId = default;
            Option<string> referenceNumber = default;
            Option<Guid> representativeUserId = default;
            Option<DateTime> startDate = default;
            Option<Guid> statusId = default;
            Option<string> submissionDate = default;
            Option<TermsOfPaymentModel> termOfPayment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "billingType":
                            string? billingTypeRawValue = utf8JsonReader.GetString();
                            if (billingTypeRawValue != null)
                                billingType = new Option<BillingTypeModel>(BillingTypeModelValueConverter.FromStringOrDefault(billingTypeRawValue));
                            break;
                        case "businessPartnerContactId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                businessPartnerContactId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "businessPartnerPersonalAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                businessPartnerPersonalAccountId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "contactPersonContactId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactPersonContactId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "creditLimit":
                            creditLimit = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "creditworthiness":
                            creditworthiness = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "customerContactId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerContactId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "customerPersonalAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerPersonalAccountId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "endDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "insurance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                insurance = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "items":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                items = new Option<List<PatchItemModel>>(JsonSerializer.Deserialize<List<PatchItemModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "orderDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                orderDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "projectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "referenceNumber":
                            referenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "representativeUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                representativeUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "startDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "statusId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                statusId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "submissionDate":
                            submissionDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "termOfPayment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                termOfPayment = new Option<TermsOfPaymentModel>(JsonSerializer.Deserialize<TermsOfPaymentModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (billingType.IsSet && billingType.Value == null)
                throw new ArgumentNullException(nameof(billingType), "Property is not nullable for class UpdateContractRequest.");

            if (termOfPayment.IsSet && termOfPayment.Value == null)
                throw new ArgumentNullException(nameof(termOfPayment), "Property is not nullable for class UpdateContractRequest.");

            //2return new UpdateContractRequest(billingType, businessPartnerContactId, businessPartnerPersonalAccountId, contactPersonContactId, creditLimit, creditworthiness, customerContactId, customerPersonalAccountId, endDate, insurance, isDeleted, items, name, number, orderDate, projectId, referenceNumber, representativeUserId, startDate, statusId, submissionDate, termOfPayment);
            return new UpdateContractRequest(billingType, businessPartnerContactId, businessPartnerPersonalAccountId, contactPersonContactId, creditLimit, creditworthiness, customerContactId, customerPersonalAccountId, endDate, insurance, isDeleted, items, name, number, orderDate, projectId, referenceNumber, representativeUserId, startDate, statusId, submissionDate, termOfPayment);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateContractRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateContractRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateContractRequest updateContractRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, updateContractRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateContractRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateContractRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, UpdateContractRequest updateContractRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateContractRequest.TermOfPaymentOption.IsSet && updateContractRequest.TermOfPayment == null)
                throw new ArgumentNullException(nameof(updateContractRequest.TermOfPayment), "Property is required for class UpdateContractRequest.");

            if (updateContractRequest.BillingTypeOption.IsSet)
            {
                var billingTypeRawValue = BillingTypeModelValueConverter.ToJsonValue(updateContractRequest.BillingType!.Value);
                writer.WriteNumber("billingType", billingTypeRawValue);
            }
            if (updateContractRequest.BusinessPartnerContactIdOption.IsSet)
                if (updateContractRequest.BusinessPartnerContactIdOption.Value != null)
                {
                    writer.WriteString("businessPartnerContactId", updateContractRequest.BusinessPartnerContactIdOption!.Value);
                    //var __value = updateContractRequest.BusinessPartnerContactIdOption.Value;
                    //writer.WriteString("businessPartnerContactId", __value);
                }
                else
                    writer.WriteNull("businessPartnerContactId");

            if (updateContractRequest.BusinessPartnerPersonalAccountIdOption.IsSet)
                if (updateContractRequest.BusinessPartnerPersonalAccountIdOption.Value != null)
                {
                    writer.WriteString("businessPartnerPersonalAccountId", updateContractRequest.BusinessPartnerPersonalAccountIdOption!.Value);
                    //var __value = updateContractRequest.BusinessPartnerPersonalAccountIdOption.Value;
                    //writer.WriteString("businessPartnerPersonalAccountId", __value);
                }
                else
                    writer.WriteNull("businessPartnerPersonalAccountId");

            if (updateContractRequest.ContactPersonContactIdOption.IsSet)
                if (updateContractRequest.ContactPersonContactIdOption.Value != null)
                {
                    writer.WriteString("contactPersonContactId", updateContractRequest.ContactPersonContactIdOption!.Value);
                    //var __value = updateContractRequest.ContactPersonContactIdOption.Value;
                    //writer.WriteString("contactPersonContactId", __value);
                }
                else
                    writer.WriteNull("contactPersonContactId");

            if (updateContractRequest.CreditLimitOption.IsSet)
                if (updateContractRequest.CreditLimitOption.Value != null)
                {
                    writer.WriteString("creditLimit", updateContractRequest.CreditLimit);
                    //var __value = updateContractRequest.CreditLimitOption.Value;
                    //writer.WriteString("creditLimit", __value);
                }
                else
                    writer.WriteNull("creditLimit");

            if (updateContractRequest.CreditworthinessOption.IsSet)
                if (updateContractRequest.CreditworthinessOption.Value != null)
                {
                    writer.WriteString("creditworthiness", updateContractRequest.Creditworthiness);
                    //var __value = updateContractRequest.CreditworthinessOption.Value;
                    //writer.WriteString("creditworthiness", __value);
                }
                else
                    writer.WriteNull("creditworthiness");

            if (updateContractRequest.CustomerContactIdOption.IsSet)
                if (updateContractRequest.CustomerContactIdOption.Value != null)
                {
                    writer.WriteString("customerContactId", updateContractRequest.CustomerContactIdOption!.Value);
                    //var __value = updateContractRequest.CustomerContactIdOption.Value;
                    //writer.WriteString("customerContactId", __value);
                }
                else
                    writer.WriteNull("customerContactId");

            if (updateContractRequest.CustomerPersonalAccountIdOption.IsSet)
                if (updateContractRequest.CustomerPersonalAccountIdOption.Value != null)
                {
                    writer.WriteString("customerPersonalAccountId", updateContractRequest.CustomerPersonalAccountIdOption!.Value);
                    //var __value = updateContractRequest.CustomerPersonalAccountIdOption.Value;
                    //writer.WriteString("customerPersonalAccountId", __value);
                }
                else
                    writer.WriteNull("customerPersonalAccountId");

            if (updateContractRequest.EndDateOption.IsSet)
                if (updateContractRequest.EndDateOption.Value != null)
                {
                    writer.WriteString("endDate", updateContractRequest.EndDateOption!.Value.ToString(EndDateFormat));
                    //var __value = updateContractRequest.EndDateOption.Value;
                    //writer.WriteString("endDate", __value);
                }
                else
                    writer.WriteNull("endDate");

            if (updateContractRequest.InsuranceOption.IsSet)
                if (updateContractRequest.InsuranceOption.Value != null)
                {
                    writer.WriteNumber("insurance", updateContractRequest.InsuranceOption!.Value);
                    //var __value = updateContractRequest.InsuranceOption.Value;
                    //writer.WriteString("insurance", __value);
                }
                else
                    writer.WriteNull("insurance");

            if (updateContractRequest.IsDeletedOption.IsSet)
                if (updateContractRequest.IsDeletedOption.Value != null)
                {
                    writer.WriteBoolean("isDeleted", updateContractRequest.IsDeletedOption!.Value);
                    //var __value = updateContractRequest.IsDeletedOption.Value;
                    //writer.WriteString("isDeleted", __value);
                }
                else
                    writer.WriteNull("isDeleted");

            if (updateContractRequest.ItemsOption.IsSet)
                if (updateContractRequest.ItemsOption.Value != null)
                {
                    writer.WritePropertyName("items");
                    JsonSerializer.Serialize(writer, updateContractRequest.Items, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items");
            if (updateContractRequest.NameOption.IsSet)
                if (updateContractRequest.NameOption.Value != null)
                {
                    writer.WriteString("name", updateContractRequest.Name);
                    //var __value = updateContractRequest.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (updateContractRequest.NumberOption.IsSet)
                if (updateContractRequest.NumberOption.Value != null)
                {
                    writer.WriteString("number", updateContractRequest.Number);
                    //var __value = updateContractRequest.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (updateContractRequest.OrderDateOption.IsSet)
                if (updateContractRequest.OrderDateOption.Value != null)
                {
                    writer.WriteString("orderDate", updateContractRequest.OrderDateOption!.Value.ToString(OrderDateFormat));
                    //var __value = updateContractRequest.OrderDateOption.Value;
                    //writer.WriteString("orderDate", __value);
                }
                else
                    writer.WriteNull("orderDate");

            if (updateContractRequest.ProjectIdOption.IsSet)
                if (updateContractRequest.ProjectIdOption.Value != null)
                {
                    writer.WriteString("projectId", updateContractRequest.ProjectIdOption!.Value);
                    //var __value = updateContractRequest.ProjectIdOption.Value;
                    //writer.WriteString("projectId", __value);
                }
                else
                    writer.WriteNull("projectId");

            if (updateContractRequest.ReferenceNumberOption.IsSet)
                if (updateContractRequest.ReferenceNumberOption.Value != null)
                {
                    writer.WriteString("referenceNumber", updateContractRequest.ReferenceNumber);
                    //var __value = updateContractRequest.ReferenceNumberOption.Value;
                    //writer.WriteString("referenceNumber", __value);
                }
                else
                    writer.WriteNull("referenceNumber");

            if (updateContractRequest.RepresentativeUserIdOption.IsSet)
                if (updateContractRequest.RepresentativeUserIdOption.Value != null)
                {
                    writer.WriteString("representativeUserId", updateContractRequest.RepresentativeUserIdOption!.Value);
                    //var __value = updateContractRequest.RepresentativeUserIdOption.Value;
                    //writer.WriteString("representativeUserId", __value);
                }
                else
                    writer.WriteNull("representativeUserId");

            if (updateContractRequest.StartDateOption.IsSet)
                if (updateContractRequest.StartDateOption.Value != null)
                {
                    writer.WriteString("startDate", updateContractRequest.StartDateOption!.Value.ToString(StartDateFormat));
                    //var __value = updateContractRequest.StartDateOption.Value;
                    //writer.WriteString("startDate", __value);
                }
                else
                    writer.WriteNull("startDate");

            if (updateContractRequest.StatusIdOption.IsSet)
                if (updateContractRequest.StatusIdOption.Value != null)
                {
                    writer.WriteString("statusId", updateContractRequest.StatusIdOption!.Value);
                    //var __value = updateContractRequest.StatusIdOption.Value;
                    //writer.WriteString("statusId", __value);
                }
                else
                    writer.WriteNull("statusId");

            if (updateContractRequest.SubmissionDateOption.IsSet)
                if (updateContractRequest.SubmissionDateOption.Value != null)
                {
                    writer.WriteString("submissionDate", updateContractRequest.SubmissionDate);
                    //var __value = updateContractRequest.SubmissionDateOption.Value;
                    //writer.WriteString("submissionDate", __value);
                }
                else
                    writer.WriteNull("submissionDate");

            if (updateContractRequest.TermOfPaymentOption.IsSet)
            {
                writer.WritePropertyName("termOfPayment");
                JsonSerializer.Serialize(writer, updateContractRequest.TermOfPayment, jsonSerializerOptions);
            }
        }
    }
}
