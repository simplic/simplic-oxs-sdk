// <auto-generated>
/*
 * Simplic.OxS.Contract
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Contract
{
    /// <summary>
    /// ArticleModel
    /// </summary>
    public partial class ArticleModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ArticleModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleModel" /> class.
        /// </summary>
        /// <param name="articleGroup">articleGroup</param>
        /// <param name="description">description</param>
        /// <param name="fullName">fullName</param>
        /// <param name="id">id</param>
        /// <param name="number">number</param>
        /// <param name="shortName">shortName</param>
        /// <param name="uniqueNumber">uniqueNumber</param>
        //[JsonConstructor]
        public ArticleModel(Option<ArticleGroupModel> articleGroup = default, Option<string> description = default, Option<string> fullName = default, Option<Guid> id = default, Option<int> number = default, Option<string> shortName = default, Option<int> uniqueNumber = default)
        {
            ArticleGroupOption = articleGroup;
            DescriptionOption = description;
            FullNameOption = fullName;
            IdOption = id;
            NumberOption = number;
            ShortNameOption = shortName;
            UniqueNumberOption = uniqueNumber;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ArticleGroup
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ArticleGroupModel>))]
        public Option<ArticleGroupModel> ArticleGroupOption { get; private set; }

        /// <summary>
        /// Gets or Sets ArticleGroup
        /// </summary>
        [JsonPropertyName("articleGroup")]
        public ArticleGroupModel? ArticleGroup { get { return this. ArticleGroupOption; } set { this.ArticleGroupOption = new Option<ArticleGroupModel>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this. DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FullName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> FullNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [JsonPropertyName("fullName")]
        public string? FullName { get { return this. FullNameOption; } set { this.FullNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public int? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of ShortName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ShortNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [JsonPropertyName("shortName")]
        public string? ShortName { get { return this. ShortNameOption; } set { this.ShortNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UniqueNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> UniqueNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets UniqueNumber
        /// </summary>
        [JsonPropertyName("uniqueNumber")]
        public int? UniqueNumber { get { return this. UniqueNumberOption; } set { this.UniqueNumberOption = new Option<int>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ArticleModel {\n");
            sb.Append("  ArticleGroup: ").Append(ArticleGroup).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  UniqueNumber: ").Append(UniqueNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ArticleModel" />
    /// </summary>
    public class ArticleModelJsonConverter : JsonConverter<ArticleModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ArticleModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ArticleModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ArticleGroupModel> articleGroup = default;
            Option<string> description = default;
            Option<string> fullName = default;
            Option<Guid> id = default;
            Option<int> number = default;
            Option<string> shortName = default;
            Option<int> uniqueNumber = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "articleGroup":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                articleGroup = new Option<ArticleGroupModel>(JsonSerializer.Deserialize<ArticleGroupModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fullName":
                            fullName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "number":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                number = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "shortName":
                            shortName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "uniqueNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                uniqueNumber = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (articleGroup.IsSet && articleGroup.Value == null)
                throw new ArgumentNullException(nameof(articleGroup), "Property is not nullable for class ArticleModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ArticleModel.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class ArticleModel.");

            if (uniqueNumber.IsSet && uniqueNumber.Value == null)
                throw new ArgumentNullException(nameof(uniqueNumber), "Property is not nullable for class ArticleModel.");

            //2return new ArticleModel(articleGroup, description, fullName, id, number, shortName, uniqueNumber);
            return new ArticleModel(articleGroup, description, fullName, id, number, shortName, uniqueNumber);
        }

        /// <summary>
        /// Serializes a <see cref="ArticleModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="articleModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ArticleModel articleModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, articleModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ArticleModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="articleModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ArticleModel articleModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (articleModel.ArticleGroupOption.IsSet && articleModel.ArticleGroup == null)
                throw new ArgumentNullException(nameof(articleModel.ArticleGroup), "Property is required for class ArticleModel.");

            if (articleModel.ArticleGroupOption.IsSet)
            {
                writer.WritePropertyName("articleGroup");
                JsonSerializer.Serialize(writer, articleModel.ArticleGroup, jsonSerializerOptions);
            }
            if (articleModel.DescriptionOption.IsSet)
                if (articleModel.DescriptionOption.Value != null)
                {
                    writer.WriteString("description", articleModel.Description);
                    //var __value = articleModel.DescriptionOption.Value;
                    //writer.WriteString("description", __value);
                }
                else
                    writer.WriteNull("description");

            if (articleModel.FullNameOption.IsSet)
                if (articleModel.FullNameOption.Value != null)
                {
                    writer.WriteString("fullName", articleModel.FullName);
                    //var __value = articleModel.FullNameOption.Value;
                    //writer.WriteString("fullName", __value);
                }
                else
                    writer.WriteNull("fullName");

            if (articleModel.IdOption.IsSet)
                writer.WriteString("id", articleModel.IdOption!.Value);

            if (articleModel.NumberOption.IsSet)
                writer.WriteNumber("number", articleModel.NumberOption!.Value);

            if (articleModel.ShortNameOption.IsSet)
                if (articleModel.ShortNameOption.Value != null)
                {
                    writer.WriteString("shortName", articleModel.ShortName);
                    //var __value = articleModel.ShortNameOption.Value;
                    //writer.WriteString("shortName", __value);
                }
                else
                    writer.WriteNull("shortName");

            if (articleModel.UniqueNumberOption.IsSet)
                writer.WriteNumber("uniqueNumber", articleModel.UniqueNumberOption!.Value);
        }
    }
}
