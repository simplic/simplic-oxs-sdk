// <auto-generated>
/*
 * Simplic.OxS.Contract
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Contract
{
    /// <summary>
    /// PatchCostObject
    /// </summary>
    public partial class PatchCostObject : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public PatchCostObject()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PatchCostObject" /> class.
        /// </summary>
        /// <param name="additionalFreightCost">additionalFreightCost</param>
        /// <param name="additionalMaterialCost">additionalMaterialCost</param>
        /// <param name="endDate">endDate</param>
        /// <param name="freightPrice">freightPrice</param>
        /// <param name="id">id</param>
        /// <param name="isDefault">isDefault</param>
        /// <param name="minimumDistance">minimumDistance</param>
        /// <param name="pricePerKilometer">pricePerKilometer</param>
        /// <param name="purchasePrice">purchasePrice</param>
        /// <param name="salePrice">salePrice</param>
        /// <param name="startDate">startDate</param>
        /// <param name="tollPrice">tollPrice</param>
        //[JsonConstructor]
        public PatchCostObject(Option<double> additionalFreightCost = default, Option<double> additionalMaterialCost = default, Option<DateTime> endDate = default, Option<double> freightPrice = default, Option<Guid> id = default, Option<bool> isDefault = default, Option<double> minimumDistance = default, Option<double> pricePerKilometer = default, Option<double> purchasePrice = default, Option<double> salePrice = default, Option<DateTime> startDate = default, Option<double> tollPrice = default)
        {
            AdditionalFreightCostOption = additionalFreightCost;
            AdditionalMaterialCostOption = additionalMaterialCost;
            EndDateOption = endDate;
            FreightPriceOption = freightPrice;
            IdOption = id;
            IsDefaultOption = isDefault;
            MinimumDistanceOption = minimumDistance;
            PricePerKilometerOption = pricePerKilometer;
            PurchasePriceOption = purchasePrice;
            SalePriceOption = salePrice;
            StartDateOption = startDate;
            TollPriceOption = tollPrice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AdditionalFreightCost
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> AdditionalFreightCostOption { get; private set; }

        /// <summary>
        /// Gets or Sets AdditionalFreightCost
        /// </summary>
        [JsonPropertyName("additionalFreightCost")]
        public double? AdditionalFreightCost { get { return this. AdditionalFreightCostOption; } set { this.AdditionalFreightCostOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalMaterialCost
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> AdditionalMaterialCostOption { get; private set; }

        /// <summary>
        /// Gets or Sets AdditionalMaterialCost
        /// </summary>
        [JsonPropertyName("additionalMaterialCost")]
        public double? AdditionalMaterialCost { get { return this. AdditionalMaterialCostOption; } set { this.AdditionalMaterialCostOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [JsonPropertyName("endDate")]
        public DateTime? EndDate { get { return this. EndDateOption; } set { this.EndDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of FreightPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> FreightPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets FreightPrice
        /// </summary>
        [JsonPropertyName("freightPrice")]
        public double? FreightPrice { get { return this. FreightPriceOption; } set { this.FreightPriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of IsDefault
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDefaultOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [JsonPropertyName("isDefault")]
        public bool? IsDefault { get { return this. IsDefaultOption; } set { this.IsDefaultOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of MinimumDistance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> MinimumDistanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets MinimumDistance
        /// </summary>
        [JsonPropertyName("minimumDistance")]
        public double? MinimumDistance { get { return this. MinimumDistanceOption; } set { this.MinimumDistanceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of PricePerKilometer
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> PricePerKilometerOption { get; private set; }

        /// <summary>
        /// Gets or Sets PricePerKilometer
        /// </summary>
        [JsonPropertyName("pricePerKilometer")]
        public double? PricePerKilometer { get { return this. PricePerKilometerOption; } set { this.PricePerKilometerOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of PurchasePrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> PurchasePriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets PurchasePrice
        /// </summary>
        [JsonPropertyName("purchasePrice")]
        public double? PurchasePrice { get { return this. PurchasePriceOption; } set { this.PurchasePriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SalePrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SalePriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets SalePrice
        /// </summary>
        [JsonPropertyName("salePrice")]
        public double? SalePrice { get { return this. SalePriceOption; } set { this.SalePriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [JsonPropertyName("startDate")]
        public DateTime? StartDate { get { return this. StartDateOption; } set { this.StartDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of TollPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TollPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TollPrice
        /// </summary>
        [JsonPropertyName("tollPrice")]
        public double? TollPrice { get { return this. TollPriceOption; } set { this.TollPriceOption = new Option<double>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchCostObject {\n");
            sb.Append("  AdditionalFreightCost: ").Append(AdditionalFreightCost).Append("\n");
            sb.Append("  AdditionalMaterialCost: ").Append(AdditionalMaterialCost).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FreightPrice: ").Append(FreightPrice).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  MinimumDistance: ").Append(MinimumDistance).Append("\n");
            sb.Append("  PricePerKilometer: ").Append(PricePerKilometer).Append("\n");
            sb.Append("  PurchasePrice: ").Append(PurchasePrice).Append("\n");
            sb.Append("  SalePrice: ").Append(SalePrice).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TollPrice: ").Append(TollPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PatchCostObject" />
    /// </summary>
    public class PatchCostObjectJsonConverter : JsonConverter<PatchCostObject>
    {
        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PatchCostObject" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PatchCostObject Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double> additionalFreightCost = default;
            Option<double> additionalMaterialCost = default;
            Option<DateTime> endDate = default;
            Option<double> freightPrice = default;
            Option<Guid> id = default;
            Option<bool> isDefault = default;
            Option<double> minimumDistance = default;
            Option<double> pricePerKilometer = default;
            Option<double> purchasePrice = default;
            Option<double> salePrice = default;
            Option<DateTime> startDate = default;
            Option<double> tollPrice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "additionalFreightCost":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalFreightCost = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "additionalMaterialCost":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                additionalMaterialCost = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "endDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "freightPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                freightPrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "isDefault":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDefault = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "minimumDistance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minimumDistance = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "pricePerKilometer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pricePerKilometer = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "purchasePrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                purchasePrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "salePrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                salePrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "startDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tollPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tollPrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PatchCostObject.");

            //2return new PatchCostObject(additionalFreightCost, additionalMaterialCost, endDate, freightPrice, id, isDefault, minimumDistance, pricePerKilometer, purchasePrice, salePrice, startDate, tollPrice);
            return new PatchCostObject(additionalFreightCost, additionalMaterialCost, endDate, freightPrice, id, isDefault, minimumDistance, pricePerKilometer, purchasePrice, salePrice, startDate, tollPrice);
        }

        /// <summary>
        /// Serializes a <see cref="PatchCostObject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchCostObject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PatchCostObject patchCostObject, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, patchCostObject, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PatchCostObject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchCostObject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, PatchCostObject patchCostObject, JsonSerializerOptions jsonSerializerOptions)
        {
            if (patchCostObject.AdditionalFreightCostOption.IsSet)
                if (patchCostObject.AdditionalFreightCostOption.Value != null)
                {
                    writer.WriteNumber("additionalFreightCost", patchCostObject.AdditionalFreightCostOption!.Value);
                    //var __value = patchCostObject.AdditionalFreightCostOption.Value;
                    //writer.WriteString("additionalFreightCost", __value);
                }
                else
                    writer.WriteNull("additionalFreightCost");

            if (patchCostObject.AdditionalMaterialCostOption.IsSet)
                if (patchCostObject.AdditionalMaterialCostOption.Value != null)
                {
                    writer.WriteNumber("additionalMaterialCost", patchCostObject.AdditionalMaterialCostOption!.Value);
                    //var __value = patchCostObject.AdditionalMaterialCostOption.Value;
                    //writer.WriteString("additionalMaterialCost", __value);
                }
                else
                    writer.WriteNull("additionalMaterialCost");

            if (patchCostObject.EndDateOption.IsSet)
                if (patchCostObject.EndDateOption.Value != null)
                {
                    writer.WriteString("endDate", patchCostObject.EndDateOption!.Value.ToString(EndDateFormat));
                    //var __value = patchCostObject.EndDateOption.Value;
                    //writer.WriteString("endDate", __value);
                }
                else
                    writer.WriteNull("endDate");

            if (patchCostObject.FreightPriceOption.IsSet)
                if (patchCostObject.FreightPriceOption.Value != null)
                {
                    writer.WriteNumber("freightPrice", patchCostObject.FreightPriceOption!.Value);
                    //var __value = patchCostObject.FreightPriceOption.Value;
                    //writer.WriteString("freightPrice", __value);
                }
                else
                    writer.WriteNull("freightPrice");

            if (patchCostObject.IdOption.IsSet)
                writer.WriteString("id", patchCostObject.IdOption!.Value);

            if (patchCostObject.IsDefaultOption.IsSet)
                if (patchCostObject.IsDefaultOption.Value != null)
                {
                    writer.WriteBoolean("isDefault", patchCostObject.IsDefaultOption!.Value);
                    //var __value = patchCostObject.IsDefaultOption.Value;
                    //writer.WriteString("isDefault", __value);
                }
                else
                    writer.WriteNull("isDefault");

            if (patchCostObject.MinimumDistanceOption.IsSet)
                if (patchCostObject.MinimumDistanceOption.Value != null)
                {
                    writer.WriteNumber("minimumDistance", patchCostObject.MinimumDistanceOption!.Value);
                    //var __value = patchCostObject.MinimumDistanceOption.Value;
                    //writer.WriteString("minimumDistance", __value);
                }
                else
                    writer.WriteNull("minimumDistance");

            if (patchCostObject.PricePerKilometerOption.IsSet)
                if (patchCostObject.PricePerKilometerOption.Value != null)
                {
                    writer.WriteNumber("pricePerKilometer", patchCostObject.PricePerKilometerOption!.Value);
                    //var __value = patchCostObject.PricePerKilometerOption.Value;
                    //writer.WriteString("pricePerKilometer", __value);
                }
                else
                    writer.WriteNull("pricePerKilometer");

            if (patchCostObject.PurchasePriceOption.IsSet)
                if (patchCostObject.PurchasePriceOption.Value != null)
                {
                    writer.WriteNumber("purchasePrice", patchCostObject.PurchasePriceOption!.Value);
                    //var __value = patchCostObject.PurchasePriceOption.Value;
                    //writer.WriteString("purchasePrice", __value);
                }
                else
                    writer.WriteNull("purchasePrice");

            if (patchCostObject.SalePriceOption.IsSet)
                if (patchCostObject.SalePriceOption.Value != null)
                {
                    writer.WriteNumber("salePrice", patchCostObject.SalePriceOption!.Value);
                    //var __value = patchCostObject.SalePriceOption.Value;
                    //writer.WriteString("salePrice", __value);
                }
                else
                    writer.WriteNull("salePrice");

            if (patchCostObject.StartDateOption.IsSet)
                if (patchCostObject.StartDateOption.Value != null)
                {
                    writer.WriteString("startDate", patchCostObject.StartDateOption!.Value.ToString(StartDateFormat));
                    //var __value = patchCostObject.StartDateOption.Value;
                    //writer.WriteString("startDate", __value);
                }
                else
                    writer.WriteNull("startDate");

            if (patchCostObject.TollPriceOption.IsSet)
                if (patchCostObject.TollPriceOption.Value != null)
                {
                    writer.WriteNumber("tollPrice", patchCostObject.TollPriceOption!.Value);
                    //var __value = patchCostObject.TollPriceOption.Value;
                    //writer.WriteString("tollPrice", __value);
                }
                else
                    writer.WriteNull("tollPrice");
        }
    }
}
