// <auto-generated>
/*
 * Simplic.OxS.Organization
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Organization
{
    //--Custom wrapper start
    /// <summary>
    /// Client to interact with the API endpoints of the organization service.
    /// </summary>
    public interface IOrganizationLinkInvitationClient
    {
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        string GetBasePath();

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        //IReadableConfiguration Configuration;

        /// <summary>
        /// Accept a pending invitation 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganizationLinkInvitationAcceptedResponse</returns>
        OrganizationLinkInvitationAcceptedResponse AcceptOneTime(Guid id);

        /// <summary>
        /// Accept a pending invitation 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <returns>ApiResponse of OrganizationLinkInvitationAcceptedResponse</returns>
        ApiResponse<OrganizationLinkInvitationAcceptedResponse> AcceptOneTimeWithHttpInfo(Guid id);
         
        /// <summary>
        /// Accept a pending invitation 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationLinkInvitationAcceptedResponse</returns>
        Task<OrganizationLinkInvitationAcceptedResponse> AcceptOneTimeAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Accept a pending invitation 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationLinkInvitationAcceptedResponse)</returns>
        Task<ApiResponse<OrganizationLinkInvitationAcceptedResponse>> AcceptOneTimeWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new invitation for linking with another organization 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationLinkInvitationRequest">Invitation request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganizationLinkInvitationModel</returns>
        OrganizationLinkInvitationModel CreateOneTime(OrganizationLinkInvitationRequest organizationLinkInvitationRequest = default(OrganizationLinkInvitationRequest));

        /// <summary>
        /// Creates a new invitation for linking with another organization 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationLinkInvitationRequest">Invitation request (optional)</param>
        /// <returns>ApiResponse of OrganizationLinkInvitationModel</returns>
        ApiResponse<OrganizationLinkInvitationModel> CreateOneTimeWithHttpInfo(OrganizationLinkInvitationRequest organizationLinkInvitationRequest = default(OrganizationLinkInvitationRequest));
         
        /// <summary>
        /// Creates a new invitation for linking with another organization 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationLinkInvitationRequest">Invitation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationLinkInvitationModel</returns>
        Task<OrganizationLinkInvitationModel> CreateOneTimeAsync(OrganizationLinkInvitationRequest organizationLinkInvitationRequest = default(OrganizationLinkInvitationRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new invitation for linking with another organization 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationLinkInvitationRequest">Invitation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationLinkInvitationModel)</returns>
        Task<ApiResponse<OrganizationLinkInvitationModel>> CreateOneTimeWithHttpInfoAsync(OrganizationLinkInvitationRequest organizationLinkInvitationRequest = default(OrganizationLinkInvitationRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new invitation for linking with another organization 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationLinkStaticInvitationRequest">Invitation request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganizationLinkInvitationModel</returns>
        OrganizationLinkInvitationModel CreateStatic(OrganizationLinkStaticInvitationRequest organizationLinkStaticInvitationRequest = default(OrganizationLinkStaticInvitationRequest));

        /// <summary>
        /// Creates a new invitation for linking with another organization 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationLinkStaticInvitationRequest">Invitation request (optional)</param>
        /// <returns>ApiResponse of OrganizationLinkInvitationModel</returns>
        ApiResponse<OrganizationLinkInvitationModel> CreateStaticWithHttpInfo(OrganizationLinkStaticInvitationRequest organizationLinkStaticInvitationRequest = default(OrganizationLinkStaticInvitationRequest));
         
        /// <summary>
        /// Creates a new invitation for linking with another organization 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationLinkStaticInvitationRequest">Invitation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationLinkInvitationModel</returns>
        Task<OrganizationLinkInvitationModel> CreateStaticAsync(OrganizationLinkStaticInvitationRequest organizationLinkStaticInvitationRequest = default(OrganizationLinkStaticInvitationRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new invitation for linking with another organization 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationLinkStaticInvitationRequest">Invitation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationLinkInvitationModel)</returns>
        Task<ApiResponse<OrganizationLinkInvitationModel>> CreateStaticWithHttpInfoAsync(OrganizationLinkStaticInvitationRequest organizationLinkStaticInvitationRequest = default(OrganizationLinkStaticInvitationRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Decline a pending invitation 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeclineOneTime(Guid id);

        /// <summary>
        /// Decline a pending invitation 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeclineOneTimeWithHttpInfo(Guid id);
         
        /// <summary>
        /// Decline a pending invitation 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeclineOneTimeAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Decline a pending invitation 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeclineOneTimeWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get static invitation links 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OrganizationLinkInvitationModel&gt;</returns>
        List<OrganizationLinkInvitationModel> Get();

        /// <summary>
        /// Get static invitation links 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
                /// <returns>ApiResponse of List&lt;OrganizationLinkInvitationModel&gt;</returns>
        ApiResponse<List<OrganizationLinkInvitationModel>> GetWithHttpInfo();
         
        /// <summary>
        /// Get static invitation links 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrganizationLinkInvitationModel&gt;</returns>
        Task<List<OrganizationLinkInvitationModel>> GetAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get static invitation links 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrganizationLinkInvitationModel&gt;)</returns>
        Task<ApiResponse<List<OrganizationLinkInvitationModel>>> GetWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get invitation by token 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Invitation token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganizationLinkInvitationModel</returns>
        OrganizationLinkInvitationModel GetByToken(string token);

        /// <summary>
        /// Get invitation by token 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Invitation token</param>
        /// <returns>ApiResponse of OrganizationLinkInvitationModel</returns>
        ApiResponse<OrganizationLinkInvitationModel> GetByTokenWithHttpInfo(string token);
         
        /// <summary>
        /// Get invitation by token 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Invitation token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationLinkInvitationModel</returns>
        Task<OrganizationLinkInvitationModel> GetByTokenAsync(string token, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get invitation by token 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Invitation token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationLinkInvitationModel)</returns>
        Task<ApiResponse<OrganizationLinkInvitationModel>> GetByTokenWithHttpInfoAsync(string token, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of all pending invitations 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OrganizationLinkInvitationModel&gt;</returns>
        List<OrganizationLinkInvitationModel> GetMyInvitations();

        /// <summary>
        /// Gets a list of all pending invitations 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
                /// <returns>ApiResponse of List&lt;OrganizationLinkInvitationModel&gt;</returns>
        ApiResponse<List<OrganizationLinkInvitationModel>> GetMyInvitationsWithHttpInfo();
         
        /// <summary>
        /// Gets a list of all pending invitations 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrganizationLinkInvitationModel&gt;</returns>
        Task<List<OrganizationLinkInvitationModel>> GetMyInvitationsAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of all pending invitations 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrganizationLinkInvitationModel&gt;)</returns>
        Task<ApiResponse<List<OrganizationLinkInvitationModel>>> GetMyInvitationsWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an invitation 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete(Guid id);

        /// <summary>
        /// Delete an invitation 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(Guid id);
         
        /// <summary>
        /// Delete an invitation 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an invitation 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create an orgainzation link by using a static token 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Invitation token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganizationLinkInvitationAcceptedResponse</returns>
        OrganizationLinkInvitationAcceptedResponse JoinStatic(string token);

        /// <summary>
        /// Create an orgainzation link by using a static token 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Invitation token</param>
        /// <returns>ApiResponse of OrganizationLinkInvitationAcceptedResponse</returns>
        ApiResponse<OrganizationLinkInvitationAcceptedResponse> JoinStaticWithHttpInfo(string token);
         
        /// <summary>
        /// Create an orgainzation link by using a static token 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Invitation token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationLinkInvitationAcceptedResponse</returns>
        Task<OrganizationLinkInvitationAcceptedResponse> JoinStaticAsync(string token, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create an orgainzation link by using a static token 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Invitation token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationLinkInvitationAcceptedResponse)</returns>
        Task<ApiResponse<OrganizationLinkInvitationAcceptedResponse>> JoinStaticWithHttpInfoAsync(string token, CancellationToken cancellationToken = default(CancellationToken));

    }

    /// <inheritdoc cref="IOrganizationLinkInvitationClient">
    public class OrganizationLinkInvitationClient : IOrganizationLinkInvitationClient
    {
        private __OrganizationLinkInvitationClient _internalClient;
        private HttpClient _httpClient;

        public OrganizationLinkInvitationClient(string host, string? authorization = null)
        {
            _httpClient = new HttpClient() { BaseAddress = new Uri($"{host}/organization-api/v1") };
            var jsonSerializerOptions = new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            var jsonSerializerOptionsProvider = new JsonSerializerOptionsProvider(jsonSerializerOptions);
            var events = new OrganizationLinkInvitationClientEvents();
            if (authorization is null)
            {
                _internalClient = new __OrganizationLinkInvitationClient(_httpClient, jsonSerializerOptionsProvider, events, new NullTokenProvider<ApiKeyToken>());
            }
            else
            {
                var token = new ApiKeyToken(authorization, "Authorization", "");
                _internalClient = new __OrganizationLinkInvitationClient(_httpClient, jsonSerializerOptionsProvider, events, new ApiKeyTokenProvider(new[] { token }));
            }
        }

        public OrganizationLinkInvitationClient(Environment env, string? authorization = null)
            : this(
                env == Environment.Development
                    ? "https://dev-oxs.simplic.io"
                    : "https://oxs.simplic.io",
                authorization
            ) { }

        /// <inheritdoc />
        public string GetBasePath() => _httpClient.BaseAddress.ToString();

        /// <inheritdoc />
        public OrganizationLinkInvitationAcceptedResponse AcceptOneTime(Guid id)
        {
            try
            {
                var response = _internalClient.AcceptOneTimeAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<OrganizationLinkInvitationAcceptedResponse> AcceptOneTimeWithHttpInfo(Guid id)
        {
            try
            {
                var response = _internalClient.AcceptOneTimeAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<OrganizationLinkInvitationAcceptedResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<OrganizationLinkInvitationAcceptedResponse> AcceptOneTimeAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.AcceptOneTimeAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<OrganizationLinkInvitationAcceptedResponse>> AcceptOneTimeWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.AcceptOneTimeAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<OrganizationLinkInvitationAcceptedResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public OrganizationLinkInvitationModel CreateOneTime(OrganizationLinkInvitationRequest organizationLinkInvitationRequest = default(OrganizationLinkInvitationRequest))
        {
            try
            {
                var response = _internalClient.CreateOneTimeAsync(organizationLinkInvitationRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<OrganizationLinkInvitationModel> CreateOneTimeWithHttpInfo(OrganizationLinkInvitationRequest organizationLinkInvitationRequest = default(OrganizationLinkInvitationRequest))
        {
            try
            {
                var response = _internalClient.CreateOneTimeAsync(organizationLinkInvitationRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<OrganizationLinkInvitationModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<OrganizationLinkInvitationModel> CreateOneTimeAsync(OrganizationLinkInvitationRequest organizationLinkInvitationRequest = default(OrganizationLinkInvitationRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.CreateOneTimeAsync(organizationLinkInvitationRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<OrganizationLinkInvitationModel>> CreateOneTimeWithHttpInfoAsync(OrganizationLinkInvitationRequest organizationLinkInvitationRequest = default(OrganizationLinkInvitationRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.CreateOneTimeAsync(organizationLinkInvitationRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<OrganizationLinkInvitationModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public OrganizationLinkInvitationModel CreateStatic(OrganizationLinkStaticInvitationRequest organizationLinkStaticInvitationRequest = default(OrganizationLinkStaticInvitationRequest))
        {
            try
            {
                var response = _internalClient.CreateStaticAsync(organizationLinkStaticInvitationRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<OrganizationLinkInvitationModel> CreateStaticWithHttpInfo(OrganizationLinkStaticInvitationRequest organizationLinkStaticInvitationRequest = default(OrganizationLinkStaticInvitationRequest))
        {
            try
            {
                var response = _internalClient.CreateStaticAsync(organizationLinkStaticInvitationRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<OrganizationLinkInvitationModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<OrganizationLinkInvitationModel> CreateStaticAsync(OrganizationLinkStaticInvitationRequest organizationLinkStaticInvitationRequest = default(OrganizationLinkStaticInvitationRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.CreateStaticAsync(organizationLinkStaticInvitationRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<OrganizationLinkInvitationModel>> CreateStaticWithHttpInfoAsync(OrganizationLinkStaticInvitationRequest organizationLinkStaticInvitationRequest = default(OrganizationLinkStaticInvitationRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.CreateStaticAsync(organizationLinkStaticInvitationRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<OrganizationLinkInvitationModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void DeclineOneTime(Guid id)
        {
            try
            {
                var response = _internalClient.DeclineOneTimeAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> DeclineOneTimeWithHttpInfo(Guid id)
        {
            try
            {
                var response = _internalClient.DeclineOneTimeAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task DeclineOneTimeAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.DeclineOneTimeAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> DeclineOneTimeWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.DeclineOneTimeAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public List<OrganizationLinkInvitationModel> Get()
        {
            try
            {
                var response = _internalClient.GetAsync().GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<List<OrganizationLinkInvitationModel>> GetWithHttpInfo()
        {
            try
            {
                var response = _internalClient.GetAsync().GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<OrganizationLinkInvitationModel>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<List<OrganizationLinkInvitationModel>> GetAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAsync(cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<List<OrganizationLinkInvitationModel>>> GetWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAsync(cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<OrganizationLinkInvitationModel>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public OrganizationLinkInvitationModel GetByToken(string token)
        {
            try
            {
                var response = _internalClient.GetByTokenAsync(token).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<OrganizationLinkInvitationModel> GetByTokenWithHttpInfo(string token)
        {
            try
            {
                var response = _internalClient.GetByTokenAsync(token).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<OrganizationLinkInvitationModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<OrganizationLinkInvitationModel> GetByTokenAsync(string token, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByTokenAsync(token, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<OrganizationLinkInvitationModel>> GetByTokenWithHttpInfoAsync(string token, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByTokenAsync(token, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<OrganizationLinkInvitationModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public List<OrganizationLinkInvitationModel> GetMyInvitations()
        {
            try
            {
                var response = _internalClient.GetMyInvitationsAsync().GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<List<OrganizationLinkInvitationModel>> GetMyInvitationsWithHttpInfo()
        {
            try
            {
                var response = _internalClient.GetMyInvitationsAsync().GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<OrganizationLinkInvitationModel>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<List<OrganizationLinkInvitationModel>> GetMyInvitationsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetMyInvitationsAsync(cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<List<OrganizationLinkInvitationModel>>> GetMyInvitationsWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetMyInvitationsAsync(cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<OrganizationLinkInvitationModel>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void Delete(Guid id)
        {
            try
            {
                var response = _internalClient.DeleteAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> DeleteWithHttpInfo(Guid id)
        {
            try
            {
                var response = _internalClient.DeleteAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task DeleteAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.DeleteAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.DeleteAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public OrganizationLinkInvitationAcceptedResponse JoinStatic(string token)
        {
            try
            {
                var response = _internalClient.JoinStaticAsync(token).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<OrganizationLinkInvitationAcceptedResponse> JoinStaticWithHttpInfo(string token)
        {
            try
            {
                var response = _internalClient.JoinStaticAsync(token).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<OrganizationLinkInvitationAcceptedResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<OrganizationLinkInvitationAcceptedResponse> JoinStaticAsync(string token, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.JoinStaticAsync(token, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<OrganizationLinkInvitationAcceptedResponse>> JoinStaticWithHttpInfoAsync(string token, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.JoinStaticAsync(token, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<OrganizationLinkInvitationAcceptedResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    

        private string FormatErrorMessage(string message, int errorCode) => $"<{errorCode} - {(HttpStatusCode)errorCode}> {message}";
    }
    //--Custom wrapper end
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    internal interface __IOrganizationLinkInvitationClient : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OrganizationLinkInvitationClientEvents Events { get; }

        /// <summary>
        /// Accept a pending invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse"/>&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse> AcceptOneTimeAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Accept a pending invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse"/>?&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse?> AcceptOneTimeOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new invitation for linking with another organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationLinkInvitationRequest">Invitation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse"/>&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse> CreateOneTimeAsync(Option<OrganizationLinkInvitationRequest> organizationLinkInvitationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new invitation for linking with another organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="organizationLinkInvitationRequest">Invitation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse"/>?&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse?> CreateOneTimeOrDefaultAsync(Option<OrganizationLinkInvitationRequest> organizationLinkInvitationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new invitation for linking with another organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationLinkStaticInvitationRequest">Invitation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse"/>&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse> CreateStaticAsync(Option<OrganizationLinkStaticInvitationRequest> organizationLinkStaticInvitationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new invitation for linking with another organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="organizationLinkStaticInvitationRequest">Invitation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse"/>?&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse?> CreateStaticOrDefaultAsync(Option<OrganizationLinkStaticInvitationRequest> organizationLinkStaticInvitationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Decline a pending invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse"/>&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse> DeclineOneTimeAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Decline a pending invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse"/>?&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse?> DeclineOneTimeOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get static invitation links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse"/>&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse> GetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get static invitation links
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse"/>?&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse?> GetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get invitation by token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Invitation token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse"/>&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse> GetByTokenAsync(string token, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get invitation by token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="token">Invitation token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse"/>?&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse?> GetByTokenOrDefaultAsync(string token, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a list of all pending invitations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse"/>&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse> GetMyInvitationsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a list of all pending invitations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse"/>?&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse?> GetMyInvitationsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse"/>&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse> DeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse"/>?&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse?> DeleteOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an orgainzation link by using a static token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Invitation token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse"/>&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse> JoinStaticAsync(string token, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an orgainzation link by using a static token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="token">Invitation token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse"/>?&gt;</returns>
        Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse?> JoinStaticOrDefaultAsync(string token, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OrganizationLinkInvitationClientEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOrganizationLinkInvitationAcceptOneTimeIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOrganizationLinkInvitationAcceptOneTimeIdPut;

        internal void ExecuteOnOrganizationLinkInvitationAcceptOneTimeIdPut(__OrganizationLinkInvitationClient.OrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse apiResponse)
        {
            OnOrganizationLinkInvitationAcceptOneTimeIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOrganizationLinkInvitationAcceptOneTimeIdPut(Exception exception)
        {
            OnErrorOrganizationLinkInvitationAcceptOneTimeIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOrganizationLinkInvitationCreateOneTimePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOrganizationLinkInvitationCreateOneTimePost;

        internal void ExecuteOnOrganizationLinkInvitationCreateOneTimePost(__OrganizationLinkInvitationClient.OrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse apiResponse)
        {
            OnOrganizationLinkInvitationCreateOneTimePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOrganizationLinkInvitationCreateOneTimePost(Exception exception)
        {
            OnErrorOrganizationLinkInvitationCreateOneTimePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOrganizationLinkInvitationCreateStaticPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOrganizationLinkInvitationCreateStaticPost;

        internal void ExecuteOnOrganizationLinkInvitationCreateStaticPost(__OrganizationLinkInvitationClient.OrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse apiResponse)
        {
            OnOrganizationLinkInvitationCreateStaticPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOrganizationLinkInvitationCreateStaticPost(Exception exception)
        {
            OnErrorOrganizationLinkInvitationCreateStaticPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOrganizationLinkInvitationDeclineOneTimeIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOrganizationLinkInvitationDeclineOneTimeIdPut;

        internal void ExecuteOnOrganizationLinkInvitationDeclineOneTimeIdPut(__OrganizationLinkInvitationClient.OrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse apiResponse)
        {
            OnOrganizationLinkInvitationDeclineOneTimeIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOrganizationLinkInvitationDeclineOneTimeIdPut(Exception exception)
        {
            OnErrorOrganizationLinkInvitationDeclineOneTimeIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOrganizationLinkInvitationGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOrganizationLinkInvitationGet;

        internal void ExecuteOnOrganizationLinkInvitationGet(__OrganizationLinkInvitationClient.OrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse apiResponse)
        {
            OnOrganizationLinkInvitationGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOrganizationLinkInvitationGet(Exception exception)
        {
            OnErrorOrganizationLinkInvitationGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOrganizationLinkInvitationGetByTokenTokenGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOrganizationLinkInvitationGetByTokenTokenGet;

        internal void ExecuteOnOrganizationLinkInvitationGetByTokenTokenGet(__OrganizationLinkInvitationClient.OrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse apiResponse)
        {
            OnOrganizationLinkInvitationGetByTokenTokenGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOrganizationLinkInvitationGetByTokenTokenGet(Exception exception)
        {
            OnErrorOrganizationLinkInvitationGetByTokenTokenGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOrganizationLinkInvitationGetMyInvitationsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOrganizationLinkInvitationGetMyInvitationsGet;

        internal void ExecuteOnOrganizationLinkInvitationGetMyInvitationsGet(__OrganizationLinkInvitationClient.OrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse apiResponse)
        {
            OnOrganizationLinkInvitationGetMyInvitationsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOrganizationLinkInvitationGetMyInvitationsGet(Exception exception)
        {
            OnErrorOrganizationLinkInvitationGetMyInvitationsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOrganizationLinkInvitationIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOrganizationLinkInvitationIdDelete;

        internal void ExecuteOnOrganizationLinkInvitationIdDelete(__OrganizationLinkInvitationClient.OrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse apiResponse)
        {
            OnOrganizationLinkInvitationIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOrganizationLinkInvitationIdDelete(Exception exception)
        {
            OnErrorOrganizationLinkInvitationIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOrganizationLinkInvitationJoinStaticTokenPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOrganizationLinkInvitationJoinStaticTokenPut;

        internal void ExecuteOnOrganizationLinkInvitationJoinStaticTokenPut(__OrganizationLinkInvitationClient.OrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse apiResponse)
        {
            OnOrganizationLinkInvitationJoinStaticTokenPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOrganizationLinkInvitationJoinStaticTokenPut(Exception exception)
        {
            OnErrorOrganizationLinkInvitationJoinStaticTokenPut?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal sealed partial class __OrganizationLinkInvitationClient : __IOrganizationLinkInvitationClient
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OrganizationLinkInvitationClientEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationLinkInvitationClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __OrganizationLinkInvitationClient(
            HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            OrganizationLinkInvitationClientEvents organizationLinkInvitationClientEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider
        )
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            HttpClient = httpClient;
            Events = organizationLinkInvitationClientEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatOrganizationLinkInvitationAcceptOneTimeIdPut(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterOrganizationLinkInvitationAcceptOneTimeIdPutDefaultImplementation(__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterOrganizationLinkInvitationAcceptOneTimeIdPut(ref suppressDefaultLog, apiResponseLocalVar, id);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterOrganizationLinkInvitationAcceptOneTimeIdPut(ref bool suppressDefaultLog, __OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        private void OnErrorOrganizationLinkInvitationAcceptOneTimeIdPutDefaultImplementation(Exception exception, string pathFormat, string path, Guid id)
        {
            bool suppressDefaultLog = false;
            OnErrorOrganizationLinkInvitationAcceptOneTimeIdPut(ref suppressDefaultLog, exception, pathFormat, path, id);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        partial void OnErrorOrganizationLinkInvitationAcceptOneTimeIdPut(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid id);

        /// <summary>
        /// Accept a pending invitation 
        /// </summary>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse?> AcceptOneTimeOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AcceptOneTimeAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Accept a pending invitation 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse> AcceptOneTimeAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatOrganizationLinkInvitationAcceptOneTimeIdPut(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/OrganizationLinkInvitation/accept-one-time/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        OrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse apiResponseLocalVar = new OrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OrganizationLinkInvitation/accept-one-time/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOrganizationLinkInvitationAcceptOneTimeIdPutDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnOrganizationLinkInvitationAcceptOneTimeIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrganizationLinkInvitationAcceptOneTimeIdPutDefaultImplementation(e, "/OrganizationLinkInvitation/accept-one-time/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorOrganizationLinkInvitationAcceptOneTimeIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse"/>
        /// </summary>
        internal interface IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<OrganizationLinkInvitationAcceptedResponse>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse"/>
        /// </summary>
        internal partial class OrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse : Simplic.OxS.SDK.__ApiResponse, IOrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse
        {
            /// <summary>
            /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrganizationLinkInvitationClientOrganizationLinkInvitationAcceptOneTimeIdPutApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public OrganizationLinkInvitationAcceptedResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OrganizationLinkInvitationAcceptedResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OrganizationLinkInvitationAcceptedResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOrganizationLinkInvitationCreateOneTimePost(Option<OrganizationLinkInvitationRequest> organizationLinkInvitationRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organizationLinkInvitationRequest"></param>
        /// <returns></returns>
        private void ValidateOrganizationLinkInvitationCreateOneTimePost(Option<OrganizationLinkInvitationRequest> organizationLinkInvitationRequest)
        {
            if (organizationLinkInvitationRequest.IsSet && organizationLinkInvitationRequest.Value == null)
                throw new ArgumentNullException(nameof(organizationLinkInvitationRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organizationLinkInvitationRequest"></param>
        private void AfterOrganizationLinkInvitationCreateOneTimePostDefaultImplementation(__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse apiResponseLocalVar, Option<OrganizationLinkInvitationRequest> organizationLinkInvitationRequest)
        {
            bool suppressDefaultLog = false;
            AfterOrganizationLinkInvitationCreateOneTimePost(ref suppressDefaultLog, apiResponseLocalVar, organizationLinkInvitationRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organizationLinkInvitationRequest"></param>
        partial void AfterOrganizationLinkInvitationCreateOneTimePost(ref bool suppressDefaultLog, __OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse apiResponseLocalVar, Option<OrganizationLinkInvitationRequest> organizationLinkInvitationRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="organizationLinkInvitationRequest"></param>
        private void OnErrorOrganizationLinkInvitationCreateOneTimePostDefaultImplementation(Exception exception, string pathFormat, string path, Option<OrganizationLinkInvitationRequest> organizationLinkInvitationRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorOrganizationLinkInvitationCreateOneTimePost(ref suppressDefaultLog, exception, pathFormat, path, organizationLinkInvitationRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="organizationLinkInvitationRequest"></param>
        partial void OnErrorOrganizationLinkInvitationCreateOneTimePost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<OrganizationLinkInvitationRequest> organizationLinkInvitationRequest);

        /// <summary>
        /// Creates a new invitation for linking with another organization 
        /// </summary>
        /// <param name="organizationLinkInvitationRequest">Invitation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse?> CreateOneTimeOrDefaultAsync(Option<OrganizationLinkInvitationRequest> organizationLinkInvitationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOneTimeAsync(organizationLinkInvitationRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates a new invitation for linking with another organization 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationLinkInvitationRequest">Invitation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse> CreateOneTimeAsync(Option<OrganizationLinkInvitationRequest> organizationLinkInvitationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOrganizationLinkInvitationCreateOneTimePost(organizationLinkInvitationRequest);

                FormatOrganizationLinkInvitationCreateOneTimePost(organizationLinkInvitationRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/OrganizationLinkInvitation/create-one-time";

                    if (organizationLinkInvitationRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (organizationLinkInvitationRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(organizationLinkInvitationRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        OrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse apiResponseLocalVar = new OrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OrganizationLinkInvitation/create-one-time", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOrganizationLinkInvitationCreateOneTimePostDefaultImplementation(apiResponseLocalVar, organizationLinkInvitationRequest);

                        Events.ExecuteOnOrganizationLinkInvitationCreateOneTimePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrganizationLinkInvitationCreateOneTimePostDefaultImplementation(e, "/OrganizationLinkInvitation/create-one-time", uriBuilderLocalVar.Path, organizationLinkInvitationRequest);
                Events.ExecuteOnErrorOrganizationLinkInvitationCreateOneTimePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse"/>
        /// </summary>
        internal interface IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<OrganizationLinkInvitationModel>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse"/>
        /// </summary>
        internal partial class OrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse : Simplic.OxS.SDK.__ApiResponse, IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse
        {
            /// <summary>
            /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrganizationLinkInvitationClientOrganizationLinkInvitationCreateOneTimePostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public OrganizationLinkInvitationModel Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OrganizationLinkInvitationModel>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OrganizationLinkInvitationModel result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOrganizationLinkInvitationCreateStaticPost(Option<OrganizationLinkStaticInvitationRequest> organizationLinkStaticInvitationRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organizationLinkStaticInvitationRequest"></param>
        /// <returns></returns>
        private void ValidateOrganizationLinkInvitationCreateStaticPost(Option<OrganizationLinkStaticInvitationRequest> organizationLinkStaticInvitationRequest)
        {
            if (organizationLinkStaticInvitationRequest.IsSet && organizationLinkStaticInvitationRequest.Value == null)
                throw new ArgumentNullException(nameof(organizationLinkStaticInvitationRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organizationLinkStaticInvitationRequest"></param>
        private void AfterOrganizationLinkInvitationCreateStaticPostDefaultImplementation(__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse apiResponseLocalVar, Option<OrganizationLinkStaticInvitationRequest> organizationLinkStaticInvitationRequest)
        {
            bool suppressDefaultLog = false;
            AfterOrganizationLinkInvitationCreateStaticPost(ref suppressDefaultLog, apiResponseLocalVar, organizationLinkStaticInvitationRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organizationLinkStaticInvitationRequest"></param>
        partial void AfterOrganizationLinkInvitationCreateStaticPost(ref bool suppressDefaultLog, __OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse apiResponseLocalVar, Option<OrganizationLinkStaticInvitationRequest> organizationLinkStaticInvitationRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="organizationLinkStaticInvitationRequest"></param>
        private void OnErrorOrganizationLinkInvitationCreateStaticPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<OrganizationLinkStaticInvitationRequest> organizationLinkStaticInvitationRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorOrganizationLinkInvitationCreateStaticPost(ref suppressDefaultLog, exception, pathFormat, path, organizationLinkStaticInvitationRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="organizationLinkStaticInvitationRequest"></param>
        partial void OnErrorOrganizationLinkInvitationCreateStaticPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<OrganizationLinkStaticInvitationRequest> organizationLinkStaticInvitationRequest);

        /// <summary>
        /// Creates a new invitation for linking with another organization 
        /// </summary>
        /// <param name="organizationLinkStaticInvitationRequest">Invitation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse?> CreateStaticOrDefaultAsync(Option<OrganizationLinkStaticInvitationRequest> organizationLinkStaticInvitationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateStaticAsync(organizationLinkStaticInvitationRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates a new invitation for linking with another organization 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationLinkStaticInvitationRequest">Invitation request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse> CreateStaticAsync(Option<OrganizationLinkStaticInvitationRequest> organizationLinkStaticInvitationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOrganizationLinkInvitationCreateStaticPost(organizationLinkStaticInvitationRequest);

                FormatOrganizationLinkInvitationCreateStaticPost(organizationLinkStaticInvitationRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/OrganizationLinkInvitation/create-static";

                    if (organizationLinkStaticInvitationRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (organizationLinkStaticInvitationRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(organizationLinkStaticInvitationRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        OrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse apiResponseLocalVar = new OrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OrganizationLinkInvitation/create-static", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOrganizationLinkInvitationCreateStaticPostDefaultImplementation(apiResponseLocalVar, organizationLinkStaticInvitationRequest);

                        Events.ExecuteOnOrganizationLinkInvitationCreateStaticPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrganizationLinkInvitationCreateStaticPostDefaultImplementation(e, "/OrganizationLinkInvitation/create-static", uriBuilderLocalVar.Path, organizationLinkStaticInvitationRequest);
                Events.ExecuteOnErrorOrganizationLinkInvitationCreateStaticPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse"/>
        /// </summary>
        internal interface IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<OrganizationLinkInvitationModel>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse"/>
        /// </summary>
        internal partial class OrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IOrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse
        {
            /// <summary>
            /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrganizationLinkInvitationClientOrganizationLinkInvitationCreateStaticPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public OrganizationLinkInvitationModel Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OrganizationLinkInvitationModel>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OrganizationLinkInvitationModel result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOrganizationLinkInvitationDeclineOneTimeIdPut(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterOrganizationLinkInvitationDeclineOneTimeIdPutDefaultImplementation(__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterOrganizationLinkInvitationDeclineOneTimeIdPut(ref suppressDefaultLog, apiResponseLocalVar, id);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterOrganizationLinkInvitationDeclineOneTimeIdPut(ref bool suppressDefaultLog, __OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        private void OnErrorOrganizationLinkInvitationDeclineOneTimeIdPutDefaultImplementation(Exception exception, string pathFormat, string path, Guid id)
        {
            bool suppressDefaultLog = false;
            OnErrorOrganizationLinkInvitationDeclineOneTimeIdPut(ref suppressDefaultLog, exception, pathFormat, path, id);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        partial void OnErrorOrganizationLinkInvitationDeclineOneTimeIdPut(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid id);

        /// <summary>
        /// Decline a pending invitation 
        /// </summary>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse?> DeclineOneTimeOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeclineOneTimeAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Decline a pending invitation 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse> DeclineOneTimeAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatOrganizationLinkInvitationDeclineOneTimeIdPut(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/OrganizationLinkInvitation/decline-one-time/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        OrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse apiResponseLocalVar = new OrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OrganizationLinkInvitation/decline-one-time/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOrganizationLinkInvitationDeclineOneTimeIdPutDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnOrganizationLinkInvitationDeclineOneTimeIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrganizationLinkInvitationDeclineOneTimeIdPutDefaultImplementation(e, "/OrganizationLinkInvitation/decline-one-time/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorOrganizationLinkInvitationDeclineOneTimeIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse"/>
        /// </summary>
        internal interface IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse : Simplic.OxS.SDK.__IApiResponse, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse"/>
        /// </summary>
        internal partial class OrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse : Simplic.OxS.SDK.__ApiResponse, IOrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse
        {
            /// <summary>
            /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrganizationLinkInvitationClientOrganizationLinkInvitationDeclineOneTimeIdPutApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterOrganizationLinkInvitationGetDefaultImplementation(__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterOrganizationLinkInvitationGet(ref suppressDefaultLog, apiResponseLocalVar);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterOrganizationLinkInvitationGet(ref bool suppressDefaultLog, __OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorOrganizationLinkInvitationGetDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorOrganizationLinkInvitationGet(ref suppressDefaultLog, exception, pathFormat, path);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorOrganizationLinkInvitationGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Get static invitation links 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse?> GetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get static invitation links 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse> GetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/OrganizationLinkInvitation";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        OrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse apiResponseLocalVar = new OrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OrganizationLinkInvitation", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOrganizationLinkInvitationGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnOrganizationLinkInvitationGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrganizationLinkInvitationGetDefaultImplementation(e, "/OrganizationLinkInvitation", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorOrganizationLinkInvitationGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse"/>
        /// </summary>
        internal interface IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<List<OrganizationLinkInvitationModel>>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse"/>
        /// </summary>
        internal partial class OrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IOrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse
        {
            /// <summary>
            /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrganizationLinkInvitationClientOrganizationLinkInvitationGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public List<OrganizationLinkInvitationModel> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<OrganizationLinkInvitationModel>>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<OrganizationLinkInvitationModel> result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOrganizationLinkInvitationGetByTokenTokenGet(ref string token);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="token"></param>
        /// <returns></returns>
        private void ValidateOrganizationLinkInvitationGetByTokenTokenGet(string token)
        {
            if (token == null)
                throw new ArgumentNullException(nameof(token));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="token"></param>
        private void AfterOrganizationLinkInvitationGetByTokenTokenGetDefaultImplementation(__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse apiResponseLocalVar, string token)
        {
            bool suppressDefaultLog = false;
            AfterOrganizationLinkInvitationGetByTokenTokenGet(ref suppressDefaultLog, apiResponseLocalVar, token);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="token"></param>
        partial void AfterOrganizationLinkInvitationGetByTokenTokenGet(ref bool suppressDefaultLog, __OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse apiResponseLocalVar, string token);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="token"></param>
        private void OnErrorOrganizationLinkInvitationGetByTokenTokenGetDefaultImplementation(Exception exception, string pathFormat, string path, string token)
        {
            bool suppressDefaultLog = false;
            OnErrorOrganizationLinkInvitationGetByTokenTokenGet(ref suppressDefaultLog, exception, pathFormat, path, token);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="token"></param>
        partial void OnErrorOrganizationLinkInvitationGetByTokenTokenGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string token);

        /// <summary>
        /// Get invitation by token 
        /// </summary>
        /// <param name="token">Invitation token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse?> GetByTokenOrDefaultAsync(string token, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetByTokenAsync(token, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get invitation by token 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Invitation token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse> GetByTokenAsync(string token, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOrganizationLinkInvitationGetByTokenTokenGet(token);

                FormatOrganizationLinkInvitationGetByTokenTokenGet(ref token);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/OrganizationLinkInvitation/get-by-token/{token}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btoken%7D", Uri.EscapeDataString(token.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        OrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse apiResponseLocalVar = new OrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OrganizationLinkInvitation/get-by-token/{token}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOrganizationLinkInvitationGetByTokenTokenGetDefaultImplementation(apiResponseLocalVar, token);

                        Events.ExecuteOnOrganizationLinkInvitationGetByTokenTokenGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrganizationLinkInvitationGetByTokenTokenGetDefaultImplementation(e, "/OrganizationLinkInvitation/get-by-token/{token}", uriBuilderLocalVar.Path, token);
                Events.ExecuteOnErrorOrganizationLinkInvitationGetByTokenTokenGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse"/>
        /// </summary>
        internal interface IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<OrganizationLinkInvitationModel>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse"/>
        /// </summary>
        internal partial class OrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IOrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse
        {
            /// <summary>
            /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrganizationLinkInvitationClientOrganizationLinkInvitationGetByTokenTokenGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public OrganizationLinkInvitationModel Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OrganizationLinkInvitationModel>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OrganizationLinkInvitationModel result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterOrganizationLinkInvitationGetMyInvitationsGetDefaultImplementation(__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterOrganizationLinkInvitationGetMyInvitationsGet(ref suppressDefaultLog, apiResponseLocalVar);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterOrganizationLinkInvitationGetMyInvitationsGet(ref bool suppressDefaultLog, __OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorOrganizationLinkInvitationGetMyInvitationsGetDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorOrganizationLinkInvitationGetMyInvitationsGet(ref suppressDefaultLog, exception, pathFormat, path);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorOrganizationLinkInvitationGetMyInvitationsGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Gets a list of all pending invitations 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse?> GetMyInvitationsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyInvitationsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets a list of all pending invitations 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse> GetMyInvitationsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/OrganizationLinkInvitation/get-my-invitations";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        OrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse apiResponseLocalVar = new OrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OrganizationLinkInvitation/get-my-invitations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOrganizationLinkInvitationGetMyInvitationsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnOrganizationLinkInvitationGetMyInvitationsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrganizationLinkInvitationGetMyInvitationsGetDefaultImplementation(e, "/OrganizationLinkInvitation/get-my-invitations", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorOrganizationLinkInvitationGetMyInvitationsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse"/>
        /// </summary>
        internal interface IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<List<OrganizationLinkInvitationModel>>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse"/>
        /// </summary>
        internal partial class OrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IOrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse
        {
            /// <summary>
            /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrganizationLinkInvitationClientOrganizationLinkInvitationGetMyInvitationsGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public List<OrganizationLinkInvitationModel> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<OrganizationLinkInvitationModel>>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<OrganizationLinkInvitationModel> result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOrganizationLinkInvitationIdDelete(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterOrganizationLinkInvitationIdDeleteDefaultImplementation(__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterOrganizationLinkInvitationIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterOrganizationLinkInvitationIdDelete(ref bool suppressDefaultLog, __OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        private void OnErrorOrganizationLinkInvitationIdDeleteDefaultImplementation(Exception exception, string pathFormat, string path, Guid id)
        {
            bool suppressDefaultLog = false;
            OnErrorOrganizationLinkInvitationIdDelete(ref suppressDefaultLog, exception, pathFormat, path, id);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        partial void OnErrorOrganizationLinkInvitationIdDelete(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid id);

        /// <summary>
        /// Delete an invitation 
        /// </summary>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse?> DeleteOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an invitation 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invitation id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse> DeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatOrganizationLinkInvitationIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/OrganizationLinkInvitation/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        OrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse apiResponseLocalVar = new OrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OrganizationLinkInvitation/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOrganizationLinkInvitationIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnOrganizationLinkInvitationIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrganizationLinkInvitationIdDeleteDefaultImplementation(e, "/OrganizationLinkInvitation/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorOrganizationLinkInvitationIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse"/>
        /// </summary>
        internal interface IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse : Simplic.OxS.SDK.__IApiResponse, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse"/>
        /// </summary>
        internal partial class OrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse : Simplic.OxS.SDK.__ApiResponse, IOrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse
        {
            /// <summary>
            /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrganizationLinkInvitationClientOrganizationLinkInvitationIdDeleteApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOrganizationLinkInvitationJoinStaticTokenPut(ref string token);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="token"></param>
        /// <returns></returns>
        private void ValidateOrganizationLinkInvitationJoinStaticTokenPut(string token)
        {
            if (token == null)
                throw new ArgumentNullException(nameof(token));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="token"></param>
        private void AfterOrganizationLinkInvitationJoinStaticTokenPutDefaultImplementation(__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse apiResponseLocalVar, string token)
        {
            bool suppressDefaultLog = false;
            AfterOrganizationLinkInvitationJoinStaticTokenPut(ref suppressDefaultLog, apiResponseLocalVar, token);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="token"></param>
        partial void AfterOrganizationLinkInvitationJoinStaticTokenPut(ref bool suppressDefaultLog, __OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse apiResponseLocalVar, string token);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="token"></param>
        private void OnErrorOrganizationLinkInvitationJoinStaticTokenPutDefaultImplementation(Exception exception, string pathFormat, string path, string token)
        {
            bool suppressDefaultLog = false;
            OnErrorOrganizationLinkInvitationJoinStaticTokenPut(ref suppressDefaultLog, exception, pathFormat, path, token);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="token"></param>
        partial void OnErrorOrganizationLinkInvitationJoinStaticTokenPut(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string token);

        /// <summary>
        /// Create an orgainzation link by using a static token 
        /// </summary>
        /// <param name="token">Invitation token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse?> JoinStaticOrDefaultAsync(string token, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JoinStaticAsync(token, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an orgainzation link by using a static token 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Invitation token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse"/>&gt;</returns>
        public async Task<__OrganizationLinkInvitationClient.IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse> JoinStaticAsync(string token, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOrganizationLinkInvitationJoinStaticTokenPut(token);

                FormatOrganizationLinkInvitationJoinStaticTokenPut(ref token);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/OrganizationLinkInvitation/join-static/{token}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btoken%7D", Uri.EscapeDataString(token.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        OrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse apiResponseLocalVar = new OrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OrganizationLinkInvitation/join-static/{token}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOrganizationLinkInvitationJoinStaticTokenPutDefaultImplementation(apiResponseLocalVar, token);

                        Events.ExecuteOnOrganizationLinkInvitationJoinStaticTokenPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrganizationLinkInvitationJoinStaticTokenPutDefaultImplementation(e, "/OrganizationLinkInvitation/join-static/{token}", uriBuilderLocalVar.Path, token);
                Events.ExecuteOnErrorOrganizationLinkInvitationJoinStaticTokenPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse"/>
        /// </summary>
        internal interface IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<OrganizationLinkInvitationAcceptedResponse>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse"/>
        /// </summary>
        internal partial class OrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse : Simplic.OxS.SDK.__ApiResponse, IOrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse
        {
            /// <summary>
            /// The <see cref="OrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrganizationLinkInvitationClientOrganizationLinkInvitationJoinStaticTokenPutApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public OrganizationLinkInvitationAcceptedResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OrganizationLinkInvitationAcceptedResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OrganizationLinkInvitationAcceptedResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
