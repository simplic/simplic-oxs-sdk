/*
 * Simplic.OxS.Organization
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Organization
{
    /// <summary>
    /// FederalStateModel
    /// </summary>
    [DataContract(Name = "FederalStateModel")]
    public partial class FederalStateModel : IEquatable<FederalStateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FederalStateModel" /> class.
        /// </summary>
        /// <param name="displayName">Gets or sets the display name of the federal state.</param>
        /// <param name="displayKey">Gets or sets the display key of the federal state.</param>
        /// <param name="name">Gets or sets the name of the federal state.</param>
        /// <param name="federalStateIso">Gets or sets the ISO code of the federal state in ISO 3166-2 format (e.g., \&quot;DE-BE\&quot; for Berlin in Germany).</param>
        /// <param name="countryIso">Gets or sets the ISO 3166 code of the country the federal state belongs to (e.g., \&quot;DE\&quot; for Germany).</param>
        public FederalStateModel(string displayName = default(string), string displayKey = default(string), string name = default(string), string federalStateIso = default(string), string countryIso = default(string))
        {
            this.DisplayName = displayName;
            this.DisplayKey = displayKey;
            this.Name = name;
            this.FederalStateIso = federalStateIso;
            this.CountryIso = countryIso;
        }

        /// <summary>
        /// Gets or sets the display name of the federal state
        /// </summary>
        /// <value>Gets or sets the display name of the federal state</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the display key of the federal state
        /// </summary>
        /// <value>Gets or sets the display key of the federal state</value>
        [DataMember(Name = "displayKey", EmitDefaultValue = true)]
        public string DisplayKey { get; set; }

        /// <summary>
        /// Gets or sets the name of the federal state
        /// </summary>
        /// <value>Gets or sets the name of the federal state</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the ISO code of the federal state in ISO 3166-2 format (e.g., \&quot;DE-BE\&quot; for Berlin in Germany)
        /// </summary>
        /// <value>Gets or sets the ISO code of the federal state in ISO 3166-2 format (e.g., \&quot;DE-BE\&quot; for Berlin in Germany)</value>
        [DataMember(Name = "federalStateIso", EmitDefaultValue = true)]
        public string FederalStateIso { get; set; }

        /// <summary>
        /// Gets or sets the ISO 3166 code of the country the federal state belongs to (e.g., \&quot;DE\&quot; for Germany)
        /// </summary>
        /// <value>Gets or sets the ISO 3166 code of the country the federal state belongs to (e.g., \&quot;DE\&quot; for Germany)</value>
        [DataMember(Name = "countryIso", EmitDefaultValue = true)]
        public string CountryIso { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FederalStateModel {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DisplayKey: ").Append(DisplayKey).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FederalStateIso: ").Append(FederalStateIso).Append("\n");
            sb.Append("  CountryIso: ").Append(CountryIso).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FederalStateModel);
        }

        /// <summary>
        /// Returns true if FederalStateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of FederalStateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FederalStateModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.DisplayKey == input.DisplayKey ||
                    (this.DisplayKey != null &&
                    this.DisplayKey.Equals(input.DisplayKey))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FederalStateIso == input.FederalStateIso ||
                    (this.FederalStateIso != null &&
                    this.FederalStateIso.Equals(input.FederalStateIso))
                ) && 
                (
                    this.CountryIso == input.CountryIso ||
                    (this.CountryIso != null &&
                    this.CountryIso.Equals(input.CountryIso))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.DisplayKey != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayKey.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FederalStateIso != null)
                {
                    hashCode = (hashCode * 59) + this.FederalStateIso.GetHashCode();
                }
                if (this.CountryIso != null)
                {
                    hashCode = (hashCode * 59) + this.CountryIso.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
