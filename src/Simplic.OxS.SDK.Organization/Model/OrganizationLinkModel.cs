// <auto-generated>
/*
 * Simplic.OxS.Organization
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Organization
{
    /// <summary>
    /// Represents an organization link. A connection between two organizations
    /// </summary>
    public partial class OrganizationLinkModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public OrganizationLinkModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationLinkModel" /> class.
        /// </summary>
        /// <param name="acceptedBy">Gets or sets the name of the member who accepted the invitation</param>
        /// <param name="createDateTime">Gets or sets the create date time of the link</param>
        /// <param name="createUserId">Gets or sets the create user of the link</param>
        /// <param name="createUserName">Gets or sets the create user name of the link</param>
        /// <param name="foreignOrganizationId">Gets or sets the foreign organization id (organization-id - -&gt; foreign organization)</param>
        /// <param name="foreignOrganizationName">Gets or sets the organization name of the linked (foreign) organization</param>
        /// <param name="invitationId">Gets or sets the id of the invitation that initiated the link</param>
        /// <param name="modules">Gets or sets the enabled modules</param>
        /// <param name="organizationId">Gets or sets the organization id of the owner of the connection</param>
        /// <param name="organizationName">Gets or sets the owner organization id (link owner)</param>
        /// <param name="originator">Gets or sets the name of the member who created the initial invitation link</param>
        /// <param name="state">state</param>
        /// <param name="updateDateTime">Gets or sets the latest update date time of the link</param>
        /// <param name="updateUserId">gets or sets the update user id of the link</param>
        /// <param name="updateUserName">Gets or sets the update user name of the link</param>
        //[JsonConstructor]
        public OrganizationLinkModel(Option<string> acceptedBy = default, Option<DateTime> createDateTime = default, Option<Guid> createUserId = default, Option<string> createUserName = default, Option<Guid> foreignOrganizationId = default, Option<string> foreignOrganizationName = default, Option<Guid> invitationId = default, Option<List<string>> modules = default, Option<Guid> organizationId = default, Option<string> organizationName = default, Option<string> originator = default, Option<OrganizationLinkState> state = default, Option<DateTime> updateDateTime = default, Option<Guid> updateUserId = default, Option<string> updateUserName = default)
        {
            AcceptedByOption = acceptedBy;
            CreateDateTimeOption = createDateTime;
            CreateUserIdOption = createUserId;
            CreateUserNameOption = createUserName;
            ForeignOrganizationIdOption = foreignOrganizationId;
            ForeignOrganizationNameOption = foreignOrganizationName;
            InvitationIdOption = invitationId;
            ModulesOption = modules;
            OrganizationIdOption = organizationId;
            OrganizationNameOption = organizationName;
            OriginatorOption = originator;
            StateOption = state;
            UpdateDateTimeOption = updateDateTime;
            UpdateUserIdOption = updateUserId;
            UpdateUserNameOption = updateUserName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<OrganizationLinkState>))]
        public Option<OrganizationLinkState> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public OrganizationLinkState? State { get { return this.StateOption; } set { this.StateOption = new Option<OrganizationLinkState>(value); } }

        /// <summary>
        /// Used to track the state of AcceptedBy
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> AcceptedByOption { get; private set; }

        /// <summary>
        /// Gets or sets the name of the member who accepted the invitation
        /// </summary>
        /// <value>Gets or sets the name of the member who accepted the invitation</value>
        [JsonPropertyName("acceptedBy")]
        public string? AcceptedBy { get { return this. AcceptedByOption; } set { this.AcceptedByOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the create date time of the link
        /// </summary>
        /// <value>Gets or sets the create date time of the link</value>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CreateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the create user of the link
        /// </summary>
        /// <value>Gets or sets the create user of the link</value>
        [JsonPropertyName("createUserId")]
        public Guid? CreateUserId { get { return this. CreateUserIdOption; } set { this.CreateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the create user name of the link
        /// </summary>
        /// <value>Gets or sets the create user name of the link</value>
        [JsonPropertyName("createUserName")]
        public string? CreateUserName { get { return this. CreateUserNameOption; } set { this.CreateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ForeignOrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ForeignOrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the foreign organization id (organization-id - -&gt; foreign organization)
        /// </summary>
        /// <value>Gets or sets the foreign organization id (organization-id - -&gt; foreign organization)</value>
        [JsonPropertyName("foreignOrganizationId")]
        public Guid? ForeignOrganizationId { get { return this. ForeignOrganizationIdOption; } set { this.ForeignOrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of ForeignOrganizationName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ForeignOrganizationNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the organization name of the linked (foreign) organization
        /// </summary>
        /// <value>Gets or sets the organization name of the linked (foreign) organization</value>
        [JsonPropertyName("foreignOrganizationName")]
        public string? ForeignOrganizationName { get { return this. ForeignOrganizationNameOption; } set { this.ForeignOrganizationNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InvitationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> InvitationIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the invitation that initiated the link
        /// </summary>
        /// <value>Gets or sets the id of the invitation that initiated the link</value>
        [JsonPropertyName("invitationId")]
        public Guid? InvitationId { get { return this. InvitationIdOption; } set { this.InvitationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Modules
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> ModulesOption { get; private set; }

        /// <summary>
        /// Gets or sets the enabled modules
        /// </summary>
        /// <value>Gets or sets the enabled modules</value>
        [JsonPropertyName("modules")]
        public List<string>? Modules { get { return this. ModulesOption; } set { this.ModulesOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the organization id of the owner of the connection
        /// </summary>
        /// <value>Gets or sets the organization id of the owner of the connection</value>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> OrganizationNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the owner organization id (link owner)
        /// </summary>
        /// <value>Gets or sets the owner organization id (link owner)</value>
        [JsonPropertyName("organizationName")]
        public string? OrganizationName { get { return this. OrganizationNameOption; } set { this.OrganizationNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Originator
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> OriginatorOption { get; private set; }

        /// <summary>
        /// Gets or sets the name of the member who created the initial invitation link
        /// </summary>
        /// <value>Gets or sets the name of the member who created the initial invitation link</value>
        [JsonPropertyName("originator")]
        public string? Originator { get { return this. OriginatorOption; } set { this.OriginatorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UpdateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UpdateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the latest update date time of the link
        /// </summary>
        /// <value>Gets or sets the latest update date time of the link</value>
        [JsonPropertyName("updateDateTime")]
        public DateTime? UpdateDateTime { get { return this. UpdateDateTimeOption; } set { this.UpdateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UpdateUserIdOption { get; private set; }

        /// <summary>
        /// gets or sets the update user id of the link
        /// </summary>
        /// <value>gets or sets the update user id of the link</value>
        [JsonPropertyName("updateUserId")]
        public Guid? UpdateUserId { get { return this. UpdateUserIdOption; } set { this.UpdateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> UpdateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the update user name of the link
        /// </summary>
        /// <value>Gets or sets the update user name of the link</value>
        [JsonPropertyName("updateUserName")]
        public string? UpdateUserName { get { return this. UpdateUserNameOption; } set { this.UpdateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationLinkModel {\n");
            sb.Append("  AcceptedBy: ").Append(AcceptedBy).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  CreateUserName: ").Append(CreateUserName).Append("\n");
            sb.Append("  ForeignOrganizationId: ").Append(ForeignOrganizationId).Append("\n");
            sb.Append("  ForeignOrganizationName: ").Append(ForeignOrganizationName).Append("\n");
            sb.Append("  InvitationId: ").Append(InvitationId).Append("\n");
            sb.Append("  Modules: ").Append(Modules).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  Originator: ").Append(Originator).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("  UpdateUserName: ").Append(UpdateUserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OrganizationLinkModel" />
    /// </summary>
    public class OrganizationLinkModelJsonConverter : JsonConverter<OrganizationLinkModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateDateTime
        /// </summary>
        public static string UpdateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="OrganizationLinkModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OrganizationLinkModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> acceptedBy = default;
            Option<DateTime> createDateTime = default;
            Option<Guid> createUserId = default;
            Option<string> createUserName = default;
            Option<Guid> foreignOrganizationId = default;
            Option<string> foreignOrganizationName = default;
            Option<Guid> invitationId = default;
            Option<List<string>> modules = default;
            Option<Guid> organizationId = default;
            Option<string> organizationName = default;
            Option<string> originator = default;
            Option<OrganizationLinkState> state = default;
            Option<DateTime> updateDateTime = default;
            Option<Guid> updateUserId = default;
            Option<string> updateUserName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "acceptedBy":
                            acceptedBy = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "createUserName":
                            createUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "foreignOrganizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                foreignOrganizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "foreignOrganizationName":
                            foreignOrganizationName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "invitationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invitationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "modules":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                modules = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "organizationName":
                            organizationName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "originator":
                            originator = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "state":
                            string? stateRawValue = utf8JsonReader.GetString();
                            if (stateRawValue != null)
                                state = new Option<OrganizationLinkState>(OrganizationLinkStateValueConverter.FromStringOrDefault(stateRawValue));
                            break;
                        case "updateDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "updateUserName":
                            updateUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class OrganizationLinkModel.");

            if (foreignOrganizationId.IsSet && foreignOrganizationId.Value == null)
                throw new ArgumentNullException(nameof(foreignOrganizationId), "Property is not nullable for class OrganizationLinkModel.");

            if (invitationId.IsSet && invitationId.Value == null)
                throw new ArgumentNullException(nameof(invitationId), "Property is not nullable for class OrganizationLinkModel.");

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class OrganizationLinkModel.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class OrganizationLinkModel.");

            if (updateDateTime.IsSet && updateDateTime.Value == null)
                throw new ArgumentNullException(nameof(updateDateTime), "Property is not nullable for class OrganizationLinkModel.");

            //2return new OrganizationLinkModel(acceptedBy, createDateTime, createUserId, createUserName, foreignOrganizationId, foreignOrganizationName, invitationId, modules, organizationId, organizationName, originator, state, updateDateTime, updateUserId, updateUserName);
            return new OrganizationLinkModel(acceptedBy, createDateTime, createUserId, createUserName, foreignOrganizationId, foreignOrganizationName, invitationId, modules, organizationId, organizationName, originator, state, updateDateTime, updateUserId, updateUserName);
        }

        /// <summary>
        /// Serializes a <see cref="OrganizationLinkModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationLinkModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OrganizationLinkModel organizationLinkModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, organizationLinkModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OrganizationLinkModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationLinkModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, OrganizationLinkModel organizationLinkModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (organizationLinkModel.AcceptedByOption.IsSet)
                if (organizationLinkModel.AcceptedByOption.Value != null)
                {
                    writer.WriteString("acceptedBy", organizationLinkModel.AcceptedBy);
                    //var __value = organizationLinkModel.AcceptedByOption.Value;
                    //writer.WriteString("acceptedBy", __value);
                }
                else
                    writer.WriteNull("acceptedBy");

            if (organizationLinkModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", organizationLinkModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (organizationLinkModel.CreateUserIdOption.IsSet)
                if (organizationLinkModel.CreateUserIdOption.Value != null)
                {
                    writer.WriteString("createUserId", organizationLinkModel.CreateUserIdOption!.Value);
                    //var __value = organizationLinkModel.CreateUserIdOption.Value;
                    //writer.WriteString("createUserId", __value);
                }
                else
                    writer.WriteNull("createUserId");

            if (organizationLinkModel.CreateUserNameOption.IsSet)
                if (organizationLinkModel.CreateUserNameOption.Value != null)
                {
                    writer.WriteString("createUserName", organizationLinkModel.CreateUserName);
                    //var __value = organizationLinkModel.CreateUserNameOption.Value;
                    //writer.WriteString("createUserName", __value);
                }
                else
                    writer.WriteNull("createUserName");

            if (organizationLinkModel.ForeignOrganizationIdOption.IsSet)
                writer.WriteString("foreignOrganizationId", organizationLinkModel.ForeignOrganizationIdOption!.Value);

            if (organizationLinkModel.ForeignOrganizationNameOption.IsSet)
                if (organizationLinkModel.ForeignOrganizationNameOption.Value != null)
                {
                    writer.WriteString("foreignOrganizationName", organizationLinkModel.ForeignOrganizationName);
                    //var __value = organizationLinkModel.ForeignOrganizationNameOption.Value;
                    //writer.WriteString("foreignOrganizationName", __value);
                }
                else
                    writer.WriteNull("foreignOrganizationName");

            if (organizationLinkModel.InvitationIdOption.IsSet)
                writer.WriteString("invitationId", organizationLinkModel.InvitationIdOption!.Value);

            if (organizationLinkModel.ModulesOption.IsSet)
                if (organizationLinkModel.ModulesOption.Value != null)
                {
                    writer.WritePropertyName("modules");
                    JsonSerializer.Serialize(writer, organizationLinkModel.Modules, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("modules");
            if (organizationLinkModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", organizationLinkModel.OrganizationIdOption!.Value);

            if (organizationLinkModel.OrganizationNameOption.IsSet)
                if (organizationLinkModel.OrganizationNameOption.Value != null)
                {
                    writer.WriteString("organizationName", organizationLinkModel.OrganizationName);
                    //var __value = organizationLinkModel.OrganizationNameOption.Value;
                    //writer.WriteString("organizationName", __value);
                }
                else
                    writer.WriteNull("organizationName");

            if (organizationLinkModel.OriginatorOption.IsSet)
                if (organizationLinkModel.OriginatorOption.Value != null)
                {
                    writer.WriteString("originator", organizationLinkModel.Originator);
                    //var __value = organizationLinkModel.OriginatorOption.Value;
                    //writer.WriteString("originator", __value);
                }
                else
                    writer.WriteNull("originator");

            if (organizationLinkModel.StateOption.IsSet)
            {
                var stateRawValue = OrganizationLinkStateValueConverter.ToJsonValue(organizationLinkModel.State!.Value);
                writer.WriteNumber("state", stateRawValue);
            }
            if (organizationLinkModel.UpdateDateTimeOption.IsSet)
                writer.WriteString("updateDateTime", organizationLinkModel.UpdateDateTimeOption!.Value.ToString(UpdateDateTimeFormat));

            if (organizationLinkModel.UpdateUserIdOption.IsSet)
                if (organizationLinkModel.UpdateUserIdOption.Value != null)
                {
                    writer.WriteString("updateUserId", organizationLinkModel.UpdateUserIdOption!.Value);
                    //var __value = organizationLinkModel.UpdateUserIdOption.Value;
                    //writer.WriteString("updateUserId", __value);
                }
                else
                    writer.WriteNull("updateUserId");

            if (organizationLinkModel.UpdateUserNameOption.IsSet)
                if (organizationLinkModel.UpdateUserNameOption.Value != null)
                {
                    writer.WriteString("updateUserName", organizationLinkModel.UpdateUserName);
                    //var __value = organizationLinkModel.UpdateUserNameOption.Value;
                    //writer.WriteString("updateUserName", __value);
                }
                else
                    writer.WriteNull("updateUserName");
        }
    }
}
