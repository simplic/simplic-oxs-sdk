/*
 * Simplic.OxS.Organization
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Organization
{
    /// <summary>
    /// Request model for uploading certificates
    /// </summary>
    [DataContract(Name = "UploadCertificateRequest")]
    public partial class UploadCertificateRequest : IEquatable<UploadCertificateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadCertificateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadCertificateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadCertificateRequest" /> class.
        /// </summary>
        /// <param name="certFile">Gets or sets the cert file (required).</param>
        /// <param name="pfxFile">Gets or sets the .pfx-file (optional).</param>
        /// <param name="pfxPassword">Gets or sets the .pfx-file password.</param>
        public UploadCertificateRequest(byte[] certFile = default(byte[]), byte[] pfxFile = default(byte[]), string pfxPassword = default(string))
        {
            // to ensure "certFile" is required (not null)
            if (certFile == null)
            {
                throw new ArgumentNullException("certFile is a required property for UploadCertificateRequest and cannot be null");
            }
            this.CertFile = certFile;
            this.PfxFile = pfxFile;
            this.PfxPassword = pfxPassword;
        }

        /// <summary>
        /// Gets or sets the cert file
        /// </summary>
        /// <value>Gets or sets the cert file</value>
        [DataMember(Name = "certFile", IsRequired = true, EmitDefaultValue = true)]
        public byte[] CertFile { get; set; }

        /// <summary>
        /// Gets or sets the .pfx-file (optional)
        /// </summary>
        /// <value>Gets or sets the .pfx-file (optional)</value>
        [DataMember(Name = "pfxFile", EmitDefaultValue = true)]
        public byte[] PfxFile { get; set; }

        /// <summary>
        /// Gets or sets the .pfx-file password
        /// </summary>
        /// <value>Gets or sets the .pfx-file password</value>
        [DataMember(Name = "pfxPassword", EmitDefaultValue = true)]
        public string PfxPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UploadCertificateRequest {\n");
            sb.Append("  CertFile: ").Append(CertFile).Append("\n");
            sb.Append("  PfxFile: ").Append(PfxFile).Append("\n");
            sb.Append("  PfxPassword: ").Append(PfxPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadCertificateRequest);
        }

        /// <summary>
        /// Returns true if UploadCertificateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadCertificateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadCertificateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CertFile == input.CertFile ||
                    (this.CertFile != null &&
                    this.CertFile.Equals(input.CertFile))
                ) && 
                (
                    this.PfxFile == input.PfxFile ||
                    (this.PfxFile != null &&
                    this.PfxFile.Equals(input.PfxFile))
                ) && 
                (
                    this.PfxPassword == input.PfxPassword ||
                    (this.PfxPassword != null &&
                    this.PfxPassword.Equals(input.PfxPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertFile != null)
                {
                    hashCode = (hashCode * 59) + this.CertFile.GetHashCode();
                }
                if (this.PfxFile != null)
                {
                    hashCode = (hashCode * 59) + this.PfxFile.GetHashCode();
                }
                if (this.PfxPassword != null)
                {
                    hashCode = (hashCode * 59) + this.PfxPassword.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
