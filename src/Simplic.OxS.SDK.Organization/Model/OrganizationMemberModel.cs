// <auto-generated>
/*
 * Simplic.OxS.Organization
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Organization
{
    /// <summary>
    /// Represents a membership (user -&gt; organization)
    /// </summary>
    public partial class OrganizationMemberModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public OrganizationMemberModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationMemberModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id of the member-ship</param>
        /// <param name="organizationId">Gets or sets the organization id</param>
        /// <param name="organizationName">Gets or sets the organization name</param>
        /// <param name="roles">Gets or sets the roles of the membership (owner, member)</param>
        /// <param name="state">state</param>
        /// <param name="userEmailAddress">Gets or sets the user email address</param>
        /// <param name="userId">Gets or sets the user id of the membership</param>
        //[JsonConstructor]
        public OrganizationMemberModel(Option<Guid> id = default, Option<Guid> organizationId = default, Option<string> organizationName = default, Option<List<string>> roles = default, Option<MemberState> state = default, Option<string> userEmailAddress = default, Option<Guid> userId = default)
        {
            IdOption = id;
            OrganizationIdOption = organizationId;
            OrganizationNameOption = organizationName;
            RolesOption = roles;
            StateOption = state;
            UserEmailAddressOption = userEmailAddress;
            UserIdOption = userId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<MemberState>))]
        public Option<MemberState> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public MemberState? State { get { return this.StateOption; } set { this.StateOption = new Option<MemberState>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the member-ship
        /// </summary>
        /// <value>Gets or sets the id of the member-ship</value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the organization id
        /// </summary>
        /// <value>Gets or sets the organization id</value>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> OrganizationNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the organization name
        /// </summary>
        /// <value>Gets or sets the organization name</value>
        [JsonPropertyName("organizationName")]
        public string? OrganizationName { get { return this. OrganizationNameOption; } set { this.OrganizationNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Roles
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> RolesOption { get; private set; }

        /// <summary>
        /// Gets or sets the roles of the membership (owner, member)
        /// </summary>
        /// <value>Gets or sets the roles of the membership (owner, member)</value>
        [JsonPropertyName("roles")]
        public List<string>? Roles { get { return this. RolesOption; } set { this.RolesOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of UserEmailAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> UserEmailAddressOption { get; private set; }

        /// <summary>
        /// Gets or sets the user email address
        /// </summary>
        /// <value>Gets or sets the user email address</value>
        [JsonPropertyName("userEmailAddress")]
        public string? UserEmailAddress { get { return this. UserEmailAddressOption; } set { this.UserEmailAddressOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the user id of the membership
        /// </summary>
        /// <value>Gets or sets the user id of the membership</value>
        [JsonPropertyName("userId")]
        public Guid? UserId { get { return this. UserIdOption; } set { this.UserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationMemberModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  UserEmailAddress: ").Append(UserEmailAddress).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OrganizationMemberModel" />
    /// </summary>
    public class OrganizationMemberModelJsonConverter : JsonConverter<OrganizationMemberModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="OrganizationMemberModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OrganizationMemberModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid> id = default;
            Option<Guid> organizationId = default;
            Option<string> organizationName = default;
            Option<List<string>> roles = default;
            Option<MemberState> state = default;
            Option<string> userEmailAddress = default;
            Option<Guid> userId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "organizationName":
                            organizationName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "roles":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                roles = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "state":
                            string? stateRawValue = utf8JsonReader.GetString();
                            if (stateRawValue != null)
                                state = new Option<MemberState>(MemberStateValueConverter.FromStringOrDefault(stateRawValue));
                            break;
                        case "userEmailAddress":
                            userEmailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "userId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class OrganizationMemberModel.");

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class OrganizationMemberModel.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class OrganizationMemberModel.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class OrganizationMemberModel.");

            //2return new OrganizationMemberModel(id, organizationId, organizationName, roles, state, userEmailAddress, userId);
            return new OrganizationMemberModel(id, organizationId, organizationName, roles, state, userEmailAddress, userId);
        }

        /// <summary>
        /// Serializes a <see cref="OrganizationMemberModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationMemberModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OrganizationMemberModel organizationMemberModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, organizationMemberModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OrganizationMemberModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationMemberModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, OrganizationMemberModel organizationMemberModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (organizationMemberModel.IdOption.IsSet)
                writer.WriteString("id", organizationMemberModel.IdOption!.Value);

            if (organizationMemberModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", organizationMemberModel.OrganizationIdOption!.Value);

            if (organizationMemberModel.OrganizationNameOption.IsSet)
                if (organizationMemberModel.OrganizationNameOption.Value != null)
                {
                    writer.WriteString("organizationName", organizationMemberModel.OrganizationName);
                    //var __value = organizationMemberModel.OrganizationNameOption.Value;
                    //writer.WriteString("organizationName", __value);
                }
                else
                    writer.WriteNull("organizationName");

            if (organizationMemberModel.RolesOption.IsSet)
                if (organizationMemberModel.RolesOption.Value != null)
                {
                    writer.WritePropertyName("roles");
                    JsonSerializer.Serialize(writer, organizationMemberModel.Roles, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("roles");
            if (organizationMemberModel.StateOption.IsSet)
            {
                var stateRawValue = MemberStateValueConverter.ToJsonValue(organizationMemberModel.State!.Value);
                writer.WriteNumber("state", stateRawValue);
            }
            if (organizationMemberModel.UserEmailAddressOption.IsSet)
                if (organizationMemberModel.UserEmailAddressOption.Value != null)
                {
                    writer.WriteString("userEmailAddress", organizationMemberModel.UserEmailAddress);
                    //var __value = organizationMemberModel.UserEmailAddressOption.Value;
                    //writer.WriteString("userEmailAddress", __value);
                }
                else
                    writer.WriteNull("userEmailAddress");

            if (organizationMemberModel.UserIdOption.IsSet)
                writer.WriteString("userId", organizationMemberModel.UserIdOption!.Value);
        }
    }
}
