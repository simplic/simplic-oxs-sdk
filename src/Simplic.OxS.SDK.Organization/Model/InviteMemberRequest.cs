/*
 * Simplic.OxS.Organization
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Organization
{
    /// <summary>
    /// InviteMemberRequest
    /// </summary>
    [DataContract(Name = "InviteMemberRequest")]
    public partial class InviteMemberRequest : IEquatable<InviteMemberRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteMemberRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InviteMemberRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteMemberRequest" /> class.
        /// </summary>
        /// <param name="emailAddress">emailAddress (required).</param>
        /// <param name="customInvitationText">Replaces the default text in the Invitation email with a custom text.  Can be null or empty to show the default text..</param>
        public InviteMemberRequest(string emailAddress = default(string), string customInvitationText = default(string))
        {
            // to ensure "emailAddress" is required (not null)
            if (emailAddress == null)
            {
                throw new ArgumentNullException("emailAddress is a required property for InviteMemberRequest and cannot be null");
            }
            this.EmailAddress = emailAddress;
            this.CustomInvitationText = customInvitationText;
        }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "emailAddress", IsRequired = true, EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Replaces the default text in the Invitation email with a custom text.  Can be null or empty to show the default text.
        /// </summary>
        /// <value>Replaces the default text in the Invitation email with a custom text.  Can be null or empty to show the default text.</value>
        [DataMember(Name = "customInvitationText", EmitDefaultValue = true)]
        public string CustomInvitationText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InviteMemberRequest {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  CustomInvitationText: ").Append(CustomInvitationText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InviteMemberRequest);
        }

        /// <summary>
        /// Returns true if InviteMemberRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InviteMemberRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InviteMemberRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.CustomInvitationText == input.CustomInvitationText ||
                    (this.CustomInvitationText != null &&
                    this.CustomInvitationText.Equals(input.CustomInvitationText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                if (this.CustomInvitationText != null)
                {
                    hashCode = (hashCode * 59) + this.CustomInvitationText.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EmailAddress (string) minLength
            if (this.EmailAddress != null && this.EmailAddress.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be greater than 1.", new [] { "EmailAddress" });
            }

            yield break;
        }
    }

}
