/*
 * Simplic.OxS.Organization
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Organization
{
    /// <summary>
    /// Represents an invitation for an organization to a foreign organization
    /// </summary>
    [DataContract(Name = "OrganizationLinkInvitationModel")]
    public partial class OrganizationLinkInvitationModel : IEquatable<OrganizationLinkInvitationModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public OrganizationLinkState? State { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public OrganizationInvitaitonType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationLinkInvitationModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id of the invitation.</param>
        /// <param name="organizationId">Gets or sets the id of the originator organization.</param>
        /// <param name="email">Gets or sets an e-mail address as recipient for the invitation.</param>
        /// <param name="domain">Gets or sets the domain to which the invitation belongs. (one-time invitation).</param>
        /// <param name="token">Gets or sets the unique invitation token.</param>
        /// <param name="state">state.</param>
        /// <param name="modules">Gets or sets a list of modules that belongs to the invitation and will be added  to the list of available modules when accepting the invitation..</param>
        /// <param name="expireDate">Gets or sets the expire date of the invitation.</param>
        /// <param name="organizationName">Gets or sets the name of the organization who has initiated the invitation.</param>
        /// <param name="originator">Gets or sets the member name of the invitation creator.</param>
        /// <param name="type">type.</param>
        public OrganizationLinkInvitationModel(Guid id = default(Guid), Guid organizationId = default(Guid), string email = default(string), string domain = default(string), string token = default(string), OrganizationLinkState? state = default(OrganizationLinkState?), List<string> modules = default(List<string>), DateTime expireDate = default(DateTime), string organizationName = default(string), string originator = default(string), OrganizationInvitaitonType? type = default(OrganizationInvitaitonType?))
        {
            this.Id = id;
            this.OrganizationId = organizationId;
            this.Email = email;
            this.Domain = domain;
            this.Token = token;
            this.State = state;
            this.Modules = modules;
            this.ExpireDate = expireDate;
            this.OrganizationName = organizationName;
            this.Originator = originator;
            this.Type = type;
        }

        /// <summary>
        /// Gets or sets the id of the invitation
        /// </summary>
        /// <value>Gets or sets the id of the invitation</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the id of the originator organization
        /// </summary>
        /// <value>Gets or sets the id of the originator organization</value>
        [DataMember(Name = "organizationId", EmitDefaultValue = false)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Gets or sets an e-mail address as recipient for the invitation
        /// </summary>
        /// <value>Gets or sets an e-mail address as recipient for the invitation</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the domain to which the invitation belongs. (one-time invitation)
        /// </summary>
        /// <value>Gets or sets the domain to which the invitation belongs. (one-time invitation)</value>
        [DataMember(Name = "domain", EmitDefaultValue = true)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or sets the unique invitation token
        /// </summary>
        /// <value>Gets or sets the unique invitation token</value>
        [DataMember(Name = "token", EmitDefaultValue = true)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or sets a list of modules that belongs to the invitation and will be added  to the list of available modules when accepting the invitation.
        /// </summary>
        /// <value>Gets or sets a list of modules that belongs to the invitation and will be added  to the list of available modules when accepting the invitation.</value>
        [DataMember(Name = "modules", EmitDefaultValue = true)]
        public List<string> Modules { get; set; }

        /// <summary>
        /// Gets or sets the expire date of the invitation
        /// </summary>
        /// <value>Gets or sets the expire date of the invitation</value>
        [DataMember(Name = "expireDate", EmitDefaultValue = false)]
        public DateTime ExpireDate { get; set; }

        /// <summary>
        /// Gets or sets the name of the organization who has initiated the invitation
        /// </summary>
        /// <value>Gets or sets the name of the organization who has initiated the invitation</value>
        [DataMember(Name = "organizationName", EmitDefaultValue = true)]
        public string OrganizationName { get; set; }

        /// <summary>
        /// Gets or sets the member name of the invitation creator
        /// </summary>
        /// <value>Gets or sets the member name of the invitation creator</value>
        [DataMember(Name = "originator", EmitDefaultValue = true)]
        public string Originator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationLinkInvitationModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Modules: ").Append(Modules).Append("\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  Originator: ").Append(Originator).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationLinkInvitationModel);
        }

        /// <summary>
        /// Returns true if OrganizationLinkInvitationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationLinkInvitationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationLinkInvitationModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Modules == input.Modules ||
                    this.Modules != null &&
                    input.Modules != null &&
                    this.Modules.SequenceEqual(input.Modules)
                ) && 
                (
                    this.ExpireDate == input.ExpireDate ||
                    (this.ExpireDate != null &&
                    this.ExpireDate.Equals(input.ExpireDate))
                ) && 
                (
                    this.OrganizationName == input.OrganizationName ||
                    (this.OrganizationName != null &&
                    this.OrganizationName.Equals(input.OrganizationName))
                ) && 
                (
                    this.Originator == input.Originator ||
                    (this.Originator != null &&
                    this.Originator.Equals(input.Originator))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.OrganizationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationId.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Domain != null)
                {
                    hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                if (this.Modules != null)
                {
                    hashCode = (hashCode * 59) + this.Modules.GetHashCode();
                }
                if (this.ExpireDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpireDate.GetHashCode();
                }
                if (this.OrganizationName != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationName.GetHashCode();
                }
                if (this.Originator != null)
                {
                    hashCode = (hashCode * 59) + this.Originator.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
