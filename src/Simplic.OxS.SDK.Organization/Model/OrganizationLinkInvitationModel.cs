// <auto-generated>
/*
 * Simplic.OxS.Organization
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Organization
{
    /// <summary>
    /// Represents an invitation for an organization to a foreign organization
    /// </summary>
    public partial class OrganizationLinkInvitationModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public OrganizationLinkInvitationModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationLinkInvitationModel" /> class.
        /// </summary>
        /// <param name="domain">Gets or sets the domain to which the invitation belongs. (one-time invitation)</param>
        /// <param name="email">Gets or sets an e-mail address as recipient for the invitation</param>
        /// <param name="expireDate">Gets or sets the expire date of the invitation</param>
        /// <param name="id">Gets or sets the id of the invitation</param>
        /// <param name="modules">Gets or sets a list of modules that belongs to the invitation and will be added  to the list of available modules when accepting the invitation.</param>
        /// <param name="organizationId">Gets or sets the id of the originator organization</param>
        /// <param name="organizationName">Gets or sets the name of the organization who has initiated the invitation</param>
        /// <param name="originator">Gets or sets the member name of the invitation creator</param>
        /// <param name="state">state</param>
        /// <param name="token">Gets or sets the unique invitation token</param>
        /// <param name="type">type</param>
        //[JsonConstructor]
        public OrganizationLinkInvitationModel(Option<string> domain = default, Option<string> email = default, Option<DateTime> expireDate = default, Option<Guid> id = default, Option<List<string>> modules = default, Option<Guid> organizationId = default, Option<string> organizationName = default, Option<string> originator = default, Option<OrganizationLinkState> state = default, Option<string> token = default, Option<OrganizationInvitaitonType> type = default)
        {
            DomainOption = domain;
            EmailOption = email;
            ExpireDateOption = expireDate;
            IdOption = id;
            ModulesOption = modules;
            OrganizationIdOption = organizationId;
            OrganizationNameOption = organizationName;
            OriginatorOption = originator;
            StateOption = state;
            TokenOption = token;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<OrganizationLinkState>))]
        public Option<OrganizationLinkState> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public OrganizationLinkState? State { get { return this.StateOption; } set { this.StateOption = new Option<OrganizationLinkState>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<OrganizationInvitaitonType>))]
        public Option<OrganizationInvitaitonType> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public OrganizationInvitaitonType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<OrganizationInvitaitonType>(value); } }

        /// <summary>
        /// Used to track the state of Domain
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DomainOption { get; private set; }

        /// <summary>
        /// Gets or sets the domain to which the invitation belongs. (one-time invitation)
        /// </summary>
        /// <value>Gets or sets the domain to which the invitation belongs. (one-time invitation)</value>
        [JsonPropertyName("domain")]
        public string? Domain { get { return this. DomainOption; } set { this.DomainOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> EmailOption { get; private set; }

        /// <summary>
        /// Gets or sets an e-mail address as recipient for the invitation
        /// </summary>
        /// <value>Gets or sets an e-mail address as recipient for the invitation</value>
        [JsonPropertyName("email")]
        public string? Email { get { return this. EmailOption; } set { this.EmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpireDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ExpireDateOption { get; private set; }

        /// <summary>
        /// Gets or sets the expire date of the invitation
        /// </summary>
        /// <value>Gets or sets the expire date of the invitation</value>
        [JsonPropertyName("expireDate")]
        public DateTime? ExpireDate { get { return this. ExpireDateOption; } set { this.ExpireDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the invitation
        /// </summary>
        /// <value>Gets or sets the id of the invitation</value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Modules
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> ModulesOption { get; private set; }

        /// <summary>
        /// Gets or sets a list of modules that belongs to the invitation and will be added  to the list of available modules when accepting the invitation.
        /// </summary>
        /// <value>Gets or sets a list of modules that belongs to the invitation and will be added  to the list of available modules when accepting the invitation.</value>
        [JsonPropertyName("modules")]
        public List<string>? Modules { get { return this. ModulesOption; } set { this.ModulesOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the originator organization
        /// </summary>
        /// <value>Gets or sets the id of the originator organization</value>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> OrganizationNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the name of the organization who has initiated the invitation
        /// </summary>
        /// <value>Gets or sets the name of the organization who has initiated the invitation</value>
        [JsonPropertyName("organizationName")]
        public string? OrganizationName { get { return this. OrganizationNameOption; } set { this.OrganizationNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Originator
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> OriginatorOption { get; private set; }

        /// <summary>
        /// Gets or sets the member name of the invitation creator
        /// </summary>
        /// <value>Gets or sets the member name of the invitation creator</value>
        [JsonPropertyName("originator")]
        public string? Originator { get { return this. OriginatorOption; } set { this.OriginatorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Token
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TokenOption { get; private set; }

        /// <summary>
        /// Gets or sets the unique invitation token
        /// </summary>
        /// <value>Gets or sets the unique invitation token</value>
        [JsonPropertyName("token")]
        public string? Token { get { return this. TokenOption; } set { this.TokenOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationLinkInvitationModel {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Modules: ").Append(Modules).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  Originator: ").Append(Originator).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OrganizationLinkInvitationModel" />
    /// </summary>
    public class OrganizationLinkInvitationModelJsonConverter : JsonConverter<OrganizationLinkInvitationModel>
    {
        /// <summary>
        /// The format to use to serialize ExpireDate
        /// </summary>
        public static string ExpireDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="OrganizationLinkInvitationModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OrganizationLinkInvitationModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> domain = default;
            Option<string> email = default;
            Option<DateTime> expireDate = default;
            Option<Guid> id = default;
            Option<List<string>> modules = default;
            Option<Guid> organizationId = default;
            Option<string> organizationName = default;
            Option<string> originator = default;
            Option<OrganizationLinkState> state = default;
            Option<string> token = default;
            Option<OrganizationInvitaitonType> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "domain":
                            domain = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expireDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expireDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "modules":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                modules = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "organizationName":
                            organizationName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "originator":
                            originator = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "state":
                            string? stateRawValue = utf8JsonReader.GetString();
                            if (stateRawValue != null)
                                state = new Option<OrganizationLinkState>(OrganizationLinkStateValueConverter.FromStringOrDefault(stateRawValue));
                            break;
                        case "token":
                            token = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<OrganizationInvitaitonType>(OrganizationInvitaitonTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (expireDate.IsSet && expireDate.Value == null)
                throw new ArgumentNullException(nameof(expireDate), "Property is not nullable for class OrganizationLinkInvitationModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class OrganizationLinkInvitationModel.");

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class OrganizationLinkInvitationModel.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class OrganizationLinkInvitationModel.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class OrganizationLinkInvitationModel.");

            //2return new OrganizationLinkInvitationModel(domain, email, expireDate, id, modules, organizationId, organizationName, originator, state, token, type);
            return new OrganizationLinkInvitationModel(domain, email, expireDate, id, modules, organizationId, organizationName, originator, state, token, type);
        }

        /// <summary>
        /// Serializes a <see cref="OrganizationLinkInvitationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationLinkInvitationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OrganizationLinkInvitationModel organizationLinkInvitationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, organizationLinkInvitationModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OrganizationLinkInvitationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationLinkInvitationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, OrganizationLinkInvitationModel organizationLinkInvitationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (organizationLinkInvitationModel.DomainOption.IsSet)
                if (organizationLinkInvitationModel.DomainOption.Value != null)
                {
                    writer.WriteString("domain", organizationLinkInvitationModel.Domain);
                    //var __value = organizationLinkInvitationModel.DomainOption.Value;
                    //writer.WriteString("domain", __value);
                }
                else
                    writer.WriteNull("domain");

            if (organizationLinkInvitationModel.EmailOption.IsSet)
                if (organizationLinkInvitationModel.EmailOption.Value != null)
                {
                    writer.WriteString("email", organizationLinkInvitationModel.Email);
                    //var __value = organizationLinkInvitationModel.EmailOption.Value;
                    //writer.WriteString("email", __value);
                }
                else
                    writer.WriteNull("email");

            if (organizationLinkInvitationModel.ExpireDateOption.IsSet)
                writer.WriteString("expireDate", organizationLinkInvitationModel.ExpireDateOption!.Value.ToString(ExpireDateFormat));

            if (organizationLinkInvitationModel.IdOption.IsSet)
                writer.WriteString("id", organizationLinkInvitationModel.IdOption!.Value);

            if (organizationLinkInvitationModel.ModulesOption.IsSet)
                if (organizationLinkInvitationModel.ModulesOption.Value != null)
                {
                    writer.WritePropertyName("modules");
                    JsonSerializer.Serialize(writer, organizationLinkInvitationModel.Modules, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("modules");
            if (organizationLinkInvitationModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", organizationLinkInvitationModel.OrganizationIdOption!.Value);

            if (organizationLinkInvitationModel.OrganizationNameOption.IsSet)
                if (organizationLinkInvitationModel.OrganizationNameOption.Value != null)
                {
                    writer.WriteString("organizationName", organizationLinkInvitationModel.OrganizationName);
                    //var __value = organizationLinkInvitationModel.OrganizationNameOption.Value;
                    //writer.WriteString("organizationName", __value);
                }
                else
                    writer.WriteNull("organizationName");

            if (organizationLinkInvitationModel.OriginatorOption.IsSet)
                if (organizationLinkInvitationModel.OriginatorOption.Value != null)
                {
                    writer.WriteString("originator", organizationLinkInvitationModel.Originator);
                    //var __value = organizationLinkInvitationModel.OriginatorOption.Value;
                    //writer.WriteString("originator", __value);
                }
                else
                    writer.WriteNull("originator");

            if (organizationLinkInvitationModel.StateOption.IsSet)
            {
                var stateRawValue = OrganizationLinkStateValueConverter.ToJsonValue(organizationLinkInvitationModel.State!.Value);
                writer.WriteNumber("state", stateRawValue);
            }
            if (organizationLinkInvitationModel.TokenOption.IsSet)
                if (organizationLinkInvitationModel.TokenOption.Value != null)
                {
                    writer.WriteString("token", organizationLinkInvitationModel.Token);
                    //var __value = organizationLinkInvitationModel.TokenOption.Value;
                    //writer.WriteString("token", __value);
                }
                else
                    writer.WriteNull("token");

            if (organizationLinkInvitationModel.TypeOption.IsSet)
            {
                var typeRawValue = OrganizationInvitaitonTypeValueConverter.ToJsonValue(organizationLinkInvitationModel.Type!.Value);
                writer.WriteNumber("type", typeRawValue);
            }
        }
    }
}
