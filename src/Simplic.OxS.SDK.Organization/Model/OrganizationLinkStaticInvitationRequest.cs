/*
 * Simplic.OxS.Organization
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Organization.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Organization
{
    /// <summary>
    /// Containing all information for requesting an organization link invitation (static invitation)
    /// </summary>
    [DataContract(Name = "OrganizationLinkStaticInvitationRequest")]
    public partial class OrganizationLinkStaticInvitationRequest : IEquatable<OrganizationLinkStaticInvitationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationLinkStaticInvitationRequest" /> class.
        /// </summary>
        /// <param name="expireDate">Gets or sets the expire date of the invitation request.</param>
        /// <param name="modules">Gets or sets a list of modules that should be added to the organization link  when accepting the invitation..</param>
        public OrganizationLinkStaticInvitationRequest(DateTime expireDate = default(DateTime), List<string> modules = default(List<string>))
        {
            this.ExpireDate = expireDate;
            this.Modules = modules;
        }

        /// <summary>
        /// Gets or sets the expire date of the invitation request
        /// </summary>
        /// <value>Gets or sets the expire date of the invitation request</value>
        [DataMember(Name = "expireDate", EmitDefaultValue = false)]
        public DateTime ExpireDate { get; set; }

        /// <summary>
        /// Gets or sets a list of modules that should be added to the organization link  when accepting the invitation.
        /// </summary>
        /// <value>Gets or sets a list of modules that should be added to the organization link  when accepting the invitation.</value>
        [DataMember(Name = "modules", EmitDefaultValue = true)]
        public List<string> Modules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationLinkStaticInvitationRequest {\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("  Modules: ").Append(Modules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationLinkStaticInvitationRequest);
        }

        /// <summary>
        /// Returns true if OrganizationLinkStaticInvitationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationLinkStaticInvitationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationLinkStaticInvitationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExpireDate == input.ExpireDate ||
                    (this.ExpireDate != null &&
                    this.ExpireDate.Equals(input.ExpireDate))
                ) && 
                (
                    this.Modules == input.Modules ||
                    this.Modules != null &&
                    input.Modules != null &&
                    this.Modules.SequenceEqual(input.Modules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpireDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpireDate.GetHashCode();
                }
                if (this.Modules != null)
                {
                    hashCode = (hashCode * 59) + this.Modules.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
