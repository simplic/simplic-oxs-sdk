// <auto-generated>
/*
 * Simplic.OxS.Organization
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Organization
{
    /// <summary>
    /// Represents a billing address
    /// </summary>
    public partial class BillingAddressModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public BillingAddressModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingAddressModel" /> class.
        /// </summary>
        /// <param name="additional01">Gets or sets some additional address information.</param>
        /// <param name="city">Gets or sets the city</param>
        /// <param name="countryIso">Gets or sets the country iso code (e.g. de, fr, en, us, ...(</param>
        /// <param name="houseNumber">Gets or sets the house number</param>
        /// <param name="invoiceRecipient">Gets or sets a list of mail-addresses for recieving invoices</param>
        /// <param name="name">Gets or sets the name of the billing recipient</param>
        /// <param name="street">Gets or sets the street name</param>
        /// <param name="vatId">Gets or sets the vat-id of the company</param>
        /// <param name="zipCode">Gets or sets the zipcode</param>
        //[JsonConstructor]
        public BillingAddressModel(Option<string> additional01 = default, Option<string> city = default, Option<string> countryIso = default, Option<string> houseNumber = default, Option<List<string>> invoiceRecipient = default, Option<string> name = default, Option<string> street = default, Option<string> vatId = default, Option<string> zipCode = default)
        {
            Additional01Option = additional01;
            CityOption = city;
            CountryIsoOption = countryIso;
            HouseNumberOption = houseNumber;
            InvoiceRecipientOption = invoiceRecipient;
            NameOption = name;
            StreetOption = street;
            VatIdOption = vatId;
            ZipCodeOption = zipCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Additional01
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> Additional01Option { get; private set; }

        /// <summary>
        /// Gets or sets some additional address information.
        /// </summary>
        /// <value>Gets or sets some additional address information.</value>
        [JsonPropertyName("additional01")]
        public string? Additional01 { get { return this. Additional01Option; } set { this.Additional01Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of City
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CityOption { get; private set; }

        /// <summary>
        /// Gets or sets the city
        /// </summary>
        /// <value>Gets or sets the city</value>
        [JsonPropertyName("city")]
        public string? City { get { return this. CityOption; } set { this.CityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryIso
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CountryIsoOption { get; private set; }

        /// <summary>
        /// Gets or sets the country iso code (e.g. de, fr, en, us, ...(
        /// </summary>
        /// <value>Gets or sets the country iso code (e.g. de, fr, en, us, ...(</value>
        [JsonPropertyName("countryIso")]
        public string? CountryIso { get { return this. CountryIsoOption; } set { this.CountryIsoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of HouseNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> HouseNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the house number
        /// </summary>
        /// <value>Gets or sets the house number</value>
        [JsonPropertyName("houseNumber")]
        public string? HouseNumber { get { return this. HouseNumberOption; } set { this.HouseNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InvoiceRecipient
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> InvoiceRecipientOption { get; private set; }

        /// <summary>
        /// Gets or sets a list of mail-addresses for recieving invoices
        /// </summary>
        /// <value>Gets or sets a list of mail-addresses for recieving invoices</value>
        [JsonPropertyName("invoiceRecipient")]
        public List<string>? InvoiceRecipient { get { return this. InvoiceRecipientOption; } set { this.InvoiceRecipientOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or sets the name of the billing recipient
        /// </summary>
        /// <value>Gets or sets the name of the billing recipient</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Street
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> StreetOption { get; private set; }

        /// <summary>
        /// Gets or sets the street name
        /// </summary>
        /// <value>Gets or sets the street name</value>
        [JsonPropertyName("street")]
        public string? Street { get { return this. StreetOption; } set { this.StreetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VatId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> VatIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the vat-id of the company
        /// </summary>
        /// <value>Gets or sets the vat-id of the company</value>
        [JsonPropertyName("vatId")]
        public string? VatId { get { return this. VatIdOption; } set { this.VatIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ZipCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ZipCodeOption { get; private set; }

        /// <summary>
        /// Gets or sets the zipcode
        /// </summary>
        /// <value>Gets or sets the zipcode</value>
        [JsonPropertyName("zipCode")]
        public string? ZipCode { get { return this. ZipCodeOption; } set { this.ZipCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BillingAddressModel {\n");
            sb.Append("  Additional01: ").Append(Additional01).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryIso: ").Append(CountryIso).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  InvoiceRecipient: ").Append(InvoiceRecipient).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BillingAddressModel" />
    /// </summary>
    public class BillingAddressModelJsonConverter : JsonConverter<BillingAddressModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="BillingAddressModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BillingAddressModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> additional01 = default;
            Option<string> city = default;
            Option<string> countryIso = default;
            Option<string> houseNumber = default;
            Option<List<string>> invoiceRecipient = default;
            Option<string> name = default;
            Option<string> street = default;
            Option<string> vatId = default;
            Option<string> zipCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "additional01":
                            additional01 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "city":
                            city = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "countryIso":
                            countryIso = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "houseNumber":
                            houseNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "invoiceRecipient":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invoiceRecipient = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "street":
                            street = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vatId":
                            vatId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "zipCode":
                            zipCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new BillingAddressModel(additional01, city, countryIso, houseNumber, invoiceRecipient, name, street, vatId, zipCode);
            return new BillingAddressModel(additional01, city, countryIso, houseNumber, invoiceRecipient, name, street, vatId, zipCode);
        }

        /// <summary>
        /// Serializes a <see cref="BillingAddressModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billingAddressModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BillingAddressModel billingAddressModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, billingAddressModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BillingAddressModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billingAddressModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, BillingAddressModel billingAddressModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (billingAddressModel.Additional01Option.IsSet)
                if (billingAddressModel.Additional01Option.Value != null)
                {
                    writer.WriteString("additional01", billingAddressModel.Additional01);
                    //var __value = billingAddressModel.Additional01Option.Value;
                    //writer.WriteString("additional01", __value);
                }
                else
                    writer.WriteNull("additional01");

            if (billingAddressModel.CityOption.IsSet)
                if (billingAddressModel.CityOption.Value != null)
                {
                    writer.WriteString("city", billingAddressModel.City);
                    //var __value = billingAddressModel.CityOption.Value;
                    //writer.WriteString("city", __value);
                }
                else
                    writer.WriteNull("city");

            if (billingAddressModel.CountryIsoOption.IsSet)
                if (billingAddressModel.CountryIsoOption.Value != null)
                {
                    writer.WriteString("countryIso", billingAddressModel.CountryIso);
                    //var __value = billingAddressModel.CountryIsoOption.Value;
                    //writer.WriteString("countryIso", __value);
                }
                else
                    writer.WriteNull("countryIso");

            if (billingAddressModel.HouseNumberOption.IsSet)
                if (billingAddressModel.HouseNumberOption.Value != null)
                {
                    writer.WriteString("houseNumber", billingAddressModel.HouseNumber);
                    //var __value = billingAddressModel.HouseNumberOption.Value;
                    //writer.WriteString("houseNumber", __value);
                }
                else
                    writer.WriteNull("houseNumber");

            if (billingAddressModel.InvoiceRecipientOption.IsSet)
                if (billingAddressModel.InvoiceRecipientOption.Value != null)
                {
                    writer.WritePropertyName("invoiceRecipient");
                    JsonSerializer.Serialize(writer, billingAddressModel.InvoiceRecipient, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("invoiceRecipient");
            if (billingAddressModel.NameOption.IsSet)
                if (billingAddressModel.NameOption.Value != null)
                {
                    writer.WriteString("name", billingAddressModel.Name);
                    //var __value = billingAddressModel.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (billingAddressModel.StreetOption.IsSet)
                if (billingAddressModel.StreetOption.Value != null)
                {
                    writer.WriteString("street", billingAddressModel.Street);
                    //var __value = billingAddressModel.StreetOption.Value;
                    //writer.WriteString("street", __value);
                }
                else
                    writer.WriteNull("street");

            if (billingAddressModel.VatIdOption.IsSet)
                if (billingAddressModel.VatIdOption.Value != null)
                {
                    writer.WriteString("vatId", billingAddressModel.VatId);
                    //var __value = billingAddressModel.VatIdOption.Value;
                    //writer.WriteString("vatId", __value);
                }
                else
                    writer.WriteNull("vatId");

            if (billingAddressModel.ZipCodeOption.IsSet)
                if (billingAddressModel.ZipCodeOption.Value != null)
                {
                    writer.WriteString("zipCode", billingAddressModel.ZipCode);
                    //var __value = billingAddressModel.ZipCodeOption.Value;
                    //writer.WriteString("zipCode", __value);
                }
                else
                    writer.WriteNull("zipCode");
        }
    }
}
