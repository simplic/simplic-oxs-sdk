/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// Represents a request to create a transaction item type.
    /// </summary>
    [DataContract(Name = "UpdateTransactionItemTypeRequest")]
    public partial class UpdateTransactionItemTypeRequest : IEquatable<UpdateTransactionItemTypeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateTransactionItemTypeRequest" /> class.
        /// </summary>
        /// <param name="name">Gets or sets the name..</param>
        /// <param name="number">Gets or sets the number..</param>
        /// <param name="hasPositionNumber">Gets or sets the has position number flag..</param>
        /// <param name="isSelectable">Gets or sets the is selectable flag..</param>
        /// <param name="detailHtml">Gets or sets the detail HTML..</param>
        /// <param name="dataTemplate">Gets or sets the data template..</param>
        /// <param name="articleGLAResolver">Gets or sets the article GLA resolver..</param>
        public UpdateTransactionItemTypeRequest(string name = default(string), int? number = default(int?), bool? hasPositionNumber = default(bool?), bool? isSelectable = default(bool?), string detailHtml = default(string), string dataTemplate = default(string), string articleGLAResolver = default(string))
        {
            this.Name = name;
            this.Number = number;
            this.HasPositionNumber = hasPositionNumber;
            this.IsSelectable = isSelectable;
            this.DetailHtml = detailHtml;
            this.DataTemplate = dataTemplate;
            this.ArticleGLAResolver = articleGLAResolver;
        }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the number.
        /// </summary>
        /// <value>Gets or sets the number.</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public int? Number { get; set; }

        /// <summary>
        /// Gets or sets the has position number flag.
        /// </summary>
        /// <value>Gets or sets the has position number flag.</value>
        [DataMember(Name = "hasPositionNumber", EmitDefaultValue = true)]
        public bool? HasPositionNumber { get; set; }

        /// <summary>
        /// Gets or sets the is selectable flag.
        /// </summary>
        /// <value>Gets or sets the is selectable flag.</value>
        [DataMember(Name = "isSelectable", EmitDefaultValue = true)]
        public bool? IsSelectable { get; set; }

        /// <summary>
        /// Gets or sets the detail HTML.
        /// </summary>
        /// <value>Gets or sets the detail HTML.</value>
        [DataMember(Name = "detailHtml", EmitDefaultValue = true)]
        public string DetailHtml { get; set; }

        /// <summary>
        /// Gets or sets the data template.
        /// </summary>
        /// <value>Gets or sets the data template.</value>
        [DataMember(Name = "dataTemplate", EmitDefaultValue = true)]
        public string DataTemplate { get; set; }

        /// <summary>
        /// Gets or sets the article GLA resolver.
        /// </summary>
        /// <value>Gets or sets the article GLA resolver.</value>
        [DataMember(Name = "articleGLAResolver", EmitDefaultValue = true)]
        public string ArticleGLAResolver { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateTransactionItemTypeRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  HasPositionNumber: ").Append(HasPositionNumber).Append("\n");
            sb.Append("  IsSelectable: ").Append(IsSelectable).Append("\n");
            sb.Append("  DetailHtml: ").Append(DetailHtml).Append("\n");
            sb.Append("  DataTemplate: ").Append(DataTemplate).Append("\n");
            sb.Append("  ArticleGLAResolver: ").Append(ArticleGLAResolver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateTransactionItemTypeRequest);
        }

        /// <summary>
        /// Returns true if UpdateTransactionItemTypeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateTransactionItemTypeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateTransactionItemTypeRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.HasPositionNumber == input.HasPositionNumber ||
                    (this.HasPositionNumber != null &&
                    this.HasPositionNumber.Equals(input.HasPositionNumber))
                ) && 
                (
                    this.IsSelectable == input.IsSelectable ||
                    (this.IsSelectable != null &&
                    this.IsSelectable.Equals(input.IsSelectable))
                ) && 
                (
                    this.DetailHtml == input.DetailHtml ||
                    (this.DetailHtml != null &&
                    this.DetailHtml.Equals(input.DetailHtml))
                ) && 
                (
                    this.DataTemplate == input.DataTemplate ||
                    (this.DataTemplate != null &&
                    this.DataTemplate.Equals(input.DataTemplate))
                ) && 
                (
                    this.ArticleGLAResolver == input.ArticleGLAResolver ||
                    (this.ArticleGLAResolver != null &&
                    this.ArticleGLAResolver.Equals(input.ArticleGLAResolver))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.HasPositionNumber != null)
                {
                    hashCode = (hashCode * 59) + this.HasPositionNumber.GetHashCode();
                }
                if (this.IsSelectable != null)
                {
                    hashCode = (hashCode * 59) + this.IsSelectable.GetHashCode();
                }
                if (this.DetailHtml != null)
                {
                    hashCode = (hashCode * 59) + this.DetailHtml.GetHashCode();
                }
                if (this.DataTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.DataTemplate.GetHashCode();
                }
                if (this.ArticleGLAResolver != null)
                {
                    hashCode = (hashCode * 59) + this.ArticleGLAResolver.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
