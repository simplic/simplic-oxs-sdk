/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// ImportedTotals
    /// </summary>
    [DataContract(Name = "ImportedTotals")]
    public partial class ImportedTotals : IEquatable<ImportedTotals>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportedTotals" /> class.
        /// </summary>
        /// <param name="totalPriceNet">totalPriceNet.</param>
        /// <param name="totalPriceNetWithoutInvoiceDiscountsSurcharges">totalPriceNetWithoutInvoiceDiscountsSurcharges.</param>
        /// <param name="totalPriceGross">totalPriceGross.</param>
        /// <param name="totalPriceTax">totalPriceTax.</param>
        /// <param name="totalPriceDiscount">totalPriceDiscount.</param>
        /// <param name="totalPriceSurcharge">totalPriceSurcharge.</param>
        public ImportedTotals(double? totalPriceNet = default(double?), double? totalPriceNetWithoutInvoiceDiscountsSurcharges = default(double?), double? totalPriceGross = default(double?), double? totalPriceTax = default(double?), double? totalPriceDiscount = default(double?), double? totalPriceSurcharge = default(double?))
        {
            this.TotalPriceNet = totalPriceNet;
            this.TotalPriceNetWithoutInvoiceDiscountsSurcharges = totalPriceNetWithoutInvoiceDiscountsSurcharges;
            this.TotalPriceGross = totalPriceGross;
            this.TotalPriceTax = totalPriceTax;
            this.TotalPriceDiscount = totalPriceDiscount;
            this.TotalPriceSurcharge = totalPriceSurcharge;
        }

        /// <summary>
        /// Gets or Sets TotalPriceNet
        /// </summary>
        [DataMember(Name = "totalPriceNet", EmitDefaultValue = true)]
        public double? TotalPriceNet { get; set; }

        /// <summary>
        /// Gets or Sets TotalPriceNetWithoutInvoiceDiscountsSurcharges
        /// </summary>
        [DataMember(Name = "totalPriceNetWithoutInvoiceDiscountsSurcharges", EmitDefaultValue = true)]
        public double? TotalPriceNetWithoutInvoiceDiscountsSurcharges { get; set; }

        /// <summary>
        /// Gets or Sets TotalPriceGross
        /// </summary>
        [DataMember(Name = "totalPriceGross", EmitDefaultValue = true)]
        public double? TotalPriceGross { get; set; }

        /// <summary>
        /// Gets or Sets TotalPriceTax
        /// </summary>
        [DataMember(Name = "totalPriceTax", EmitDefaultValue = true)]
        public double? TotalPriceTax { get; set; }

        /// <summary>
        /// Gets or Sets TotalPriceDiscount
        /// </summary>
        [DataMember(Name = "totalPriceDiscount", EmitDefaultValue = true)]
        public double? TotalPriceDiscount { get; set; }

        /// <summary>
        /// Gets or Sets TotalPriceSurcharge
        /// </summary>
        [DataMember(Name = "totalPriceSurcharge", EmitDefaultValue = true)]
        public double? TotalPriceSurcharge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportedTotals {\n");
            sb.Append("  TotalPriceNet: ").Append(TotalPriceNet).Append("\n");
            sb.Append("  TotalPriceNetWithoutInvoiceDiscountsSurcharges: ").Append(TotalPriceNetWithoutInvoiceDiscountsSurcharges).Append("\n");
            sb.Append("  TotalPriceGross: ").Append(TotalPriceGross).Append("\n");
            sb.Append("  TotalPriceTax: ").Append(TotalPriceTax).Append("\n");
            sb.Append("  TotalPriceDiscount: ").Append(TotalPriceDiscount).Append("\n");
            sb.Append("  TotalPriceSurcharge: ").Append(TotalPriceSurcharge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportedTotals);
        }

        /// <summary>
        /// Returns true if ImportedTotals instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportedTotals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportedTotals input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalPriceNet == input.TotalPriceNet ||
                    (this.TotalPriceNet != null &&
                    this.TotalPriceNet.Equals(input.TotalPriceNet))
                ) && 
                (
                    this.TotalPriceNetWithoutInvoiceDiscountsSurcharges == input.TotalPriceNetWithoutInvoiceDiscountsSurcharges ||
                    (this.TotalPriceNetWithoutInvoiceDiscountsSurcharges != null &&
                    this.TotalPriceNetWithoutInvoiceDiscountsSurcharges.Equals(input.TotalPriceNetWithoutInvoiceDiscountsSurcharges))
                ) && 
                (
                    this.TotalPriceGross == input.TotalPriceGross ||
                    (this.TotalPriceGross != null &&
                    this.TotalPriceGross.Equals(input.TotalPriceGross))
                ) && 
                (
                    this.TotalPriceTax == input.TotalPriceTax ||
                    (this.TotalPriceTax != null &&
                    this.TotalPriceTax.Equals(input.TotalPriceTax))
                ) && 
                (
                    this.TotalPriceDiscount == input.TotalPriceDiscount ||
                    (this.TotalPriceDiscount != null &&
                    this.TotalPriceDiscount.Equals(input.TotalPriceDiscount))
                ) && 
                (
                    this.TotalPriceSurcharge == input.TotalPriceSurcharge ||
                    (this.TotalPriceSurcharge != null &&
                    this.TotalPriceSurcharge.Equals(input.TotalPriceSurcharge))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalPriceNet != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPriceNet.GetHashCode();
                }
                if (this.TotalPriceNetWithoutInvoiceDiscountsSurcharges != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPriceNetWithoutInvoiceDiscountsSurcharges.GetHashCode();
                }
                if (this.TotalPriceGross != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPriceGross.GetHashCode();
                }
                if (this.TotalPriceTax != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPriceTax.GetHashCode();
                }
                if (this.TotalPriceDiscount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPriceDiscount.GetHashCode();
                }
                if (this.TotalPriceSurcharge != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPriceSurcharge.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
