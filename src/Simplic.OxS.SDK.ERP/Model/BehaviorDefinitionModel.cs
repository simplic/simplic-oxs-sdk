/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// Represents the shared model for a behavior definition. A behavior definition is a pair of an expression and a target that is modified by the expression result.  &lt;br&gt;  Using behavior definitions the operation performed by applying an operation item can depend on the set of items assigned to it. For example if a discount only applies if the price of all assigned items is above a minimum threshold.  A target can be a property whose value is set as the expression result.  The set of items the operation item applies to can be filtered. If the assigned items are targeted, the expression is interpreted as a condition to filter the items by.  
    /// </summary>
    [DataContract(Name = "BehaviorDefinitionModel")]
    public partial class BehaviorDefinitionModel : IEquatable<BehaviorDefinitionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BehaviorDefinitionModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the ID..</param>
        /// <param name="target">Gets or sets the targeted variable..</param>
        /// <param name="expression">Gets or sets the behavior defining expression..</param>
        public BehaviorDefinitionModel(Guid id = default(Guid), string target = default(string), string expression = default(string))
        {
            this.Id = id;
            this.Target = target;
            this.Expression = expression;
        }

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        /// <value>Gets or sets the ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the targeted variable.
        /// </summary>
        /// <value>Gets or sets the targeted variable.</value>
        [DataMember(Name = "target", EmitDefaultValue = true)]
        public string Target { get; set; }

        /// <summary>
        /// Gets or sets the behavior defining expression.
        /// </summary>
        /// <value>Gets or sets the behavior defining expression.</value>
        [DataMember(Name = "expression", EmitDefaultValue = true)]
        public string Expression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BehaviorDefinitionModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BehaviorDefinitionModel);
        }

        /// <summary>
        /// Returns true if BehaviorDefinitionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of BehaviorDefinitionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BehaviorDefinitionModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Target != null)
                {
                    hashCode = (hashCode * 59) + this.Target.GetHashCode();
                }
                if (this.Expression != null)
                {
                    hashCode = (hashCode * 59) + this.Expression.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
