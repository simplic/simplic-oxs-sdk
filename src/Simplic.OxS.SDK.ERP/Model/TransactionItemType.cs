/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.ERP.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// TransactionItemType
    /// </summary>
    [DataContract(Name = "TransactionItemType")]
    public partial class TransactionItemType : IEquatable<TransactionItemType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionItemType" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="name">name.</param>
        /// <param name="number">number.</param>
        /// <param name="hasPositionNumber">hasPositionNumber.</param>
        /// <param name="isSelectable">isSelectable.</param>
        /// <param name="detailHtml">detailHtml.</param>
        /// <param name="dataTemplate">dataTemplate.</param>
        /// <param name="articleGLAResolver">articleGLAResolver.</param>
        public TransactionItemType(Guid id = default(Guid), Guid organizationId = default(Guid), bool isDeleted = default(bool), string name = default(string), int number = default(int), bool hasPositionNumber = default(bool), bool isSelectable = default(bool), string detailHtml = default(string), string dataTemplate = default(string), string articleGLAResolver = default(string))
        {
            this.Id = id;
            this.OrganizationId = organizationId;
            this.IsDeleted = isDeleted;
            this.Name = name;
            this.Number = number;
            this.HasPositionNumber = hasPositionNumber;
            this.IsSelectable = isSelectable;
            this.DetailHtml = detailHtml;
            this.DataTemplate = dataTemplate;
            this.ArticleGLAResolver = articleGLAResolver;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organizationId", EmitDefaultValue = false)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public int Number { get; set; }

        /// <summary>
        /// Gets or Sets HasPositionNumber
        /// </summary>
        [DataMember(Name = "hasPositionNumber", EmitDefaultValue = true)]
        public bool HasPositionNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsSelectable
        /// </summary>
        [DataMember(Name = "isSelectable", EmitDefaultValue = true)]
        public bool IsSelectable { get; set; }

        /// <summary>
        /// Gets or Sets DetailHtml
        /// </summary>
        [DataMember(Name = "detailHtml", EmitDefaultValue = true)]
        public string DetailHtml { get; set; }

        /// <summary>
        /// Gets or Sets DataTemplate
        /// </summary>
        [DataMember(Name = "dataTemplate", EmitDefaultValue = true)]
        public string DataTemplate { get; set; }

        /// <summary>
        /// Gets or Sets ArticleGLAResolver
        /// </summary>
        [DataMember(Name = "articleGLAResolver", EmitDefaultValue = true)]
        public string ArticleGLAResolver { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionItemType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  HasPositionNumber: ").Append(HasPositionNumber).Append("\n");
            sb.Append("  IsSelectable: ").Append(IsSelectable).Append("\n");
            sb.Append("  DetailHtml: ").Append(DetailHtml).Append("\n");
            sb.Append("  DataTemplate: ").Append(DataTemplate).Append("\n");
            sb.Append("  ArticleGLAResolver: ").Append(ArticleGLAResolver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionItemType);
        }

        /// <summary>
        /// Returns true if TransactionItemType instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionItemType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionItemType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.HasPositionNumber == input.HasPositionNumber ||
                    this.HasPositionNumber.Equals(input.HasPositionNumber)
                ) && 
                (
                    this.IsSelectable == input.IsSelectable ||
                    this.IsSelectable.Equals(input.IsSelectable)
                ) && 
                (
                    this.DetailHtml == input.DetailHtml ||
                    (this.DetailHtml != null &&
                    this.DetailHtml.Equals(input.DetailHtml))
                ) && 
                (
                    this.DataTemplate == input.DataTemplate ||
                    (this.DataTemplate != null &&
                    this.DataTemplate.Equals(input.DataTemplate))
                ) && 
                (
                    this.ArticleGLAResolver == input.ArticleGLAResolver ||
                    (this.ArticleGLAResolver != null &&
                    this.ArticleGLAResolver.Equals(input.ArticleGLAResolver))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.OrganizationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                hashCode = (hashCode * 59) + this.HasPositionNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSelectable.GetHashCode();
                if (this.DetailHtml != null)
                {
                    hashCode = (hashCode * 59) + this.DetailHtml.GetHashCode();
                }
                if (this.DataTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.DataTemplate.GetHashCode();
                }
                if (this.ArticleGLAResolver != null)
                {
                    hashCode = (hashCode * 59) + this.ArticleGLAResolver.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
