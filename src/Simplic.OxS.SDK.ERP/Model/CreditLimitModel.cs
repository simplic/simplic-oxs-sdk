// <auto-generated>
/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// CreditLimitModel
    /// </summary>
    public partial class CreditLimitModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public CreditLimitModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreditLimitModel" /> class.
        /// </summary>
        /// <param name="creditworthiness">creditworthiness</param>
        /// <param name="insurance">insurance</param>
        /// <param name="limit">limit</param>
        //[JsonConstructor]
        public CreditLimitModel(Option<string> creditworthiness = default, Option<double> insurance = default, Option<string> limit = default)
        {
            CreditworthinessOption = creditworthiness;
            InsuranceOption = insurance;
            LimitOption = limit;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Creditworthiness
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreditworthinessOption { get; private set; }

        /// <summary>
        /// Gets or Sets Creditworthiness
        /// </summary>
        [JsonPropertyName("creditworthiness")]
        public string? Creditworthiness { get { return this. CreditworthinessOption; } set { this.CreditworthinessOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Insurance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> InsuranceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Insurance
        /// </summary>
        [JsonPropertyName("insurance")]
        public double? Insurance { get { return this. InsuranceOption; } set { this.InsuranceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Limit
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> LimitOption { get; private set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [JsonPropertyName("limit")]
        public string? Limit { get { return this. LimitOption; } set { this.LimitOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditLimitModel {\n");
            sb.Append("  Creditworthiness: ").Append(Creditworthiness).Append("\n");
            sb.Append("  Insurance: ").Append(Insurance).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreditLimitModel" />
    /// </summary>
    public class CreditLimitModelJsonConverter : JsonConverter<CreditLimitModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreditLimitModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreditLimitModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> creditworthiness = default;
            Option<double> insurance = default;
            Option<string> limit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "creditworthiness":
                            creditworthiness = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "insurance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                insurance = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "limit":
                            limit = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (insurance.IsSet && insurance.Value == null)
                throw new ArgumentNullException(nameof(insurance), "Property is not nullable for class CreditLimitModel.");

            //2return new CreditLimitModel(creditworthiness, insurance, limit);
            return new CreditLimitModel(creditworthiness, insurance, limit);
        }

        /// <summary>
        /// Serializes a <see cref="CreditLimitModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="creditLimitModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreditLimitModel creditLimitModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, creditLimitModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreditLimitModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="creditLimitModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreditLimitModel creditLimitModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (creditLimitModel.CreditworthinessOption.IsSet)
                if (creditLimitModel.CreditworthinessOption.Value != null)
                {
                    writer.WriteString("creditworthiness", creditLimitModel.Creditworthiness);
                    //var __value = creditLimitModel.CreditworthinessOption.Value;
                    //writer.WriteString("creditworthiness", __value);
                }
                else
                    writer.WriteNull("creditworthiness");

            if (creditLimitModel.InsuranceOption.IsSet)
                writer.WriteNumber("insurance", creditLimitModel.InsuranceOption!.Value);

            if (creditLimitModel.LimitOption.IsSet)
                if (creditLimitModel.LimitOption.Value != null)
                {
                    writer.WriteString("limit", creditLimitModel.Limit);
                    //var __value = creditLimitModel.LimitOption.Value;
                    //writer.WriteString("limit", __value);
                }
                else
                    writer.WriteNull("limit");
        }
    }
}
