/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// ElectronicInvoiceImportResult
    /// </summary>
    [DataContract(Name = "ElectronicInvoiceImportResult")]
    public partial class ElectronicInvoiceImportResult : IEquatable<ElectronicInvoiceImportResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElectronicInvoiceImportResult" /> class.
        /// </summary>
        /// <param name="invoiceData">invoiceData.</param>
        /// <param name="validationResult">validationResult.</param>
        /// <param name="xml">xml.</param>
        public ElectronicInvoiceImportResult(ImportedInvoiceData invoiceData = default(ImportedInvoiceData), InvoiceValidationResult validationResult = default(InvoiceValidationResult), byte[] xml = default(byte[]))
        {
            this.InvoiceData = invoiceData;
            this.ValidationResult = validationResult;
            this.Xml = xml;
        }

        /// <summary>
        /// Gets or Sets InvoiceData
        /// </summary>
        [DataMember(Name = "invoiceData", EmitDefaultValue = false)]
        public ImportedInvoiceData InvoiceData { get; set; }

        /// <summary>
        /// Gets or Sets ValidationResult
        /// </summary>
        [DataMember(Name = "validationResult", EmitDefaultValue = false)]
        public InvoiceValidationResult ValidationResult { get; set; }

        /// <summary>
        /// Gets or Sets Xml
        /// </summary>
        [DataMember(Name = "xml", EmitDefaultValue = true)]
        public byte[] Xml { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ElectronicInvoiceImportResult {\n");
            sb.Append("  InvoiceData: ").Append(InvoiceData).Append("\n");
            sb.Append("  ValidationResult: ").Append(ValidationResult).Append("\n");
            sb.Append("  Xml: ").Append(Xml).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElectronicInvoiceImportResult);
        }

        /// <summary>
        /// Returns true if ElectronicInvoiceImportResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ElectronicInvoiceImportResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElectronicInvoiceImportResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InvoiceData == input.InvoiceData ||
                    (this.InvoiceData != null &&
                    this.InvoiceData.Equals(input.InvoiceData))
                ) && 
                (
                    this.ValidationResult == input.ValidationResult ||
                    (this.ValidationResult != null &&
                    this.ValidationResult.Equals(input.ValidationResult))
                ) && 
                (
                    this.Xml == input.Xml ||
                    (this.Xml != null &&
                    this.Xml.Equals(input.Xml))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvoiceData != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceData.GetHashCode();
                }
                if (this.ValidationResult != null)
                {
                    hashCode = (hashCode * 59) + this.ValidationResult.GetHashCode();
                }
                if (this.Xml != null)
                {
                    hashCode = (hashCode * 59) + this.Xml.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
