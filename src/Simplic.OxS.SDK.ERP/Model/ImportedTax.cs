/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// ImportedTax
    /// </summary>
    [DataContract(Name = "ImportedTax")]
    public partial class ImportedTax : IEquatable<ImportedTax>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TaxType? Type { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public TaxCategory? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportedTax" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="category">category.</param>
        /// <param name="rate">rate.</param>
        /// <param name="basisAmount">basisAmount.</param>
        /// <param name="taxAmount">taxAmount.</param>
        public ImportedTax(TaxType? type = default(TaxType?), TaxCategory? category = default(TaxCategory?), double? rate = default(double?), double? basisAmount = default(double?), double taxAmount = default(double))
        {
            this.Type = type;
            this.Category = category;
            this.Rate = rate;
            this.BasisAmount = basisAmount;
            this.TaxAmount = taxAmount;
        }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name = "rate", EmitDefaultValue = true)]
        public double? Rate { get; set; }

        /// <summary>
        /// Gets or Sets BasisAmount
        /// </summary>
        [DataMember(Name = "basisAmount", EmitDefaultValue = true)]
        public double? BasisAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name = "taxAmount", EmitDefaultValue = false)]
        public double TaxAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportedTax {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  BasisAmount: ").Append(BasisAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportedTax);
        }

        /// <summary>
        /// Returns true if ImportedTax instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportedTax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportedTax input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.BasisAmount == input.BasisAmount ||
                    (this.BasisAmount != null &&
                    this.BasisAmount.Equals(input.BasisAmount))
                ) && 
                (
                    this.TaxAmount == input.TaxAmount ||
                    this.TaxAmount.Equals(input.TaxAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                if (this.Rate != null)
                {
                    hashCode = (hashCode * 59) + this.Rate.GetHashCode();
                }
                if (this.BasisAmount != null)
                {
                    hashCode = (hashCode * 59) + this.BasisAmount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TaxAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
