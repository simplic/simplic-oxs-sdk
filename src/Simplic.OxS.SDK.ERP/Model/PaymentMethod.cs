/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// PaymentMethod
    /// </summary>
    [DataContract(Name = "PaymentMethod")]
    public partial class PaymentMethod : IEquatable<PaymentMethod>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public PaymentMethodType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethod" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="description">description.</param>
        /// <param name="sepaCreditorIdentifier">sepaCreditorIdentifier.</param>
        /// <param name="sepaMandateReference">sepaMandateReference.</param>
        /// <param name="cardNumber">cardNumber.</param>
        /// <param name="cardHolderName">cardHolderName.</param>
        public PaymentMethod(PaymentMethodType? type = default(PaymentMethodType?), string description = default(string), string sepaCreditorIdentifier = default(string), string sepaMandateReference = default(string), string cardNumber = default(string), string cardHolderName = default(string))
        {
            this.Type = type;
            this.Description = description;
            this.SepaCreditorIdentifier = sepaCreditorIdentifier;
            this.SepaMandateReference = sepaMandateReference;
            this.CardNumber = cardNumber;
            this.CardHolderName = cardHolderName;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SepaCreditorIdentifier
        /// </summary>
        [DataMember(Name = "sepaCreditorIdentifier", EmitDefaultValue = true)]
        public string SepaCreditorIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets SepaMandateReference
        /// </summary>
        [DataMember(Name = "sepaMandateReference", EmitDefaultValue = true)]
        public string SepaMandateReference { get; set; }

        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [DataMember(Name = "cardNumber", EmitDefaultValue = true)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets CardHolderName
        /// </summary>
        [DataMember(Name = "cardHolderName", EmitDefaultValue = true)]
        public string CardHolderName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethod {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SepaCreditorIdentifier: ").Append(SepaCreditorIdentifier).Append("\n");
            sb.Append("  SepaMandateReference: ").Append(SepaMandateReference).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMethod);
        }

        /// <summary>
        /// Returns true if PaymentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethod input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SepaCreditorIdentifier == input.SepaCreditorIdentifier ||
                    (this.SepaCreditorIdentifier != null &&
                    this.SepaCreditorIdentifier.Equals(input.SepaCreditorIdentifier))
                ) && 
                (
                    this.SepaMandateReference == input.SepaMandateReference ||
                    (this.SepaMandateReference != null &&
                    this.SepaMandateReference.Equals(input.SepaMandateReference))
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.CardHolderName == input.CardHolderName ||
                    (this.CardHolderName != null &&
                    this.CardHolderName.Equals(input.CardHolderName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.SepaCreditorIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.SepaCreditorIdentifier.GetHashCode();
                }
                if (this.SepaMandateReference != null)
                {
                    hashCode = (hashCode * 59) + this.SepaMandateReference.GetHashCode();
                }
                if (this.CardNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CardNumber.GetHashCode();
                }
                if (this.CardHolderName != null)
                {
                    hashCode = (hashCode * 59) + this.CardHolderName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
