// <auto-generated>
/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// TransactionModel
    /// </summary>
    public partial class TransactionModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TransactionModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionModel" /> class.
        /// </summary>
        /// <param name="alternativePaymentDeadline">alternativePaymentDeadline</param>
        /// <param name="balance">balance</param>
        /// <param name="barcode">barcode</param>
        /// <param name="billToText">billToText</param>
        /// <param name="cashDiscountPercentValue">cashDiscountPercentValue</param>
        /// <param name="cashDiscountTotal">cashDiscountTotal</param>
        /// <param name="convertState">convertState</param>
        /// <param name="createDateTime">createDateTime</param>
        /// <param name="createUserId">createUserId</param>
        /// <param name="createUserName">createUserName</param>
        /// <param name="creator">creator</param>
        /// <param name="currency">currency</param>
        /// <param name="date">date</param>
        /// <param name="deliveryAddress">deliveryAddress</param>
        /// <param name="deliveryDate">deliveryDate</param>
        /// <param name="description">description</param>
        /// <param name="document">document</param>
        /// <param name="dueDate">dueDate</param>
        /// <param name="financialAccountingPeriod">financialAccountingPeriod</param>
        /// <param name="financialPartner">financialPartner</param>
        /// <param name="id">id</param>
        /// <param name="invoiceRecipient">invoiceRecipient</param>
        /// <param name="isDeleted">isDeleted</param>
        /// <param name="items">items</param>
        /// <param name="manualVat">manualVat</param>
        /// <param name="notes">notes</param>
        /// <param name="number">number</param>
        /// <param name="operationItemCombinationMode">operationItemCombinationMode</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="payer">payer</param>
        /// <param name="paymentMethod">paymentMethod</param>
        /// <param name="period">period</param>
        /// <param name="reference">reference</param>
        /// <param name="referenceNr">referenceNr</param>
        /// <param name="representative">representative</param>
        /// <param name="responsible">responsible</param>
        /// <param name="sign">sign</param>
        /// <param name="signedTotalPrice">signedTotalPrice</param>
        /// <param name="signedTotalPriceGross">signedTotalPriceGross</param>
        /// <param name="signedTotalPriceNet">signedTotalPriceNet</param>
        /// <param name="signedTotalPriceTax">signedTotalPriceTax</param>
        /// <param name="states">states</param>
        /// <param name="taxGroup">taxGroup</param>
        /// <param name="termsOfPayment">termsOfPayment</param>
        /// <param name="totalPrice">totalPrice</param>
        /// <param name="totalPriceGross">totalPriceGross</param>
        /// <param name="totalPriceNet">totalPriceNet</param>
        /// <param name="totalPriceTax">totalPriceTax</param>
        /// <param name="transactionYear">transactionYear</param>
        /// <param name="type">type</param>
        /// <param name="updateDateTime">updateDateTime</param>
        /// <param name="updateUser">updateUser</param>
        /// <param name="updateUserId">updateUserId</param>
        /// <param name="updateUserName">updateUserName</param>
        //[JsonConstructor]
        public TransactionModel(Option<DateTime> alternativePaymentDeadline = default, Option<double> balance = default, Option<string> barcode = default, Option<string> billToText = default, Option<double> cashDiscountPercentValue = default, Option<double> cashDiscountTotal = default, Option<TransactionConvertState> convertState = default, Option<DateTime> createDateTime = default, Option<Guid> createUserId = default, Option<string> createUserName = default, Option<TransactionContactModel> creator = default, Option<CurrencyModel> currency = default, Option<DateTime> date = default, Option<TransactionContactModel> deliveryAddress = default, Option<DateTime> deliveryDate = default, Option<string> description = default, Option<TransactionDocumentModel> document = default, Option<DateTime> dueDate = default, Option<TransactionPeriodModel> financialAccountingPeriod = default, Option<TransactionContactModel> financialPartner = default, Option<Guid> id = default, Option<TransactionContactModel> invoiceRecipient = default, Option<bool> isDeleted = default, Option<List<TransactionItemModel>> items = default, Option<TransactionManualVatModel> manualVat = default, Option<string> notes = default, Option<string> number = default, Option<OperationItemCombinationMode> operationItemCombinationMode = default, Option<Guid> organizationId = default, Option<TransactionContactModel> payer = default, Option<PaymentMethodModel> paymentMethod = default, Option<TransactionPeriodModel> period = default, Option<string> reference = default, Option<string> referenceNr = default, Option<TransactionContactModel> representative = default, Option<TransactionContactModel> responsible = default, Option<int> sign = default, Option<double> signedTotalPrice = default, Option<double> signedTotalPriceGross = default, Option<double> signedTotalPriceNet = default, Option<double> signedTotalPriceTax = default, Option<List<string>> states = default, Option<TaxGroupModel> taxGroup = default, Option<TermsOfPaymentModel> termsOfPayment = default, Option<double> totalPrice = default, Option<double> totalPriceGross = default, Option<double> totalPriceNet = default, Option<double> totalPriceTax = default, Option<int> transactionYear = default, Option<TransactionTransactionTypeModel> type = default, Option<DateTime> updateDateTime = default, Option<TransactionUserModel> updateUser = default, Option<Guid> updateUserId = default, Option<string> updateUserName = default)
        {
            AlternativePaymentDeadlineOption = alternativePaymentDeadline;
            BalanceOption = balance;
            BarcodeOption = barcode;
            BillToTextOption = billToText;
            CashDiscountPercentValueOption = cashDiscountPercentValue;
            CashDiscountTotalOption = cashDiscountTotal;
            ConvertStateOption = convertState;
            CreateDateTimeOption = createDateTime;
            CreateUserIdOption = createUserId;
            CreateUserNameOption = createUserName;
            CreatorOption = creator;
            CurrencyOption = currency;
            DateOption = date;
            DeliveryAddressOption = deliveryAddress;
            DeliveryDateOption = deliveryDate;
            DescriptionOption = description;
            DocumentOption = document;
            DueDateOption = dueDate;
            FinancialAccountingPeriodOption = financialAccountingPeriod;
            FinancialPartnerOption = financialPartner;
            IdOption = id;
            InvoiceRecipientOption = invoiceRecipient;
            IsDeletedOption = isDeleted;
            ItemsOption = items;
            ManualVatOption = manualVat;
            NotesOption = notes;
            NumberOption = number;
            OperationItemCombinationModeOption = operationItemCombinationMode;
            OrganizationIdOption = organizationId;
            PayerOption = payer;
            PaymentMethodOption = paymentMethod;
            PeriodOption = period;
            ReferenceOption = reference;
            ReferenceNrOption = referenceNr;
            RepresentativeOption = representative;
            ResponsibleOption = responsible;
            SignOption = sign;
            SignedTotalPriceOption = signedTotalPrice;
            SignedTotalPriceGrossOption = signedTotalPriceGross;
            SignedTotalPriceNetOption = signedTotalPriceNet;
            SignedTotalPriceTaxOption = signedTotalPriceTax;
            StatesOption = states;
            TaxGroupOption = taxGroup;
            TermsOfPaymentOption = termsOfPayment;
            TotalPriceOption = totalPrice;
            TotalPriceGrossOption = totalPriceGross;
            TotalPriceNetOption = totalPriceNet;
            TotalPriceTaxOption = totalPriceTax;
            TransactionYearOption = transactionYear;
            TypeOption = type;
            UpdateDateTimeOption = updateDateTime;
            UpdateUserOption = updateUser;
            UpdateUserIdOption = updateUserId;
            UpdateUserNameOption = updateUserName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ConvertState
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionConvertState>))]
        public Option<TransactionConvertState> ConvertStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets ConvertState
        /// </summary>
        [JsonPropertyName("convertState")]
        public TransactionConvertState? ConvertState { get { return this.ConvertStateOption; } set { this.ConvertStateOption = new Option<TransactionConvertState>(value); } }

        /// <summary>
        /// Used to track the state of OperationItemCombinationMode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<OperationItemCombinationMode>))]
        public Option<OperationItemCombinationMode> OperationItemCombinationModeOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperationItemCombinationMode
        /// </summary>
        [JsonPropertyName("operationItemCombinationMode")]
        public OperationItemCombinationMode? OperationItemCombinationMode { get { return this.OperationItemCombinationModeOption; } set { this.OperationItemCombinationModeOption = new Option<OperationItemCombinationMode>(value); } }

        /// <summary>
        /// Used to track the state of AlternativePaymentDeadline
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> AlternativePaymentDeadlineOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlternativePaymentDeadline
        /// </summary>
        [JsonPropertyName("alternativePaymentDeadline")]
        public DateTime? AlternativePaymentDeadline { get { return this. AlternativePaymentDeadlineOption; } set { this.AlternativePaymentDeadlineOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Balance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> BalanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [JsonPropertyName("balance")]
        public double? Balance { get { return this. BalanceOption; } set { this.BalanceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Barcode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> BarcodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Barcode
        /// </summary>
        [JsonPropertyName("barcode")]
        public string? Barcode { get { return this. BarcodeOption; } set { this.BarcodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BillToText
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> BillToTextOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillToText
        /// </summary>
        [JsonPropertyName("billToText")]
        public string? BillToText { get { return this. BillToTextOption; } set { this.BillToTextOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CashDiscountPercentValue
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> CashDiscountPercentValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets CashDiscountPercentValue
        /// </summary>
        [JsonPropertyName("cashDiscountPercentValue")]
        public double? CashDiscountPercentValue { get { return this. CashDiscountPercentValueOption; } set { this.CashDiscountPercentValueOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of CashDiscountTotal
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> CashDiscountTotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets CashDiscountTotal
        /// </summary>
        [JsonPropertyName("cashDiscountTotal")]
        public double? CashDiscountTotal { get { return this. CashDiscountTotalOption; } set { this.CashDiscountTotalOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CreateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserId
        /// </summary>
        [JsonPropertyName("createUserId")]
        public Guid? CreateUserId { get { return this. CreateUserIdOption; } set { this.CreateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserName
        /// </summary>
        [JsonPropertyName("createUserName")]
        public string? CreateUserName { get { return this. CreateUserNameOption; } set { this.CreateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Creator
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactModel>))]
        public Option<TransactionContactModel> CreatorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [JsonPropertyName("creator")]
        public TransactionContactModel? Creator { get { return this. CreatorOption; } set { this.CreatorOption = new Option<TransactionContactModel>(value); } }

        /// <summary>
        /// Used to track the state of Currency
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<CurrencyModel>))]
        public Option<CurrencyModel> CurrencyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [JsonPropertyName("currency")]
        public CurrencyModel? Currency { get { return this. CurrencyOption; } set { this.CurrencyOption = new Option<CurrencyModel>(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [JsonPropertyName("date")]
        public DateTime? Date { get { return this. DateOption; } set { this.DateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactModel>))]
        public Option<TransactionContactModel> DeliveryAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [JsonPropertyName("deliveryAddress")]
        public TransactionContactModel? DeliveryAddress { get { return this. DeliveryAddressOption; } set { this.DeliveryAddressOption = new Option<TransactionContactModel>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DeliveryDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryDate
        /// </summary>
        [JsonPropertyName("deliveryDate")]
        public DateTime? DeliveryDate { get { return this. DeliveryDateOption; } set { this.DeliveryDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this. DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Document
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionDocumentModel>))]
        public Option<TransactionDocumentModel> DocumentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [JsonPropertyName("document")]
        public TransactionDocumentModel? Document { get { return this. DocumentOption; } set { this.DocumentOption = new Option<TransactionDocumentModel>(value); } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DueDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [JsonPropertyName("dueDate")]
        public DateTime? DueDate { get { return this. DueDateOption; } set { this.DueDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of FinancialAccountingPeriod
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionPeriodModel>))]
        public Option<TransactionPeriodModel> FinancialAccountingPeriodOption { get; private set; }

        /// <summary>
        /// Gets or Sets FinancialAccountingPeriod
        /// </summary>
        [JsonPropertyName("financialAccountingPeriod")]
        public TransactionPeriodModel? FinancialAccountingPeriod { get { return this. FinancialAccountingPeriodOption; } set { this.FinancialAccountingPeriodOption = new Option<TransactionPeriodModel>(value); } }

        /// <summary>
        /// Used to track the state of FinancialPartner
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactModel>))]
        public Option<TransactionContactModel> FinancialPartnerOption { get; private set; }

        /// <summary>
        /// Gets or Sets FinancialPartner
        /// </summary>
        [JsonPropertyName("financialPartner")]
        public TransactionContactModel? FinancialPartner { get { return this. FinancialPartnerOption; } set { this.FinancialPartnerOption = new Option<TransactionContactModel>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of InvoiceRecipient
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactModel>))]
        public Option<TransactionContactModel> InvoiceRecipientOption { get; private set; }

        /// <summary>
        /// Gets or Sets InvoiceRecipient
        /// </summary>
        [JsonPropertyName("invoiceRecipient")]
        public TransactionContactModel? InvoiceRecipient { get { return this. InvoiceRecipientOption; } set { this.InvoiceRecipientOption = new Option<TransactionContactModel>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Items
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<TransactionItemModel>>))]
        public Option<List<TransactionItemModel>> ItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [JsonPropertyName("items")]
        public List<TransactionItemModel>? Items { get { return this. ItemsOption; } set { this.ItemsOption = new Option<List<TransactionItemModel>>(value); } }

        /// <summary>
        /// Used to track the state of ManualVat
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionManualVatModel>))]
        public Option<TransactionManualVatModel> ManualVatOption { get; private set; }

        /// <summary>
        /// Gets or Sets ManualVat
        /// </summary>
        [JsonPropertyName("manualVat")]
        public TransactionManualVatModel? ManualVat { get { return this. ManualVatOption; } set { this.ManualVatOption = new Option<TransactionManualVatModel>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [JsonPropertyName("notes")]
        public string? Notes { get { return this. NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Payer
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactModel>))]
        public Option<TransactionContactModel> PayerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Payer
        /// </summary>
        [JsonPropertyName("payer")]
        public TransactionContactModel? Payer { get { return this. PayerOption; } set { this.PayerOption = new Option<TransactionContactModel>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethod
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<PaymentMethodModel>))]
        public Option<PaymentMethodModel> PaymentMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [JsonPropertyName("paymentMethod")]
        public PaymentMethodModel? PaymentMethod { get { return this. PaymentMethodOption; } set { this.PaymentMethodOption = new Option<PaymentMethodModel>(value); } }

        /// <summary>
        /// Used to track the state of Period
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionPeriodModel>))]
        public Option<TransactionPeriodModel> PeriodOption { get; private set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [JsonPropertyName("period")]
        public TransactionPeriodModel? Period { get { return this. PeriodOption; } set { this.PeriodOption = new Option<TransactionPeriodModel>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [JsonPropertyName("reference")]
        public string? Reference { get { return this. ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReferenceNr
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceNrOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReferenceNr
        /// </summary>
        [JsonPropertyName("referenceNr")]
        public string? ReferenceNr { get { return this. ReferenceNrOption; } set { this.ReferenceNrOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Representative
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactModel>))]
        public Option<TransactionContactModel> RepresentativeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Representative
        /// </summary>
        [JsonPropertyName("representative")]
        public TransactionContactModel? Representative { get { return this. RepresentativeOption; } set { this.RepresentativeOption = new Option<TransactionContactModel>(value); } }

        /// <summary>
        /// Used to track the state of Responsible
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactModel>))]
        public Option<TransactionContactModel> ResponsibleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Responsible
        /// </summary>
        [JsonPropertyName("responsible")]
        public TransactionContactModel? Responsible { get { return this. ResponsibleOption; } set { this.ResponsibleOption = new Option<TransactionContactModel>(value); } }

        /// <summary>
        /// Used to track the state of Sign
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> SignOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sign
        /// </summary>
        [JsonPropertyName("sign")]
        public int? Sign { get { return this. SignOption; } set { this.SignOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of SignedTotalPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SignedTotalPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets SignedTotalPrice
        /// </summary>
        [JsonPropertyName("signedTotalPrice")]
        public double? SignedTotalPrice { get { return this. SignedTotalPriceOption; } set { this.SignedTotalPriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SignedTotalPriceGross
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SignedTotalPriceGrossOption { get; private set; }

        /// <summary>
        /// Gets or Sets SignedTotalPriceGross
        /// </summary>
        [JsonPropertyName("signedTotalPriceGross")]
        public double? SignedTotalPriceGross { get { return this. SignedTotalPriceGrossOption; } set { this.SignedTotalPriceGrossOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SignedTotalPriceNet
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SignedTotalPriceNetOption { get; private set; }

        /// <summary>
        /// Gets or Sets SignedTotalPriceNet
        /// </summary>
        [JsonPropertyName("signedTotalPriceNet")]
        public double? SignedTotalPriceNet { get { return this. SignedTotalPriceNetOption; } set { this.SignedTotalPriceNetOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SignedTotalPriceTax
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SignedTotalPriceTaxOption { get; private set; }

        /// <summary>
        /// Gets or Sets SignedTotalPriceTax
        /// </summary>
        [JsonPropertyName("signedTotalPriceTax")]
        public double? SignedTotalPriceTax { get { return this. SignedTotalPriceTaxOption; } set { this.SignedTotalPriceTaxOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of States
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> StatesOption { get; private set; }

        /// <summary>
        /// Gets or Sets States
        /// </summary>
        [JsonPropertyName("states")]
        public List<string>? States { get { return this. StatesOption; } set { this.StatesOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of TaxGroup
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TaxGroupModel>))]
        public Option<TaxGroupModel> TaxGroupOption { get; private set; }

        /// <summary>
        /// Gets or Sets TaxGroup
        /// </summary>
        [JsonPropertyName("taxGroup")]
        public TaxGroupModel? TaxGroup { get { return this. TaxGroupOption; } set { this.TaxGroupOption = new Option<TaxGroupModel>(value); } }

        /// <summary>
        /// Used to track the state of TermsOfPayment
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TermsOfPaymentModel>))]
        public Option<TermsOfPaymentModel> TermsOfPaymentOption { get; private set; }

        /// <summary>
        /// Gets or Sets TermsOfPayment
        /// </summary>
        [JsonPropertyName("termsOfPayment")]
        public TermsOfPaymentModel? TermsOfPayment { get { return this. TermsOfPaymentOption; } set { this.TermsOfPaymentOption = new Option<TermsOfPaymentModel>(value); } }

        /// <summary>
        /// Used to track the state of TotalPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [JsonPropertyName("totalPrice")]
        public double? TotalPrice { get { return this. TotalPriceOption; } set { this.TotalPriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TotalPriceGross
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalPriceGrossOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalPriceGross
        /// </summary>
        [JsonPropertyName("totalPriceGross")]
        public double? TotalPriceGross { get { return this. TotalPriceGrossOption; } set { this.TotalPriceGrossOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TotalPriceNet
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalPriceNetOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalPriceNet
        /// </summary>
        [JsonPropertyName("totalPriceNet")]
        public double? TotalPriceNet { get { return this. TotalPriceNetOption; } set { this.TotalPriceNetOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TotalPriceTax
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalPriceTaxOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalPriceTax
        /// </summary>
        [JsonPropertyName("totalPriceTax")]
        public double? TotalPriceTax { get { return this. TotalPriceTaxOption; } set { this.TotalPriceTaxOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TransactionYear
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> TransactionYearOption { get; private set; }

        /// <summary>
        /// Gets or Sets TransactionYear
        /// </summary>
        [JsonPropertyName("transactionYear")]
        public int? TransactionYear { get { return this. TransactionYearOption; } set { this.TransactionYearOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionTransactionTypeModel>))]
        public Option<TransactionTransactionTypeModel> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TransactionTransactionTypeModel? Type { get { return this. TypeOption; } set { this.TypeOption = new Option<TransactionTransactionTypeModel>(value); } }

        /// <summary>
        /// Used to track the state of UpdateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UpdateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateDateTime
        /// </summary>
        [JsonPropertyName("updateDateTime")]
        public DateTime? UpdateDateTime { get { return this. UpdateDateTimeOption; } set { this.UpdateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUser
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionUserModel>))]
        public Option<TransactionUserModel> UpdateUserOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUser
        /// </summary>
        [JsonPropertyName("updateUser")]
        public TransactionUserModel? UpdateUser { get { return this. UpdateUserOption; } set { this.UpdateUserOption = new Option<TransactionUserModel>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UpdateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserId
        /// </summary>
        [JsonPropertyName("updateUserId")]
        public Guid? UpdateUserId { get { return this. UpdateUserIdOption; } set { this.UpdateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> UpdateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserName
        /// </summary>
        [JsonPropertyName("updateUserName")]
        public string? UpdateUserName { get { return this. UpdateUserNameOption; } set { this.UpdateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionModel {\n");
            sb.Append("  AlternativePaymentDeadline: ").Append(AlternativePaymentDeadline).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  BillToText: ").Append(BillToText).Append("\n");
            sb.Append("  CashDiscountPercentValue: ").Append(CashDiscountPercentValue).Append("\n");
            sb.Append("  CashDiscountTotal: ").Append(CashDiscountTotal).Append("\n");
            sb.Append("  ConvertState: ").Append(ConvertState).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  CreateUserName: ").Append(CreateUserName).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  FinancialAccountingPeriod: ").Append(FinancialAccountingPeriod).Append("\n");
            sb.Append("  FinancialPartner: ").Append(FinancialPartner).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceRecipient: ").Append(InvoiceRecipient).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ManualVat: ").Append(ManualVat).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OperationItemCombinationMode: ").Append(OperationItemCombinationMode).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Payer: ").Append(Payer).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReferenceNr: ").Append(ReferenceNr).Append("\n");
            sb.Append("  Representative: ").Append(Representative).Append("\n");
            sb.Append("  Responsible: ").Append(Responsible).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  SignedTotalPrice: ").Append(SignedTotalPrice).Append("\n");
            sb.Append("  SignedTotalPriceGross: ").Append(SignedTotalPriceGross).Append("\n");
            sb.Append("  SignedTotalPriceNet: ").Append(SignedTotalPriceNet).Append("\n");
            sb.Append("  SignedTotalPriceTax: ").Append(SignedTotalPriceTax).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  TaxGroup: ").Append(TaxGroup).Append("\n");
            sb.Append("  TermsOfPayment: ").Append(TermsOfPayment).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  TotalPriceGross: ").Append(TotalPriceGross).Append("\n");
            sb.Append("  TotalPriceNet: ").Append(TotalPriceNet).Append("\n");
            sb.Append("  TotalPriceTax: ").Append(TotalPriceTax).Append("\n");
            sb.Append("  TransactionYear: ").Append(TransactionYear).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUser: ").Append(UpdateUser).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("  UpdateUserName: ").Append(UpdateUserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionModel" />
    /// </summary>
    public class TransactionModelJsonConverter : JsonConverter<TransactionModel>
    {
        /// <summary>
        /// The format to use to serialize AlternativePaymentDeadline
        /// </summary>
        public static string AlternativePaymentDeadlineFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeliveryDate
        /// </summary>
        public static string DeliveryDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateDateTime
        /// </summary>
        public static string UpdateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TransactionModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> alternativePaymentDeadline = default;
            Option<double> balance = default;
            Option<string> barcode = default;
            Option<string> billToText = default;
            Option<double> cashDiscountPercentValue = default;
            Option<double> cashDiscountTotal = default;
            Option<TransactionConvertState> convertState = default;
            Option<DateTime> createDateTime = default;
            Option<Guid> createUserId = default;
            Option<string> createUserName = default;
            Option<TransactionContactModel> creator = default;
            Option<CurrencyModel> currency = default;
            Option<DateTime> date = default;
            Option<TransactionContactModel> deliveryAddress = default;
            Option<DateTime> deliveryDate = default;
            Option<string> description = default;
            Option<TransactionDocumentModel> document = default;
            Option<DateTime> dueDate = default;
            Option<TransactionPeriodModel> financialAccountingPeriod = default;
            Option<TransactionContactModel> financialPartner = default;
            Option<Guid> id = default;
            Option<TransactionContactModel> invoiceRecipient = default;
            Option<bool> isDeleted = default;
            Option<List<TransactionItemModel>> items = default;
            Option<TransactionManualVatModel> manualVat = default;
            Option<string> notes = default;
            Option<string> number = default;
            Option<OperationItemCombinationMode> operationItemCombinationMode = default;
            Option<Guid> organizationId = default;
            Option<TransactionContactModel> payer = default;
            Option<PaymentMethodModel> paymentMethod = default;
            Option<TransactionPeriodModel> period = default;
            Option<string> reference = default;
            Option<string> referenceNr = default;
            Option<TransactionContactModel> representative = default;
            Option<TransactionContactModel> responsible = default;
            Option<int> sign = default;
            Option<double> signedTotalPrice = default;
            Option<double> signedTotalPriceGross = default;
            Option<double> signedTotalPriceNet = default;
            Option<double> signedTotalPriceTax = default;
            Option<List<string>> states = default;
            Option<TaxGroupModel> taxGroup = default;
            Option<TermsOfPaymentModel> termsOfPayment = default;
            Option<double> totalPrice = default;
            Option<double> totalPriceGross = default;
            Option<double> totalPriceNet = default;
            Option<double> totalPriceTax = default;
            Option<int> transactionYear = default;
            Option<TransactionTransactionTypeModel> type = default;
            Option<DateTime> updateDateTime = default;
            Option<TransactionUserModel> updateUser = default;
            Option<Guid> updateUserId = default;
            Option<string> updateUserName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "alternativePaymentDeadline":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                alternativePaymentDeadline = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "balance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balance = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "barcode":
                            barcode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "billToText":
                            billToText = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cashDiscountPercentValue":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cashDiscountPercentValue = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "cashDiscountTotal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cashDiscountTotal = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "convertState":
                            string? convertStateRawValue = utf8JsonReader.GetString();
                            if (convertStateRawValue != null)
                                convertState = new Option<TransactionConvertState>(TransactionConvertStateValueConverter.FromStringOrDefault(convertStateRawValue));
                            break;
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "createUserName":
                            createUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "creator":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                creator = new Option<TransactionContactModel>(JsonSerializer.Deserialize<TransactionContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "currency":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currency = new Option<CurrencyModel>(JsonSerializer.Deserialize<CurrencyModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "date":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                date = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryAddress = new Option<TransactionContactModel>(JsonSerializer.Deserialize<TransactionContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "deliveryDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "document":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                document = new Option<TransactionDocumentModel>(JsonSerializer.Deserialize<TransactionDocumentModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dueDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dueDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "financialAccountingPeriod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                financialAccountingPeriod = new Option<TransactionPeriodModel>(JsonSerializer.Deserialize<TransactionPeriodModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "financialPartner":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                financialPartner = new Option<TransactionContactModel>(JsonSerializer.Deserialize<TransactionContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "invoiceRecipient":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invoiceRecipient = new Option<TransactionContactModel>(JsonSerializer.Deserialize<TransactionContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "items":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                items = new Option<List<TransactionItemModel>>(JsonSerializer.Deserialize<List<TransactionItemModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "manualVat":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                manualVat = new Option<TransactionManualVatModel>(JsonSerializer.Deserialize<TransactionManualVatModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "operationItemCombinationMode":
                            string? operationItemCombinationModeRawValue = utf8JsonReader.GetString();
                            if (operationItemCombinationModeRawValue != null)
                                operationItemCombinationMode = new Option<OperationItemCombinationMode>(OperationItemCombinationModeValueConverter.FromStringOrDefault(operationItemCombinationModeRawValue));
                            break;
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "payer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payer = new Option<TransactionContactModel>(JsonSerializer.Deserialize<TransactionContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "paymentMethod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentMethod = new Option<PaymentMethodModel>(JsonSerializer.Deserialize<PaymentMethodModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "period":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                period = new Option<TransactionPeriodModel>(JsonSerializer.Deserialize<TransactionPeriodModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "referenceNr":
                            referenceNr = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "representative":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                representative = new Option<TransactionContactModel>(JsonSerializer.Deserialize<TransactionContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "responsible":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                responsible = new Option<TransactionContactModel>(JsonSerializer.Deserialize<TransactionContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sign":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sign = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "signedTotalPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                signedTotalPrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "signedTotalPriceGross":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                signedTotalPriceGross = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "signedTotalPriceNet":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                signedTotalPriceNet = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "signedTotalPriceTax":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                signedTotalPriceTax = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "states":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                states = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "taxGroup":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxGroup = new Option<TaxGroupModel>(JsonSerializer.Deserialize<TaxGroupModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "termsOfPayment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                termsOfPayment = new Option<TermsOfPaymentModel>(JsonSerializer.Deserialize<TermsOfPaymentModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "totalPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalPriceGross":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPriceGross = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalPriceNet":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPriceNet = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalPriceTax":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPriceTax = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "transactionYear":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transactionYear = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                type = new Option<TransactionTransactionTypeModel>(JsonSerializer.Deserialize<TransactionTransactionTypeModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "updateDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateUser":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateUser = new Option<TransactionUserModel>(JsonSerializer.Deserialize<TransactionUserModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "updateUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "updateUserName":
                            updateUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class TransactionModel.");

            if (cashDiscountPercentValue.IsSet && cashDiscountPercentValue.Value == null)
                throw new ArgumentNullException(nameof(cashDiscountPercentValue), "Property is not nullable for class TransactionModel.");

            if (cashDiscountTotal.IsSet && cashDiscountTotal.Value == null)
                throw new ArgumentNullException(nameof(cashDiscountTotal), "Property is not nullable for class TransactionModel.");

            if (convertState.IsSet && convertState.Value == null)
                throw new ArgumentNullException(nameof(convertState), "Property is not nullable for class TransactionModel.");

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class TransactionModel.");

            if (creator.IsSet && creator.Value == null)
                throw new ArgumentNullException(nameof(creator), "Property is not nullable for class TransactionModel.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class TransactionModel.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class TransactionModel.");

            if (deliveryAddress.IsSet && deliveryAddress.Value == null)
                throw new ArgumentNullException(nameof(deliveryAddress), "Property is not nullable for class TransactionModel.");

            if (document.IsSet && document.Value == null)
                throw new ArgumentNullException(nameof(document), "Property is not nullable for class TransactionModel.");

            if (financialAccountingPeriod.IsSet && financialAccountingPeriod.Value == null)
                throw new ArgumentNullException(nameof(financialAccountingPeriod), "Property is not nullable for class TransactionModel.");

            if (financialPartner.IsSet && financialPartner.Value == null)
                throw new ArgumentNullException(nameof(financialPartner), "Property is not nullable for class TransactionModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TransactionModel.");

            if (invoiceRecipient.IsSet && invoiceRecipient.Value == null)
                throw new ArgumentNullException(nameof(invoiceRecipient), "Property is not nullable for class TransactionModel.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class TransactionModel.");

            if (manualVat.IsSet && manualVat.Value == null)
                throw new ArgumentNullException(nameof(manualVat), "Property is not nullable for class TransactionModel.");

            if (operationItemCombinationMode.IsSet && operationItemCombinationMode.Value == null)
                throw new ArgumentNullException(nameof(operationItemCombinationMode), "Property is not nullable for class TransactionModel.");

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class TransactionModel.");

            if (payer.IsSet && payer.Value == null)
                throw new ArgumentNullException(nameof(payer), "Property is not nullable for class TransactionModel.");

            if (paymentMethod.IsSet && paymentMethod.Value == null)
                throw new ArgumentNullException(nameof(paymentMethod), "Property is not nullable for class TransactionModel.");

            if (period.IsSet && period.Value == null)
                throw new ArgumentNullException(nameof(period), "Property is not nullable for class TransactionModel.");

            if (representative.IsSet && representative.Value == null)
                throw new ArgumentNullException(nameof(representative), "Property is not nullable for class TransactionModel.");

            if (responsible.IsSet && responsible.Value == null)
                throw new ArgumentNullException(nameof(responsible), "Property is not nullable for class TransactionModel.");

            if (sign.IsSet && sign.Value == null)
                throw new ArgumentNullException(nameof(sign), "Property is not nullable for class TransactionModel.");

            if (signedTotalPrice.IsSet && signedTotalPrice.Value == null)
                throw new ArgumentNullException(nameof(signedTotalPrice), "Property is not nullable for class TransactionModel.");

            if (signedTotalPriceGross.IsSet && signedTotalPriceGross.Value == null)
                throw new ArgumentNullException(nameof(signedTotalPriceGross), "Property is not nullable for class TransactionModel.");

            if (signedTotalPriceNet.IsSet && signedTotalPriceNet.Value == null)
                throw new ArgumentNullException(nameof(signedTotalPriceNet), "Property is not nullable for class TransactionModel.");

            if (signedTotalPriceTax.IsSet && signedTotalPriceTax.Value == null)
                throw new ArgumentNullException(nameof(signedTotalPriceTax), "Property is not nullable for class TransactionModel.");

            if (taxGroup.IsSet && taxGroup.Value == null)
                throw new ArgumentNullException(nameof(taxGroup), "Property is not nullable for class TransactionModel.");

            if (termsOfPayment.IsSet && termsOfPayment.Value == null)
                throw new ArgumentNullException(nameof(termsOfPayment), "Property is not nullable for class TransactionModel.");

            if (totalPrice.IsSet && totalPrice.Value == null)
                throw new ArgumentNullException(nameof(totalPrice), "Property is not nullable for class TransactionModel.");

            if (totalPriceGross.IsSet && totalPriceGross.Value == null)
                throw new ArgumentNullException(nameof(totalPriceGross), "Property is not nullable for class TransactionModel.");

            if (totalPriceNet.IsSet && totalPriceNet.Value == null)
                throw new ArgumentNullException(nameof(totalPriceNet), "Property is not nullable for class TransactionModel.");

            if (totalPriceTax.IsSet && totalPriceTax.Value == null)
                throw new ArgumentNullException(nameof(totalPriceTax), "Property is not nullable for class TransactionModel.");

            if (transactionYear.IsSet && transactionYear.Value == null)
                throw new ArgumentNullException(nameof(transactionYear), "Property is not nullable for class TransactionModel.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class TransactionModel.");

            if (updateDateTime.IsSet && updateDateTime.Value == null)
                throw new ArgumentNullException(nameof(updateDateTime), "Property is not nullable for class TransactionModel.");

            if (updateUser.IsSet && updateUser.Value == null)
                throw new ArgumentNullException(nameof(updateUser), "Property is not nullable for class TransactionModel.");

            //2return new TransactionModel(alternativePaymentDeadline, balance, barcode, billToText, cashDiscountPercentValue, cashDiscountTotal, convertState, createDateTime, createUserId, createUserName, creator, currency, date, deliveryAddress, deliveryDate, description, document, dueDate, financialAccountingPeriod, financialPartner, id, invoiceRecipient, isDeleted, items, manualVat, notes, number, operationItemCombinationMode, organizationId, payer, paymentMethod, period, reference, referenceNr, representative, responsible, sign, signedTotalPrice, signedTotalPriceGross, signedTotalPriceNet, signedTotalPriceTax, states, taxGroup, termsOfPayment, totalPrice, totalPriceGross, totalPriceNet, totalPriceTax, transactionYear, type, updateDateTime, updateUser, updateUserId, updateUserName);
            return new TransactionModel(alternativePaymentDeadline, balance, barcode, billToText, cashDiscountPercentValue, cashDiscountTotal, convertState, createDateTime, createUserId, createUserName, creator, currency, date, deliveryAddress, deliveryDate, description, document, dueDate, financialAccountingPeriod, financialPartner, id, invoiceRecipient, isDeleted, items, manualVat, notes, number, operationItemCombinationMode, organizationId, payer, paymentMethod, period, reference, referenceNr, representative, responsible, sign, signedTotalPrice, signedTotalPriceGross, signedTotalPriceNet, signedTotalPriceTax, states, taxGroup, termsOfPayment, totalPrice, totalPriceGross, totalPriceNet, totalPriceTax, transactionYear, type, updateDateTime, updateUser, updateUserId, updateUserName);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionModel transactionModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, transactionModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TransactionModel transactionModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionModel.CreatorOption.IsSet && transactionModel.Creator == null)
                throw new ArgumentNullException(nameof(transactionModel.Creator), "Property is required for class TransactionModel.");

            if (transactionModel.CurrencyOption.IsSet && transactionModel.Currency == null)
                throw new ArgumentNullException(nameof(transactionModel.Currency), "Property is required for class TransactionModel.");

            if (transactionModel.DeliveryAddressOption.IsSet && transactionModel.DeliveryAddress == null)
                throw new ArgumentNullException(nameof(transactionModel.DeliveryAddress), "Property is required for class TransactionModel.");

            if (transactionModel.DocumentOption.IsSet && transactionModel.Document == null)
                throw new ArgumentNullException(nameof(transactionModel.Document), "Property is required for class TransactionModel.");

            if (transactionModel.FinancialAccountingPeriodOption.IsSet && transactionModel.FinancialAccountingPeriod == null)
                throw new ArgumentNullException(nameof(transactionModel.FinancialAccountingPeriod), "Property is required for class TransactionModel.");

            if (transactionModel.FinancialPartnerOption.IsSet && transactionModel.FinancialPartner == null)
                throw new ArgumentNullException(nameof(transactionModel.FinancialPartner), "Property is required for class TransactionModel.");

            if (transactionModel.InvoiceRecipientOption.IsSet && transactionModel.InvoiceRecipient == null)
                throw new ArgumentNullException(nameof(transactionModel.InvoiceRecipient), "Property is required for class TransactionModel.");

            if (transactionModel.ManualVatOption.IsSet && transactionModel.ManualVat == null)
                throw new ArgumentNullException(nameof(transactionModel.ManualVat), "Property is required for class TransactionModel.");

            if (transactionModel.PayerOption.IsSet && transactionModel.Payer == null)
                throw new ArgumentNullException(nameof(transactionModel.Payer), "Property is required for class TransactionModel.");

            if (transactionModel.PaymentMethodOption.IsSet && transactionModel.PaymentMethod == null)
                throw new ArgumentNullException(nameof(transactionModel.PaymentMethod), "Property is required for class TransactionModel.");

            if (transactionModel.PeriodOption.IsSet && transactionModel.Period == null)
                throw new ArgumentNullException(nameof(transactionModel.Period), "Property is required for class TransactionModel.");

            if (transactionModel.RepresentativeOption.IsSet && transactionModel.Representative == null)
                throw new ArgumentNullException(nameof(transactionModel.Representative), "Property is required for class TransactionModel.");

            if (transactionModel.ResponsibleOption.IsSet && transactionModel.Responsible == null)
                throw new ArgumentNullException(nameof(transactionModel.Responsible), "Property is required for class TransactionModel.");

            if (transactionModel.TaxGroupOption.IsSet && transactionModel.TaxGroup == null)
                throw new ArgumentNullException(nameof(transactionModel.TaxGroup), "Property is required for class TransactionModel.");

            if (transactionModel.TermsOfPaymentOption.IsSet && transactionModel.TermsOfPayment == null)
                throw new ArgumentNullException(nameof(transactionModel.TermsOfPayment), "Property is required for class TransactionModel.");

            if (transactionModel.TypeOption.IsSet && transactionModel.Type == null)
                throw new ArgumentNullException(nameof(transactionModel.Type), "Property is required for class TransactionModel.");

            if (transactionModel.UpdateUserOption.IsSet && transactionModel.UpdateUser == null)
                throw new ArgumentNullException(nameof(transactionModel.UpdateUser), "Property is required for class TransactionModel.");

            if (transactionModel.AlternativePaymentDeadlineOption.IsSet)
                if (transactionModel.AlternativePaymentDeadlineOption.Value != null)
                {
                    writer.WriteString("alternativePaymentDeadline", transactionModel.AlternativePaymentDeadlineOption!.Value.ToString(AlternativePaymentDeadlineFormat));
                    //var __value = transactionModel.AlternativePaymentDeadlineOption.Value;
                    //writer.WriteString("alternativePaymentDeadline", __value);
                }
                else
                    writer.WriteNull("alternativePaymentDeadline");

            if (transactionModel.BalanceOption.IsSet)
                writer.WriteNumber("balance", transactionModel.BalanceOption!.Value);

            if (transactionModel.BarcodeOption.IsSet)
                if (transactionModel.BarcodeOption.Value != null)
                {
                    writer.WriteString("barcode", transactionModel.Barcode);
                    //var __value = transactionModel.BarcodeOption.Value;
                    //writer.WriteString("barcode", __value);
                }
                else
                    writer.WriteNull("barcode");

            if (transactionModel.BillToTextOption.IsSet)
                if (transactionModel.BillToTextOption.Value != null)
                {
                    writer.WriteString("billToText", transactionModel.BillToText);
                    //var __value = transactionModel.BillToTextOption.Value;
                    //writer.WriteString("billToText", __value);
                }
                else
                    writer.WriteNull("billToText");

            if (transactionModel.CashDiscountPercentValueOption.IsSet)
                writer.WriteNumber("cashDiscountPercentValue", transactionModel.CashDiscountPercentValueOption!.Value);

            if (transactionModel.CashDiscountTotalOption.IsSet)
                writer.WriteNumber("cashDiscountTotal", transactionModel.CashDiscountTotalOption!.Value);

            if (transactionModel.ConvertStateOption.IsSet)
            {
                var convertStateRawValue = TransactionConvertStateValueConverter.ToJsonValue(transactionModel.ConvertState!.Value);
                writer.WriteNumber("convertState", convertStateRawValue);
            }
            if (transactionModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", transactionModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (transactionModel.CreateUserIdOption.IsSet)
                if (transactionModel.CreateUserIdOption.Value != null)
                {
                    writer.WriteString("createUserId", transactionModel.CreateUserIdOption!.Value);
                    //var __value = transactionModel.CreateUserIdOption.Value;
                    //writer.WriteString("createUserId", __value);
                }
                else
                    writer.WriteNull("createUserId");

            if (transactionModel.CreateUserNameOption.IsSet)
                if (transactionModel.CreateUserNameOption.Value != null)
                {
                    writer.WriteString("createUserName", transactionModel.CreateUserName);
                    //var __value = transactionModel.CreateUserNameOption.Value;
                    //writer.WriteString("createUserName", __value);
                }
                else
                    writer.WriteNull("createUserName");

            if (transactionModel.CreatorOption.IsSet)
            {
                writer.WritePropertyName("creator");
                JsonSerializer.Serialize(writer, transactionModel.Creator, jsonSerializerOptions);
            }
            if (transactionModel.CurrencyOption.IsSet)
            {
                writer.WritePropertyName("currency");
                JsonSerializer.Serialize(writer, transactionModel.Currency, jsonSerializerOptions);
            }
            if (transactionModel.DateOption.IsSet)
                writer.WriteString("date", transactionModel.DateOption!.Value.ToString(DateFormat));

            if (transactionModel.DeliveryAddressOption.IsSet)
            {
                writer.WritePropertyName("deliveryAddress");
                JsonSerializer.Serialize(writer, transactionModel.DeliveryAddress, jsonSerializerOptions);
            }
            if (transactionModel.DeliveryDateOption.IsSet)
                if (transactionModel.DeliveryDateOption.Value != null)
                {
                    writer.WriteString("deliveryDate", transactionModel.DeliveryDateOption!.Value.ToString(DeliveryDateFormat));
                    //var __value = transactionModel.DeliveryDateOption.Value;
                    //writer.WriteString("deliveryDate", __value);
                }
                else
                    writer.WriteNull("deliveryDate");

            if (transactionModel.DescriptionOption.IsSet)
                if (transactionModel.DescriptionOption.Value != null)
                {
                    writer.WriteString("description", transactionModel.Description);
                    //var __value = transactionModel.DescriptionOption.Value;
                    //writer.WriteString("description", __value);
                }
                else
                    writer.WriteNull("description");

            if (transactionModel.DocumentOption.IsSet)
            {
                writer.WritePropertyName("document");
                JsonSerializer.Serialize(writer, transactionModel.Document, jsonSerializerOptions);
            }
            if (transactionModel.DueDateOption.IsSet)
                if (transactionModel.DueDateOption.Value != null)
                {
                    writer.WriteString("dueDate", transactionModel.DueDateOption!.Value.ToString(DueDateFormat));
                    //var __value = transactionModel.DueDateOption.Value;
                    //writer.WriteString("dueDate", __value);
                }
                else
                    writer.WriteNull("dueDate");

            if (transactionModel.FinancialAccountingPeriodOption.IsSet)
            {
                writer.WritePropertyName("financialAccountingPeriod");
                JsonSerializer.Serialize(writer, transactionModel.FinancialAccountingPeriod, jsonSerializerOptions);
            }
            if (transactionModel.FinancialPartnerOption.IsSet)
            {
                writer.WritePropertyName("financialPartner");
                JsonSerializer.Serialize(writer, transactionModel.FinancialPartner, jsonSerializerOptions);
            }
            if (transactionModel.IdOption.IsSet)
                writer.WriteString("id", transactionModel.IdOption!.Value);

            if (transactionModel.InvoiceRecipientOption.IsSet)
            {
                writer.WritePropertyName("invoiceRecipient");
                JsonSerializer.Serialize(writer, transactionModel.InvoiceRecipient, jsonSerializerOptions);
            }
            if (transactionModel.IsDeletedOption.IsSet)
                writer.WriteBoolean("isDeleted", transactionModel.IsDeletedOption!.Value);

            if (transactionModel.ItemsOption.IsSet)
                if (transactionModel.ItemsOption.Value != null)
                {
                    writer.WritePropertyName("items");
                    JsonSerializer.Serialize(writer, transactionModel.Items, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items");
            if (transactionModel.ManualVatOption.IsSet)
            {
                writer.WritePropertyName("manualVat");
                JsonSerializer.Serialize(writer, transactionModel.ManualVat, jsonSerializerOptions);
            }
            if (transactionModel.NotesOption.IsSet)
                if (transactionModel.NotesOption.Value != null)
                {
                    writer.WriteString("notes", transactionModel.Notes);
                    //var __value = transactionModel.NotesOption.Value;
                    //writer.WriteString("notes", __value);
                }
                else
                    writer.WriteNull("notes");

            if (transactionModel.NumberOption.IsSet)
                if (transactionModel.NumberOption.Value != null)
                {
                    writer.WriteString("number", transactionModel.Number);
                    //var __value = transactionModel.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (transactionModel.OperationItemCombinationModeOption.IsSet)
            {
                var operationItemCombinationModeRawValue = OperationItemCombinationModeValueConverter.ToJsonValue(transactionModel.OperationItemCombinationMode!.Value);
                writer.WriteNumber("operationItemCombinationMode", operationItemCombinationModeRawValue);
            }
            if (transactionModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", transactionModel.OrganizationIdOption!.Value);

            if (transactionModel.PayerOption.IsSet)
            {
                writer.WritePropertyName("payer");
                JsonSerializer.Serialize(writer, transactionModel.Payer, jsonSerializerOptions);
            }
            if (transactionModel.PaymentMethodOption.IsSet)
            {
                writer.WritePropertyName("paymentMethod");
                JsonSerializer.Serialize(writer, transactionModel.PaymentMethod, jsonSerializerOptions);
            }
            if (transactionModel.PeriodOption.IsSet)
            {
                writer.WritePropertyName("period");
                JsonSerializer.Serialize(writer, transactionModel.Period, jsonSerializerOptions);
            }
            if (transactionModel.ReferenceOption.IsSet)
                if (transactionModel.ReferenceOption.Value != null)
                {
                    writer.WriteString("reference", transactionModel.Reference);
                    //var __value = transactionModel.ReferenceOption.Value;
                    //writer.WriteString("reference", __value);
                }
                else
                    writer.WriteNull("reference");

            if (transactionModel.ReferenceNrOption.IsSet)
                if (transactionModel.ReferenceNrOption.Value != null)
                {
                    writer.WriteString("referenceNr", transactionModel.ReferenceNr);
                    //var __value = transactionModel.ReferenceNrOption.Value;
                    //writer.WriteString("referenceNr", __value);
                }
                else
                    writer.WriteNull("referenceNr");

            if (transactionModel.RepresentativeOption.IsSet)
            {
                writer.WritePropertyName("representative");
                JsonSerializer.Serialize(writer, transactionModel.Representative, jsonSerializerOptions);
            }
            if (transactionModel.ResponsibleOption.IsSet)
            {
                writer.WritePropertyName("responsible");
                JsonSerializer.Serialize(writer, transactionModel.Responsible, jsonSerializerOptions);
            }
            if (transactionModel.SignOption.IsSet)
                writer.WriteNumber("sign", transactionModel.SignOption!.Value);

            if (transactionModel.SignedTotalPriceOption.IsSet)
                writer.WriteNumber("signedTotalPrice", transactionModel.SignedTotalPriceOption!.Value);

            if (transactionModel.SignedTotalPriceGrossOption.IsSet)
                writer.WriteNumber("signedTotalPriceGross", transactionModel.SignedTotalPriceGrossOption!.Value);

            if (transactionModel.SignedTotalPriceNetOption.IsSet)
                writer.WriteNumber("signedTotalPriceNet", transactionModel.SignedTotalPriceNetOption!.Value);

            if (transactionModel.SignedTotalPriceTaxOption.IsSet)
                writer.WriteNumber("signedTotalPriceTax", transactionModel.SignedTotalPriceTaxOption!.Value);

            if (transactionModel.StatesOption.IsSet)
                if (transactionModel.StatesOption.Value != null)
                {
                    writer.WritePropertyName("states");
                    JsonSerializer.Serialize(writer, transactionModel.States, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("states");
            if (transactionModel.TaxGroupOption.IsSet)
            {
                writer.WritePropertyName("taxGroup");
                JsonSerializer.Serialize(writer, transactionModel.TaxGroup, jsonSerializerOptions);
            }
            if (transactionModel.TermsOfPaymentOption.IsSet)
            {
                writer.WritePropertyName("termsOfPayment");
                JsonSerializer.Serialize(writer, transactionModel.TermsOfPayment, jsonSerializerOptions);
            }
            if (transactionModel.TotalPriceOption.IsSet)
                writer.WriteNumber("totalPrice", transactionModel.TotalPriceOption!.Value);

            if (transactionModel.TotalPriceGrossOption.IsSet)
                writer.WriteNumber("totalPriceGross", transactionModel.TotalPriceGrossOption!.Value);

            if (transactionModel.TotalPriceNetOption.IsSet)
                writer.WriteNumber("totalPriceNet", transactionModel.TotalPriceNetOption!.Value);

            if (transactionModel.TotalPriceTaxOption.IsSet)
                writer.WriteNumber("totalPriceTax", transactionModel.TotalPriceTaxOption!.Value);

            if (transactionModel.TransactionYearOption.IsSet)
                writer.WriteNumber("transactionYear", transactionModel.TransactionYearOption!.Value);

            if (transactionModel.TypeOption.IsSet)
            {
                writer.WritePropertyName("type");
                JsonSerializer.Serialize(writer, transactionModel.Type, jsonSerializerOptions);
            }
            if (transactionModel.UpdateDateTimeOption.IsSet)
                writer.WriteString("updateDateTime", transactionModel.UpdateDateTimeOption!.Value.ToString(UpdateDateTimeFormat));

            if (transactionModel.UpdateUserOption.IsSet)
            {
                writer.WritePropertyName("updateUser");
                JsonSerializer.Serialize(writer, transactionModel.UpdateUser, jsonSerializerOptions);
            }
            if (transactionModel.UpdateUserIdOption.IsSet)
                if (transactionModel.UpdateUserIdOption.Value != null)
                {
                    writer.WriteString("updateUserId", transactionModel.UpdateUserIdOption!.Value);
                    //var __value = transactionModel.UpdateUserIdOption.Value;
                    //writer.WriteString("updateUserId", __value);
                }
                else
                    writer.WriteNull("updateUserId");

            if (transactionModel.UpdateUserNameOption.IsSet)
                if (transactionModel.UpdateUserNameOption.Value != null)
                {
                    writer.WriteString("updateUserName", transactionModel.UpdateUserName);
                    //var __value = transactionModel.UpdateUserNameOption.Value;
                    //writer.WriteString("updateUserName", __value);
                }
                else
                    writer.WriteNull("updateUserName");
        }
    }
}
