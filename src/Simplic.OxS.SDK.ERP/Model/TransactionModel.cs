/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// Represents the shared model for Simplic.OxS.ERP.Transaction.Transaction.
    /// </summary>
    [DataContract(Name = "TransactionModel")]
    public partial class TransactionModel : IEquatable<TransactionModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ConvertState
        /// </summary>
        [DataMember(Name = "convertState", EmitDefaultValue = false)]
        public TransactionConvertState? ConvertState { get; set; }

        /// <summary>
        /// Gets or Sets OperationItemCombinationMode
        /// </summary>
        [DataMember(Name = "operationItemCombinationMode", EmitDefaultValue = false)]
        public OperationItemCombinationMode? OperationItemCombinationMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="number">Gets or sets the transaction number..</param>
        /// <param name="reference">Gets or sets the reference..</param>
        /// <param name="type">type.</param>
        /// <param name="date">Gets or sets the time of the underlying transaction..</param>
        /// <param name="deliveryDate">Gets or sets the time of delivery..</param>
        /// <param name="termsOfPayment">termsOfPayment.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="currency">currency.</param>
        /// <param name="description">Gets or sets the description..</param>
        /// <param name="financialPartner">financialPartner.</param>
        /// <param name="deliveryAddress">deliveryAddress.</param>
        /// <param name="invoiceRecipient">invoiceRecipient.</param>
        /// <param name="payer">payer.</param>
        /// <param name="creator">creator.</param>
        /// <param name="responsible">responsible.</param>
        /// <param name="representative">representative.</param>
        /// <param name="items">Gets or sets the items of this transaction..</param>
        /// <param name="convertState">convertState.</param>
        /// <param name="alternativePaymentDeadline">Gets or sets an alternative payment deadline to the one defined in the terms of payment..</param>
        /// <param name="balance">Gets or sets the balance..</param>
        /// <param name="barcode">Gets or sets the barcode..</param>
        /// <param name="billToText">Gets or sets the bill as a text..</param>
        /// <param name="cashDiscountPercentValue">Gets or sets the relative cash discount..</param>
        /// <param name="cashDiscountTotal">Gets or sets the total cash discount..</param>
        /// <param name="document">document.</param>
        /// <param name="financialAccountingPeriod">financialAccountingPeriod.</param>
        /// <param name="period">period.</param>
        /// <param name="states">Gets or sets a set of states the transaction is in.     Examples for states are: cancelled, exported, gross, paid, printed, transferredToAccounting  .</param>
        /// <param name="manualVat">manualVat.</param>
        /// <param name="notes">Gets or sets notes..</param>
        /// <param name="dueDate">Gets or sets the due date..</param>
        /// <param name="referenceNr">Gets or sets the reference number..</param>
        /// <param name="taxGroup">taxGroup.</param>
        /// <param name="totalPrice">Gets or sets the total price..</param>
        /// <param name="totalPriceGross">Gets or sets the gross total price..</param>
        /// <param name="totalPriceNet">Gets or sets the net total price..</param>
        /// <param name="totalPriceTax">Gets or sets the total price tax..</param>
        /// <param name="transactionYear">Gets or sets the transaction year..</param>
        /// <param name="updateUser">updateUser.</param>
        /// <param name="signedTotalPriceNet">Gets or sets the net signed total price..</param>
        /// <param name="signedTotalPriceGross">Gets or sets the gross signed total price..</param>
        /// <param name="signedTotalPrice">Gets or sets the signed total price..</param>
        /// <param name="signedTotalPriceTax">Gets or sets the signed total price tax..</param>
        /// <param name="sign">Gets or sets the total price value sign.     The sign is the factor used for summations of transaction total values mainly in grids and is either 1 or -1.  .</param>
        /// <param name="operationItemCombinationMode">operationItemCombinationMode.</param>
        /// <param name="createDateTime">Gets or sets the date and time the transaction is created..</param>
        /// <param name="createUserId">Gets or sets the id of the user that created the transaction..</param>
        /// <param name="createUserName">Gets or sets the name of the user that created the transaction..</param>
        /// <param name="updateDateTime">Gets or sets the date and time the transaction is updated..</param>
        /// <param name="updateUserId">Gets or sets the id of the user that updated the transaction..</param>
        /// <param name="updateUserName">Gets or sets the name of the user that updated the transaction..</param>
        public TransactionModel(Guid id = default(Guid), Guid organizationId = default(Guid), bool isDeleted = default(bool), string number = default(string), string reference = default(string), TransactionTransactionTypeModel type = default(TransactionTransactionTypeModel), DateTime date = default(DateTime), DateTime? deliveryDate = default(DateTime?), TermsOfPaymentModel termsOfPayment = default(TermsOfPaymentModel), PaymentMethodModel paymentMethod = default(PaymentMethodModel), CurrencyModel currency = default(CurrencyModel), string description = default(string), TransactionContactModel financialPartner = default(TransactionContactModel), TransactionContactModel deliveryAddress = default(TransactionContactModel), TransactionContactModel invoiceRecipient = default(TransactionContactModel), TransactionContactModel payer = default(TransactionContactModel), TransactionContactModel creator = default(TransactionContactModel), TransactionContactModel responsible = default(TransactionContactModel), TransactionContactModel representative = default(TransactionContactModel), List<TransactionItemModel> items = default(List<TransactionItemModel>), TransactionConvertState? convertState = default(TransactionConvertState?), DateTime? alternativePaymentDeadline = default(DateTime?), double balance = default(double), string barcode = default(string), string billToText = default(string), double cashDiscountPercentValue = default(double), double cashDiscountTotal = default(double), TransactionDocumentModel document = default(TransactionDocumentModel), TransactionPeriodModel financialAccountingPeriod = default(TransactionPeriodModel), TransactionPeriodModel period = default(TransactionPeriodModel), List<string> states = default(List<string>), TransactionManualVatModel manualVat = default(TransactionManualVatModel), string notes = default(string), DateTime? dueDate = default(DateTime?), string referenceNr = default(string), TaxGroupModel taxGroup = default(TaxGroupModel), double totalPrice = default(double), double totalPriceGross = default(double), double totalPriceNet = default(double), double totalPriceTax = default(double), int transactionYear = default(int), TransactionUserModel updateUser = default(TransactionUserModel), double signedTotalPriceNet = default(double), double signedTotalPriceGross = default(double), double signedTotalPrice = default(double), double signedTotalPriceTax = default(double), int sign = default(int), OperationItemCombinationMode? operationItemCombinationMode = default(OperationItemCombinationMode?), DateTime createDateTime = default(DateTime), Guid? createUserId = default(Guid?), string createUserName = default(string), DateTime updateDateTime = default(DateTime), Guid? updateUserId = default(Guid?), string updateUserName = default(string))
        {
            this.Id = id;
            this.OrganizationId = organizationId;
            this.IsDeleted = isDeleted;
            this.Number = number;
            this.Reference = reference;
            this.Type = type;
            this.Date = date;
            this.DeliveryDate = deliveryDate;
            this.TermsOfPayment = termsOfPayment;
            this.PaymentMethod = paymentMethod;
            this.Currency = currency;
            this.Description = description;
            this.FinancialPartner = financialPartner;
            this.DeliveryAddress = deliveryAddress;
            this.InvoiceRecipient = invoiceRecipient;
            this.Payer = payer;
            this.Creator = creator;
            this.Responsible = responsible;
            this.Representative = representative;
            this.Items = items;
            this.ConvertState = convertState;
            this.AlternativePaymentDeadline = alternativePaymentDeadline;
            this.Balance = balance;
            this.Barcode = barcode;
            this.BillToText = billToText;
            this.CashDiscountPercentValue = cashDiscountPercentValue;
            this.CashDiscountTotal = cashDiscountTotal;
            this.Document = document;
            this.FinancialAccountingPeriod = financialAccountingPeriod;
            this.Period = period;
            this.States = states;
            this.ManualVat = manualVat;
            this.Notes = notes;
            this.DueDate = dueDate;
            this.ReferenceNr = referenceNr;
            this.TaxGroup = taxGroup;
            this.TotalPrice = totalPrice;
            this.TotalPriceGross = totalPriceGross;
            this.TotalPriceNet = totalPriceNet;
            this.TotalPriceTax = totalPriceTax;
            this.TransactionYear = transactionYear;
            this.UpdateUser = updateUser;
            this.SignedTotalPriceNet = signedTotalPriceNet;
            this.SignedTotalPriceGross = signedTotalPriceGross;
            this.SignedTotalPrice = signedTotalPrice;
            this.SignedTotalPriceTax = signedTotalPriceTax;
            this.Sign = sign;
            this.OperationItemCombinationMode = operationItemCombinationMode;
            this.CreateDateTime = createDateTime;
            this.CreateUserId = createUserId;
            this.CreateUserName = createUserName;
            this.UpdateDateTime = updateDateTime;
            this.UpdateUserId = updateUserId;
            this.UpdateUserName = updateUserName;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organizationId", EmitDefaultValue = false)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or sets the transaction number.
        /// </summary>
        /// <value>Gets or sets the transaction number.</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets the reference.
        /// </summary>
        /// <value>Gets or sets the reference.</value>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TransactionTransactionTypeModel Type { get; set; }

        /// <summary>
        /// Gets or sets the time of the underlying transaction.
        /// </summary>
        /// <value>Gets or sets the time of the underlying transaction.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or sets the time of delivery.
        /// </summary>
        /// <value>Gets or sets the time of delivery.</value>
        [DataMember(Name = "deliveryDate", EmitDefaultValue = true)]
        public DateTime? DeliveryDate { get; set; }

        /// <summary>
        /// Gets or Sets TermsOfPayment
        /// </summary>
        [DataMember(Name = "termsOfPayment", EmitDefaultValue = false)]
        public TermsOfPaymentModel TermsOfPayment { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = false)]
        public PaymentMethodModel PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public CurrencyModel Currency { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        /// <value>Gets or sets the description.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FinancialPartner
        /// </summary>
        [DataMember(Name = "financialPartner", EmitDefaultValue = false)]
        public TransactionContactModel FinancialPartner { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [DataMember(Name = "deliveryAddress", EmitDefaultValue = false)]
        public TransactionContactModel DeliveryAddress { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceRecipient
        /// </summary>
        [DataMember(Name = "invoiceRecipient", EmitDefaultValue = false)]
        public TransactionContactModel InvoiceRecipient { get; set; }

        /// <summary>
        /// Gets or Sets Payer
        /// </summary>
        [DataMember(Name = "payer", EmitDefaultValue = false)]
        public TransactionContactModel Payer { get; set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name = "creator", EmitDefaultValue = false)]
        public TransactionContactModel Creator { get; set; }

        /// <summary>
        /// Gets or Sets Responsible
        /// </summary>
        [DataMember(Name = "responsible", EmitDefaultValue = false)]
        public TransactionContactModel Responsible { get; set; }

        /// <summary>
        /// Gets or Sets Representative
        /// </summary>
        [DataMember(Name = "representative", EmitDefaultValue = false)]
        public TransactionContactModel Representative { get; set; }

        /// <summary>
        /// Gets or sets the items of this transaction.
        /// </summary>
        /// <value>Gets or sets the items of this transaction.</value>
        [DataMember(Name = "items", EmitDefaultValue = true)]
        public List<TransactionItemModel> Items { get; set; }

        /// <summary>
        /// Gets or sets an alternative payment deadline to the one defined in the terms of payment.
        /// </summary>
        /// <value>Gets or sets an alternative payment deadline to the one defined in the terms of payment.</value>
        [DataMember(Name = "alternativePaymentDeadline", EmitDefaultValue = true)]
        public DateTime? AlternativePaymentDeadline { get; set; }

        /// <summary>
        /// Gets or sets the balance.
        /// </summary>
        /// <value>Gets or sets the balance.</value>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public double Balance { get; set; }

        /// <summary>
        /// Gets or sets the barcode.
        /// </summary>
        /// <value>Gets or sets the barcode.</value>
        [DataMember(Name = "barcode", EmitDefaultValue = true)]
        public string Barcode { get; set; }

        /// <summary>
        /// Gets or sets the bill as a text.
        /// </summary>
        /// <value>Gets or sets the bill as a text.</value>
        [DataMember(Name = "billToText", EmitDefaultValue = true)]
        public string BillToText { get; set; }

        /// <summary>
        /// Gets or sets the relative cash discount.
        /// </summary>
        /// <value>Gets or sets the relative cash discount.</value>
        [DataMember(Name = "cashDiscountPercentValue", EmitDefaultValue = false)]
        public double CashDiscountPercentValue { get; set; }

        /// <summary>
        /// Gets or sets the total cash discount.
        /// </summary>
        /// <value>Gets or sets the total cash discount.</value>
        [DataMember(Name = "cashDiscountTotal", EmitDefaultValue = false)]
        public double CashDiscountTotal { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name = "document", EmitDefaultValue = false)]
        public TransactionDocumentModel Document { get; set; }

        /// <summary>
        /// Gets or Sets FinancialAccountingPeriod
        /// </summary>
        [DataMember(Name = "financialAccountingPeriod", EmitDefaultValue = false)]
        public TransactionPeriodModel FinancialAccountingPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public TransactionPeriodModel Period { get; set; }

        /// <summary>
        /// Gets or sets a set of states the transaction is in.     Examples for states are: cancelled, exported, gross, paid, printed, transferredToAccounting  
        /// </summary>
        /// <value>Gets or sets a set of states the transaction is in.     Examples for states are: cancelled, exported, gross, paid, printed, transferredToAccounting  </value>
        [DataMember(Name = "states", EmitDefaultValue = true)]
        public List<string> States { get; set; }

        /// <summary>
        /// Gets or Sets ManualVat
        /// </summary>
        [DataMember(Name = "manualVat", EmitDefaultValue = false)]
        public TransactionManualVatModel ManualVat { get; set; }

        /// <summary>
        /// Gets or sets notes.
        /// </summary>
        /// <value>Gets or sets notes.</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or sets the due date.
        /// </summary>
        /// <value>Gets or sets the due date.</value>
        [DataMember(Name = "dueDate", EmitDefaultValue = true)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or sets the reference number.
        /// </summary>
        /// <value>Gets or sets the reference number.</value>
        [DataMember(Name = "referenceNr", EmitDefaultValue = true)]
        public string ReferenceNr { get; set; }

        /// <summary>
        /// Gets or Sets TaxGroup
        /// </summary>
        [DataMember(Name = "taxGroup", EmitDefaultValue = false)]
        public TaxGroupModel TaxGroup { get; set; }

        /// <summary>
        /// Gets or sets the total price.
        /// </summary>
        /// <value>Gets or sets the total price.</value>
        [DataMember(Name = "totalPrice", EmitDefaultValue = false)]
        public double TotalPrice { get; set; }

        /// <summary>
        /// Gets or sets the gross total price.
        /// </summary>
        /// <value>Gets or sets the gross total price.</value>
        [DataMember(Name = "totalPriceGross", EmitDefaultValue = false)]
        public double TotalPriceGross { get; set; }

        /// <summary>
        /// Gets or sets the net total price.
        /// </summary>
        /// <value>Gets or sets the net total price.</value>
        [DataMember(Name = "totalPriceNet", EmitDefaultValue = false)]
        public double TotalPriceNet { get; set; }

        /// <summary>
        /// Gets or sets the total price tax.
        /// </summary>
        /// <value>Gets or sets the total price tax.</value>
        [DataMember(Name = "totalPriceTax", EmitDefaultValue = false)]
        public double TotalPriceTax { get; set; }

        /// <summary>
        /// Gets or sets the transaction year.
        /// </summary>
        /// <value>Gets or sets the transaction year.</value>
        [DataMember(Name = "transactionYear", EmitDefaultValue = false)]
        public int TransactionYear { get; set; }

        /// <summary>
        /// Gets or Sets UpdateUser
        /// </summary>
        [DataMember(Name = "updateUser", EmitDefaultValue = false)]
        public TransactionUserModel UpdateUser { get; set; }

        /// <summary>
        /// Gets or sets the net signed total price.
        /// </summary>
        /// <value>Gets or sets the net signed total price.</value>
        [DataMember(Name = "signedTotalPriceNet", EmitDefaultValue = false)]
        public double SignedTotalPriceNet { get; set; }

        /// <summary>
        /// Gets or sets the gross signed total price.
        /// </summary>
        /// <value>Gets or sets the gross signed total price.</value>
        [DataMember(Name = "signedTotalPriceGross", EmitDefaultValue = false)]
        public double SignedTotalPriceGross { get; set; }

        /// <summary>
        /// Gets or sets the signed total price.
        /// </summary>
        /// <value>Gets or sets the signed total price.</value>
        [DataMember(Name = "signedTotalPrice", EmitDefaultValue = false)]
        public double SignedTotalPrice { get; set; }

        /// <summary>
        /// Gets or sets the signed total price tax.
        /// </summary>
        /// <value>Gets or sets the signed total price tax.</value>
        [DataMember(Name = "signedTotalPriceTax", EmitDefaultValue = false)]
        public double SignedTotalPriceTax { get; set; }

        /// <summary>
        /// Gets or sets the total price value sign.     The sign is the factor used for summations of transaction total values mainly in grids and is either 1 or -1.  
        /// </summary>
        /// <value>Gets or sets the total price value sign.     The sign is the factor used for summations of transaction total values mainly in grids and is either 1 or -1.  </value>
        [DataMember(Name = "sign", EmitDefaultValue = false)]
        public int Sign { get; set; }

        /// <summary>
        /// Gets or sets the date and time the transaction is created.
        /// </summary>
        /// <value>Gets or sets the date and time the transaction is created.</value>
        [DataMember(Name = "createDateTime", EmitDefaultValue = false)]
        public DateTime CreateDateTime { get; set; }

        /// <summary>
        /// Gets or sets the id of the user that created the transaction.
        /// </summary>
        /// <value>Gets or sets the id of the user that created the transaction.</value>
        [DataMember(Name = "createUserId", EmitDefaultValue = true)]
        public Guid? CreateUserId { get; set; }

        /// <summary>
        /// Gets or sets the name of the user that created the transaction.
        /// </summary>
        /// <value>Gets or sets the name of the user that created the transaction.</value>
        [DataMember(Name = "createUserName", EmitDefaultValue = true)]
        public string CreateUserName { get; set; }

        /// <summary>
        /// Gets or sets the date and time the transaction is updated.
        /// </summary>
        /// <value>Gets or sets the date and time the transaction is updated.</value>
        [DataMember(Name = "updateDateTime", EmitDefaultValue = false)]
        public DateTime UpdateDateTime { get; set; }

        /// <summary>
        /// Gets or sets the id of the user that updated the transaction.
        /// </summary>
        /// <value>Gets or sets the id of the user that updated the transaction.</value>
        [DataMember(Name = "updateUserId", EmitDefaultValue = true)]
        public Guid? UpdateUserId { get; set; }

        /// <summary>
        /// Gets or sets the name of the user that updated the transaction.
        /// </summary>
        /// <value>Gets or sets the name of the user that updated the transaction.</value>
        [DataMember(Name = "updateUserName", EmitDefaultValue = true)]
        public string UpdateUserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  TermsOfPayment: ").Append(TermsOfPayment).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FinancialPartner: ").Append(FinancialPartner).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  InvoiceRecipient: ").Append(InvoiceRecipient).Append("\n");
            sb.Append("  Payer: ").Append(Payer).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Responsible: ").Append(Responsible).Append("\n");
            sb.Append("  Representative: ").Append(Representative).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ConvertState: ").Append(ConvertState).Append("\n");
            sb.Append("  AlternativePaymentDeadline: ").Append(AlternativePaymentDeadline).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  BillToText: ").Append(BillToText).Append("\n");
            sb.Append("  CashDiscountPercentValue: ").Append(CashDiscountPercentValue).Append("\n");
            sb.Append("  CashDiscountTotal: ").Append(CashDiscountTotal).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  FinancialAccountingPeriod: ").Append(FinancialAccountingPeriod).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  ManualVat: ").Append(ManualVat).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  ReferenceNr: ").Append(ReferenceNr).Append("\n");
            sb.Append("  TaxGroup: ").Append(TaxGroup).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  TotalPriceGross: ").Append(TotalPriceGross).Append("\n");
            sb.Append("  TotalPriceNet: ").Append(TotalPriceNet).Append("\n");
            sb.Append("  TotalPriceTax: ").Append(TotalPriceTax).Append("\n");
            sb.Append("  TransactionYear: ").Append(TransactionYear).Append("\n");
            sb.Append("  UpdateUser: ").Append(UpdateUser).Append("\n");
            sb.Append("  SignedTotalPriceNet: ").Append(SignedTotalPriceNet).Append("\n");
            sb.Append("  SignedTotalPriceGross: ").Append(SignedTotalPriceGross).Append("\n");
            sb.Append("  SignedTotalPrice: ").Append(SignedTotalPrice).Append("\n");
            sb.Append("  SignedTotalPriceTax: ").Append(SignedTotalPriceTax).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  OperationItemCombinationMode: ").Append(OperationItemCombinationMode).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  CreateUserName: ").Append(CreateUserName).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("  UpdateUserName: ").Append(UpdateUserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionModel);
        }

        /// <summary>
        /// Returns true if TransactionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && 
                (
                    this.TermsOfPayment == input.TermsOfPayment ||
                    (this.TermsOfPayment != null &&
                    this.TermsOfPayment.Equals(input.TermsOfPayment))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FinancialPartner == input.FinancialPartner ||
                    (this.FinancialPartner != null &&
                    this.FinancialPartner.Equals(input.FinancialPartner))
                ) && 
                (
                    this.DeliveryAddress == input.DeliveryAddress ||
                    (this.DeliveryAddress != null &&
                    this.DeliveryAddress.Equals(input.DeliveryAddress))
                ) && 
                (
                    this.InvoiceRecipient == input.InvoiceRecipient ||
                    (this.InvoiceRecipient != null &&
                    this.InvoiceRecipient.Equals(input.InvoiceRecipient))
                ) && 
                (
                    this.Payer == input.Payer ||
                    (this.Payer != null &&
                    this.Payer.Equals(input.Payer))
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.Responsible == input.Responsible ||
                    (this.Responsible != null &&
                    this.Responsible.Equals(input.Responsible))
                ) && 
                (
                    this.Representative == input.Representative ||
                    (this.Representative != null &&
                    this.Representative.Equals(input.Representative))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.ConvertState == input.ConvertState ||
                    this.ConvertState.Equals(input.ConvertState)
                ) && 
                (
                    this.AlternativePaymentDeadline == input.AlternativePaymentDeadline ||
                    (this.AlternativePaymentDeadline != null &&
                    this.AlternativePaymentDeadline.Equals(input.AlternativePaymentDeadline))
                ) && 
                (
                    this.Balance == input.Balance ||
                    this.Balance.Equals(input.Balance)
                ) && 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                ) && 
                (
                    this.BillToText == input.BillToText ||
                    (this.BillToText != null &&
                    this.BillToText.Equals(input.BillToText))
                ) && 
                (
                    this.CashDiscountPercentValue == input.CashDiscountPercentValue ||
                    this.CashDiscountPercentValue.Equals(input.CashDiscountPercentValue)
                ) && 
                (
                    this.CashDiscountTotal == input.CashDiscountTotal ||
                    this.CashDiscountTotal.Equals(input.CashDiscountTotal)
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.FinancialAccountingPeriod == input.FinancialAccountingPeriod ||
                    (this.FinancialAccountingPeriod != null &&
                    this.FinancialAccountingPeriod.Equals(input.FinancialAccountingPeriod))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.States == input.States ||
                    this.States != null &&
                    input.States != null &&
                    this.States.SequenceEqual(input.States)
                ) && 
                (
                    this.ManualVat == input.ManualVat ||
                    (this.ManualVat != null &&
                    this.ManualVat.Equals(input.ManualVat))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.ReferenceNr == input.ReferenceNr ||
                    (this.ReferenceNr != null &&
                    this.ReferenceNr.Equals(input.ReferenceNr))
                ) && 
                (
                    this.TaxGroup == input.TaxGroup ||
                    (this.TaxGroup != null &&
                    this.TaxGroup.Equals(input.TaxGroup))
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    this.TotalPrice.Equals(input.TotalPrice)
                ) && 
                (
                    this.TotalPriceGross == input.TotalPriceGross ||
                    this.TotalPriceGross.Equals(input.TotalPriceGross)
                ) && 
                (
                    this.TotalPriceNet == input.TotalPriceNet ||
                    this.TotalPriceNet.Equals(input.TotalPriceNet)
                ) && 
                (
                    this.TotalPriceTax == input.TotalPriceTax ||
                    this.TotalPriceTax.Equals(input.TotalPriceTax)
                ) && 
                (
                    this.TransactionYear == input.TransactionYear ||
                    this.TransactionYear.Equals(input.TransactionYear)
                ) && 
                (
                    this.UpdateUser == input.UpdateUser ||
                    (this.UpdateUser != null &&
                    this.UpdateUser.Equals(input.UpdateUser))
                ) && 
                (
                    this.SignedTotalPriceNet == input.SignedTotalPriceNet ||
                    this.SignedTotalPriceNet.Equals(input.SignedTotalPriceNet)
                ) && 
                (
                    this.SignedTotalPriceGross == input.SignedTotalPriceGross ||
                    this.SignedTotalPriceGross.Equals(input.SignedTotalPriceGross)
                ) && 
                (
                    this.SignedTotalPrice == input.SignedTotalPrice ||
                    this.SignedTotalPrice.Equals(input.SignedTotalPrice)
                ) && 
                (
                    this.SignedTotalPriceTax == input.SignedTotalPriceTax ||
                    this.SignedTotalPriceTax.Equals(input.SignedTotalPriceTax)
                ) && 
                (
                    this.Sign == input.Sign ||
                    this.Sign.Equals(input.Sign)
                ) && 
                (
                    this.OperationItemCombinationMode == input.OperationItemCombinationMode ||
                    this.OperationItemCombinationMode.Equals(input.OperationItemCombinationMode)
                ) && 
                (
                    this.CreateDateTime == input.CreateDateTime ||
                    (this.CreateDateTime != null &&
                    this.CreateDateTime.Equals(input.CreateDateTime))
                ) && 
                (
                    this.CreateUserId == input.CreateUserId ||
                    (this.CreateUserId != null &&
                    this.CreateUserId.Equals(input.CreateUserId))
                ) && 
                (
                    this.CreateUserName == input.CreateUserName ||
                    (this.CreateUserName != null &&
                    this.CreateUserName.Equals(input.CreateUserName))
                ) && 
                (
                    this.UpdateDateTime == input.UpdateDateTime ||
                    (this.UpdateDateTime != null &&
                    this.UpdateDateTime.Equals(input.UpdateDateTime))
                ) && 
                (
                    this.UpdateUserId == input.UpdateUserId ||
                    (this.UpdateUserId != null &&
                    this.UpdateUserId.Equals(input.UpdateUserId))
                ) && 
                (
                    this.UpdateUserName == input.UpdateUserName ||
                    (this.UpdateUserName != null &&
                    this.UpdateUserName.Equals(input.UpdateUserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.OrganizationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.DeliveryDate != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryDate.GetHashCode();
                }
                if (this.TermsOfPayment != null)
                {
                    hashCode = (hashCode * 59) + this.TermsOfPayment.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.FinancialPartner != null)
                {
                    hashCode = (hashCode * 59) + this.FinancialPartner.GetHashCode();
                }
                if (this.DeliveryAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryAddress.GetHashCode();
                }
                if (this.InvoiceRecipient != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceRecipient.GetHashCode();
                }
                if (this.Payer != null)
                {
                    hashCode = (hashCode * 59) + this.Payer.GetHashCode();
                }
                if (this.Creator != null)
                {
                    hashCode = (hashCode * 59) + this.Creator.GetHashCode();
                }
                if (this.Responsible != null)
                {
                    hashCode = (hashCode * 59) + this.Responsible.GetHashCode();
                }
                if (this.Representative != null)
                {
                    hashCode = (hashCode * 59) + this.Representative.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConvertState.GetHashCode();
                if (this.AlternativePaymentDeadline != null)
                {
                    hashCode = (hashCode * 59) + this.AlternativePaymentDeadline.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Balance.GetHashCode();
                if (this.Barcode != null)
                {
                    hashCode = (hashCode * 59) + this.Barcode.GetHashCode();
                }
                if (this.BillToText != null)
                {
                    hashCode = (hashCode * 59) + this.BillToText.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CashDiscountPercentValue.GetHashCode();
                hashCode = (hashCode * 59) + this.CashDiscountTotal.GetHashCode();
                if (this.Document != null)
                {
                    hashCode = (hashCode * 59) + this.Document.GetHashCode();
                }
                if (this.FinancialAccountingPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.FinancialAccountingPeriod.GetHashCode();
                }
                if (this.Period != null)
                {
                    hashCode = (hashCode * 59) + this.Period.GetHashCode();
                }
                if (this.States != null)
                {
                    hashCode = (hashCode * 59) + this.States.GetHashCode();
                }
                if (this.ManualVat != null)
                {
                    hashCode = (hashCode * 59) + this.ManualVat.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                if (this.ReferenceNr != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceNr.GetHashCode();
                }
                if (this.TaxGroup != null)
                {
                    hashCode = (hashCode * 59) + this.TaxGroup.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPriceGross.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPriceNet.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPriceTax.GetHashCode();
                hashCode = (hashCode * 59) + this.TransactionYear.GetHashCode();
                if (this.UpdateUser != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateUser.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SignedTotalPriceNet.GetHashCode();
                hashCode = (hashCode * 59) + this.SignedTotalPriceGross.GetHashCode();
                hashCode = (hashCode * 59) + this.SignedTotalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.SignedTotalPriceTax.GetHashCode();
                hashCode = (hashCode * 59) + this.Sign.GetHashCode();
                hashCode = (hashCode * 59) + this.OperationItemCombinationMode.GetHashCode();
                if (this.CreateDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreateDateTime.GetHashCode();
                }
                if (this.CreateUserId != null)
                {
                    hashCode = (hashCode * 59) + this.CreateUserId.GetHashCode();
                }
                if (this.CreateUserName != null)
                {
                    hashCode = (hashCode * 59) + this.CreateUserName.GetHashCode();
                }
                if (this.UpdateDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateDateTime.GetHashCode();
                }
                if (this.UpdateUserId != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateUserId.GetHashCode();
                }
                if (this.UpdateUserName != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateUserName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
