// <auto-generated>
/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// TransactionItemModel
    /// </summary>
    public partial class TransactionItemModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TransactionItemModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionItemModel" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="articleId">articleId</param>
        /// <param name="assignedTransactionItems">assignedTransactionItems</param>
        /// <param name="assignmentMode">assignmentMode</param>
        /// <param name="behaviorDefinitions">behaviorDefinitions</param>
        /// <param name="bookedFromTransactionId">bookedFromTransactionId</param>
        /// <param name="deltaValue">deltaValue</param>
        /// <param name="deserializationType">deserializationType</param>
        /// <param name="id">id</param>
        /// <param name="inputPrice">inputPrice</param>
        /// <param name="inputPriceType">inputPriceType</param>
        /// <param name="items">items</param>
        /// <param name="originalOperationItem">originalOperationItem</param>
        /// <param name="pricing">pricing</param>
        /// <param name="quantity">quantity</param>
        /// <param name="singlePrice">singlePrice</param>
        /// <param name="singlePriceGross">singlePriceGross</param>
        /// <param name="singlePriceNet">singlePriceNet</param>
        /// <param name="singlePriceVat">singlePriceVat</param>
        /// <param name="sortNumber">sortNumber</param>
        /// <param name="text">text</param>
        /// <param name="totalPrice">totalPrice</param>
        /// <param name="totalPriceGross">totalPriceGross</param>
        /// <param name="totalPriceNet">totalPriceNet</param>
        /// <param name="totalPriceVat">totalPriceVat</param>
        /// <param name="transactionItemCollectionId">transactionItemCollectionId</param>
        /// <param name="type">type</param>
        /// <param name="unit">unit</param>
        /// <param name="valueOperator">valueOperator</param>
        //[JsonConstructor]
        public TransactionItemModel(Option<double> amount = default, Option<Guid> articleId = default, Option<List<TransactionItemModel>> assignedTransactionItems = default, Option<ModelAssignmentMode> assignmentMode = default, Option<List<BehaviorDefinitionModel>> behaviorDefinitions = default, Option<Guid> bookedFromTransactionId = default, Option<double> deltaValue = default, Option<string> deserializationType = default, Option<Guid> id = default, Option<double> inputPrice = default, Option<InputPriceType> inputPriceType = default, Option<List<TransactionItemModel>> items = default, Option<TransactionItemModel> originalOperationItem = default, Option<List<StringTransactionPriceObjectModelKeyValuePair>> pricing = default, Option<double> quantity = default, Option<double> singlePrice = default, Option<double> singlePriceGross = default, Option<double> singlePriceNet = default, Option<double> singlePriceVat = default, Option<int> sortNumber = default, Option<string> text = default, Option<double> totalPrice = default, Option<double> totalPriceGross = default, Option<double> totalPriceNet = default, Option<double> totalPriceVat = default, Option<Guid> transactionItemCollectionId = default, Option<TransactionItemTypeModel> type = default, Option<QuantityUnitModel> unit = default, Option<ModelValueOperator> valueOperator = default)
        {
            AmountOption = amount;
            ArticleIdOption = articleId;
            AssignedTransactionItemsOption = assignedTransactionItems;
            AssignmentModeOption = assignmentMode;
            BehaviorDefinitionsOption = behaviorDefinitions;
            BookedFromTransactionIdOption = bookedFromTransactionId;
            DeltaValueOption = deltaValue;
            DeserializationTypeOption = deserializationType;
            IdOption = id;
            InputPriceOption = inputPrice;
            InputPriceTypeOption = inputPriceType;
            ItemsOption = items;
            OriginalOperationItemOption = originalOperationItem;
            PricingOption = pricing;
            QuantityOption = quantity;
            SinglePriceOption = singlePrice;
            SinglePriceGrossOption = singlePriceGross;
            SinglePriceNetOption = singlePriceNet;
            SinglePriceVatOption = singlePriceVat;
            SortNumberOption = sortNumber;
            TextOption = text;
            TotalPriceOption = totalPrice;
            TotalPriceGrossOption = totalPriceGross;
            TotalPriceNetOption = totalPriceNet;
            TotalPriceVatOption = totalPriceVat;
            TransactionItemCollectionIdOption = transactionItemCollectionId;
            TypeOption = type;
            UnitOption = unit;
            ValueOperatorOption = valueOperator;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AssignmentMode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ModelAssignmentMode>))]
        public Option<ModelAssignmentMode> AssignmentModeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssignmentMode
        /// </summary>
        [JsonPropertyName("assignmentMode")]
        public ModelAssignmentMode? AssignmentMode { get { return this.AssignmentModeOption; } set { this.AssignmentModeOption = new Option<ModelAssignmentMode>(value); } }

        /// <summary>
        /// Used to track the state of InputPriceType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<InputPriceType>))]
        public Option<InputPriceType> InputPriceTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets InputPriceType
        /// </summary>
        [JsonPropertyName("inputPriceType")]
        public InputPriceType? InputPriceType { get { return this.InputPriceTypeOption; } set { this.InputPriceTypeOption = new Option<InputPriceType>(value); } }

        /// <summary>
        /// Used to track the state of ValueOperator
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ModelValueOperator>))]
        public Option<ModelValueOperator> ValueOperatorOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValueOperator
        /// </summary>
        [JsonPropertyName("valueOperator")]
        public ModelValueOperator? ValueOperator { get { return this.ValueOperatorOption; } set { this.ValueOperatorOption = new Option<ModelValueOperator>(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> AmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public double? Amount { get { return this. AmountOption; } set { this.AmountOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of ArticleId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ArticleIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ArticleId
        /// </summary>
        [JsonPropertyName("articleId")]
        public Guid? ArticleId { get { return this. ArticleIdOption; } set { this.ArticleIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of AssignedTransactionItems
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<TransactionItemModel>>))]
        public Option<List<TransactionItemModel>> AssignedTransactionItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssignedTransactionItems
        /// </summary>
        [JsonPropertyName("assignedTransactionItems")]
        public List<TransactionItemModel>? AssignedTransactionItems { get { return this. AssignedTransactionItemsOption; } set { this.AssignedTransactionItemsOption = new Option<List<TransactionItemModel>>(value); } }

        /// <summary>
        /// Used to track the state of BehaviorDefinitions
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<BehaviorDefinitionModel>>))]
        public Option<List<BehaviorDefinitionModel>> BehaviorDefinitionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets BehaviorDefinitions
        /// </summary>
        [JsonPropertyName("behaviorDefinitions")]
        public List<BehaviorDefinitionModel>? BehaviorDefinitions { get { return this. BehaviorDefinitionsOption; } set { this.BehaviorDefinitionsOption = new Option<List<BehaviorDefinitionModel>>(value); } }

        /// <summary>
        /// Used to track the state of BookedFromTransactionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> BookedFromTransactionIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets BookedFromTransactionId
        /// </summary>
        [JsonPropertyName("bookedFromTransactionId")]
        public Guid? BookedFromTransactionId { get { return this. BookedFromTransactionIdOption; } set { this.BookedFromTransactionIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of DeltaValue
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> DeltaValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeltaValue
        /// </summary>
        [JsonPropertyName("deltaValue")]
        public double? DeltaValue { get { return this. DeltaValueOption; } set { this.DeltaValueOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of DeserializationType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DeserializationTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeserializationType
        /// </summary>
        [JsonPropertyName("deserializationType")]
        public string? DeserializationType { get { return this. DeserializationTypeOption; } set { this.DeserializationTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of InputPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> InputPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets InputPrice
        /// </summary>
        [JsonPropertyName("inputPrice")]
        public double? InputPrice { get { return this. InputPriceOption; } set { this.InputPriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Items
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<TransactionItemModel>>))]
        public Option<List<TransactionItemModel>> ItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [JsonPropertyName("items")]
        public List<TransactionItemModel>? Items { get { return this. ItemsOption; } set { this.ItemsOption = new Option<List<TransactionItemModel>>(value); } }

        /// <summary>
        /// Used to track the state of OriginalOperationItem
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionItemModel>))]
        public Option<TransactionItemModel> OriginalOperationItemOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginalOperationItem
        /// </summary>
        [JsonPropertyName("originalOperationItem")]
        public TransactionItemModel? OriginalOperationItem { get { return this. OriginalOperationItemOption; } set { this.OriginalOperationItemOption = new Option<TransactionItemModel>(value); } }

        /// <summary>
        /// Used to track the state of Pricing
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<StringTransactionPriceObjectModelKeyValuePair>>))]
        public Option<List<StringTransactionPriceObjectModelKeyValuePair>> PricingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pricing
        /// </summary>
        [JsonPropertyName("pricing")]
        public List<StringTransactionPriceObjectModelKeyValuePair>? Pricing { get { return this. PricingOption; } set { this.PricingOption = new Option<List<StringTransactionPriceObjectModelKeyValuePair>>(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> QuantityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public double? Quantity { get { return this. QuantityOption; } set { this.QuantityOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SinglePrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SinglePriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets SinglePrice
        /// </summary>
        [JsonPropertyName("singlePrice")]
        public double? SinglePrice { get { return this. SinglePriceOption; } set { this.SinglePriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SinglePriceGross
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SinglePriceGrossOption { get; private set; }

        /// <summary>
        /// Gets or Sets SinglePriceGross
        /// </summary>
        [JsonPropertyName("singlePriceGross")]
        public double? SinglePriceGross { get { return this. SinglePriceGrossOption; } set { this.SinglePriceGrossOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SinglePriceNet
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SinglePriceNetOption { get; private set; }

        /// <summary>
        /// Gets or Sets SinglePriceNet
        /// </summary>
        [JsonPropertyName("singlePriceNet")]
        public double? SinglePriceNet { get { return this. SinglePriceNetOption; } set { this.SinglePriceNetOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SinglePriceVat
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SinglePriceVatOption { get; private set; }

        /// <summary>
        /// Gets or Sets SinglePriceVat
        /// </summary>
        [JsonPropertyName("singlePriceVat")]
        public double? SinglePriceVat { get { return this. SinglePriceVatOption; } set { this.SinglePriceVatOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SortNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> SortNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets SortNumber
        /// </summary>
        [JsonPropertyName("sortNumber")]
        public int? SortNumber { get { return this. SortNumberOption; } set { this.SortNumberOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [JsonPropertyName("text")]
        public string? Text { get { return this. TextOption; } set { this.TextOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TotalPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [JsonPropertyName("totalPrice")]
        public double? TotalPrice { get { return this. TotalPriceOption; } set { this.TotalPriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TotalPriceGross
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalPriceGrossOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalPriceGross
        /// </summary>
        [JsonPropertyName("totalPriceGross")]
        public double? TotalPriceGross { get { return this. TotalPriceGrossOption; } set { this.TotalPriceGrossOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TotalPriceNet
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalPriceNetOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalPriceNet
        /// </summary>
        [JsonPropertyName("totalPriceNet")]
        public double? TotalPriceNet { get { return this. TotalPriceNetOption; } set { this.TotalPriceNetOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TotalPriceVat
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalPriceVatOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalPriceVat
        /// </summary>
        [JsonPropertyName("totalPriceVat")]
        public double? TotalPriceVat { get { return this. TotalPriceVatOption; } set { this.TotalPriceVatOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TransactionItemCollectionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TransactionItemCollectionIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TransactionItemCollectionId
        /// </summary>
        [JsonPropertyName("transactionItemCollectionId")]
        public Guid? TransactionItemCollectionId { get { return this. TransactionItemCollectionIdOption; } set { this.TransactionItemCollectionIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionItemTypeModel>))]
        public Option<TransactionItemTypeModel> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TransactionItemTypeModel? Type { get { return this. TypeOption; } set { this.TypeOption = new Option<TransactionItemTypeModel>(value); } }

        /// <summary>
        /// Used to track the state of Unit
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<QuantityUnitModel>))]
        public Option<QuantityUnitModel> UnitOption { get; private set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [JsonPropertyName("unit")]
        public QuantityUnitModel? Unit { get { return this. UnitOption; } set { this.UnitOption = new Option<QuantityUnitModel>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionItemModel {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  AssignedTransactionItems: ").Append(AssignedTransactionItems).Append("\n");
            sb.Append("  AssignmentMode: ").Append(AssignmentMode).Append("\n");
            sb.Append("  BehaviorDefinitions: ").Append(BehaviorDefinitions).Append("\n");
            sb.Append("  BookedFromTransactionId: ").Append(BookedFromTransactionId).Append("\n");
            sb.Append("  DeltaValue: ").Append(DeltaValue).Append("\n");
            sb.Append("  DeserializationType: ").Append(DeserializationType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InputPrice: ").Append(InputPrice).Append("\n");
            sb.Append("  InputPriceType: ").Append(InputPriceType).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  OriginalOperationItem: ").Append(OriginalOperationItem).Append("\n");
            sb.Append("  Pricing: ").Append(Pricing).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SinglePrice: ").Append(SinglePrice).Append("\n");
            sb.Append("  SinglePriceGross: ").Append(SinglePriceGross).Append("\n");
            sb.Append("  SinglePriceNet: ").Append(SinglePriceNet).Append("\n");
            sb.Append("  SinglePriceVat: ").Append(SinglePriceVat).Append("\n");
            sb.Append("  SortNumber: ").Append(SortNumber).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  TotalPriceGross: ").Append(TotalPriceGross).Append("\n");
            sb.Append("  TotalPriceNet: ").Append(TotalPriceNet).Append("\n");
            sb.Append("  TotalPriceVat: ").Append(TotalPriceVat).Append("\n");
            sb.Append("  TransactionItemCollectionId: ").Append(TransactionItemCollectionId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  ValueOperator: ").Append(ValueOperator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionItemModel" />
    /// </summary>
    public class TransactionItemModelJsonConverter : JsonConverter<TransactionItemModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransactionItemModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionItemModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double> amount = default;
            Option<Guid> articleId = default;
            Option<List<TransactionItemModel>> assignedTransactionItems = default;
            Option<ModelAssignmentMode> assignmentMode = default;
            Option<List<BehaviorDefinitionModel>> behaviorDefinitions = default;
            Option<Guid> bookedFromTransactionId = default;
            Option<double> deltaValue = default;
            Option<string> deserializationType = default;
            Option<Guid> id = default;
            Option<double> inputPrice = default;
            Option<InputPriceType> inputPriceType = default;
            Option<List<TransactionItemModel>> items = default;
            Option<TransactionItemModel> originalOperationItem = default;
            Option<List<StringTransactionPriceObjectModelKeyValuePair>> pricing = default;
            Option<double> quantity = default;
            Option<double> singlePrice = default;
            Option<double> singlePriceGross = default;
            Option<double> singlePriceNet = default;
            Option<double> singlePriceVat = default;
            Option<int> sortNumber = default;
            Option<string> text = default;
            Option<double> totalPrice = default;
            Option<double> totalPriceGross = default;
            Option<double> totalPriceNet = default;
            Option<double> totalPriceVat = default;
            Option<Guid> transactionItemCollectionId = default;
            Option<TransactionItemTypeModel> type = default;
            Option<QuantityUnitModel> unit = default;
            Option<ModelValueOperator> valueOperator = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "articleId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                articleId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "assignedTransactionItems":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                assignedTransactionItems = new Option<List<TransactionItemModel>>(JsonSerializer.Deserialize<List<TransactionItemModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "assignmentMode":
                            string? assignmentModeRawValue = utf8JsonReader.GetString();
                            if (assignmentModeRawValue != null)
                                assignmentMode = new Option<ModelAssignmentMode>(ModelAssignmentModeValueConverter.FromStringOrDefault(assignmentModeRawValue));
                            break;
                        case "behaviorDefinitions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                behaviorDefinitions = new Option<List<BehaviorDefinitionModel>>(JsonSerializer.Deserialize<List<BehaviorDefinitionModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bookedFromTransactionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bookedFromTransactionId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "deltaValue":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deltaValue = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "deserializationType":
                            deserializationType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "inputPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inputPrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "inputPriceType":
                            string? inputPriceTypeRawValue = utf8JsonReader.GetString();
                            if (inputPriceTypeRawValue != null)
                                inputPriceType = new Option<InputPriceType>(InputPriceTypeValueConverter.FromStringOrDefault(inputPriceTypeRawValue));
                            break;
                        case "items":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                items = new Option<List<TransactionItemModel>>(JsonSerializer.Deserialize<List<TransactionItemModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "originalOperationItem":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originalOperationItem = new Option<TransactionItemModel>(JsonSerializer.Deserialize<TransactionItemModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pricing":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pricing = new Option<List<StringTransactionPriceObjectModelKeyValuePair>>(JsonSerializer.Deserialize<List<StringTransactionPriceObjectModelKeyValuePair>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "singlePrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                singlePrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "singlePriceGross":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                singlePriceGross = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "singlePriceNet":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                singlePriceNet = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "singlePriceVat":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                singlePriceVat = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "sortNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sortNumber = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "text":
                            text = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "totalPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalPriceGross":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPriceGross = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalPriceNet":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPriceNet = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalPriceVat":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPriceVat = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "transactionItemCollectionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transactionItemCollectionId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "type":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                type = new Option<TransactionItemTypeModel>(JsonSerializer.Deserialize<TransactionItemTypeModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "unit":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                unit = new Option<QuantityUnitModel>(JsonSerializer.Deserialize<QuantityUnitModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "valueOperator":
                            string? valueOperatorRawValue = utf8JsonReader.GetString();
                            if (valueOperatorRawValue != null)
                                valueOperator = new Option<ModelValueOperator>(ModelValueOperatorValueConverter.FromStringOrDefault(valueOperatorRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (assignmentMode.IsSet && assignmentMode.Value == null)
                throw new ArgumentNullException(nameof(assignmentMode), "Property is not nullable for class TransactionItemModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TransactionItemModel.");

            if (inputPriceType.IsSet && inputPriceType.Value == null)
                throw new ArgumentNullException(nameof(inputPriceType), "Property is not nullable for class TransactionItemModel.");

            if (originalOperationItem.IsSet && originalOperationItem.Value == null)
                throw new ArgumentNullException(nameof(originalOperationItem), "Property is not nullable for class TransactionItemModel.");

            if (sortNumber.IsSet && sortNumber.Value == null)
                throw new ArgumentNullException(nameof(sortNumber), "Property is not nullable for class TransactionItemModel.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class TransactionItemModel.");

            if (unit.IsSet && unit.Value == null)
                throw new ArgumentNullException(nameof(unit), "Property is not nullable for class TransactionItemModel.");

            if (valueOperator.IsSet && valueOperator.Value == null)
                throw new ArgumentNullException(nameof(valueOperator), "Property is not nullable for class TransactionItemModel.");

            //2return new TransactionItemModel(amount, articleId, assignedTransactionItems, assignmentMode, behaviorDefinitions, bookedFromTransactionId, deltaValue, deserializationType, id, inputPrice, inputPriceType, items, originalOperationItem, pricing, quantity, singlePrice, singlePriceGross, singlePriceNet, singlePriceVat, sortNumber, text, totalPrice, totalPriceGross, totalPriceNet, totalPriceVat, transactionItemCollectionId, type, unit, valueOperator);
            return new TransactionItemModel(amount, articleId, assignedTransactionItems, assignmentMode, behaviorDefinitions, bookedFromTransactionId, deltaValue, deserializationType, id, inputPrice, inputPriceType, items, originalOperationItem, pricing, quantity, singlePrice, singlePriceGross, singlePriceNet, singlePriceVat, sortNumber, text, totalPrice, totalPriceGross, totalPriceNet, totalPriceVat, transactionItemCollectionId, type, unit, valueOperator);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionItemModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionItemModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionItemModel transactionItemModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, transactionItemModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionItemModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionItemModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TransactionItemModel transactionItemModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionItemModel.OriginalOperationItemOption.IsSet && transactionItemModel.OriginalOperationItem == null)
                throw new ArgumentNullException(nameof(transactionItemModel.OriginalOperationItem), "Property is required for class TransactionItemModel.");

            if (transactionItemModel.TypeOption.IsSet && transactionItemModel.Type == null)
                throw new ArgumentNullException(nameof(transactionItemModel.Type), "Property is required for class TransactionItemModel.");

            if (transactionItemModel.UnitOption.IsSet && transactionItemModel.Unit == null)
                throw new ArgumentNullException(nameof(transactionItemModel.Unit), "Property is required for class TransactionItemModel.");

            if (transactionItemModel.AmountOption.IsSet)
                if (transactionItemModel.AmountOption.Value != null)
                {
                    writer.WriteNumber("amount", transactionItemModel.AmountOption!.Value);
                    //var __value = transactionItemModel.AmountOption.Value;
                    //writer.WriteString("amount", __value);
                }
                else
                    writer.WriteNull("amount");

            if (transactionItemModel.ArticleIdOption.IsSet)
                if (transactionItemModel.ArticleIdOption.Value != null)
                {
                    writer.WriteString("articleId", transactionItemModel.ArticleIdOption!.Value);
                    //var __value = transactionItemModel.ArticleIdOption.Value;
                    //writer.WriteString("articleId", __value);
                }
                else
                    writer.WriteNull("articleId");

            if (transactionItemModel.AssignedTransactionItemsOption.IsSet)
                if (transactionItemModel.AssignedTransactionItemsOption.Value != null)
                {
                    writer.WritePropertyName("assignedTransactionItems");
                    JsonSerializer.Serialize(writer, transactionItemModel.AssignedTransactionItems, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("assignedTransactionItems");
            if (transactionItemModel.AssignmentModeOption.IsSet)
            {
                var assignmentModeRawValue = ModelAssignmentModeValueConverter.ToJsonValue(transactionItemModel.AssignmentMode!.Value);
                writer.WriteNumber("assignmentMode", assignmentModeRawValue);
            }
            if (transactionItemModel.BehaviorDefinitionsOption.IsSet)
                if (transactionItemModel.BehaviorDefinitionsOption.Value != null)
                {
                    writer.WritePropertyName("behaviorDefinitions");
                    JsonSerializer.Serialize(writer, transactionItemModel.BehaviorDefinitions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("behaviorDefinitions");
            if (transactionItemModel.BookedFromTransactionIdOption.IsSet)
                if (transactionItemModel.BookedFromTransactionIdOption.Value != null)
                {
                    writer.WriteString("bookedFromTransactionId", transactionItemModel.BookedFromTransactionIdOption!.Value);
                    //var __value = transactionItemModel.BookedFromTransactionIdOption.Value;
                    //writer.WriteString("bookedFromTransactionId", __value);
                }
                else
                    writer.WriteNull("bookedFromTransactionId");

            if (transactionItemModel.DeltaValueOption.IsSet)
                if (transactionItemModel.DeltaValueOption.Value != null)
                {
                    writer.WriteNumber("deltaValue", transactionItemModel.DeltaValueOption!.Value);
                    //var __value = transactionItemModel.DeltaValueOption.Value;
                    //writer.WriteString("deltaValue", __value);
                }
                else
                    writer.WriteNull("deltaValue");

            if (transactionItemModel.DeserializationTypeOption.IsSet)
                if (transactionItemModel.DeserializationTypeOption.Value != null)
                {
                    writer.WriteString("deserializationType", transactionItemModel.DeserializationType);
                    //var __value = transactionItemModel.DeserializationTypeOption.Value;
                    //writer.WriteString("deserializationType", __value);
                }
                else
                    writer.WriteNull("deserializationType");

            if (transactionItemModel.IdOption.IsSet)
                writer.WriteString("id", transactionItemModel.IdOption!.Value);

            if (transactionItemModel.InputPriceOption.IsSet)
                if (transactionItemModel.InputPriceOption.Value != null)
                {
                    writer.WriteNumber("inputPrice", transactionItemModel.InputPriceOption!.Value);
                    //var __value = transactionItemModel.InputPriceOption.Value;
                    //writer.WriteString("inputPrice", __value);
                }
                else
                    writer.WriteNull("inputPrice");

            if (transactionItemModel.InputPriceTypeOption.IsSet)
            {
                var inputPriceTypeRawValue = InputPriceTypeValueConverter.ToJsonValue(transactionItemModel.InputPriceType!.Value);
                writer.WriteNumber("inputPriceType", inputPriceTypeRawValue);
            }
            if (transactionItemModel.ItemsOption.IsSet)
                if (transactionItemModel.ItemsOption.Value != null)
                {
                    writer.WritePropertyName("items");
                    JsonSerializer.Serialize(writer, transactionItemModel.Items, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items");
            if (transactionItemModel.OriginalOperationItemOption.IsSet)
            {
                writer.WritePropertyName("originalOperationItem");
                JsonSerializer.Serialize(writer, transactionItemModel.OriginalOperationItem, jsonSerializerOptions);
            }
            if (transactionItemModel.PricingOption.IsSet)
                if (transactionItemModel.PricingOption.Value != null)
                {
                    writer.WritePropertyName("pricing");
                    JsonSerializer.Serialize(writer, transactionItemModel.Pricing, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("pricing");
            if (transactionItemModel.QuantityOption.IsSet)
                if (transactionItemModel.QuantityOption.Value != null)
                {
                    writer.WriteNumber("quantity", transactionItemModel.QuantityOption!.Value);
                    //var __value = transactionItemModel.QuantityOption.Value;
                    //writer.WriteString("quantity", __value);
                }
                else
                    writer.WriteNull("quantity");

            if (transactionItemModel.SinglePriceOption.IsSet)
                if (transactionItemModel.SinglePriceOption.Value != null)
                {
                    writer.WriteNumber("singlePrice", transactionItemModel.SinglePriceOption!.Value);
                    //var __value = transactionItemModel.SinglePriceOption.Value;
                    //writer.WriteString("singlePrice", __value);
                }
                else
                    writer.WriteNull("singlePrice");

            if (transactionItemModel.SinglePriceGrossOption.IsSet)
                if (transactionItemModel.SinglePriceGrossOption.Value != null)
                {
                    writer.WriteNumber("singlePriceGross", transactionItemModel.SinglePriceGrossOption!.Value);
                    //var __value = transactionItemModel.SinglePriceGrossOption.Value;
                    //writer.WriteString("singlePriceGross", __value);
                }
                else
                    writer.WriteNull("singlePriceGross");

            if (transactionItemModel.SinglePriceNetOption.IsSet)
                if (transactionItemModel.SinglePriceNetOption.Value != null)
                {
                    writer.WriteNumber("singlePriceNet", transactionItemModel.SinglePriceNetOption!.Value);
                    //var __value = transactionItemModel.SinglePriceNetOption.Value;
                    //writer.WriteString("singlePriceNet", __value);
                }
                else
                    writer.WriteNull("singlePriceNet");

            if (transactionItemModel.SinglePriceVatOption.IsSet)
                if (transactionItemModel.SinglePriceVatOption.Value != null)
                {
                    writer.WriteNumber("singlePriceVat", transactionItemModel.SinglePriceVatOption!.Value);
                    //var __value = transactionItemModel.SinglePriceVatOption.Value;
                    //writer.WriteString("singlePriceVat", __value);
                }
                else
                    writer.WriteNull("singlePriceVat");

            if (transactionItemModel.SortNumberOption.IsSet)
                writer.WriteNumber("sortNumber", transactionItemModel.SortNumberOption!.Value);

            if (transactionItemModel.TextOption.IsSet)
                if (transactionItemModel.TextOption.Value != null)
                {
                    writer.WriteString("text", transactionItemModel.Text);
                    //var __value = transactionItemModel.TextOption.Value;
                    //writer.WriteString("text", __value);
                }
                else
                    writer.WriteNull("text");

            if (transactionItemModel.TotalPriceOption.IsSet)
                if (transactionItemModel.TotalPriceOption.Value != null)
                {
                    writer.WriteNumber("totalPrice", transactionItemModel.TotalPriceOption!.Value);
                    //var __value = transactionItemModel.TotalPriceOption.Value;
                    //writer.WriteString("totalPrice", __value);
                }
                else
                    writer.WriteNull("totalPrice");

            if (transactionItemModel.TotalPriceGrossOption.IsSet)
                if (transactionItemModel.TotalPriceGrossOption.Value != null)
                {
                    writer.WriteNumber("totalPriceGross", transactionItemModel.TotalPriceGrossOption!.Value);
                    //var __value = transactionItemModel.TotalPriceGrossOption.Value;
                    //writer.WriteString("totalPriceGross", __value);
                }
                else
                    writer.WriteNull("totalPriceGross");

            if (transactionItemModel.TotalPriceNetOption.IsSet)
                if (transactionItemModel.TotalPriceNetOption.Value != null)
                {
                    writer.WriteNumber("totalPriceNet", transactionItemModel.TotalPriceNetOption!.Value);
                    //var __value = transactionItemModel.TotalPriceNetOption.Value;
                    //writer.WriteString("totalPriceNet", __value);
                }
                else
                    writer.WriteNull("totalPriceNet");

            if (transactionItemModel.TotalPriceVatOption.IsSet)
                if (transactionItemModel.TotalPriceVatOption.Value != null)
                {
                    writer.WriteNumber("totalPriceVat", transactionItemModel.TotalPriceVatOption!.Value);
                    //var __value = transactionItemModel.TotalPriceVatOption.Value;
                    //writer.WriteString("totalPriceVat", __value);
                }
                else
                    writer.WriteNull("totalPriceVat");

            if (transactionItemModel.TransactionItemCollectionIdOption.IsSet)
                if (transactionItemModel.TransactionItemCollectionIdOption.Value != null)
                {
                    writer.WriteString("transactionItemCollectionId", transactionItemModel.TransactionItemCollectionIdOption!.Value);
                    //var __value = transactionItemModel.TransactionItemCollectionIdOption.Value;
                    //writer.WriteString("transactionItemCollectionId", __value);
                }
                else
                    writer.WriteNull("transactionItemCollectionId");

            if (transactionItemModel.TypeOption.IsSet)
            {
                writer.WritePropertyName("type");
                JsonSerializer.Serialize(writer, transactionItemModel.Type, jsonSerializerOptions);
            }
            if (transactionItemModel.UnitOption.IsSet)
            {
                writer.WritePropertyName("unit");
                JsonSerializer.Serialize(writer, transactionItemModel.Unit, jsonSerializerOptions);
            }
            if (transactionItemModel.ValueOperatorOption.IsSet)
            {
                var valueOperatorRawValue = ModelValueOperatorValueConverter.ToJsonValue(transactionItemModel.ValueOperator!.Value);
                writer.WriteNumber("valueOperator", valueOperatorRawValue);
            }
        }
    }
}
