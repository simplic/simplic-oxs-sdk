/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// Represents a request to create a personal account.
    /// </summary>
    [DataContract(Name = "CreatePersonalAccountRequest")]
    public partial class CreatePersonalAccountRequest : IEquatable<CreatePersonalAccountRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePersonalAccountRequest" /> class.
        /// </summary>
        /// <param name="addressContactIds">Gets or sets the contact id&#39;s for the addresses contained in the personal account..</param>
        /// <param name="saleTermsOfPaymentId">Gets or sets the id of the sale terms of payment..</param>
        /// <param name="purchaseTermsOfPaymentId">Gets or sets the id of the purchase terms of payment..</param>
        /// <param name="taxGroupId">Gets or sets the id of the tax group..</param>
        /// <param name="number">gets or sets the number..</param>
        /// <param name="vatId">Gets or sets the vat id..</param>
        /// <param name="type">Gets or sets the personal account type. (creditor / debitor).</param>
        /// <param name="creditLimit">creditLimit.</param>
        public CreatePersonalAccountRequest(List<Guid> addressContactIds = default(List<Guid>), Guid? saleTermsOfPaymentId = default(Guid?), Guid? purchaseTermsOfPaymentId = default(Guid?), Guid? taxGroupId = default(Guid?), string number = default(string), string vatId = default(string), string type = default(string), CreditLimitModel creditLimit = default(CreditLimitModel))
        {
            this.AddressContactIds = addressContactIds;
            this.SaleTermsOfPaymentId = saleTermsOfPaymentId;
            this.PurchaseTermsOfPaymentId = purchaseTermsOfPaymentId;
            this.TaxGroupId = taxGroupId;
            this.Number = number;
            this.VatId = vatId;
            this.Type = type;
            this.CreditLimit = creditLimit;
        }

        /// <summary>
        /// Gets or sets the contact id&#39;s for the addresses contained in the personal account.
        /// </summary>
        /// <value>Gets or sets the contact id&#39;s for the addresses contained in the personal account.</value>
        [DataMember(Name = "addressContactIds", EmitDefaultValue = true)]
        public List<Guid> AddressContactIds { get; set; }

        /// <summary>
        /// Gets or sets the id of the sale terms of payment.
        /// </summary>
        /// <value>Gets or sets the id of the sale terms of payment.</value>
        [DataMember(Name = "saleTermsOfPaymentId", EmitDefaultValue = true)]
        public Guid? SaleTermsOfPaymentId { get; set; }

        /// <summary>
        /// Gets or sets the id of the purchase terms of payment.
        /// </summary>
        /// <value>Gets or sets the id of the purchase terms of payment.</value>
        [DataMember(Name = "purchaseTermsOfPaymentId", EmitDefaultValue = true)]
        public Guid? PurchaseTermsOfPaymentId { get; set; }

        /// <summary>
        /// Gets or sets the id of the tax group.
        /// </summary>
        /// <value>Gets or sets the id of the tax group.</value>
        [DataMember(Name = "taxGroupId", EmitDefaultValue = true)]
        public Guid? TaxGroupId { get; set; }

        /// <summary>
        /// gets or sets the number.
        /// </summary>
        /// <value>gets or sets the number.</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets the vat id.
        /// </summary>
        /// <value>Gets or sets the vat id.</value>
        [DataMember(Name = "vatId", EmitDefaultValue = true)]
        public string VatId { get; set; }

        /// <summary>
        /// Gets or sets the personal account type. (creditor / debitor)
        /// </summary>
        /// <value>Gets or sets the personal account type. (creditor / debitor)</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets CreditLimit
        /// </summary>
        [DataMember(Name = "creditLimit", EmitDefaultValue = false)]
        public CreditLimitModel CreditLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePersonalAccountRequest {\n");
            sb.Append("  AddressContactIds: ").Append(AddressContactIds).Append("\n");
            sb.Append("  SaleTermsOfPaymentId: ").Append(SaleTermsOfPaymentId).Append("\n");
            sb.Append("  PurchaseTermsOfPaymentId: ").Append(PurchaseTermsOfPaymentId).Append("\n");
            sb.Append("  TaxGroupId: ").Append(TaxGroupId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePersonalAccountRequest);
        }

        /// <summary>
        /// Returns true if CreatePersonalAccountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePersonalAccountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePersonalAccountRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AddressContactIds == input.AddressContactIds ||
                    this.AddressContactIds != null &&
                    input.AddressContactIds != null &&
                    this.AddressContactIds.SequenceEqual(input.AddressContactIds)
                ) && 
                (
                    this.SaleTermsOfPaymentId == input.SaleTermsOfPaymentId ||
                    (this.SaleTermsOfPaymentId != null &&
                    this.SaleTermsOfPaymentId.Equals(input.SaleTermsOfPaymentId))
                ) && 
                (
                    this.PurchaseTermsOfPaymentId == input.PurchaseTermsOfPaymentId ||
                    (this.PurchaseTermsOfPaymentId != null &&
                    this.PurchaseTermsOfPaymentId.Equals(input.PurchaseTermsOfPaymentId))
                ) && 
                (
                    this.TaxGroupId == input.TaxGroupId ||
                    (this.TaxGroupId != null &&
                    this.TaxGroupId.Equals(input.TaxGroupId))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.VatId == input.VatId ||
                    (this.VatId != null &&
                    this.VatId.Equals(input.VatId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CreditLimit == input.CreditLimit ||
                    (this.CreditLimit != null &&
                    this.CreditLimit.Equals(input.CreditLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressContactIds != null)
                {
                    hashCode = (hashCode * 59) + this.AddressContactIds.GetHashCode();
                }
                if (this.SaleTermsOfPaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.SaleTermsOfPaymentId.GetHashCode();
                }
                if (this.PurchaseTermsOfPaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseTermsOfPaymentId.GetHashCode();
                }
                if (this.TaxGroupId != null)
                {
                    hashCode = (hashCode * 59) + this.TaxGroupId.GetHashCode();
                }
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.VatId != null)
                {
                    hashCode = (hashCode * 59) + this.VatId.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.CreditLimit != null)
                {
                    hashCode = (hashCode * 59) + this.CreditLimit.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
