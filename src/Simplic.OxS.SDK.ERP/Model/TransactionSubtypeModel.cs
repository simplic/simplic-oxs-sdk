// <auto-generated>
/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// TransactionSubtypeModel
    /// </summary>
    public partial class TransactionSubtypeModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TransactionSubtypeModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSubtypeModel" /> class.
        /// </summary>
        /// <param name="accountingExportGroup">accountingExportGroup</param>
        /// <param name="archiveMode">archiveMode</param>
        /// <param name="barcodeTemplate">barcodeTemplate</param>
        /// <param name="bookingTextTemplate">bookingTextTemplate</param>
        /// <param name="customField1Template">customField1Template</param>
        /// <param name="customField2Template">customField2Template</param>
        /// <param name="documentTitleTemplate">documentTitleTemplate</param>
        /// <param name="dueDateMode">dueDateMode</param>
        /// <param name="exportCostQuantity">exportCostQuantity</param>
        /// <param name="id">id</param>
        /// <param name="isDeleted">isDeleted</param>
        /// <param name="name">name</param>
        /// <param name="number">number</param>
        /// <param name="outputConfiguration">outputConfiguration</param>
        /// <param name="report">report</param>
        /// <param name="sequence">sequence</param>
        /// <param name="summarizeBookings">summarizeBookings</param>
        /// <param name="transactionNumberDateSource">transactionNumberDateSource</param>
        /// <param name="useNumberReservation">useNumberReservation</param>
        //[JsonConstructor]
        public TransactionSubtypeModel(Option<string> accountingExportGroup = default, Option<TransactionSubtypeArchiveMode> archiveMode = default, Option<string> barcodeTemplate = default, Option<string> bookingTextTemplate = default, Option<string> customField1Template = default, Option<string> customField2Template = default, Option<string> documentTitleTemplate = default, Option<DueDateMode> dueDateMode = default, Option<ExportCostQuantityType> exportCostQuantity = default, Option<Guid> id = default, Option<bool> isDeleted = default, Option<string> name = default, Option<int> number = default, Option<TransactionSubtypeOutputConfigurationModel> outputConfiguration = default, Option<TransactionSubtypeReportModel> report = default, Option<TransactionSubtypeSequenceModel> sequence = default, Option<bool> summarizeBookings = default, Option<TransactionNumberDateSourceType> transactionNumberDateSource = default, Option<bool> useNumberReservation = default)
        {
            AccountingExportGroupOption = accountingExportGroup;
            ArchiveModeOption = archiveMode;
            BarcodeTemplateOption = barcodeTemplate;
            BookingTextTemplateOption = bookingTextTemplate;
            CustomField1TemplateOption = customField1Template;
            CustomField2TemplateOption = customField2Template;
            DocumentTitleTemplateOption = documentTitleTemplate;
            DueDateModeOption = dueDateMode;
            ExportCostQuantityOption = exportCostQuantity;
            IdOption = id;
            IsDeletedOption = isDeleted;
            NameOption = name;
            NumberOption = number;
            OutputConfigurationOption = outputConfiguration;
            ReportOption = report;
            SequenceOption = sequence;
            SummarizeBookingsOption = summarizeBookings;
            TransactionNumberDateSourceOption = transactionNumberDateSource;
            UseNumberReservationOption = useNumberReservation;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ArchiveMode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionSubtypeArchiveMode>))]
        public Option<TransactionSubtypeArchiveMode> ArchiveModeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ArchiveMode
        /// </summary>
        [JsonPropertyName("archiveMode")]
        public TransactionSubtypeArchiveMode? ArchiveMode { get { return this.ArchiveModeOption; } set { this.ArchiveModeOption = new Option<TransactionSubtypeArchiveMode>(value); } }

        /// <summary>
        /// Used to track the state of DueDateMode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DueDateMode>))]
        public Option<DueDateMode> DueDateModeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DueDateMode
        /// </summary>
        [JsonPropertyName("dueDateMode")]
        public DueDateMode? DueDateMode { get { return this.DueDateModeOption; } set { this.DueDateModeOption = new Option<DueDateMode>(value); } }

        /// <summary>
        /// Used to track the state of ExportCostQuantity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ExportCostQuantityType>))]
        public Option<ExportCostQuantityType> ExportCostQuantityOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExportCostQuantity
        /// </summary>
        [JsonPropertyName("exportCostQuantity")]
        public ExportCostQuantityType? ExportCostQuantity { get { return this.ExportCostQuantityOption; } set { this.ExportCostQuantityOption = new Option<ExportCostQuantityType>(value); } }

        /// <summary>
        /// Used to track the state of TransactionNumberDateSource
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionNumberDateSourceType>))]
        public Option<TransactionNumberDateSourceType> TransactionNumberDateSourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TransactionNumberDateSource
        /// </summary>
        [JsonPropertyName("transactionNumberDateSource")]
        public TransactionNumberDateSourceType? TransactionNumberDateSource { get { return this.TransactionNumberDateSourceOption; } set { this.TransactionNumberDateSourceOption = new Option<TransactionNumberDateSourceType>(value); } }

        /// <summary>
        /// Used to track the state of AccountingExportGroup
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> AccountingExportGroupOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccountingExportGroup
        /// </summary>
        [JsonPropertyName("accountingExportGroup")]
        public string? AccountingExportGroup { get { return this. AccountingExportGroupOption; } set { this.AccountingExportGroupOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BarcodeTemplate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> BarcodeTemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets BarcodeTemplate
        /// </summary>
        [JsonPropertyName("barcodeTemplate")]
        public string? BarcodeTemplate { get { return this. BarcodeTemplateOption; } set { this.BarcodeTemplateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BookingTextTemplate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> BookingTextTemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets BookingTextTemplate
        /// </summary>
        [JsonPropertyName("bookingTextTemplate")]
        public string? BookingTextTemplate { get { return this. BookingTextTemplateOption; } set { this.BookingTextTemplateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CustomField1Template
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CustomField1TemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomField1Template
        /// </summary>
        [JsonPropertyName("customField1Template")]
        public string? CustomField1Template { get { return this. CustomField1TemplateOption; } set { this.CustomField1TemplateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CustomField2Template
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CustomField2TemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomField2Template
        /// </summary>
        [JsonPropertyName("customField2Template")]
        public string? CustomField2Template { get { return this. CustomField2TemplateOption; } set { this.CustomField2TemplateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DocumentTitleTemplate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DocumentTitleTemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentTitleTemplate
        /// </summary>
        [JsonPropertyName("documentTitleTemplate")]
        public string? DocumentTitleTemplate { get { return this. DocumentTitleTemplateOption; } set { this.DocumentTitleTemplateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public int? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of OutputConfiguration
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionSubtypeOutputConfigurationModel>))]
        public Option<TransactionSubtypeOutputConfigurationModel> OutputConfigurationOption { get; private set; }

        /// <summary>
        /// Gets or Sets OutputConfiguration
        /// </summary>
        [JsonPropertyName("outputConfiguration")]
        public TransactionSubtypeOutputConfigurationModel? OutputConfiguration { get { return this. OutputConfigurationOption; } set { this.OutputConfigurationOption = new Option<TransactionSubtypeOutputConfigurationModel>(value); } }

        /// <summary>
        /// Used to track the state of Report
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionSubtypeReportModel>))]
        public Option<TransactionSubtypeReportModel> ReportOption { get; private set; }

        /// <summary>
        /// Gets or Sets Report
        /// </summary>
        [JsonPropertyName("report")]
        public TransactionSubtypeReportModel? Report { get { return this. ReportOption; } set { this.ReportOption = new Option<TransactionSubtypeReportModel>(value); } }

        /// <summary>
        /// Used to track the state of Sequence
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionSubtypeSequenceModel>))]
        public Option<TransactionSubtypeSequenceModel> SequenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sequence
        /// </summary>
        [JsonPropertyName("sequence")]
        public TransactionSubtypeSequenceModel? Sequence { get { return this. SequenceOption; } set { this.SequenceOption = new Option<TransactionSubtypeSequenceModel>(value); } }

        /// <summary>
        /// Used to track the state of SummarizeBookings
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> SummarizeBookingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SummarizeBookings
        /// </summary>
        [JsonPropertyName("summarizeBookings")]
        public bool? SummarizeBookings { get { return this. SummarizeBookingsOption; } set { this.SummarizeBookingsOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of UseNumberReservation
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> UseNumberReservationOption { get; private set; }

        /// <summary>
        /// Gets or Sets UseNumberReservation
        /// </summary>
        [JsonPropertyName("useNumberReservation")]
        public bool? UseNumberReservation { get { return this. UseNumberReservationOption; } set { this.UseNumberReservationOption = new Option<bool>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionSubtypeModel {\n");
            sb.Append("  AccountingExportGroup: ").Append(AccountingExportGroup).Append("\n");
            sb.Append("  ArchiveMode: ").Append(ArchiveMode).Append("\n");
            sb.Append("  BarcodeTemplate: ").Append(BarcodeTemplate).Append("\n");
            sb.Append("  BookingTextTemplate: ").Append(BookingTextTemplate).Append("\n");
            sb.Append("  CustomField1Template: ").Append(CustomField1Template).Append("\n");
            sb.Append("  CustomField2Template: ").Append(CustomField2Template).Append("\n");
            sb.Append("  DocumentTitleTemplate: ").Append(DocumentTitleTemplate).Append("\n");
            sb.Append("  DueDateMode: ").Append(DueDateMode).Append("\n");
            sb.Append("  ExportCostQuantity: ").Append(ExportCostQuantity).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OutputConfiguration: ").Append(OutputConfiguration).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  SummarizeBookings: ").Append(SummarizeBookings).Append("\n");
            sb.Append("  TransactionNumberDateSource: ").Append(TransactionNumberDateSource).Append("\n");
            sb.Append("  UseNumberReservation: ").Append(UseNumberReservation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionSubtypeModel" />
    /// </summary>
    public class TransactionSubtypeModelJsonConverter : JsonConverter<TransactionSubtypeModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransactionSubtypeModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionSubtypeModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> accountingExportGroup = default;
            Option<TransactionSubtypeArchiveMode> archiveMode = default;
            Option<string> barcodeTemplate = default;
            Option<string> bookingTextTemplate = default;
            Option<string> customField1Template = default;
            Option<string> customField2Template = default;
            Option<string> documentTitleTemplate = default;
            Option<DueDateMode> dueDateMode = default;
            Option<ExportCostQuantityType> exportCostQuantity = default;
            Option<Guid> id = default;
            Option<bool> isDeleted = default;
            Option<string> name = default;
            Option<int> number = default;
            Option<TransactionSubtypeOutputConfigurationModel> outputConfiguration = default;
            Option<TransactionSubtypeReportModel> report = default;
            Option<TransactionSubtypeSequenceModel> sequence = default;
            Option<bool> summarizeBookings = default;
            Option<TransactionNumberDateSourceType> transactionNumberDateSource = default;
            Option<bool> useNumberReservation = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountingExportGroup":
                            accountingExportGroup = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "archiveMode":
                            string? archiveModeRawValue = utf8JsonReader.GetString();
                            if (archiveModeRawValue != null)
                                archiveMode = new Option<TransactionSubtypeArchiveMode>(TransactionSubtypeArchiveModeValueConverter.FromStringOrDefault(archiveModeRawValue));
                            break;
                        case "barcodeTemplate":
                            barcodeTemplate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bookingTextTemplate":
                            bookingTextTemplate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "customField1Template":
                            customField1Template = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "customField2Template":
                            customField2Template = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "documentTitleTemplate":
                            documentTitleTemplate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dueDateMode":
                            string? dueDateModeRawValue = utf8JsonReader.GetString();
                            if (dueDateModeRawValue != null)
                                dueDateMode = new Option<DueDateMode>(DueDateModeValueConverter.FromStringOrDefault(dueDateModeRawValue));
                            break;
                        case "exportCostQuantity":
                            string? exportCostQuantityRawValue = utf8JsonReader.GetString();
                            if (exportCostQuantityRawValue != null)
                                exportCostQuantity = new Option<ExportCostQuantityType>(ExportCostQuantityTypeValueConverter.FromStringOrDefault(exportCostQuantityRawValue));
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                number = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "outputConfiguration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                outputConfiguration = new Option<TransactionSubtypeOutputConfigurationModel>(JsonSerializer.Deserialize<TransactionSubtypeOutputConfigurationModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "report":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                report = new Option<TransactionSubtypeReportModel>(JsonSerializer.Deserialize<TransactionSubtypeReportModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sequence":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sequence = new Option<TransactionSubtypeSequenceModel>(JsonSerializer.Deserialize<TransactionSubtypeSequenceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "summarizeBookings":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                summarizeBookings = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "transactionNumberDateSource":
                            string? transactionNumberDateSourceRawValue = utf8JsonReader.GetString();
                            if (transactionNumberDateSourceRawValue != null)
                                transactionNumberDateSource = new Option<TransactionNumberDateSourceType>(TransactionNumberDateSourceTypeValueConverter.FromStringOrDefault(transactionNumberDateSourceRawValue));
                            break;
                        case "useNumberReservation":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                useNumberReservation = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (archiveMode.IsSet && archiveMode.Value == null)
                throw new ArgumentNullException(nameof(archiveMode), "Property is not nullable for class TransactionSubtypeModel.");

            if (dueDateMode.IsSet && dueDateMode.Value == null)
                throw new ArgumentNullException(nameof(dueDateMode), "Property is not nullable for class TransactionSubtypeModel.");

            if (exportCostQuantity.IsSet && exportCostQuantity.Value == null)
                throw new ArgumentNullException(nameof(exportCostQuantity), "Property is not nullable for class TransactionSubtypeModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TransactionSubtypeModel.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class TransactionSubtypeModel.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class TransactionSubtypeModel.");

            if (outputConfiguration.IsSet && outputConfiguration.Value == null)
                throw new ArgumentNullException(nameof(outputConfiguration), "Property is not nullable for class TransactionSubtypeModel.");

            if (report.IsSet && report.Value == null)
                throw new ArgumentNullException(nameof(report), "Property is not nullable for class TransactionSubtypeModel.");

            if (sequence.IsSet && sequence.Value == null)
                throw new ArgumentNullException(nameof(sequence), "Property is not nullable for class TransactionSubtypeModel.");

            if (summarizeBookings.IsSet && summarizeBookings.Value == null)
                throw new ArgumentNullException(nameof(summarizeBookings), "Property is not nullable for class TransactionSubtypeModel.");

            if (transactionNumberDateSource.IsSet && transactionNumberDateSource.Value == null)
                throw new ArgumentNullException(nameof(transactionNumberDateSource), "Property is not nullable for class TransactionSubtypeModel.");

            if (useNumberReservation.IsSet && useNumberReservation.Value == null)
                throw new ArgumentNullException(nameof(useNumberReservation), "Property is not nullable for class TransactionSubtypeModel.");

            //2return new TransactionSubtypeModel(accountingExportGroup, archiveMode, barcodeTemplate, bookingTextTemplate, customField1Template, customField2Template, documentTitleTemplate, dueDateMode, exportCostQuantity, id, isDeleted, name, number, outputConfiguration, report, sequence, summarizeBookings, transactionNumberDateSource, useNumberReservation);
            return new TransactionSubtypeModel(accountingExportGroup, archiveMode, barcodeTemplate, bookingTextTemplate, customField1Template, customField2Template, documentTitleTemplate, dueDateMode, exportCostQuantity, id, isDeleted, name, number, outputConfiguration, report, sequence, summarizeBookings, transactionNumberDateSource, useNumberReservation);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionSubtypeModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionSubtypeModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionSubtypeModel transactionSubtypeModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, transactionSubtypeModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionSubtypeModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionSubtypeModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TransactionSubtypeModel transactionSubtypeModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionSubtypeModel.OutputConfigurationOption.IsSet && transactionSubtypeModel.OutputConfiguration == null)
                throw new ArgumentNullException(nameof(transactionSubtypeModel.OutputConfiguration), "Property is required for class TransactionSubtypeModel.");

            if (transactionSubtypeModel.ReportOption.IsSet && transactionSubtypeModel.Report == null)
                throw new ArgumentNullException(nameof(transactionSubtypeModel.Report), "Property is required for class TransactionSubtypeModel.");

            if (transactionSubtypeModel.SequenceOption.IsSet && transactionSubtypeModel.Sequence == null)
                throw new ArgumentNullException(nameof(transactionSubtypeModel.Sequence), "Property is required for class TransactionSubtypeModel.");

            if (transactionSubtypeModel.AccountingExportGroupOption.IsSet)
                if (transactionSubtypeModel.AccountingExportGroupOption.Value != null)
                {
                    writer.WriteString("accountingExportGroup", transactionSubtypeModel.AccountingExportGroup);
                    //var __value = transactionSubtypeModel.AccountingExportGroupOption.Value;
                    //writer.WriteString("accountingExportGroup", __value);
                }
                else
                    writer.WriteNull("accountingExportGroup");

            if (transactionSubtypeModel.ArchiveModeOption.IsSet)
            {
                var archiveModeRawValue = TransactionSubtypeArchiveModeValueConverter.ToJsonValue(transactionSubtypeModel.ArchiveMode!.Value);
                writer.WriteNumber("archiveMode", archiveModeRawValue);
            }
            if (transactionSubtypeModel.BarcodeTemplateOption.IsSet)
                if (transactionSubtypeModel.BarcodeTemplateOption.Value != null)
                {
                    writer.WriteString("barcodeTemplate", transactionSubtypeModel.BarcodeTemplate);
                    //var __value = transactionSubtypeModel.BarcodeTemplateOption.Value;
                    //writer.WriteString("barcodeTemplate", __value);
                }
                else
                    writer.WriteNull("barcodeTemplate");

            if (transactionSubtypeModel.BookingTextTemplateOption.IsSet)
                if (transactionSubtypeModel.BookingTextTemplateOption.Value != null)
                {
                    writer.WriteString("bookingTextTemplate", transactionSubtypeModel.BookingTextTemplate);
                    //var __value = transactionSubtypeModel.BookingTextTemplateOption.Value;
                    //writer.WriteString("bookingTextTemplate", __value);
                }
                else
                    writer.WriteNull("bookingTextTemplate");

            if (transactionSubtypeModel.CustomField1TemplateOption.IsSet)
                if (transactionSubtypeModel.CustomField1TemplateOption.Value != null)
                {
                    writer.WriteString("customField1Template", transactionSubtypeModel.CustomField1Template);
                    //var __value = transactionSubtypeModel.CustomField1TemplateOption.Value;
                    //writer.WriteString("customField1Template", __value);
                }
                else
                    writer.WriteNull("customField1Template");

            if (transactionSubtypeModel.CustomField2TemplateOption.IsSet)
                if (transactionSubtypeModel.CustomField2TemplateOption.Value != null)
                {
                    writer.WriteString("customField2Template", transactionSubtypeModel.CustomField2Template);
                    //var __value = transactionSubtypeModel.CustomField2TemplateOption.Value;
                    //writer.WriteString("customField2Template", __value);
                }
                else
                    writer.WriteNull("customField2Template");

            if (transactionSubtypeModel.DocumentTitleTemplateOption.IsSet)
                if (transactionSubtypeModel.DocumentTitleTemplateOption.Value != null)
                {
                    writer.WriteString("documentTitleTemplate", transactionSubtypeModel.DocumentTitleTemplate);
                    //var __value = transactionSubtypeModel.DocumentTitleTemplateOption.Value;
                    //writer.WriteString("documentTitleTemplate", __value);
                }
                else
                    writer.WriteNull("documentTitleTemplate");

            if (transactionSubtypeModel.DueDateModeOption.IsSet)
            {
                var dueDateModeRawValue = DueDateModeValueConverter.ToJsonValue(transactionSubtypeModel.DueDateMode!.Value);
                writer.WriteNumber("dueDateMode", dueDateModeRawValue);
            }
            if (transactionSubtypeModel.ExportCostQuantityOption.IsSet)
            {
                var exportCostQuantityRawValue = ExportCostQuantityTypeValueConverter.ToJsonValue(transactionSubtypeModel.ExportCostQuantity!.Value);
                writer.WriteNumber("exportCostQuantity", exportCostQuantityRawValue);
            }
            if (transactionSubtypeModel.IdOption.IsSet)
                writer.WriteString("id", transactionSubtypeModel.IdOption!.Value);

            if (transactionSubtypeModel.IsDeletedOption.IsSet)
                writer.WriteBoolean("isDeleted", transactionSubtypeModel.IsDeletedOption!.Value);

            if (transactionSubtypeModel.NameOption.IsSet)
                if (transactionSubtypeModel.NameOption.Value != null)
                {
                    writer.WriteString("name", transactionSubtypeModel.Name);
                    //var __value = transactionSubtypeModel.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (transactionSubtypeModel.NumberOption.IsSet)
                writer.WriteNumber("number", transactionSubtypeModel.NumberOption!.Value);

            if (transactionSubtypeModel.OutputConfigurationOption.IsSet)
            {
                writer.WritePropertyName("outputConfiguration");
                JsonSerializer.Serialize(writer, transactionSubtypeModel.OutputConfiguration, jsonSerializerOptions);
            }
            if (transactionSubtypeModel.ReportOption.IsSet)
            {
                writer.WritePropertyName("report");
                JsonSerializer.Serialize(writer, transactionSubtypeModel.Report, jsonSerializerOptions);
            }
            if (transactionSubtypeModel.SequenceOption.IsSet)
            {
                writer.WritePropertyName("sequence");
                JsonSerializer.Serialize(writer, transactionSubtypeModel.Sequence, jsonSerializerOptions);
            }
            if (transactionSubtypeModel.SummarizeBookingsOption.IsSet)
                writer.WriteBoolean("summarizeBookings", transactionSubtypeModel.SummarizeBookingsOption!.Value);

            if (transactionSubtypeModel.TransactionNumberDateSourceOption.IsSet)
            {
                var transactionNumberDateSourceRawValue = TransactionNumberDateSourceTypeValueConverter.ToJsonValue(transactionSubtypeModel.TransactionNumberDateSource!.Value);
                writer.WriteNumber("transactionNumberDateSource", transactionNumberDateSourceRawValue);
            }
            if (transactionSubtypeModel.UseNumberReservationOption.IsSet)
                writer.WriteBoolean("useNumberReservation", transactionSubtypeModel.UseNumberReservationOption!.Value);
        }
    }
}
