/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// Represents the shared model for a period of a fiscal year in a transaction.
    /// </summary>
    [DataContract(Name = "TransactionPeriodModel")]
    public partial class TransactionPeriodModel : IEquatable<TransactionPeriodModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionPeriodModel" /> class.
        /// </summary>
        /// <param name="fiscalYearId">Gets or sets the fiscal year ID..</param>
        /// <param name="periodId">Gets or sets the period ID..</param>
        /// <param name="periodNumber">Gets or sets the period number..</param>
        /// <param name="from">Gets or sets the point in time the period begins..</param>
        /// <param name="to">Gets or sets the point in time the period ends..</param>
        public TransactionPeriodModel(Guid fiscalYearId = default(Guid), Guid periodId = default(Guid), int periodNumber = default(int), DateTime from = default(DateTime), DateTime to = default(DateTime))
        {
            this.FiscalYearId = fiscalYearId;
            this.PeriodId = periodId;
            this.PeriodNumber = periodNumber;
            this.From = from;
            this.To = to;
        }

        /// <summary>
        /// Gets or sets the fiscal year ID.
        /// </summary>
        /// <value>Gets or sets the fiscal year ID.</value>
        [DataMember(Name = "fiscalYearId", EmitDefaultValue = false)]
        public Guid FiscalYearId { get; set; }

        /// <summary>
        /// Gets or sets the period ID.
        /// </summary>
        /// <value>Gets or sets the period ID.</value>
        [DataMember(Name = "periodId", EmitDefaultValue = false)]
        public Guid PeriodId { get; set; }

        /// <summary>
        /// Gets or sets the period number.
        /// </summary>
        /// <value>Gets or sets the period number.</value>
        [DataMember(Name = "periodNumber", EmitDefaultValue = false)]
        public int PeriodNumber { get; set; }

        /// <summary>
        /// Gets or sets the point in time the period begins.
        /// </summary>
        /// <value>Gets or sets the point in time the period begins.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public DateTime From { get; set; }

        /// <summary>
        /// Gets or sets the point in time the period ends.
        /// </summary>
        /// <value>Gets or sets the point in time the period ends.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public DateTime To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionPeriodModel {\n");
            sb.Append("  FiscalYearId: ").Append(FiscalYearId).Append("\n");
            sb.Append("  PeriodId: ").Append(PeriodId).Append("\n");
            sb.Append("  PeriodNumber: ").Append(PeriodNumber).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionPeriodModel);
        }

        /// <summary>
        /// Returns true if TransactionPeriodModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionPeriodModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionPeriodModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FiscalYearId == input.FiscalYearId ||
                    (this.FiscalYearId != null &&
                    this.FiscalYearId.Equals(input.FiscalYearId))
                ) && 
                (
                    this.PeriodId == input.PeriodId ||
                    (this.PeriodId != null &&
                    this.PeriodId.Equals(input.PeriodId))
                ) && 
                (
                    this.PeriodNumber == input.PeriodNumber ||
                    this.PeriodNumber.Equals(input.PeriodNumber)
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FiscalYearId != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalYearId.GetHashCode();
                }
                if (this.PeriodId != null)
                {
                    hashCode = (hashCode * 59) + this.PeriodId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PeriodNumber.GetHashCode();
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
