// <auto-generated>
/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// TransactionAddressModel
    /// </summary>
    public partial class TransactionAddressModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TransactionAddressModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionAddressModel" /> class.
        /// </summary>
        /// <param name="city">city</param>
        /// <param name="country">country</param>
        /// <param name="countryIso">countryIso</param>
        /// <param name="district">district</param>
        /// <param name="federalState">federalState</param>
        /// <param name="id">id</param>
        /// <param name="latitude">latitude</param>
        /// <param name="longitude">longitude</param>
        /// <param name="name">name</param>
        /// <param name="number">number</param>
        /// <param name="street">street</param>
        /// <param name="zipcode">zipcode</param>
        //[JsonConstructor]
        public TransactionAddressModel(Option<string> city = default, Option<string> country = default, Option<string> countryIso = default, Option<string> district = default, Option<string> federalState = default, Option<Guid> id = default, Option<double> latitude = default, Option<double> longitude = default, Option<string> name = default, Option<string> number = default, Option<string> street = default, Option<string> zipcode = default)
        {
            CityOption = city;
            CountryOption = country;
            CountryIsoOption = countryIso;
            DistrictOption = district;
            FederalStateOption = federalState;
            IdOption = id;
            LatitudeOption = latitude;
            LongitudeOption = longitude;
            NameOption = name;
            NumberOption = number;
            StreetOption = street;
            ZipcodeOption = zipcode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of City
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CityOption { get; private set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [JsonPropertyName("city")]
        public string? City { get { return this. CityOption; } set { this.CityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Country
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CountryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [JsonPropertyName("country")]
        public string? Country { get { return this. CountryOption; } set { this.CountryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryIso
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CountryIsoOption { get; private set; }

        /// <summary>
        /// Gets or Sets CountryIso
        /// </summary>
        [JsonPropertyName("countryIso")]
        public string? CountryIso { get { return this. CountryIsoOption; } set { this.CountryIsoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of District
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DistrictOption { get; private set; }

        /// <summary>
        /// Gets or Sets District
        /// </summary>
        [JsonPropertyName("district")]
        public string? District { get { return this. DistrictOption; } set { this.DistrictOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FederalState
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> FederalStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets FederalState
        /// </summary>
        [JsonPropertyName("federalState")]
        public string? FederalState { get { return this. FederalStateOption; } set { this.FederalStateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> LatitudeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [JsonPropertyName("latitude")]
        public double? Latitude { get { return this. LatitudeOption; } set { this.LatitudeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> LongitudeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [JsonPropertyName("longitude")]
        public double? Longitude { get { return this. LongitudeOption; } set { this.LongitudeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Street
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> StreetOption { get; private set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [JsonPropertyName("street")]
        public string? Street { get { return this. StreetOption; } set { this.StreetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Zipcode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ZipcodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Zipcode
        /// </summary>
        [JsonPropertyName("zipcode")]
        public string? Zipcode { get { return this. ZipcodeOption; } set { this.ZipcodeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionAddressModel {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryIso: ").Append(CountryIso).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  FederalState: ").Append(FederalState).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionAddressModel" />
    /// </summary>
    public class TransactionAddressModelJsonConverter : JsonConverter<TransactionAddressModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransactionAddressModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionAddressModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> city = default;
            Option<string> country = default;
            Option<string> countryIso = default;
            Option<string> district = default;
            Option<string> federalState = default;
            Option<Guid> id = default;
            Option<double> latitude = default;
            Option<double> longitude = default;
            Option<string> name = default;
            Option<string> number = default;
            Option<string> street = default;
            Option<string> zipcode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "city":
                            city = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "country":
                            country = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "countryIso":
                            countryIso = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "district":
                            district = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "federalState":
                            federalState = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "latitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                latitude = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "longitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                longitude = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "street":
                            street = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "zipcode":
                            zipcode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TransactionAddressModel.");

            //2return new TransactionAddressModel(city, country, countryIso, district, federalState, id, latitude, longitude, name, number, street, zipcode);
            return new TransactionAddressModel(city, country, countryIso, district, federalState, id, latitude, longitude, name, number, street, zipcode);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionAddressModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionAddressModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionAddressModel transactionAddressModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, transactionAddressModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionAddressModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionAddressModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TransactionAddressModel transactionAddressModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionAddressModel.CityOption.IsSet)
                if (transactionAddressModel.CityOption.Value != null)
                {
                    writer.WriteString("city", transactionAddressModel.City);
                    //var __value = transactionAddressModel.CityOption.Value;
                    //writer.WriteString("city", __value);
                }
                else
                    writer.WriteNull("city");

            if (transactionAddressModel.CountryOption.IsSet)
                if (transactionAddressModel.CountryOption.Value != null)
                {
                    writer.WriteString("country", transactionAddressModel.Country);
                    //var __value = transactionAddressModel.CountryOption.Value;
                    //writer.WriteString("country", __value);
                }
                else
                    writer.WriteNull("country");

            if (transactionAddressModel.CountryIsoOption.IsSet)
                if (transactionAddressModel.CountryIsoOption.Value != null)
                {
                    writer.WriteString("countryIso", transactionAddressModel.CountryIso);
                    //var __value = transactionAddressModel.CountryIsoOption.Value;
                    //writer.WriteString("countryIso", __value);
                }
                else
                    writer.WriteNull("countryIso");

            if (transactionAddressModel.DistrictOption.IsSet)
                if (transactionAddressModel.DistrictOption.Value != null)
                {
                    writer.WriteString("district", transactionAddressModel.District);
                    //var __value = transactionAddressModel.DistrictOption.Value;
                    //writer.WriteString("district", __value);
                }
                else
                    writer.WriteNull("district");

            if (transactionAddressModel.FederalStateOption.IsSet)
                if (transactionAddressModel.FederalStateOption.Value != null)
                {
                    writer.WriteString("federalState", transactionAddressModel.FederalState);
                    //var __value = transactionAddressModel.FederalStateOption.Value;
                    //writer.WriteString("federalState", __value);
                }
                else
                    writer.WriteNull("federalState");

            if (transactionAddressModel.IdOption.IsSet)
                writer.WriteString("id", transactionAddressModel.IdOption!.Value);

            if (transactionAddressModel.LatitudeOption.IsSet)
                if (transactionAddressModel.LatitudeOption.Value != null)
                {
                    writer.WriteNumber("latitude", transactionAddressModel.LatitudeOption!.Value);
                    //var __value = transactionAddressModel.LatitudeOption.Value;
                    //writer.WriteString("latitude", __value);
                }
                else
                    writer.WriteNull("latitude");

            if (transactionAddressModel.LongitudeOption.IsSet)
                if (transactionAddressModel.LongitudeOption.Value != null)
                {
                    writer.WriteNumber("longitude", transactionAddressModel.LongitudeOption!.Value);
                    //var __value = transactionAddressModel.LongitudeOption.Value;
                    //writer.WriteString("longitude", __value);
                }
                else
                    writer.WriteNull("longitude");

            if (transactionAddressModel.NameOption.IsSet)
                if (transactionAddressModel.NameOption.Value != null)
                {
                    writer.WriteString("name", transactionAddressModel.Name);
                    //var __value = transactionAddressModel.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (transactionAddressModel.NumberOption.IsSet)
                if (transactionAddressModel.NumberOption.Value != null)
                {
                    writer.WriteString("number", transactionAddressModel.Number);
                    //var __value = transactionAddressModel.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (transactionAddressModel.StreetOption.IsSet)
                if (transactionAddressModel.StreetOption.Value != null)
                {
                    writer.WriteString("street", transactionAddressModel.Street);
                    //var __value = transactionAddressModel.StreetOption.Value;
                    //writer.WriteString("street", __value);
                }
                else
                    writer.WriteNull("street");

            if (transactionAddressModel.ZipcodeOption.IsSet)
                if (transactionAddressModel.ZipcodeOption.Value != null)
                {
                    writer.WriteString("zipcode", transactionAddressModel.Zipcode);
                    //var __value = transactionAddressModel.ZipcodeOption.Value;
                    //writer.WriteString("zipcode", __value);
                }
                else
                    writer.WriteNull("zipcode");
        }
    }
}
