/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// OrganizationSettingResult
    /// </summary>
    [DataContract(Name = "OrganizationSettingResult")]
    public partial class OrganizationSettingResult : IEquatable<OrganizationSettingResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationSettingResult" /> class.
        /// </summary>
        /// <param name="internalName">internalName.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="displayKey">displayKey.</param>
        /// <param name="value">value.</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="valueTypeName">valueTypeName.</param>
        /// <param name="options">options.</param>
        /// <param name="groupKey">groupKey.</param>
        /// <param name="groupDisplayKey">groupDisplayKey.</param>
        /// <param name="groupDisplayName">groupDisplayName.</param>
        public OrganizationSettingResult(string internalName = default(string), string displayName = default(string), string displayKey = default(string), Object value = default(Object), Object defaultValue = default(Object), string valueTypeName = default(string), List<SettingOption> options = default(List<SettingOption>), string groupKey = default(string), string groupDisplayKey = default(string), string groupDisplayName = default(string))
        {
            this.InternalName = internalName;
            this.DisplayName = displayName;
            this.DisplayKey = displayKey;
            this.Value = value;
            this.DefaultValue = defaultValue;
            this.ValueTypeName = valueTypeName;
            this.Options = options;
            this.GroupKey = groupKey;
            this.GroupDisplayKey = groupDisplayKey;
            this.GroupDisplayName = groupDisplayName;
        }

        /// <summary>
        /// Gets or Sets InternalName
        /// </summary>
        [DataMember(Name = "internalName", EmitDefaultValue = true)]
        public string InternalName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayKey
        /// </summary>
        [DataMember(Name = "displayKey", EmitDefaultValue = true)]
        public string DisplayKey { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public Object Value { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "defaultValue", EmitDefaultValue = true)]
        public Object DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets ValueTypeName
        /// </summary>
        [DataMember(Name = "valueTypeName", EmitDefaultValue = true)]
        public string ValueTypeName { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = true)]
        public List<SettingOption> Options { get; set; }

        /// <summary>
        /// Gets or Sets HasOptions
        /// </summary>
        [DataMember(Name = "hasOptions", EmitDefaultValue = true)]
        public bool HasOptions { get; private set; }

        /// <summary>
        /// Returns false as HasOptions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasOptions()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets GroupKey
        /// </summary>
        [DataMember(Name = "groupKey", EmitDefaultValue = true)]
        public string GroupKey { get; set; }

        /// <summary>
        /// Gets or Sets GroupDisplayKey
        /// </summary>
        [DataMember(Name = "groupDisplayKey", EmitDefaultValue = true)]
        public string GroupDisplayKey { get; set; }

        /// <summary>
        /// Gets or Sets GroupDisplayName
        /// </summary>
        [DataMember(Name = "groupDisplayName", EmitDefaultValue = true)]
        public string GroupDisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationSettingResult {\n");
            sb.Append("  InternalName: ").Append(InternalName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DisplayKey: ").Append(DisplayKey).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  ValueTypeName: ").Append(ValueTypeName).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  HasOptions: ").Append(HasOptions).Append("\n");
            sb.Append("  GroupKey: ").Append(GroupKey).Append("\n");
            sb.Append("  GroupDisplayKey: ").Append(GroupDisplayKey).Append("\n");
            sb.Append("  GroupDisplayName: ").Append(GroupDisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationSettingResult);
        }

        /// <summary>
        /// Returns true if OrganizationSettingResult instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationSettingResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationSettingResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InternalName == input.InternalName ||
                    (this.InternalName != null &&
                    this.InternalName.Equals(input.InternalName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.DisplayKey == input.DisplayKey ||
                    (this.DisplayKey != null &&
                    this.DisplayKey.Equals(input.DisplayKey))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.ValueTypeName == input.ValueTypeName ||
                    (this.ValueTypeName != null &&
                    this.ValueTypeName.Equals(input.ValueTypeName))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.HasOptions == input.HasOptions ||
                    this.HasOptions.Equals(input.HasOptions)
                ) && 
                (
                    this.GroupKey == input.GroupKey ||
                    (this.GroupKey != null &&
                    this.GroupKey.Equals(input.GroupKey))
                ) && 
                (
                    this.GroupDisplayKey == input.GroupDisplayKey ||
                    (this.GroupDisplayKey != null &&
                    this.GroupDisplayKey.Equals(input.GroupDisplayKey))
                ) && 
                (
                    this.GroupDisplayName == input.GroupDisplayName ||
                    (this.GroupDisplayName != null &&
                    this.GroupDisplayName.Equals(input.GroupDisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InternalName != null)
                {
                    hashCode = (hashCode * 59) + this.InternalName.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.DisplayKey != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayKey.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.DefaultValue != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultValue.GetHashCode();
                }
                if (this.ValueTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.ValueTypeName.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasOptions.GetHashCode();
                if (this.GroupKey != null)
                {
                    hashCode = (hashCode * 59) + this.GroupKey.GetHashCode();
                }
                if (this.GroupDisplayKey != null)
                {
                    hashCode = (hashCode * 59) + this.GroupDisplayKey.GetHashCode();
                }
                if (this.GroupDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupDisplayName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
