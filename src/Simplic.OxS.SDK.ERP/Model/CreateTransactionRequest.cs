/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.ERP.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// CreateTransactionRequest
    /// </summary>
    [DataContract(Name = "CreateTransactionRequest")]
    public partial class CreateTransactionRequest : IEquatable<CreateTransactionRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ConvertState
        /// </summary>
        [DataMember(Name = "convertState", EmitDefaultValue = false)]
        public TransactionConvertState? ConvertState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTransactionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionRequest" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="number">number (required).</param>
        /// <param name="reference">reference.</param>
        /// <param name="typeId">typeId (required).</param>
        /// <param name="subtypeId">subtypeId (required).</param>
        /// <param name="date">date (required).</param>
        /// <param name="deliveryDate">deliveryDate.</param>
        /// <param name="termsOfPaymentId">termsOfPaymentId (required).</param>
        /// <param name="paymentMethod">paymentMethod (required).</param>
        /// <param name="currencyId">currencyId (required).</param>
        /// <param name="description">description.</param>
        /// <param name="financialPartner">financialPartner (required).</param>
        /// <param name="deliveryAddress">deliveryAddress.</param>
        /// <param name="invoiceRecipient">invoiceRecipient (required).</param>
        /// <param name="payer">payer (required).</param>
        /// <param name="responsible">responsible (required).</param>
        /// <param name="representative">representative.</param>
        /// <param name="items">items.</param>
        /// <param name="convertState">convertState.</param>
        /// <param name="alternativePaymentDeadline">alternativePaymentDeadline.</param>
        /// <param name="balance">balance.</param>
        /// <param name="barcode">barcode.</param>
        /// <param name="billToText">billToText.</param>
        /// <param name="cashDiscountPercentValue">cashDiscountPercentValue.</param>
        /// <param name="cashDiscountTotal">cashDiscountTotal.</param>
        /// <param name="document">document.</param>
        /// <param name="financialAccountingPeriod">financialAccountingPeriod.</param>
        /// <param name="period">period.</param>
        /// <param name="states">states.</param>
        /// <param name="manualVAT">manualVAT.</param>
        /// <param name="notes">notes.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="referenceNr">referenceNr.</param>
        /// <param name="standingOrder">standingOrder.</param>
        /// <param name="taxGroupId">taxGroupId.</param>
        /// <param name="totalPrice">totalPrice.</param>
        /// <param name="totalPriceGross">totalPriceGross.</param>
        /// <param name="totalPriceNet">totalPriceNet.</param>
        /// <param name="totalPriceTax">totalPriceTax.</param>
        /// <param name="transactionYear">transactionYear.</param>
        /// <param name="updateUser">updateUser (required).</param>
        /// <param name="signedTotalPriceNet">signedTotalPriceNet.</param>
        /// <param name="signedTotalPriceGross">signedTotalPriceGross.</param>
        /// <param name="signedTotalPrice">signedTotalPrice.</param>
        /// <param name="signedTotalPriceTax">signedTotalPriceTax.</param>
        /// <param name="sign">sign.</param>
        /// <param name="itemGroupTermsOfPayments">itemGroupTermsOfPayments.</param>
        /// <param name="creator">creator (required).</param>
        public CreateTransactionRequest(string name = default(string), string number = default(string), string reference = default(string), Guid typeId = default(Guid), Guid subtypeId = default(Guid), DateTime date = default(DateTime), DateTime? deliveryDate = default(DateTime?), Guid termsOfPaymentId = default(Guid), TransactionPaymentMethod paymentMethod = default(TransactionPaymentMethod), Guid currencyId = default(Guid), string description = default(string), TransactionContact financialPartner = default(TransactionContact), TransactionContact deliveryAddress = default(TransactionContact), TransactionContact invoiceRecipient = default(TransactionContact), TransactionContact payer = default(TransactionContact), TransactionContact responsible = default(TransactionContact), TransactionContact representative = default(TransactionContact), List<TransactionItem> items = default(List<TransactionItem>), TransactionConvertState? convertState = default(TransactionConvertState?), DateTime? alternativePaymentDeadline = default(DateTime?), double balance = default(double), string barcode = default(string), string billToText = default(string), double cashDiscountPercentValue = default(double), double cashDiscountTotal = default(double), TransactionDocument document = default(TransactionDocument), TransactionPeriod financialAccountingPeriod = default(TransactionPeriod), TransactionPeriod period = default(TransactionPeriod), List<string> states = default(List<string>), TransactionManualVat manualVAT = default(TransactionManualVat), string notes = default(string), DateTime? dueDate = default(DateTime?), string referenceNr = default(string), TransactionStandingOrder standingOrder = default(TransactionStandingOrder), Guid taxGroupId = default(Guid), double totalPrice = default(double), double totalPriceGross = default(double), double totalPriceNet = default(double), double totalPriceTax = default(double), int transactionYear = default(int), TransactionUser updateUser = default(TransactionUser), double signedTotalPriceNet = default(double), double signedTotalPriceGross = default(double), double signedTotalPrice = default(double), double signedTotalPriceTax = default(double), int sign = default(int), List<TransactionItemGroupTermsOfPayment> itemGroupTermsOfPayments = default(List<TransactionItemGroupTermsOfPayment>), TransactionContact creator = default(TransactionContact))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateTransactionRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "number" is required (not null)
            if (number == null)
            {
                throw new ArgumentNullException("number is a required property for CreateTransactionRequest and cannot be null");
            }
            this.Number = number;
            this.TypeId = typeId;
            this.SubtypeId = subtypeId;
            this.Date = date;
            this.TermsOfPaymentId = termsOfPaymentId;
            // to ensure "paymentMethod" is required (not null)
            if (paymentMethod == null)
            {
                throw new ArgumentNullException("paymentMethod is a required property for CreateTransactionRequest and cannot be null");
            }
            this.PaymentMethod = paymentMethod;
            this.CurrencyId = currencyId;
            // to ensure "financialPartner" is required (not null)
            if (financialPartner == null)
            {
                throw new ArgumentNullException("financialPartner is a required property for CreateTransactionRequest and cannot be null");
            }
            this.FinancialPartner = financialPartner;
            // to ensure "invoiceRecipient" is required (not null)
            if (invoiceRecipient == null)
            {
                throw new ArgumentNullException("invoiceRecipient is a required property for CreateTransactionRequest and cannot be null");
            }
            this.InvoiceRecipient = invoiceRecipient;
            // to ensure "payer" is required (not null)
            if (payer == null)
            {
                throw new ArgumentNullException("payer is a required property for CreateTransactionRequest and cannot be null");
            }
            this.Payer = payer;
            // to ensure "responsible" is required (not null)
            if (responsible == null)
            {
                throw new ArgumentNullException("responsible is a required property for CreateTransactionRequest and cannot be null");
            }
            this.Responsible = responsible;
            // to ensure "updateUser" is required (not null)
            if (updateUser == null)
            {
                throw new ArgumentNullException("updateUser is a required property for CreateTransactionRequest and cannot be null");
            }
            this.UpdateUser = updateUser;
            // to ensure "creator" is required (not null)
            if (creator == null)
            {
                throw new ArgumentNullException("creator is a required property for CreateTransactionRequest and cannot be null");
            }
            this.Creator = creator;
            this.Reference = reference;
            this.DeliveryDate = deliveryDate;
            this.Description = description;
            this.DeliveryAddress = deliveryAddress;
            this.Representative = representative;
            this.Items = items;
            this.ConvertState = convertState;
            this.AlternativePaymentDeadline = alternativePaymentDeadline;
            this.Balance = balance;
            this.Barcode = barcode;
            this.BillToText = billToText;
            this.CashDiscountPercentValue = cashDiscountPercentValue;
            this.CashDiscountTotal = cashDiscountTotal;
            this.Document = document;
            this.FinancialAccountingPeriod = financialAccountingPeriod;
            this.Period = period;
            this.States = states;
            this.ManualVAT = manualVAT;
            this.Notes = notes;
            this.DueDate = dueDate;
            this.ReferenceNr = referenceNr;
            this.StandingOrder = standingOrder;
            this.TaxGroupId = taxGroupId;
            this.TotalPrice = totalPrice;
            this.TotalPriceGross = totalPriceGross;
            this.TotalPriceNet = totalPriceNet;
            this.TotalPriceTax = totalPriceTax;
            this.TransactionYear = transactionYear;
            this.SignedTotalPriceNet = signedTotalPriceNet;
            this.SignedTotalPriceGross = signedTotalPriceGross;
            this.SignedTotalPrice = signedTotalPrice;
            this.SignedTotalPriceTax = signedTotalPriceTax;
            this.Sign = sign;
            this.ItemGroupTermsOfPayments = itemGroupTermsOfPayments;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", IsRequired = true, EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "typeId", IsRequired = true, EmitDefaultValue = true)]
        public Guid TypeId { get; set; }

        /// <summary>
        /// Gets or Sets SubtypeId
        /// </summary>
        [DataMember(Name = "subtypeId", IsRequired = true, EmitDefaultValue = true)]
        public Guid SubtypeId { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryDate
        /// </summary>
        [DataMember(Name = "deliveryDate", EmitDefaultValue = true)]
        public DateTime? DeliveryDate { get; set; }

        /// <summary>
        /// Gets or Sets TermsOfPaymentId
        /// </summary>
        [DataMember(Name = "termsOfPaymentId", IsRequired = true, EmitDefaultValue = true)]
        public Guid TermsOfPaymentId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", IsRequired = true, EmitDefaultValue = true)]
        public TransactionPaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name = "currencyId", IsRequired = true, EmitDefaultValue = true)]
        public Guid CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FinancialPartner
        /// </summary>
        [DataMember(Name = "financialPartner", IsRequired = true, EmitDefaultValue = true)]
        public TransactionContact FinancialPartner { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [DataMember(Name = "deliveryAddress", EmitDefaultValue = false)]
        public TransactionContact DeliveryAddress { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceRecipient
        /// </summary>
        [DataMember(Name = "invoiceRecipient", IsRequired = true, EmitDefaultValue = true)]
        public TransactionContact InvoiceRecipient { get; set; }

        /// <summary>
        /// Gets or Sets Payer
        /// </summary>
        [DataMember(Name = "payer", IsRequired = true, EmitDefaultValue = true)]
        public TransactionContact Payer { get; set; }

        /// <summary>
        /// Gets or Sets Responsible
        /// </summary>
        [DataMember(Name = "responsible", IsRequired = true, EmitDefaultValue = true)]
        public TransactionContact Responsible { get; set; }

        /// <summary>
        /// Gets or Sets Representative
        /// </summary>
        [DataMember(Name = "representative", EmitDefaultValue = false)]
        public TransactionContact Representative { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = true)]
        public List<TransactionItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets AlternativePaymentDeadline
        /// </summary>
        [DataMember(Name = "alternativePaymentDeadline", EmitDefaultValue = true)]
        public DateTime? AlternativePaymentDeadline { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public double Balance { get; set; }

        /// <summary>
        /// Gets or Sets Barcode
        /// </summary>
        [DataMember(Name = "barcode", EmitDefaultValue = true)]
        public string Barcode { get; set; }

        /// <summary>
        /// Gets or Sets BillToText
        /// </summary>
        [DataMember(Name = "billToText", EmitDefaultValue = true)]
        public string BillToText { get; set; }

        /// <summary>
        /// Gets or Sets CashDiscountPercentValue
        /// </summary>
        [DataMember(Name = "cashDiscountPercentValue", EmitDefaultValue = false)]
        public double CashDiscountPercentValue { get; set; }

        /// <summary>
        /// Gets or Sets CashDiscountTotal
        /// </summary>
        [DataMember(Name = "cashDiscountTotal", EmitDefaultValue = false)]
        public double CashDiscountTotal { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name = "document", EmitDefaultValue = false)]
        public TransactionDocument Document { get; set; }

        /// <summary>
        /// Gets or Sets FinancialAccountingPeriod
        /// </summary>
        [DataMember(Name = "financialAccountingPeriod", EmitDefaultValue = false)]
        public TransactionPeriod FinancialAccountingPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public TransactionPeriod Period { get; set; }

        /// <summary>
        /// Gets or Sets States
        /// </summary>
        [DataMember(Name = "states", EmitDefaultValue = true)]
        public List<string> States { get; set; }

        /// <summary>
        /// Gets or Sets ManualVAT
        /// </summary>
        [DataMember(Name = "manualVAT", EmitDefaultValue = false)]
        public TransactionManualVat ManualVAT { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name = "dueDate", EmitDefaultValue = true)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNr
        /// </summary>
        [DataMember(Name = "referenceNr", EmitDefaultValue = true)]
        public string ReferenceNr { get; set; }

        /// <summary>
        /// Gets or Sets StandingOrder
        /// </summary>
        [DataMember(Name = "standingOrder", EmitDefaultValue = false)]
        public TransactionStandingOrder StandingOrder { get; set; }

        /// <summary>
        /// Gets or Sets TaxGroupId
        /// </summary>
        [DataMember(Name = "taxGroupId", EmitDefaultValue = false)]
        public Guid TaxGroupId { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [DataMember(Name = "totalPrice", EmitDefaultValue = false)]
        public double TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalPriceGross
        /// </summary>
        [DataMember(Name = "totalPriceGross", EmitDefaultValue = false)]
        public double TotalPriceGross { get; set; }

        /// <summary>
        /// Gets or Sets TotalPriceNet
        /// </summary>
        [DataMember(Name = "totalPriceNet", EmitDefaultValue = false)]
        public double TotalPriceNet { get; set; }

        /// <summary>
        /// Gets or Sets TotalPriceTax
        /// </summary>
        [DataMember(Name = "totalPriceTax", EmitDefaultValue = false)]
        public double TotalPriceTax { get; set; }

        /// <summary>
        /// Gets or Sets TransactionYear
        /// </summary>
        [DataMember(Name = "transactionYear", EmitDefaultValue = false)]
        public int TransactionYear { get; set; }

        /// <summary>
        /// Gets or Sets UpdateUser
        /// </summary>
        [DataMember(Name = "updateUser", IsRequired = true, EmitDefaultValue = true)]
        public TransactionUser UpdateUser { get; set; }

        /// <summary>
        /// Gets or Sets SignedTotalPriceNet
        /// </summary>
        [DataMember(Name = "signedTotalPriceNet", EmitDefaultValue = false)]
        public double SignedTotalPriceNet { get; set; }

        /// <summary>
        /// Gets or Sets SignedTotalPriceGross
        /// </summary>
        [DataMember(Name = "signedTotalPriceGross", EmitDefaultValue = false)]
        public double SignedTotalPriceGross { get; set; }

        /// <summary>
        /// Gets or Sets SignedTotalPrice
        /// </summary>
        [DataMember(Name = "signedTotalPrice", EmitDefaultValue = false)]
        public double SignedTotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets SignedTotalPriceTax
        /// </summary>
        [DataMember(Name = "signedTotalPriceTax", EmitDefaultValue = false)]
        public double SignedTotalPriceTax { get; set; }

        /// <summary>
        /// Gets or Sets Sign
        /// </summary>
        [DataMember(Name = "sign", EmitDefaultValue = false)]
        public int Sign { get; set; }

        /// <summary>
        /// Gets or Sets ItemGroupTermsOfPayments
        /// </summary>
        [DataMember(Name = "itemGroupTermsOfPayments", EmitDefaultValue = true)]
        public List<TransactionItemGroupTermsOfPayment> ItemGroupTermsOfPayments { get; set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name = "creator", IsRequired = true, EmitDefaultValue = true)]
        public TransactionContact Creator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTransactionRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  SubtypeId: ").Append(SubtypeId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  TermsOfPaymentId: ").Append(TermsOfPaymentId).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FinancialPartner: ").Append(FinancialPartner).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  InvoiceRecipient: ").Append(InvoiceRecipient).Append("\n");
            sb.Append("  Payer: ").Append(Payer).Append("\n");
            sb.Append("  Responsible: ").Append(Responsible).Append("\n");
            sb.Append("  Representative: ").Append(Representative).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ConvertState: ").Append(ConvertState).Append("\n");
            sb.Append("  AlternativePaymentDeadline: ").Append(AlternativePaymentDeadline).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  BillToText: ").Append(BillToText).Append("\n");
            sb.Append("  CashDiscountPercentValue: ").Append(CashDiscountPercentValue).Append("\n");
            sb.Append("  CashDiscountTotal: ").Append(CashDiscountTotal).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  FinancialAccountingPeriod: ").Append(FinancialAccountingPeriod).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  ManualVAT: ").Append(ManualVAT).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  ReferenceNr: ").Append(ReferenceNr).Append("\n");
            sb.Append("  StandingOrder: ").Append(StandingOrder).Append("\n");
            sb.Append("  TaxGroupId: ").Append(TaxGroupId).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  TotalPriceGross: ").Append(TotalPriceGross).Append("\n");
            sb.Append("  TotalPriceNet: ").Append(TotalPriceNet).Append("\n");
            sb.Append("  TotalPriceTax: ").Append(TotalPriceTax).Append("\n");
            sb.Append("  TransactionYear: ").Append(TransactionYear).Append("\n");
            sb.Append("  UpdateUser: ").Append(UpdateUser).Append("\n");
            sb.Append("  SignedTotalPriceNet: ").Append(SignedTotalPriceNet).Append("\n");
            sb.Append("  SignedTotalPriceGross: ").Append(SignedTotalPriceGross).Append("\n");
            sb.Append("  SignedTotalPrice: ").Append(SignedTotalPrice).Append("\n");
            sb.Append("  SignedTotalPriceTax: ").Append(SignedTotalPriceTax).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  ItemGroupTermsOfPayments: ").Append(ItemGroupTermsOfPayments).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTransactionRequest);
        }

        /// <summary>
        /// Returns true if CreateTransactionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTransactionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTransactionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.SubtypeId == input.SubtypeId ||
                    (this.SubtypeId != null &&
                    this.SubtypeId.Equals(input.SubtypeId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && 
                (
                    this.TermsOfPaymentId == input.TermsOfPaymentId ||
                    (this.TermsOfPaymentId != null &&
                    this.TermsOfPaymentId.Equals(input.TermsOfPaymentId))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FinancialPartner == input.FinancialPartner ||
                    (this.FinancialPartner != null &&
                    this.FinancialPartner.Equals(input.FinancialPartner))
                ) && 
                (
                    this.DeliveryAddress == input.DeliveryAddress ||
                    (this.DeliveryAddress != null &&
                    this.DeliveryAddress.Equals(input.DeliveryAddress))
                ) && 
                (
                    this.InvoiceRecipient == input.InvoiceRecipient ||
                    (this.InvoiceRecipient != null &&
                    this.InvoiceRecipient.Equals(input.InvoiceRecipient))
                ) && 
                (
                    this.Payer == input.Payer ||
                    (this.Payer != null &&
                    this.Payer.Equals(input.Payer))
                ) && 
                (
                    this.Responsible == input.Responsible ||
                    (this.Responsible != null &&
                    this.Responsible.Equals(input.Responsible))
                ) && 
                (
                    this.Representative == input.Representative ||
                    (this.Representative != null &&
                    this.Representative.Equals(input.Representative))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.ConvertState == input.ConvertState ||
                    this.ConvertState.Equals(input.ConvertState)
                ) && 
                (
                    this.AlternativePaymentDeadline == input.AlternativePaymentDeadline ||
                    (this.AlternativePaymentDeadline != null &&
                    this.AlternativePaymentDeadline.Equals(input.AlternativePaymentDeadline))
                ) && 
                (
                    this.Balance == input.Balance ||
                    this.Balance.Equals(input.Balance)
                ) && 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                ) && 
                (
                    this.BillToText == input.BillToText ||
                    (this.BillToText != null &&
                    this.BillToText.Equals(input.BillToText))
                ) && 
                (
                    this.CashDiscountPercentValue == input.CashDiscountPercentValue ||
                    this.CashDiscountPercentValue.Equals(input.CashDiscountPercentValue)
                ) && 
                (
                    this.CashDiscountTotal == input.CashDiscountTotal ||
                    this.CashDiscountTotal.Equals(input.CashDiscountTotal)
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.FinancialAccountingPeriod == input.FinancialAccountingPeriod ||
                    (this.FinancialAccountingPeriod != null &&
                    this.FinancialAccountingPeriod.Equals(input.FinancialAccountingPeriod))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.States == input.States ||
                    this.States != null &&
                    input.States != null &&
                    this.States.SequenceEqual(input.States)
                ) && 
                (
                    this.ManualVAT == input.ManualVAT ||
                    (this.ManualVAT != null &&
                    this.ManualVAT.Equals(input.ManualVAT))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.ReferenceNr == input.ReferenceNr ||
                    (this.ReferenceNr != null &&
                    this.ReferenceNr.Equals(input.ReferenceNr))
                ) && 
                (
                    this.StandingOrder == input.StandingOrder ||
                    (this.StandingOrder != null &&
                    this.StandingOrder.Equals(input.StandingOrder))
                ) && 
                (
                    this.TaxGroupId == input.TaxGroupId ||
                    (this.TaxGroupId != null &&
                    this.TaxGroupId.Equals(input.TaxGroupId))
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    this.TotalPrice.Equals(input.TotalPrice)
                ) && 
                (
                    this.TotalPriceGross == input.TotalPriceGross ||
                    this.TotalPriceGross.Equals(input.TotalPriceGross)
                ) && 
                (
                    this.TotalPriceNet == input.TotalPriceNet ||
                    this.TotalPriceNet.Equals(input.TotalPriceNet)
                ) && 
                (
                    this.TotalPriceTax == input.TotalPriceTax ||
                    this.TotalPriceTax.Equals(input.TotalPriceTax)
                ) && 
                (
                    this.TransactionYear == input.TransactionYear ||
                    this.TransactionYear.Equals(input.TransactionYear)
                ) && 
                (
                    this.UpdateUser == input.UpdateUser ||
                    (this.UpdateUser != null &&
                    this.UpdateUser.Equals(input.UpdateUser))
                ) && 
                (
                    this.SignedTotalPriceNet == input.SignedTotalPriceNet ||
                    this.SignedTotalPriceNet.Equals(input.SignedTotalPriceNet)
                ) && 
                (
                    this.SignedTotalPriceGross == input.SignedTotalPriceGross ||
                    this.SignedTotalPriceGross.Equals(input.SignedTotalPriceGross)
                ) && 
                (
                    this.SignedTotalPrice == input.SignedTotalPrice ||
                    this.SignedTotalPrice.Equals(input.SignedTotalPrice)
                ) && 
                (
                    this.SignedTotalPriceTax == input.SignedTotalPriceTax ||
                    this.SignedTotalPriceTax.Equals(input.SignedTotalPriceTax)
                ) && 
                (
                    this.Sign == input.Sign ||
                    this.Sign.Equals(input.Sign)
                ) && 
                (
                    this.ItemGroupTermsOfPayments == input.ItemGroupTermsOfPayments ||
                    this.ItemGroupTermsOfPayments != null &&
                    input.ItemGroupTermsOfPayments != null &&
                    this.ItemGroupTermsOfPayments.SequenceEqual(input.ItemGroupTermsOfPayments)
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.TypeId != null)
                {
                    hashCode = (hashCode * 59) + this.TypeId.GetHashCode();
                }
                if (this.SubtypeId != null)
                {
                    hashCode = (hashCode * 59) + this.SubtypeId.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.DeliveryDate != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryDate.GetHashCode();
                }
                if (this.TermsOfPaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.TermsOfPaymentId.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.FinancialPartner != null)
                {
                    hashCode = (hashCode * 59) + this.FinancialPartner.GetHashCode();
                }
                if (this.DeliveryAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryAddress.GetHashCode();
                }
                if (this.InvoiceRecipient != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceRecipient.GetHashCode();
                }
                if (this.Payer != null)
                {
                    hashCode = (hashCode * 59) + this.Payer.GetHashCode();
                }
                if (this.Responsible != null)
                {
                    hashCode = (hashCode * 59) + this.Responsible.GetHashCode();
                }
                if (this.Representative != null)
                {
                    hashCode = (hashCode * 59) + this.Representative.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConvertState.GetHashCode();
                if (this.AlternativePaymentDeadline != null)
                {
                    hashCode = (hashCode * 59) + this.AlternativePaymentDeadline.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Balance.GetHashCode();
                if (this.Barcode != null)
                {
                    hashCode = (hashCode * 59) + this.Barcode.GetHashCode();
                }
                if (this.BillToText != null)
                {
                    hashCode = (hashCode * 59) + this.BillToText.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CashDiscountPercentValue.GetHashCode();
                hashCode = (hashCode * 59) + this.CashDiscountTotal.GetHashCode();
                if (this.Document != null)
                {
                    hashCode = (hashCode * 59) + this.Document.GetHashCode();
                }
                if (this.FinancialAccountingPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.FinancialAccountingPeriod.GetHashCode();
                }
                if (this.Period != null)
                {
                    hashCode = (hashCode * 59) + this.Period.GetHashCode();
                }
                if (this.States != null)
                {
                    hashCode = (hashCode * 59) + this.States.GetHashCode();
                }
                if (this.ManualVAT != null)
                {
                    hashCode = (hashCode * 59) + this.ManualVAT.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                if (this.ReferenceNr != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceNr.GetHashCode();
                }
                if (this.StandingOrder != null)
                {
                    hashCode = (hashCode * 59) + this.StandingOrder.GetHashCode();
                }
                if (this.TaxGroupId != null)
                {
                    hashCode = (hashCode * 59) + this.TaxGroupId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPriceGross.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPriceNet.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPriceTax.GetHashCode();
                hashCode = (hashCode * 59) + this.TransactionYear.GetHashCode();
                if (this.UpdateUser != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateUser.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SignedTotalPriceNet.GetHashCode();
                hashCode = (hashCode * 59) + this.SignedTotalPriceGross.GetHashCode();
                hashCode = (hashCode * 59) + this.SignedTotalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.SignedTotalPriceTax.GetHashCode();
                hashCode = (hashCode * 59) + this.Sign.GetHashCode();
                if (this.ItemGroupTermsOfPayments != null)
                {
                    hashCode = (hashCode * 59) + this.ItemGroupTermsOfPayments.GetHashCode();
                }
                if (this.Creator != null)
                {
                    hashCode = (hashCode * 59) + this.Creator.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
