// <auto-generated>
/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// CreateTransactionRequest
    /// </summary>
    public partial class CreateTransactionRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public CreateTransactionRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionRequest" /> class.
        /// </summary>
        /// <param name="creator">creator</param>
        /// <param name="currencyId">currencyId</param>
        /// <param name="date">date</param>
        /// <param name="financialAccountingPeriodId">financialAccountingPeriodId</param>
        /// <param name="financialPartner">financialPartner</param>
        /// <param name="invoiceRecipient">invoiceRecipient</param>
        /// <param name="number">number</param>
        /// <param name="payer">payer</param>
        /// <param name="paymentMethodId">paymentMethodId</param>
        /// <param name="periodId">periodId</param>
        /// <param name="representative">representative</param>
        /// <param name="responsible">responsible</param>
        /// <param name="subtypeId">subtypeId</param>
        /// <param name="taxGroupId">taxGroupId</param>
        /// <param name="termsOfPaymentId">termsOfPaymentId</param>
        /// <param name="typeId">typeId</param>
        /// <param name="alternativePaymentDeadline">alternativePaymentDeadline</param>
        /// <param name="balance">balance</param>
        /// <param name="barcode">barcode</param>
        /// <param name="billToText">billToText</param>
        /// <param name="cashDiscountPercentValue">cashDiscountPercentValue</param>
        /// <param name="cashDiscountTotal">cashDiscountTotal</param>
        /// <param name="deliveryAddress">deliveryAddress</param>
        /// <param name="deliveryDate">deliveryDate</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">dueDate</param>
        /// <param name="items">items</param>
        /// <param name="manualVAT">manualVAT</param>
        /// <param name="notes">notes</param>
        /// <param name="operationItemCombinationMode">operationItemCombinationMode</param>
        /// <param name="reference">reference</param>
        /// <param name="referenceNr">referenceNr</param>
        //[JsonConstructor]
        public CreateTransactionRequest(TransactionContactRequest creator, Guid currencyId, DateTime date, Guid financialAccountingPeriodId, TransactionContactRequest financialPartner, TransactionContactRequest invoiceRecipient, string number, TransactionContactRequest payer, Guid paymentMethodId, Guid periodId, TransactionContactRequest representative, TransactionContactRequest responsible, Guid subtypeId, Guid taxGroupId, Guid termsOfPaymentId, Guid typeId, Option<DateTime> alternativePaymentDeadline = default, Option<double> balance = default, Option<string> barcode = default, Option<string> billToText = default, Option<double> cashDiscountPercentValue = default, Option<double> cashDiscountTotal = default, Option<TransactionContactRequest> deliveryAddress = default, Option<DateTime> deliveryDate = default, Option<string> description = default, Option<DateTime> dueDate = default, Option<List<TransactionItemRequest>> items = default, Option<TransactionManualVatRequest> manualVAT = default, Option<string> notes = default, Option<OperationItemCombinationMode> operationItemCombinationMode = default, Option<string> reference = default, Option<string> referenceNr = default)
        {
            Creator = creator;
            CurrencyId = currencyId;
            Date = date;
            FinancialAccountingPeriodId = financialAccountingPeriodId;
            FinancialPartner = financialPartner;
            InvoiceRecipient = invoiceRecipient;
            Number = number;
            Payer = payer;
            PaymentMethodId = paymentMethodId;
            PeriodId = periodId;
            Representative = representative;
            Responsible = responsible;
            SubtypeId = subtypeId;
            TaxGroupId = taxGroupId;
            TermsOfPaymentId = termsOfPaymentId;
            TypeId = typeId;
            AlternativePaymentDeadlineOption = alternativePaymentDeadline;
            BalanceOption = balance;
            BarcodeOption = barcode;
            BillToTextOption = billToText;
            CashDiscountPercentValueOption = cashDiscountPercentValue;
            CashDiscountTotalOption = cashDiscountTotal;
            DeliveryAddressOption = deliveryAddress;
            DeliveryDateOption = deliveryDate;
            DescriptionOption = description;
            DueDateOption = dueDate;
            ItemsOption = items;
            ManualVATOption = manualVAT;
            NotesOption = notes;
            OperationItemCombinationModeOption = operationItemCombinationMode;
            ReferenceOption = reference;
            ReferenceNrOption = referenceNr;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OperationItemCombinationMode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<OperationItemCombinationMode>))]
        public Option<OperationItemCombinationMode> OperationItemCombinationModeOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperationItemCombinationMode
        /// </summary>
        [JsonPropertyName("operationItemCombinationMode")]
        public OperationItemCombinationMode? OperationItemCombinationMode { get { return this.OperationItemCombinationModeOption; } set { this.OperationItemCombinationModeOption = new Option<OperationItemCombinationMode>(value); } }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [JsonPropertyName("creator")]
        public TransactionContactRequest Creator { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [JsonPropertyName("currencyId")]
        public Guid CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [JsonPropertyName("date")]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets FinancialAccountingPeriodId
        /// </summary>
        [JsonPropertyName("financialAccountingPeriodId")]
        public Guid FinancialAccountingPeriodId { get; set; }

        /// <summary>
        /// Gets or Sets FinancialPartner
        /// </summary>
        [JsonPropertyName("financialPartner")]
        public TransactionContactRequest FinancialPartner { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceRecipient
        /// </summary>
        [JsonPropertyName("invoiceRecipient")]
        public TransactionContactRequest InvoiceRecipient { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Payer
        /// </summary>
        [JsonPropertyName("payer")]
        public TransactionContactRequest Payer { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethodId
        /// </summary>
        [JsonPropertyName("paymentMethodId")]
        public Guid PaymentMethodId { get; set; }

        /// <summary>
        /// Gets or Sets PeriodId
        /// </summary>
        [JsonPropertyName("periodId")]
        public Guid PeriodId { get; set; }

        /// <summary>
        /// Gets or Sets Representative
        /// </summary>
        [JsonPropertyName("representative")]
        public TransactionContactRequest Representative { get; set; }

        /// <summary>
        /// Gets or Sets Responsible
        /// </summary>
        [JsonPropertyName("responsible")]
        public TransactionContactRequest Responsible { get; set; }

        /// <summary>
        /// Gets or Sets SubtypeId
        /// </summary>
        [JsonPropertyName("subtypeId")]
        public Guid SubtypeId { get; set; }

        /// <summary>
        /// Gets or Sets TaxGroupId
        /// </summary>
        [JsonPropertyName("taxGroupId")]
        public Guid TaxGroupId { get; set; }

        /// <summary>
        /// Gets or Sets TermsOfPaymentId
        /// </summary>
        [JsonPropertyName("termsOfPaymentId")]
        public Guid TermsOfPaymentId { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [JsonPropertyName("typeId")]
        public Guid TypeId { get; set; }

        /// <summary>
        /// Used to track the state of AlternativePaymentDeadline
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> AlternativePaymentDeadlineOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlternativePaymentDeadline
        /// </summary>
        [JsonPropertyName("alternativePaymentDeadline")]
        public DateTime? AlternativePaymentDeadline { get { return this. AlternativePaymentDeadlineOption; } set { this.AlternativePaymentDeadlineOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Balance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> BalanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [JsonPropertyName("balance")]
        public double? Balance { get { return this. BalanceOption; } set { this.BalanceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Barcode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> BarcodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Barcode
        /// </summary>
        [JsonPropertyName("barcode")]
        public string? Barcode { get { return this. BarcodeOption; } set { this.BarcodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BillToText
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> BillToTextOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillToText
        /// </summary>
        [JsonPropertyName("billToText")]
        public string? BillToText { get { return this. BillToTextOption; } set { this.BillToTextOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CashDiscountPercentValue
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> CashDiscountPercentValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets CashDiscountPercentValue
        /// </summary>
        [JsonPropertyName("cashDiscountPercentValue")]
        public double? CashDiscountPercentValue { get { return this. CashDiscountPercentValueOption; } set { this.CashDiscountPercentValueOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of CashDiscountTotal
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> CashDiscountTotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets CashDiscountTotal
        /// </summary>
        [JsonPropertyName("cashDiscountTotal")]
        public double? CashDiscountTotal { get { return this. CashDiscountTotalOption; } set { this.CashDiscountTotalOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactRequest>))]
        public Option<TransactionContactRequest> DeliveryAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [JsonPropertyName("deliveryAddress")]
        public TransactionContactRequest? DeliveryAddress { get { return this. DeliveryAddressOption; } set { this.DeliveryAddressOption = new Option<TransactionContactRequest>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DeliveryDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryDate
        /// </summary>
        [JsonPropertyName("deliveryDate")]
        public DateTime? DeliveryDate { get { return this. DeliveryDateOption; } set { this.DeliveryDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this. DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DueDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [JsonPropertyName("dueDate")]
        public DateTime? DueDate { get { return this. DueDateOption; } set { this.DueDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Items
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<TransactionItemRequest>>))]
        public Option<List<TransactionItemRequest>> ItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [JsonPropertyName("items")]
        public List<TransactionItemRequest>? Items { get { return this. ItemsOption; } set { this.ItemsOption = new Option<List<TransactionItemRequest>>(value); } }

        /// <summary>
        /// Used to track the state of ManualVAT
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionManualVatRequest>))]
        public Option<TransactionManualVatRequest> ManualVATOption { get; private set; }

        /// <summary>
        /// Gets or Sets ManualVAT
        /// </summary>
        [JsonPropertyName("manualVAT")]
        public TransactionManualVatRequest? ManualVAT { get { return this. ManualVATOption; } set { this.ManualVATOption = new Option<TransactionManualVatRequest>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [JsonPropertyName("notes")]
        public string? Notes { get { return this. NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [JsonPropertyName("reference")]
        public string? Reference { get { return this. ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReferenceNr
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceNrOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReferenceNr
        /// </summary>
        [JsonPropertyName("referenceNr")]
        public string? ReferenceNr { get { return this. ReferenceNrOption; } set { this.ReferenceNrOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTransactionRequest {\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  FinancialAccountingPeriodId: ").Append(FinancialAccountingPeriodId).Append("\n");
            sb.Append("  FinancialPartner: ").Append(FinancialPartner).Append("\n");
            sb.Append("  InvoiceRecipient: ").Append(InvoiceRecipient).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Payer: ").Append(Payer).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  PeriodId: ").Append(PeriodId).Append("\n");
            sb.Append("  Representative: ").Append(Representative).Append("\n");
            sb.Append("  Responsible: ").Append(Responsible).Append("\n");
            sb.Append("  SubtypeId: ").Append(SubtypeId).Append("\n");
            sb.Append("  TaxGroupId: ").Append(TaxGroupId).Append("\n");
            sb.Append("  TermsOfPaymentId: ").Append(TermsOfPaymentId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  AlternativePaymentDeadline: ").Append(AlternativePaymentDeadline).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  BillToText: ").Append(BillToText).Append("\n");
            sb.Append("  CashDiscountPercentValue: ").Append(CashDiscountPercentValue).Append("\n");
            sb.Append("  CashDiscountTotal: ").Append(CashDiscountTotal).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ManualVAT: ").Append(ManualVAT).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  OperationItemCombinationMode: ").Append(OperationItemCombinationMode).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReferenceNr: ").Append(ReferenceNr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Notes (string) maxLength
            if (this.Notes != null && this.Notes.Length > 10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Notes, length must be less than 10000.", new [] { "Notes" });
            }

            // Notes (string) minLength
            if (this.Notes != null && this.Notes.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Notes, length must be greater than 1.", new [] { "Notes" });
            }

            // ReferenceNr (string) maxLength
            if (this.ReferenceNr != null && this.ReferenceNr.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferenceNr, length must be less than 100.", new [] { "ReferenceNr" });
            }

            // ReferenceNr (string) minLength
            if (this.ReferenceNr != null && this.ReferenceNr.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferenceNr, length must be greater than 1.", new [] { "ReferenceNr" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateTransactionRequest" />
    /// </summary>
    public class CreateTransactionRequestJsonConverter : JsonConverter<CreateTransactionRequest>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize AlternativePaymentDeadline
        /// </summary>
        public static string AlternativePaymentDeadlineFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeliveryDate
        /// </summary>
        public static string DeliveryDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CreateTransactionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateTransactionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TransactionContactRequest> creator = default;
            Option<Guid> currencyId = default;
            Option<DateTime> date = default;
            Option<Guid> financialAccountingPeriodId = default;
            Option<TransactionContactRequest> financialPartner = default;
            Option<TransactionContactRequest> invoiceRecipient = default;
            Option<string> number = default;
            Option<TransactionContactRequest> payer = default;
            Option<Guid> paymentMethodId = default;
            Option<Guid> periodId = default;
            Option<TransactionContactRequest> representative = default;
            Option<TransactionContactRequest> responsible = default;
            Option<Guid> subtypeId = default;
            Option<Guid> taxGroupId = default;
            Option<Guid> termsOfPaymentId = default;
            Option<Guid> typeId = default;
            Option<DateTime> alternativePaymentDeadline = default;
            Option<double> balance = default;
            Option<string> barcode = default;
            Option<string> billToText = default;
            Option<double> cashDiscountPercentValue = default;
            Option<double> cashDiscountTotal = default;
            Option<TransactionContactRequest> deliveryAddress = default;
            Option<DateTime> deliveryDate = default;
            Option<string> description = default;
            Option<DateTime> dueDate = default;
            Option<List<TransactionItemRequest>> items = default;
            Option<TransactionManualVatRequest> manualVAT = default;
            Option<string> notes = default;
            Option<OperationItemCombinationMode> operationItemCombinationMode = default;
            Option<string> reference = default;
            Option<string> referenceNr = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "creator":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                creator = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "currencyId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "date":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                date = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "financialAccountingPeriodId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                financialAccountingPeriodId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "financialPartner":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                financialPartner = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "invoiceRecipient":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invoiceRecipient = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString()!);
                            break;
                        case "payer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payer = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "paymentMethodId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentMethodId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "periodId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                periodId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "representative":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                representative = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "responsible":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                responsible = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "subtypeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subtypeId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "taxGroupId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxGroupId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "termsOfPaymentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                termsOfPaymentId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "typeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                typeId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "alternativePaymentDeadline":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                alternativePaymentDeadline = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "balance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balance = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "barcode":
                            barcode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "billToText":
                            billToText = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cashDiscountPercentValue":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cashDiscountPercentValue = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "cashDiscountTotal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cashDiscountTotal = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "deliveryAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryAddress = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "deliveryDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dueDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dueDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "items":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                items = new Option<List<TransactionItemRequest>>(JsonSerializer.Deserialize<List<TransactionItemRequest>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "manualVAT":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                manualVAT = new Option<TransactionManualVatRequest>(JsonSerializer.Deserialize<TransactionManualVatRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "operationItemCombinationMode":
                            string? operationItemCombinationModeRawValue = utf8JsonReader.GetString();
                            if (operationItemCombinationModeRawValue != null)
                                operationItemCombinationMode = new Option<OperationItemCombinationMode>(OperationItemCombinationModeValueConverter.FromStringOrDefault(operationItemCombinationModeRawValue));
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "referenceNr":
                            referenceNr = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!creator.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(creator));

            if (!currencyId.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(currencyId));

            if (!date.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(date));

            if (!financialAccountingPeriodId.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(financialAccountingPeriodId));

            if (!financialPartner.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(financialPartner));

            if (!invoiceRecipient.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(invoiceRecipient));

            if (!number.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(number));

            if (!payer.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(payer));

            if (!paymentMethodId.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(paymentMethodId));

            if (!periodId.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(periodId));

            if (!representative.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(representative));

            if (!responsible.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(responsible));

            if (!subtypeId.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(subtypeId));

            if (!taxGroupId.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(taxGroupId));

            if (!termsOfPaymentId.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(termsOfPaymentId));

            if (!typeId.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequest.", nameof(typeId));

            if (creator.IsSet && creator.Value == null)
                throw new ArgumentNullException(nameof(creator), "Property is not nullable for class CreateTransactionRequest.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class CreateTransactionRequest.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class CreateTransactionRequest.");

            if (financialAccountingPeriodId.IsSet && financialAccountingPeriodId.Value == null)
                throw new ArgumentNullException(nameof(financialAccountingPeriodId), "Property is not nullable for class CreateTransactionRequest.");

            if (financialPartner.IsSet && financialPartner.Value == null)
                throw new ArgumentNullException(nameof(financialPartner), "Property is not nullable for class CreateTransactionRequest.");

            if (invoiceRecipient.IsSet && invoiceRecipient.Value == null)
                throw new ArgumentNullException(nameof(invoiceRecipient), "Property is not nullable for class CreateTransactionRequest.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class CreateTransactionRequest.");

            if (payer.IsSet && payer.Value == null)
                throw new ArgumentNullException(nameof(payer), "Property is not nullable for class CreateTransactionRequest.");

            if (paymentMethodId.IsSet && paymentMethodId.Value == null)
                throw new ArgumentNullException(nameof(paymentMethodId), "Property is not nullable for class CreateTransactionRequest.");

            if (periodId.IsSet && periodId.Value == null)
                throw new ArgumentNullException(nameof(periodId), "Property is not nullable for class CreateTransactionRequest.");

            if (representative.IsSet && representative.Value == null)
                throw new ArgumentNullException(nameof(representative), "Property is not nullable for class CreateTransactionRequest.");

            if (responsible.IsSet && responsible.Value == null)
                throw new ArgumentNullException(nameof(responsible), "Property is not nullable for class CreateTransactionRequest.");

            if (subtypeId.IsSet && subtypeId.Value == null)
                throw new ArgumentNullException(nameof(subtypeId), "Property is not nullable for class CreateTransactionRequest.");

            if (taxGroupId.IsSet && taxGroupId.Value == null)
                throw new ArgumentNullException(nameof(taxGroupId), "Property is not nullable for class CreateTransactionRequest.");

            if (termsOfPaymentId.IsSet && termsOfPaymentId.Value == null)
                throw new ArgumentNullException(nameof(termsOfPaymentId), "Property is not nullable for class CreateTransactionRequest.");

            if (typeId.IsSet && typeId.Value == null)
                throw new ArgumentNullException(nameof(typeId), "Property is not nullable for class CreateTransactionRequest.");

            if (deliveryAddress.IsSet && deliveryAddress.Value == null)
                throw new ArgumentNullException(nameof(deliveryAddress), "Property is not nullable for class CreateTransactionRequest.");

            if (manualVAT.IsSet && manualVAT.Value == null)
                throw new ArgumentNullException(nameof(manualVAT), "Property is not nullable for class CreateTransactionRequest.");

            if (operationItemCombinationMode.IsSet && operationItemCombinationMode.Value == null)
                throw new ArgumentNullException(nameof(operationItemCombinationMode), "Property is not nullable for class CreateTransactionRequest.");

            //2return new CreateTransactionRequest(creator.Value!, currencyId.Value!.Value!, date.Value!.Value!, financialAccountingPeriodId.Value!.Value!, financialPartner.Value!, invoiceRecipient.Value!, number.Value!, payer.Value!, paymentMethodId.Value!.Value!, periodId.Value!.Value!, representative.Value!, responsible.Value!, subtypeId.Value!.Value!, taxGroupId.Value!.Value!, termsOfPaymentId.Value!.Value!, typeId.Value!.Value!, alternativePaymentDeadline, balance, barcode, billToText, cashDiscountPercentValue, cashDiscountTotal, deliveryAddress, deliveryDate, description, dueDate, items, manualVAT, notes, operationItemCombinationMode, reference, referenceNr);
            return new CreateTransactionRequest(creator.Value!, currencyId.Value!, date.Value!, financialAccountingPeriodId.Value!, financialPartner.Value!, invoiceRecipient.Value!, number.Value!, payer.Value!, paymentMethodId.Value!, periodId.Value!, representative.Value!, responsible.Value!, subtypeId.Value!, taxGroupId.Value!, termsOfPaymentId.Value!, typeId.Value!, alternativePaymentDeadline, balance, barcode, billToText, cashDiscountPercentValue, cashDiscountTotal, deliveryAddress, deliveryDate, description, dueDate, items, manualVAT, notes, operationItemCombinationMode, reference, referenceNr);
        }

        /// <summary>
        /// Serializes a <see cref="CreateTransactionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTransactionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateTransactionRequest createTransactionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createTransactionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateTransactionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTransactionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateTransactionRequest createTransactionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createTransactionRequest.Creator == null)
                throw new ArgumentNullException(nameof(createTransactionRequest.Creator), "Property is required for class CreateTransactionRequest.");

            if (createTransactionRequest.FinancialPartner == null)
                throw new ArgumentNullException(nameof(createTransactionRequest.FinancialPartner), "Property is required for class CreateTransactionRequest.");

            if (createTransactionRequest.InvoiceRecipient == null)
                throw new ArgumentNullException(nameof(createTransactionRequest.InvoiceRecipient), "Property is required for class CreateTransactionRequest.");

            if (createTransactionRequest.Number == null)
                throw new ArgumentNullException(nameof(createTransactionRequest.Number), "Property is required for class CreateTransactionRequest.");

            if (createTransactionRequest.Payer == null)
                throw new ArgumentNullException(nameof(createTransactionRequest.Payer), "Property is required for class CreateTransactionRequest.");

            if (createTransactionRequest.Representative == null)
                throw new ArgumentNullException(nameof(createTransactionRequest.Representative), "Property is required for class CreateTransactionRequest.");

            if (createTransactionRequest.Responsible == null)
                throw new ArgumentNullException(nameof(createTransactionRequest.Responsible), "Property is required for class CreateTransactionRequest.");

            if (createTransactionRequest.DeliveryAddressOption.IsSet && createTransactionRequest.DeliveryAddress == null)
                throw new ArgumentNullException(nameof(createTransactionRequest.DeliveryAddress), "Property is required for class CreateTransactionRequest.");

            if (createTransactionRequest.ManualVATOption.IsSet && createTransactionRequest.ManualVAT == null)
                throw new ArgumentNullException(nameof(createTransactionRequest.ManualVAT), "Property is required for class CreateTransactionRequest.");

            writer.WritePropertyName("creator");
            JsonSerializer.Serialize(writer, createTransactionRequest.Creator, jsonSerializerOptions);
            writer.WriteString("currencyId", createTransactionRequest.CurrencyId);

            writer.WriteString("date", createTransactionRequest.Date.ToString(DateFormat));

            writer.WriteString("financialAccountingPeriodId", createTransactionRequest.FinancialAccountingPeriodId);

            writer.WritePropertyName("financialPartner");
            JsonSerializer.Serialize(writer, createTransactionRequest.FinancialPartner, jsonSerializerOptions);
            writer.WritePropertyName("invoiceRecipient");
            JsonSerializer.Serialize(writer, createTransactionRequest.InvoiceRecipient, jsonSerializerOptions);
            writer.WriteString("number", createTransactionRequest.Number);

            writer.WritePropertyName("payer");
            JsonSerializer.Serialize(writer, createTransactionRequest.Payer, jsonSerializerOptions);
            writer.WriteString("paymentMethodId", createTransactionRequest.PaymentMethodId);

            writer.WriteString("periodId", createTransactionRequest.PeriodId);

            writer.WritePropertyName("representative");
            JsonSerializer.Serialize(writer, createTransactionRequest.Representative, jsonSerializerOptions);
            writer.WritePropertyName("responsible");
            JsonSerializer.Serialize(writer, createTransactionRequest.Responsible, jsonSerializerOptions);
            writer.WriteString("subtypeId", createTransactionRequest.SubtypeId);

            writer.WriteString("taxGroupId", createTransactionRequest.TaxGroupId);

            writer.WriteString("termsOfPaymentId", createTransactionRequest.TermsOfPaymentId);

            writer.WriteString("typeId", createTransactionRequest.TypeId);

            if (createTransactionRequest.AlternativePaymentDeadlineOption.IsSet)
                if (createTransactionRequest.AlternativePaymentDeadlineOption.Value != null)
                {
                    writer.WriteString("alternativePaymentDeadline", createTransactionRequest.AlternativePaymentDeadlineOption!.Value.ToString(AlternativePaymentDeadlineFormat));
                    //var __value = createTransactionRequest.AlternativePaymentDeadlineOption.Value;
                    //writer.WriteString("alternativePaymentDeadline", __value);
                }
                else
                    writer.WriteNull("alternativePaymentDeadline");

            if (createTransactionRequest.BalanceOption.IsSet)
                if (createTransactionRequest.BalanceOption.Value != null)
                {
                    writer.WriteNumber("balance", createTransactionRequest.BalanceOption!.Value);
                    //var __value = createTransactionRequest.BalanceOption.Value;
                    //writer.WriteString("balance", __value);
                }
                else
                    writer.WriteNull("balance");

            if (createTransactionRequest.BarcodeOption.IsSet)
                if (createTransactionRequest.BarcodeOption.Value != null)
                {
                    writer.WriteString("barcode", createTransactionRequest.Barcode);
                    //var __value = createTransactionRequest.BarcodeOption.Value;
                    //writer.WriteString("barcode", __value);
                }
                else
                    writer.WriteNull("barcode");

            if (createTransactionRequest.BillToTextOption.IsSet)
                if (createTransactionRequest.BillToTextOption.Value != null)
                {
                    writer.WriteString("billToText", createTransactionRequest.BillToText);
                    //var __value = createTransactionRequest.BillToTextOption.Value;
                    //writer.WriteString("billToText", __value);
                }
                else
                    writer.WriteNull("billToText");

            if (createTransactionRequest.CashDiscountPercentValueOption.IsSet)
                if (createTransactionRequest.CashDiscountPercentValueOption.Value != null)
                {
                    writer.WriteNumber("cashDiscountPercentValue", createTransactionRequest.CashDiscountPercentValueOption!.Value);
                    //var __value = createTransactionRequest.CashDiscountPercentValueOption.Value;
                    //writer.WriteString("cashDiscountPercentValue", __value);
                }
                else
                    writer.WriteNull("cashDiscountPercentValue");

            if (createTransactionRequest.CashDiscountTotalOption.IsSet)
                if (createTransactionRequest.CashDiscountTotalOption.Value != null)
                {
                    writer.WriteNumber("cashDiscountTotal", createTransactionRequest.CashDiscountTotalOption!.Value);
                    //var __value = createTransactionRequest.CashDiscountTotalOption.Value;
                    //writer.WriteString("cashDiscountTotal", __value);
                }
                else
                    writer.WriteNull("cashDiscountTotal");

            if (createTransactionRequest.DeliveryAddressOption.IsSet)
            {
                writer.WritePropertyName("deliveryAddress");
                JsonSerializer.Serialize(writer, createTransactionRequest.DeliveryAddress, jsonSerializerOptions);
            }
            if (createTransactionRequest.DeliveryDateOption.IsSet)
                if (createTransactionRequest.DeliveryDateOption.Value != null)
                {
                    writer.WriteString("deliveryDate", createTransactionRequest.DeliveryDateOption!.Value.ToString(DeliveryDateFormat));
                    //var __value = createTransactionRequest.DeliveryDateOption.Value;
                    //writer.WriteString("deliveryDate", __value);
                }
                else
                    writer.WriteNull("deliveryDate");

            if (createTransactionRequest.DescriptionOption.IsSet)
                if (createTransactionRequest.DescriptionOption.Value != null)
                {
                    writer.WriteString("description", createTransactionRequest.Description);
                    //var __value = createTransactionRequest.DescriptionOption.Value;
                    //writer.WriteString("description", __value);
                }
                else
                    writer.WriteNull("description");

            if (createTransactionRequest.DueDateOption.IsSet)
                if (createTransactionRequest.DueDateOption.Value != null)
                {
                    writer.WriteString("dueDate", createTransactionRequest.DueDateOption!.Value.ToString(DueDateFormat));
                    //var __value = createTransactionRequest.DueDateOption.Value;
                    //writer.WriteString("dueDate", __value);
                }
                else
                    writer.WriteNull("dueDate");

            if (createTransactionRequest.ItemsOption.IsSet)
                if (createTransactionRequest.ItemsOption.Value != null)
                {
                    writer.WritePropertyName("items");
                    JsonSerializer.Serialize(writer, createTransactionRequest.Items, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items");
            if (createTransactionRequest.ManualVATOption.IsSet)
            {
                writer.WritePropertyName("manualVAT");
                JsonSerializer.Serialize(writer, createTransactionRequest.ManualVAT, jsonSerializerOptions);
            }
            if (createTransactionRequest.NotesOption.IsSet)
                if (createTransactionRequest.NotesOption.Value != null)
                {
                    writer.WriteString("notes", createTransactionRequest.Notes);
                    //var __value = createTransactionRequest.NotesOption.Value;
                    //writer.WriteString("notes", __value);
                }
                else
                    writer.WriteNull("notes");

            if (createTransactionRequest.OperationItemCombinationModeOption.IsSet)
            {
                var operationItemCombinationModeRawValue = OperationItemCombinationModeValueConverter.ToJsonValue(createTransactionRequest.OperationItemCombinationMode!.Value);
                writer.WriteNumber("operationItemCombinationMode", operationItemCombinationModeRawValue);
            }
            if (createTransactionRequest.ReferenceOption.IsSet)
                if (createTransactionRequest.ReferenceOption.Value != null)
                {
                    writer.WriteString("reference", createTransactionRequest.Reference);
                    //var __value = createTransactionRequest.ReferenceOption.Value;
                    //writer.WriteString("reference", __value);
                }
                else
                    writer.WriteNull("reference");

            if (createTransactionRequest.ReferenceNrOption.IsSet)
                if (createTransactionRequest.ReferenceNrOption.Value != null)
                {
                    writer.WriteString("referenceNr", createTransactionRequest.ReferenceNr);
                    //var __value = createTransactionRequest.ReferenceNrOption.Value;
                    //writer.WriteString("referenceNr", __value);
                }
                else
                    writer.WriteNull("referenceNr");
        }
    }
}
