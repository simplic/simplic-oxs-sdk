// <auto-generated>
/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// TransactionItemTypeModel
    /// </summary>
    public partial class TransactionItemTypeModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TransactionItemTypeModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionItemTypeModel" /> class.
        /// </summary>
        /// <param name="articleGLAResolver">articleGLAResolver</param>
        /// <param name="createDateTime">createDateTime</param>
        /// <param name="createUserId">createUserId</param>
        /// <param name="createUserName">createUserName</param>
        /// <param name="dataTemplate">dataTemplate</param>
        /// <param name="detailHtml">detailHtml</param>
        /// <param name="hasPositionNumber">hasPositionNumber</param>
        /// <param name="id">id</param>
        /// <param name="isDeleted">isDeleted</param>
        /// <param name="isSelectable">isSelectable</param>
        /// <param name="name">name</param>
        /// <param name="number">number</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="updateDateTime">updateDateTime</param>
        /// <param name="updateUserId">updateUserId</param>
        /// <param name="updateUserName">updateUserName</param>
        //[JsonConstructor]
        public TransactionItemTypeModel(Option<string> articleGLAResolver = default, Option<DateTime> createDateTime = default, Option<Guid> createUserId = default, Option<string> createUserName = default, Option<string> dataTemplate = default, Option<string> detailHtml = default, Option<bool> hasPositionNumber = default, Option<Guid> id = default, Option<bool> isDeleted = default, Option<bool> isSelectable = default, Option<string> name = default, Option<int> number = default, Option<Guid> organizationId = default, Option<DateTime> updateDateTime = default, Option<Guid> updateUserId = default, Option<string> updateUserName = default)
        {
            ArticleGLAResolverOption = articleGLAResolver;
            CreateDateTimeOption = createDateTime;
            CreateUserIdOption = createUserId;
            CreateUserNameOption = createUserName;
            DataTemplateOption = dataTemplate;
            DetailHtmlOption = detailHtml;
            HasPositionNumberOption = hasPositionNumber;
            IdOption = id;
            IsDeletedOption = isDeleted;
            IsSelectableOption = isSelectable;
            NameOption = name;
            NumberOption = number;
            OrganizationIdOption = organizationId;
            UpdateDateTimeOption = updateDateTime;
            UpdateUserIdOption = updateUserId;
            UpdateUserNameOption = updateUserName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ArticleGLAResolver
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ArticleGLAResolverOption { get; private set; }

        /// <summary>
        /// Gets or Sets ArticleGLAResolver
        /// </summary>
        [JsonPropertyName("articleGLAResolver")]
        public string? ArticleGLAResolver { get { return this. ArticleGLAResolverOption; } set { this.ArticleGLAResolverOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CreateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserId
        /// </summary>
        [JsonPropertyName("createUserId")]
        public Guid? CreateUserId { get { return this. CreateUserIdOption; } set { this.CreateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserName
        /// </summary>
        [JsonPropertyName("createUserName")]
        public string? CreateUserName { get { return this. CreateUserNameOption; } set { this.CreateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DataTemplate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DataTemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataTemplate
        /// </summary>
        [JsonPropertyName("dataTemplate")]
        public string? DataTemplate { get { return this. DataTemplateOption; } set { this.DataTemplateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DetailHtml
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DetailHtmlOption { get; private set; }

        /// <summary>
        /// Gets or Sets DetailHtml
        /// </summary>
        [JsonPropertyName("detailHtml")]
        public string? DetailHtml { get { return this. DetailHtmlOption; } set { this.DetailHtmlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of HasPositionNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> HasPositionNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets HasPositionNumber
        /// </summary>
        [JsonPropertyName("hasPositionNumber")]
        public bool? HasPositionNumber { get { return this. HasPositionNumberOption; } set { this.HasPositionNumberOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of IsSelectable
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsSelectableOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsSelectable
        /// </summary>
        [JsonPropertyName("isSelectable")]
        public bool? IsSelectable { get { return this. IsSelectableOption; } set { this.IsSelectableOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public int? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of UpdateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UpdateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateDateTime
        /// </summary>
        [JsonPropertyName("updateDateTime")]
        public DateTime? UpdateDateTime { get { return this. UpdateDateTimeOption; } set { this.UpdateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UpdateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserId
        /// </summary>
        [JsonPropertyName("updateUserId")]
        public Guid? UpdateUserId { get { return this. UpdateUserIdOption; } set { this.UpdateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> UpdateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserName
        /// </summary>
        [JsonPropertyName("updateUserName")]
        public string? UpdateUserName { get { return this. UpdateUserNameOption; } set { this.UpdateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionItemTypeModel {\n");
            sb.Append("  ArticleGLAResolver: ").Append(ArticleGLAResolver).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  CreateUserName: ").Append(CreateUserName).Append("\n");
            sb.Append("  DataTemplate: ").Append(DataTemplate).Append("\n");
            sb.Append("  DetailHtml: ").Append(DetailHtml).Append("\n");
            sb.Append("  HasPositionNumber: ").Append(HasPositionNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  IsSelectable: ").Append(IsSelectable).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("  UpdateUserName: ").Append(UpdateUserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionItemTypeModel" />
    /// </summary>
    public class TransactionItemTypeModelJsonConverter : JsonConverter<TransactionItemTypeModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateDateTime
        /// </summary>
        public static string UpdateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TransactionItemTypeModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionItemTypeModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> articleGLAResolver = default;
            Option<DateTime> createDateTime = default;
            Option<Guid> createUserId = default;
            Option<string> createUserName = default;
            Option<string> dataTemplate = default;
            Option<string> detailHtml = default;
            Option<bool> hasPositionNumber = default;
            Option<Guid> id = default;
            Option<bool> isDeleted = default;
            Option<bool> isSelectable = default;
            Option<string> name = default;
            Option<int> number = default;
            Option<Guid> organizationId = default;
            Option<DateTime> updateDateTime = default;
            Option<Guid> updateUserId = default;
            Option<string> updateUserName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "articleGLAResolver":
                            articleGLAResolver = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "createUserName":
                            createUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dataTemplate":
                            dataTemplate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "detailHtml":
                            detailHtml = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "hasPositionNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hasPositionNumber = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "isSelectable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isSelectable = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                number = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "updateDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "updateUserName":
                            updateUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class TransactionItemTypeModel.");

            if (hasPositionNumber.IsSet && hasPositionNumber.Value == null)
                throw new ArgumentNullException(nameof(hasPositionNumber), "Property is not nullable for class TransactionItemTypeModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TransactionItemTypeModel.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class TransactionItemTypeModel.");

            if (isSelectable.IsSet && isSelectable.Value == null)
                throw new ArgumentNullException(nameof(isSelectable), "Property is not nullable for class TransactionItemTypeModel.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class TransactionItemTypeModel.");

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class TransactionItemTypeModel.");

            if (updateDateTime.IsSet && updateDateTime.Value == null)
                throw new ArgumentNullException(nameof(updateDateTime), "Property is not nullable for class TransactionItemTypeModel.");

            //2return new TransactionItemTypeModel(articleGLAResolver, createDateTime, createUserId, createUserName, dataTemplate, detailHtml, hasPositionNumber, id, isDeleted, isSelectable, name, number, organizationId, updateDateTime, updateUserId, updateUserName);
            return new TransactionItemTypeModel(articleGLAResolver, createDateTime, createUserId, createUserName, dataTemplate, detailHtml, hasPositionNumber, id, isDeleted, isSelectable, name, number, organizationId, updateDateTime, updateUserId, updateUserName);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionItemTypeModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionItemTypeModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionItemTypeModel transactionItemTypeModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, transactionItemTypeModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionItemTypeModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionItemTypeModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TransactionItemTypeModel transactionItemTypeModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionItemTypeModel.ArticleGLAResolverOption.IsSet)
                if (transactionItemTypeModel.ArticleGLAResolverOption.Value != null)
                {
                    writer.WriteString("articleGLAResolver", transactionItemTypeModel.ArticleGLAResolver);
                    //var __value = transactionItemTypeModel.ArticleGLAResolverOption.Value;
                    //writer.WriteString("articleGLAResolver", __value);
                }
                else
                    writer.WriteNull("articleGLAResolver");

            if (transactionItemTypeModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", transactionItemTypeModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (transactionItemTypeModel.CreateUserIdOption.IsSet)
                if (transactionItemTypeModel.CreateUserIdOption.Value != null)
                {
                    writer.WriteString("createUserId", transactionItemTypeModel.CreateUserIdOption!.Value);
                    //var __value = transactionItemTypeModel.CreateUserIdOption.Value;
                    //writer.WriteString("createUserId", __value);
                }
                else
                    writer.WriteNull("createUserId");

            if (transactionItemTypeModel.CreateUserNameOption.IsSet)
                if (transactionItemTypeModel.CreateUserNameOption.Value != null)
                {
                    writer.WriteString("createUserName", transactionItemTypeModel.CreateUserName);
                    //var __value = transactionItemTypeModel.CreateUserNameOption.Value;
                    //writer.WriteString("createUserName", __value);
                }
                else
                    writer.WriteNull("createUserName");

            if (transactionItemTypeModel.DataTemplateOption.IsSet)
                if (transactionItemTypeModel.DataTemplateOption.Value != null)
                {
                    writer.WriteString("dataTemplate", transactionItemTypeModel.DataTemplate);
                    //var __value = transactionItemTypeModel.DataTemplateOption.Value;
                    //writer.WriteString("dataTemplate", __value);
                }
                else
                    writer.WriteNull("dataTemplate");

            if (transactionItemTypeModel.DetailHtmlOption.IsSet)
                if (transactionItemTypeModel.DetailHtmlOption.Value != null)
                {
                    writer.WriteString("detailHtml", transactionItemTypeModel.DetailHtml);
                    //var __value = transactionItemTypeModel.DetailHtmlOption.Value;
                    //writer.WriteString("detailHtml", __value);
                }
                else
                    writer.WriteNull("detailHtml");

            if (transactionItemTypeModel.HasPositionNumberOption.IsSet)
                writer.WriteBoolean("hasPositionNumber", transactionItemTypeModel.HasPositionNumberOption!.Value);

            if (transactionItemTypeModel.IdOption.IsSet)
                writer.WriteString("id", transactionItemTypeModel.IdOption!.Value);

            if (transactionItemTypeModel.IsDeletedOption.IsSet)
                writer.WriteBoolean("isDeleted", transactionItemTypeModel.IsDeletedOption!.Value);

            if (transactionItemTypeModel.IsSelectableOption.IsSet)
                writer.WriteBoolean("isSelectable", transactionItemTypeModel.IsSelectableOption!.Value);

            if (transactionItemTypeModel.NameOption.IsSet)
                if (transactionItemTypeModel.NameOption.Value != null)
                {
                    writer.WriteString("name", transactionItemTypeModel.Name);
                    //var __value = transactionItemTypeModel.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (transactionItemTypeModel.NumberOption.IsSet)
                writer.WriteNumber("number", transactionItemTypeModel.NumberOption!.Value);

            if (transactionItemTypeModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", transactionItemTypeModel.OrganizationIdOption!.Value);

            if (transactionItemTypeModel.UpdateDateTimeOption.IsSet)
                writer.WriteString("updateDateTime", transactionItemTypeModel.UpdateDateTimeOption!.Value.ToString(UpdateDateTimeFormat));

            if (transactionItemTypeModel.UpdateUserIdOption.IsSet)
                if (transactionItemTypeModel.UpdateUserIdOption.Value != null)
                {
                    writer.WriteString("updateUserId", transactionItemTypeModel.UpdateUserIdOption!.Value);
                    //var __value = transactionItemTypeModel.UpdateUserIdOption.Value;
                    //writer.WriteString("updateUserId", __value);
                }
                else
                    writer.WriteNull("updateUserId");

            if (transactionItemTypeModel.UpdateUserNameOption.IsSet)
                if (transactionItemTypeModel.UpdateUserNameOption.Value != null)
                {
                    writer.WriteString("updateUserName", transactionItemTypeModel.UpdateUserName);
                    //var __value = transactionItemTypeModel.UpdateUserNameOption.Value;
                    //writer.WriteString("updateUserName", __value);
                }
                else
                    writer.WriteNull("updateUserName");
        }
    }
}
