/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// TransactionItemRequest
    /// </summary>
    [DataContract(Name = "TransactionItemRequest")]
    public partial class TransactionItemRequest : IEquatable<TransactionItemRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ValueOperator
        /// </summary>
        [DataMember(Name = "valueOperator", EmitDefaultValue = false)]
        public ValueOperator? ValueOperator { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentMode
        /// </summary>
        [DataMember(Name = "assignmentMode", EmitDefaultValue = false)]
        public AssignmentMode? AssignmentMode { get; set; }

        /// <summary>
        /// Gets or Sets InputPriceType
        /// </summary>
        [DataMember(Name = "inputPriceType", EmitDefaultValue = false)]
        public InputPriceType? InputPriceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionItemRequest" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="text">text.</param>
        /// <param name="typeId">typeId.</param>
        /// <param name="sortNumber">sortNumber.</param>
        /// <param name="deserializationType">deserializationType.</param>
        /// <param name="valueOperator">valueOperator.</param>
        /// <param name="assignmentMode">assignmentMode.</param>
        /// <param name="amount">amount.</param>
        /// <param name="behaviorDefinitions">behaviorDefinitions.</param>
        /// <param name="inputPrice">inputPrice.</param>
        /// <param name="inputPriceType">inputPriceType.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="unitId">unitId.</param>
        /// <param name="articleId">articleId.</param>
        /// <param name="deltaValue">deltaValue.</param>
        /// <param name="items">items.</param>
        public TransactionItemRequest(Guid id = default(Guid), string text = default(string), Guid? typeId = default(Guid?), int? sortNumber = default(int?), string deserializationType = default(string), ValueOperator? valueOperator = default(ValueOperator?), AssignmentMode? assignmentMode = default(AssignmentMode?), double? amount = default(double?), List<BehaviorDefinitionRequest> behaviorDefinitions = default(List<BehaviorDefinitionRequest>), double? inputPrice = default(double?), InputPriceType? inputPriceType = default(InputPriceType?), double? quantity = default(double?), Guid? unitId = default(Guid?), Guid? articleId = default(Guid?), double? deltaValue = default(double?), List<TransactionItemRequest> items = default(List<TransactionItemRequest>))
        {
            this.Id = id;
            this.Text = text;
            this.TypeId = typeId;
            this.SortNumber = sortNumber;
            this.DeserializationType = deserializationType;
            this.ValueOperator = valueOperator;
            this.AssignmentMode = assignmentMode;
            this.Amount = amount;
            this.BehaviorDefinitions = behaviorDefinitions;
            this.InputPrice = inputPrice;
            this.InputPriceType = inputPriceType;
            this.Quantity = quantity;
            this.UnitId = unitId;
            this.ArticleId = articleId;
            this.DeltaValue = deltaValue;
            this.Items = items;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "typeId", EmitDefaultValue = true)]
        public Guid? TypeId { get; set; }

        /// <summary>
        /// Gets or Sets SortNumber
        /// </summary>
        [DataMember(Name = "sortNumber", EmitDefaultValue = true)]
        public int? SortNumber { get; set; }

        /// <summary>
        /// Gets or Sets DeserializationType
        /// </summary>
        [DataMember(Name = "deserializationType", EmitDefaultValue = true)]
        public string DeserializationType { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets BehaviorDefinitions
        /// </summary>
        [DataMember(Name = "behaviorDefinitions", EmitDefaultValue = true)]
        public List<BehaviorDefinitionRequest> BehaviorDefinitions { get; set; }

        /// <summary>
        /// Gets or Sets InputPrice
        /// </summary>
        [DataMember(Name = "inputPrice", EmitDefaultValue = true)]
        public double? InputPrice { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = true)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets UnitId
        /// </summary>
        [DataMember(Name = "unitId", EmitDefaultValue = true)]
        public Guid? UnitId { get; set; }

        /// <summary>
        /// Gets or Sets ArticleId
        /// </summary>
        [DataMember(Name = "articleId", EmitDefaultValue = true)]
        public Guid? ArticleId { get; set; }

        /// <summary>
        /// Gets or Sets DeltaValue
        /// </summary>
        [DataMember(Name = "deltaValue", EmitDefaultValue = true)]
        public double? DeltaValue { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = true)]
        public List<TransactionItemRequest> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionItemRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  SortNumber: ").Append(SortNumber).Append("\n");
            sb.Append("  DeserializationType: ").Append(DeserializationType).Append("\n");
            sb.Append("  ValueOperator: ").Append(ValueOperator).Append("\n");
            sb.Append("  AssignmentMode: ").Append(AssignmentMode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BehaviorDefinitions: ").Append(BehaviorDefinitions).Append("\n");
            sb.Append("  InputPrice: ").Append(InputPrice).Append("\n");
            sb.Append("  InputPriceType: ").Append(InputPriceType).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitId: ").Append(UnitId).Append("\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  DeltaValue: ").Append(DeltaValue).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionItemRequest);
        }

        /// <summary>
        /// Returns true if TransactionItemRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionItemRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionItemRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.SortNumber == input.SortNumber ||
                    (this.SortNumber != null &&
                    this.SortNumber.Equals(input.SortNumber))
                ) && 
                (
                    this.DeserializationType == input.DeserializationType ||
                    (this.DeserializationType != null &&
                    this.DeserializationType.Equals(input.DeserializationType))
                ) && 
                (
                    this.ValueOperator == input.ValueOperator ||
                    this.ValueOperator.Equals(input.ValueOperator)
                ) && 
                (
                    this.AssignmentMode == input.AssignmentMode ||
                    this.AssignmentMode.Equals(input.AssignmentMode)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BehaviorDefinitions == input.BehaviorDefinitions ||
                    this.BehaviorDefinitions != null &&
                    input.BehaviorDefinitions != null &&
                    this.BehaviorDefinitions.SequenceEqual(input.BehaviorDefinitions)
                ) && 
                (
                    this.InputPrice == input.InputPrice ||
                    (this.InputPrice != null &&
                    this.InputPrice.Equals(input.InputPrice))
                ) && 
                (
                    this.InputPriceType == input.InputPriceType ||
                    this.InputPriceType.Equals(input.InputPriceType)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.UnitId == input.UnitId ||
                    (this.UnitId != null &&
                    this.UnitId.Equals(input.UnitId))
                ) && 
                (
                    this.ArticleId == input.ArticleId ||
                    (this.ArticleId != null &&
                    this.ArticleId.Equals(input.ArticleId))
                ) && 
                (
                    this.DeltaValue == input.DeltaValue ||
                    (this.DeltaValue != null &&
                    this.DeltaValue.Equals(input.DeltaValue))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.TypeId != null)
                {
                    hashCode = (hashCode * 59) + this.TypeId.GetHashCode();
                }
                if (this.SortNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SortNumber.GetHashCode();
                }
                if (this.DeserializationType != null)
                {
                    hashCode = (hashCode * 59) + this.DeserializationType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ValueOperator.GetHashCode();
                hashCode = (hashCode * 59) + this.AssignmentMode.GetHashCode();
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.BehaviorDefinitions != null)
                {
                    hashCode = (hashCode * 59) + this.BehaviorDefinitions.GetHashCode();
                }
                if (this.InputPrice != null)
                {
                    hashCode = (hashCode * 59) + this.InputPrice.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InputPriceType.GetHashCode();
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                if (this.UnitId != null)
                {
                    hashCode = (hashCode * 59) + this.UnitId.GetHashCode();
                }
                if (this.ArticleId != null)
                {
                    hashCode = (hashCode * 59) + this.ArticleId.GetHashCode();
                }
                if (this.DeltaValue != null)
                {
                    hashCode = (hashCode * 59) + this.DeltaValue.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Quantity (double?) minimum
            if (this.Quantity < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 0.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
