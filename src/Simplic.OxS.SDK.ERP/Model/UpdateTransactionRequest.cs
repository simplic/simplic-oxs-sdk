// <auto-generated>
/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// UpdateTransactionRequest
    /// </summary>
    public partial class UpdateTransactionRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public UpdateTransactionRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateTransactionRequest" /> class.
        /// </summary>
        /// <param name="alternativePaymentDeadline">alternativePaymentDeadline</param>
        /// <param name="balance">balance</param>
        /// <param name="barcode">barcode</param>
        /// <param name="billToText">billToText</param>
        /// <param name="cashDiscountPercentValue">cashDiscountPercentValue</param>
        /// <param name="cashDiscountTotal">cashDiscountTotal</param>
        /// <param name="currencyId">currencyId</param>
        /// <param name="date">date</param>
        /// <param name="deliveryAddress">deliveryAddress</param>
        /// <param name="deliveryDate">deliveryDate</param>
        /// <param name="description">description</param>
        /// <param name="dueDate">dueDate</param>
        /// <param name="financialAccountingPeriodId">financialAccountingPeriodId</param>
        /// <param name="financialPartner">financialPartner</param>
        /// <param name="invoiceRecipient">invoiceRecipient</param>
        /// <param name="items">items</param>
        /// <param name="manualVAT">manualVAT</param>
        /// <param name="notes">notes</param>
        /// <param name="number">number</param>
        /// <param name="operationItemCombinationMode">operationItemCombinationMode</param>
        /// <param name="payer">payer</param>
        /// <param name="paymentMethodId">paymentMethodId</param>
        /// <param name="periodId">periodId</param>
        /// <param name="reference">reference</param>
        /// <param name="referenceNr">referenceNr</param>
        /// <param name="representative">representative</param>
        /// <param name="responsible">responsible</param>
        /// <param name="subtypeId">subtypeId</param>
        /// <param name="taxGroupId">taxGroupId</param>
        /// <param name="termsOfPaymentId">termsOfPaymentId</param>
        /// <param name="typeId">typeId</param>
        //[JsonConstructor]
        public UpdateTransactionRequest(Option<DateTime> alternativePaymentDeadline = default, Option<double> balance = default, Option<string> barcode = default, Option<string> billToText = default, Option<double> cashDiscountPercentValue = default, Option<double> cashDiscountTotal = default, Option<Guid> currencyId = default, Option<DateTime> date = default, Option<TransactionContactRequest> deliveryAddress = default, Option<DateTime> deliveryDate = default, Option<string> description = default, Option<DateTime> dueDate = default, Option<Guid> financialAccountingPeriodId = default, Option<TransactionContactRequest> financialPartner = default, Option<TransactionContactRequest> invoiceRecipient = default, Option<List<TransactionItemRequest>> items = default, Option<TransactionManualVatRequest> manualVAT = default, Option<string> notes = default, Option<string> number = default, Option<OperationItemCombinationMode> operationItemCombinationMode = default, Option<TransactionContactRequest> payer = default, Option<Guid> paymentMethodId = default, Option<Guid> periodId = default, Option<string> reference = default, Option<string> referenceNr = default, Option<TransactionContactRequest> representative = default, Option<TransactionContactRequest> responsible = default, Option<Guid> subtypeId = default, Option<Guid> taxGroupId = default, Option<Guid> termsOfPaymentId = default, Option<Guid> typeId = default)
        {
            AlternativePaymentDeadlineOption = alternativePaymentDeadline;
            BalanceOption = balance;
            BarcodeOption = barcode;
            BillToTextOption = billToText;
            CashDiscountPercentValueOption = cashDiscountPercentValue;
            CashDiscountTotalOption = cashDiscountTotal;
            CurrencyIdOption = currencyId;
            DateOption = date;
            DeliveryAddressOption = deliveryAddress;
            DeliveryDateOption = deliveryDate;
            DescriptionOption = description;
            DueDateOption = dueDate;
            FinancialAccountingPeriodIdOption = financialAccountingPeriodId;
            FinancialPartnerOption = financialPartner;
            InvoiceRecipientOption = invoiceRecipient;
            ItemsOption = items;
            ManualVATOption = manualVAT;
            NotesOption = notes;
            NumberOption = number;
            OperationItemCombinationModeOption = operationItemCombinationMode;
            PayerOption = payer;
            PaymentMethodIdOption = paymentMethodId;
            PeriodIdOption = periodId;
            ReferenceOption = reference;
            ReferenceNrOption = referenceNr;
            RepresentativeOption = representative;
            ResponsibleOption = responsible;
            SubtypeIdOption = subtypeId;
            TaxGroupIdOption = taxGroupId;
            TermsOfPaymentIdOption = termsOfPaymentId;
            TypeIdOption = typeId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OperationItemCombinationMode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<OperationItemCombinationMode>))]
        public Option<OperationItemCombinationMode> OperationItemCombinationModeOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperationItemCombinationMode
        /// </summary>
        [JsonPropertyName("operationItemCombinationMode")]
        public OperationItemCombinationMode? OperationItemCombinationMode { get { return this.OperationItemCombinationModeOption; } set { this.OperationItemCombinationModeOption = new Option<OperationItemCombinationMode>(value); } }

        /// <summary>
        /// Used to track the state of AlternativePaymentDeadline
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> AlternativePaymentDeadlineOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlternativePaymentDeadline
        /// </summary>
        [JsonPropertyName("alternativePaymentDeadline")]
        public DateTime? AlternativePaymentDeadline { get { return this. AlternativePaymentDeadlineOption; } set { this.AlternativePaymentDeadlineOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Balance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> BalanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [JsonPropertyName("balance")]
        public double? Balance { get { return this. BalanceOption; } set { this.BalanceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Barcode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> BarcodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Barcode
        /// </summary>
        [JsonPropertyName("barcode")]
        public string? Barcode { get { return this. BarcodeOption; } set { this.BarcodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BillToText
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> BillToTextOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillToText
        /// </summary>
        [JsonPropertyName("billToText")]
        public string? BillToText { get { return this. BillToTextOption; } set { this.BillToTextOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CashDiscountPercentValue
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> CashDiscountPercentValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets CashDiscountPercentValue
        /// </summary>
        [JsonPropertyName("cashDiscountPercentValue")]
        public double? CashDiscountPercentValue { get { return this. CashDiscountPercentValueOption; } set { this.CashDiscountPercentValueOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of CashDiscountTotal
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> CashDiscountTotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets CashDiscountTotal
        /// </summary>
        [JsonPropertyName("cashDiscountTotal")]
        public double? CashDiscountTotal { get { return this. CashDiscountTotalOption; } set { this.CashDiscountTotalOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CurrencyIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [JsonPropertyName("currencyId")]
        public Guid? CurrencyId { get { return this. CurrencyIdOption; } set { this.CurrencyIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [JsonPropertyName("date")]
        public DateTime? Date { get { return this. DateOption; } set { this.DateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactRequest>))]
        public Option<TransactionContactRequest> DeliveryAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [JsonPropertyName("deliveryAddress")]
        public TransactionContactRequest? DeliveryAddress { get { return this. DeliveryAddressOption; } set { this.DeliveryAddressOption = new Option<TransactionContactRequest>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DeliveryDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryDate
        /// </summary>
        [JsonPropertyName("deliveryDate")]
        public DateTime? DeliveryDate { get { return this. DeliveryDateOption; } set { this.DeliveryDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this. DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DueDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [JsonPropertyName("dueDate")]
        public DateTime? DueDate { get { return this. DueDateOption; } set { this.DueDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of FinancialAccountingPeriodId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> FinancialAccountingPeriodIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets FinancialAccountingPeriodId
        /// </summary>
        [JsonPropertyName("financialAccountingPeriodId")]
        public Guid? FinancialAccountingPeriodId { get { return this. FinancialAccountingPeriodIdOption; } set { this.FinancialAccountingPeriodIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of FinancialPartner
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactRequest>))]
        public Option<TransactionContactRequest> FinancialPartnerOption { get; private set; }

        /// <summary>
        /// Gets or Sets FinancialPartner
        /// </summary>
        [JsonPropertyName("financialPartner")]
        public TransactionContactRequest? FinancialPartner { get { return this. FinancialPartnerOption; } set { this.FinancialPartnerOption = new Option<TransactionContactRequest>(value); } }

        /// <summary>
        /// Used to track the state of InvoiceRecipient
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactRequest>))]
        public Option<TransactionContactRequest> InvoiceRecipientOption { get; private set; }

        /// <summary>
        /// Gets or Sets InvoiceRecipient
        /// </summary>
        [JsonPropertyName("invoiceRecipient")]
        public TransactionContactRequest? InvoiceRecipient { get { return this. InvoiceRecipientOption; } set { this.InvoiceRecipientOption = new Option<TransactionContactRequest>(value); } }

        /// <summary>
        /// Used to track the state of Items
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<TransactionItemRequest>>))]
        public Option<List<TransactionItemRequest>> ItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [JsonPropertyName("items")]
        public List<TransactionItemRequest>? Items { get { return this. ItemsOption; } set { this.ItemsOption = new Option<List<TransactionItemRequest>>(value); } }

        /// <summary>
        /// Used to track the state of ManualVAT
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionManualVatRequest>))]
        public Option<TransactionManualVatRequest> ManualVATOption { get; private set; }

        /// <summary>
        /// Gets or Sets ManualVAT
        /// </summary>
        [JsonPropertyName("manualVAT")]
        public TransactionManualVatRequest? ManualVAT { get { return this. ManualVATOption; } set { this.ManualVATOption = new Option<TransactionManualVatRequest>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [JsonPropertyName("notes")]
        public string? Notes { get { return this. NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Payer
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactRequest>))]
        public Option<TransactionContactRequest> PayerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Payer
        /// </summary>
        [JsonPropertyName("payer")]
        public TransactionContactRequest? Payer { get { return this. PayerOption; } set { this.PayerOption = new Option<TransactionContactRequest>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethodId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> PaymentMethodIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentMethodId
        /// </summary>
        [JsonPropertyName("paymentMethodId")]
        public Guid? PaymentMethodId { get { return this. PaymentMethodIdOption; } set { this.PaymentMethodIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of PeriodId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> PeriodIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PeriodId
        /// </summary>
        [JsonPropertyName("periodId")]
        public Guid? PeriodId { get { return this. PeriodIdOption; } set { this.PeriodIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [JsonPropertyName("reference")]
        public string? Reference { get { return this. ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReferenceNr
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceNrOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReferenceNr
        /// </summary>
        [JsonPropertyName("referenceNr")]
        public string? ReferenceNr { get { return this. ReferenceNrOption; } set { this.ReferenceNrOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Representative
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactRequest>))]
        public Option<TransactionContactRequest> RepresentativeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Representative
        /// </summary>
        [JsonPropertyName("representative")]
        public TransactionContactRequest? Representative { get { return this. RepresentativeOption; } set { this.RepresentativeOption = new Option<TransactionContactRequest>(value); } }

        /// <summary>
        /// Used to track the state of Responsible
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionContactRequest>))]
        public Option<TransactionContactRequest> ResponsibleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Responsible
        /// </summary>
        [JsonPropertyName("responsible")]
        public TransactionContactRequest? Responsible { get { return this. ResponsibleOption; } set { this.ResponsibleOption = new Option<TransactionContactRequest>(value); } }

        /// <summary>
        /// Used to track the state of SubtypeId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> SubtypeIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubtypeId
        /// </summary>
        [JsonPropertyName("subtypeId")]
        public Guid? SubtypeId { get { return this. SubtypeIdOption; } set { this.SubtypeIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of TaxGroupId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TaxGroupIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TaxGroupId
        /// </summary>
        [JsonPropertyName("taxGroupId")]
        public Guid? TaxGroupId { get { return this. TaxGroupIdOption; } set { this.TaxGroupIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of TermsOfPaymentId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TermsOfPaymentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TermsOfPaymentId
        /// </summary>
        [JsonPropertyName("termsOfPaymentId")]
        public Guid? TermsOfPaymentId { get { return this. TermsOfPaymentIdOption; } set { this.TermsOfPaymentIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of TypeId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TypeIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [JsonPropertyName("typeId")]
        public Guid? TypeId { get { return this. TypeIdOption; } set { this.TypeIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateTransactionRequest {\n");
            sb.Append("  AlternativePaymentDeadline: ").Append(AlternativePaymentDeadline).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  BillToText: ").Append(BillToText).Append("\n");
            sb.Append("  CashDiscountPercentValue: ").Append(CashDiscountPercentValue).Append("\n");
            sb.Append("  CashDiscountTotal: ").Append(CashDiscountTotal).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  FinancialAccountingPeriodId: ").Append(FinancialAccountingPeriodId).Append("\n");
            sb.Append("  FinancialPartner: ").Append(FinancialPartner).Append("\n");
            sb.Append("  InvoiceRecipient: ").Append(InvoiceRecipient).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ManualVAT: ").Append(ManualVAT).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OperationItemCombinationMode: ").Append(OperationItemCombinationMode).Append("\n");
            sb.Append("  Payer: ").Append(Payer).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  PeriodId: ").Append(PeriodId).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReferenceNr: ").Append(ReferenceNr).Append("\n");
            sb.Append("  Representative: ").Append(Representative).Append("\n");
            sb.Append("  Responsible: ").Append(Responsible).Append("\n");
            sb.Append("  SubtypeId: ").Append(SubtypeId).Append("\n");
            sb.Append("  TaxGroupId: ").Append(TaxGroupId).Append("\n");
            sb.Append("  TermsOfPaymentId: ").Append(TermsOfPaymentId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Notes (string) maxLength
            if (this.Notes != null && this.Notes.Length > 10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Notes, length must be less than 10000.", new [] { "Notes" });
            }

            // Notes (string) minLength
            if (this.Notes != null && this.Notes.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Notes, length must be greater than 1.", new [] { "Notes" });
            }

            // ReferenceNr (string) maxLength
            if (this.ReferenceNr != null && this.ReferenceNr.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferenceNr, length must be less than 100.", new [] { "ReferenceNr" });
            }

            // ReferenceNr (string) minLength
            if (this.ReferenceNr != null && this.ReferenceNr.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferenceNr, length must be greater than 1.", new [] { "ReferenceNr" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateTransactionRequest" />
    /// </summary>
    public class UpdateTransactionRequestJsonConverter : JsonConverter<UpdateTransactionRequest>
    {
        /// <summary>
        /// The format to use to serialize AlternativePaymentDeadline
        /// </summary>
        public static string AlternativePaymentDeadlineFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeliveryDate
        /// </summary>
        public static string DeliveryDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UpdateTransactionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateTransactionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> alternativePaymentDeadline = default;
            Option<double> balance = default;
            Option<string> barcode = default;
            Option<string> billToText = default;
            Option<double> cashDiscountPercentValue = default;
            Option<double> cashDiscountTotal = default;
            Option<Guid> currencyId = default;
            Option<DateTime> date = default;
            Option<TransactionContactRequest> deliveryAddress = default;
            Option<DateTime> deliveryDate = default;
            Option<string> description = default;
            Option<DateTime> dueDate = default;
            Option<Guid> financialAccountingPeriodId = default;
            Option<TransactionContactRequest> financialPartner = default;
            Option<TransactionContactRequest> invoiceRecipient = default;
            Option<List<TransactionItemRequest>> items = default;
            Option<TransactionManualVatRequest> manualVAT = default;
            Option<string> notes = default;
            Option<string> number = default;
            Option<OperationItemCombinationMode> operationItemCombinationMode = default;
            Option<TransactionContactRequest> payer = default;
            Option<Guid> paymentMethodId = default;
            Option<Guid> periodId = default;
            Option<string> reference = default;
            Option<string> referenceNr = default;
            Option<TransactionContactRequest> representative = default;
            Option<TransactionContactRequest> responsible = default;
            Option<Guid> subtypeId = default;
            Option<Guid> taxGroupId = default;
            Option<Guid> termsOfPaymentId = default;
            Option<Guid> typeId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "alternativePaymentDeadline":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                alternativePaymentDeadline = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "balance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balance = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "barcode":
                            barcode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "billToText":
                            billToText = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cashDiscountPercentValue":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cashDiscountPercentValue = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "cashDiscountTotal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cashDiscountTotal = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "currencyId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "date":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                date = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryAddress = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "deliveryDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dueDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dueDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "financialAccountingPeriodId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                financialAccountingPeriodId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "financialPartner":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                financialPartner = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "invoiceRecipient":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invoiceRecipient = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "items":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                items = new Option<List<TransactionItemRequest>>(JsonSerializer.Deserialize<List<TransactionItemRequest>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "manualVAT":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                manualVAT = new Option<TransactionManualVatRequest>(JsonSerializer.Deserialize<TransactionManualVatRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "operationItemCombinationMode":
                            string? operationItemCombinationModeRawValue = utf8JsonReader.GetString();
                            if (operationItemCombinationModeRawValue != null)
                                operationItemCombinationMode = new Option<OperationItemCombinationMode>(OperationItemCombinationModeValueConverter.FromStringOrDefault(operationItemCombinationModeRawValue));
                            break;
                        case "payer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payer = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "paymentMethodId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentMethodId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "periodId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                periodId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "referenceNr":
                            referenceNr = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "representative":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                representative = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "responsible":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                responsible = new Option<TransactionContactRequest>(JsonSerializer.Deserialize<TransactionContactRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "subtypeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subtypeId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "taxGroupId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxGroupId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "termsOfPaymentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                termsOfPaymentId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "typeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                typeId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (deliveryAddress.IsSet && deliveryAddress.Value == null)
                throw new ArgumentNullException(nameof(deliveryAddress), "Property is not nullable for class UpdateTransactionRequest.");

            if (financialPartner.IsSet && financialPartner.Value == null)
                throw new ArgumentNullException(nameof(financialPartner), "Property is not nullable for class UpdateTransactionRequest.");

            if (invoiceRecipient.IsSet && invoiceRecipient.Value == null)
                throw new ArgumentNullException(nameof(invoiceRecipient), "Property is not nullable for class UpdateTransactionRequest.");

            if (manualVAT.IsSet && manualVAT.Value == null)
                throw new ArgumentNullException(nameof(manualVAT), "Property is not nullable for class UpdateTransactionRequest.");

            if (operationItemCombinationMode.IsSet && operationItemCombinationMode.Value == null)
                throw new ArgumentNullException(nameof(operationItemCombinationMode), "Property is not nullable for class UpdateTransactionRequest.");

            if (payer.IsSet && payer.Value == null)
                throw new ArgumentNullException(nameof(payer), "Property is not nullable for class UpdateTransactionRequest.");

            if (representative.IsSet && representative.Value == null)
                throw new ArgumentNullException(nameof(representative), "Property is not nullable for class UpdateTransactionRequest.");

            if (responsible.IsSet && responsible.Value == null)
                throw new ArgumentNullException(nameof(responsible), "Property is not nullable for class UpdateTransactionRequest.");

            //2return new UpdateTransactionRequest(alternativePaymentDeadline, balance, barcode, billToText, cashDiscountPercentValue, cashDiscountTotal, currencyId, date, deliveryAddress, deliveryDate, description, dueDate, financialAccountingPeriodId, financialPartner, invoiceRecipient, items, manualVAT, notes, number, operationItemCombinationMode, payer, paymentMethodId, periodId, reference, referenceNr, representative, responsible, subtypeId, taxGroupId, termsOfPaymentId, typeId);
            return new UpdateTransactionRequest(alternativePaymentDeadline, balance, barcode, billToText, cashDiscountPercentValue, cashDiscountTotal, currencyId, date, deliveryAddress, deliveryDate, description, dueDate, financialAccountingPeriodId, financialPartner, invoiceRecipient, items, manualVAT, notes, number, operationItemCombinationMode, payer, paymentMethodId, periodId, reference, referenceNr, representative, responsible, subtypeId, taxGroupId, termsOfPaymentId, typeId);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateTransactionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateTransactionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateTransactionRequest updateTransactionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, updateTransactionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateTransactionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateTransactionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, UpdateTransactionRequest updateTransactionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateTransactionRequest.DeliveryAddressOption.IsSet && updateTransactionRequest.DeliveryAddress == null)
                throw new ArgumentNullException(nameof(updateTransactionRequest.DeliveryAddress), "Property is required for class UpdateTransactionRequest.");

            if (updateTransactionRequest.FinancialPartnerOption.IsSet && updateTransactionRequest.FinancialPartner == null)
                throw new ArgumentNullException(nameof(updateTransactionRequest.FinancialPartner), "Property is required for class UpdateTransactionRequest.");

            if (updateTransactionRequest.InvoiceRecipientOption.IsSet && updateTransactionRequest.InvoiceRecipient == null)
                throw new ArgumentNullException(nameof(updateTransactionRequest.InvoiceRecipient), "Property is required for class UpdateTransactionRequest.");

            if (updateTransactionRequest.ManualVATOption.IsSet && updateTransactionRequest.ManualVAT == null)
                throw new ArgumentNullException(nameof(updateTransactionRequest.ManualVAT), "Property is required for class UpdateTransactionRequest.");

            if (updateTransactionRequest.PayerOption.IsSet && updateTransactionRequest.Payer == null)
                throw new ArgumentNullException(nameof(updateTransactionRequest.Payer), "Property is required for class UpdateTransactionRequest.");

            if (updateTransactionRequest.RepresentativeOption.IsSet && updateTransactionRequest.Representative == null)
                throw new ArgumentNullException(nameof(updateTransactionRequest.Representative), "Property is required for class UpdateTransactionRequest.");

            if (updateTransactionRequest.ResponsibleOption.IsSet && updateTransactionRequest.Responsible == null)
                throw new ArgumentNullException(nameof(updateTransactionRequest.Responsible), "Property is required for class UpdateTransactionRequest.");

            if (updateTransactionRequest.AlternativePaymentDeadlineOption.IsSet)
                if (updateTransactionRequest.AlternativePaymentDeadlineOption.Value != null)
                {
                    writer.WriteString("alternativePaymentDeadline", updateTransactionRequest.AlternativePaymentDeadlineOption!.Value.ToString(AlternativePaymentDeadlineFormat));
                    //var __value = updateTransactionRequest.AlternativePaymentDeadlineOption.Value;
                    //writer.WriteString("alternativePaymentDeadline", __value);
                }
                else
                    writer.WriteNull("alternativePaymentDeadline");

            if (updateTransactionRequest.BalanceOption.IsSet)
                if (updateTransactionRequest.BalanceOption.Value != null)
                {
                    writer.WriteNumber("balance", updateTransactionRequest.BalanceOption!.Value);
                    //var __value = updateTransactionRequest.BalanceOption.Value;
                    //writer.WriteString("balance", __value);
                }
                else
                    writer.WriteNull("balance");

            if (updateTransactionRequest.BarcodeOption.IsSet)
                if (updateTransactionRequest.BarcodeOption.Value != null)
                {
                    writer.WriteString("barcode", updateTransactionRequest.Barcode);
                    //var __value = updateTransactionRequest.BarcodeOption.Value;
                    //writer.WriteString("barcode", __value);
                }
                else
                    writer.WriteNull("barcode");

            if (updateTransactionRequest.BillToTextOption.IsSet)
                if (updateTransactionRequest.BillToTextOption.Value != null)
                {
                    writer.WriteString("billToText", updateTransactionRequest.BillToText);
                    //var __value = updateTransactionRequest.BillToTextOption.Value;
                    //writer.WriteString("billToText", __value);
                }
                else
                    writer.WriteNull("billToText");

            if (updateTransactionRequest.CashDiscountPercentValueOption.IsSet)
                if (updateTransactionRequest.CashDiscountPercentValueOption.Value != null)
                {
                    writer.WriteNumber("cashDiscountPercentValue", updateTransactionRequest.CashDiscountPercentValueOption!.Value);
                    //var __value = updateTransactionRequest.CashDiscountPercentValueOption.Value;
                    //writer.WriteString("cashDiscountPercentValue", __value);
                }
                else
                    writer.WriteNull("cashDiscountPercentValue");

            if (updateTransactionRequest.CashDiscountTotalOption.IsSet)
                if (updateTransactionRequest.CashDiscountTotalOption.Value != null)
                {
                    writer.WriteNumber("cashDiscountTotal", updateTransactionRequest.CashDiscountTotalOption!.Value);
                    //var __value = updateTransactionRequest.CashDiscountTotalOption.Value;
                    //writer.WriteString("cashDiscountTotal", __value);
                }
                else
                    writer.WriteNull("cashDiscountTotal");

            if (updateTransactionRequest.CurrencyIdOption.IsSet)
                if (updateTransactionRequest.CurrencyIdOption.Value != null)
                {
                    writer.WriteString("currencyId", updateTransactionRequest.CurrencyIdOption!.Value);
                    //var __value = updateTransactionRequest.CurrencyIdOption.Value;
                    //writer.WriteString("currencyId", __value);
                }
                else
                    writer.WriteNull("currencyId");

            if (updateTransactionRequest.DateOption.IsSet)
                if (updateTransactionRequest.DateOption.Value != null)
                {
                    writer.WriteString("date", updateTransactionRequest.DateOption!.Value.ToString(DateFormat));
                    //var __value = updateTransactionRequest.DateOption.Value;
                    //writer.WriteString("date", __value);
                }
                else
                    writer.WriteNull("date");

            if (updateTransactionRequest.DeliveryAddressOption.IsSet)
            {
                writer.WritePropertyName("deliveryAddress");
                JsonSerializer.Serialize(writer, updateTransactionRequest.DeliveryAddress, jsonSerializerOptions);
            }
            if (updateTransactionRequest.DeliveryDateOption.IsSet)
                if (updateTransactionRequest.DeliveryDateOption.Value != null)
                {
                    writer.WriteString("deliveryDate", updateTransactionRequest.DeliveryDateOption!.Value.ToString(DeliveryDateFormat));
                    //var __value = updateTransactionRequest.DeliveryDateOption.Value;
                    //writer.WriteString("deliveryDate", __value);
                }
                else
                    writer.WriteNull("deliveryDate");

            if (updateTransactionRequest.DescriptionOption.IsSet)
                if (updateTransactionRequest.DescriptionOption.Value != null)
                {
                    writer.WriteString("description", updateTransactionRequest.Description);
                    //var __value = updateTransactionRequest.DescriptionOption.Value;
                    //writer.WriteString("description", __value);
                }
                else
                    writer.WriteNull("description");

            if (updateTransactionRequest.DueDateOption.IsSet)
                if (updateTransactionRequest.DueDateOption.Value != null)
                {
                    writer.WriteString("dueDate", updateTransactionRequest.DueDateOption!.Value.ToString(DueDateFormat));
                    //var __value = updateTransactionRequest.DueDateOption.Value;
                    //writer.WriteString("dueDate", __value);
                }
                else
                    writer.WriteNull("dueDate");

            if (updateTransactionRequest.FinancialAccountingPeriodIdOption.IsSet)
                if (updateTransactionRequest.FinancialAccountingPeriodIdOption.Value != null)
                {
                    writer.WriteString("financialAccountingPeriodId", updateTransactionRequest.FinancialAccountingPeriodIdOption!.Value);
                    //var __value = updateTransactionRequest.FinancialAccountingPeriodIdOption.Value;
                    //writer.WriteString("financialAccountingPeriodId", __value);
                }
                else
                    writer.WriteNull("financialAccountingPeriodId");

            if (updateTransactionRequest.FinancialPartnerOption.IsSet)
            {
                writer.WritePropertyName("financialPartner");
                JsonSerializer.Serialize(writer, updateTransactionRequest.FinancialPartner, jsonSerializerOptions);
            }
            if (updateTransactionRequest.InvoiceRecipientOption.IsSet)
            {
                writer.WritePropertyName("invoiceRecipient");
                JsonSerializer.Serialize(writer, updateTransactionRequest.InvoiceRecipient, jsonSerializerOptions);
            }
            if (updateTransactionRequest.ItemsOption.IsSet)
                if (updateTransactionRequest.ItemsOption.Value != null)
                {
                    writer.WritePropertyName("items");
                    JsonSerializer.Serialize(writer, updateTransactionRequest.Items, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items");
            if (updateTransactionRequest.ManualVATOption.IsSet)
            {
                writer.WritePropertyName("manualVAT");
                JsonSerializer.Serialize(writer, updateTransactionRequest.ManualVAT, jsonSerializerOptions);
            }
            if (updateTransactionRequest.NotesOption.IsSet)
                if (updateTransactionRequest.NotesOption.Value != null)
                {
                    writer.WriteString("notes", updateTransactionRequest.Notes);
                    //var __value = updateTransactionRequest.NotesOption.Value;
                    //writer.WriteString("notes", __value);
                }
                else
                    writer.WriteNull("notes");

            if (updateTransactionRequest.NumberOption.IsSet)
                if (updateTransactionRequest.NumberOption.Value != null)
                {
                    writer.WriteString("number", updateTransactionRequest.Number);
                    //var __value = updateTransactionRequest.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (updateTransactionRequest.OperationItemCombinationModeOption.IsSet)
            {
                var operationItemCombinationModeRawValue = OperationItemCombinationModeValueConverter.ToJsonValue(updateTransactionRequest.OperationItemCombinationMode!.Value);
                writer.WriteNumber("operationItemCombinationMode", operationItemCombinationModeRawValue);
            }
            if (updateTransactionRequest.PayerOption.IsSet)
            {
                writer.WritePropertyName("payer");
                JsonSerializer.Serialize(writer, updateTransactionRequest.Payer, jsonSerializerOptions);
            }
            if (updateTransactionRequest.PaymentMethodIdOption.IsSet)
                if (updateTransactionRequest.PaymentMethodIdOption.Value != null)
                {
                    writer.WriteString("paymentMethodId", updateTransactionRequest.PaymentMethodIdOption!.Value);
                    //var __value = updateTransactionRequest.PaymentMethodIdOption.Value;
                    //writer.WriteString("paymentMethodId", __value);
                }
                else
                    writer.WriteNull("paymentMethodId");

            if (updateTransactionRequest.PeriodIdOption.IsSet)
                if (updateTransactionRequest.PeriodIdOption.Value != null)
                {
                    writer.WriteString("periodId", updateTransactionRequest.PeriodIdOption!.Value);
                    //var __value = updateTransactionRequest.PeriodIdOption.Value;
                    //writer.WriteString("periodId", __value);
                }
                else
                    writer.WriteNull("periodId");

            if (updateTransactionRequest.ReferenceOption.IsSet)
                if (updateTransactionRequest.ReferenceOption.Value != null)
                {
                    writer.WriteString("reference", updateTransactionRequest.Reference);
                    //var __value = updateTransactionRequest.ReferenceOption.Value;
                    //writer.WriteString("reference", __value);
                }
                else
                    writer.WriteNull("reference");

            if (updateTransactionRequest.ReferenceNrOption.IsSet)
                if (updateTransactionRequest.ReferenceNrOption.Value != null)
                {
                    writer.WriteString("referenceNr", updateTransactionRequest.ReferenceNr);
                    //var __value = updateTransactionRequest.ReferenceNrOption.Value;
                    //writer.WriteString("referenceNr", __value);
                }
                else
                    writer.WriteNull("referenceNr");

            if (updateTransactionRequest.RepresentativeOption.IsSet)
            {
                writer.WritePropertyName("representative");
                JsonSerializer.Serialize(writer, updateTransactionRequest.Representative, jsonSerializerOptions);
            }
            if (updateTransactionRequest.ResponsibleOption.IsSet)
            {
                writer.WritePropertyName("responsible");
                JsonSerializer.Serialize(writer, updateTransactionRequest.Responsible, jsonSerializerOptions);
            }
            if (updateTransactionRequest.SubtypeIdOption.IsSet)
                if (updateTransactionRequest.SubtypeIdOption.Value != null)
                {
                    writer.WriteString("subtypeId", updateTransactionRequest.SubtypeIdOption!.Value);
                    //var __value = updateTransactionRequest.SubtypeIdOption.Value;
                    //writer.WriteString("subtypeId", __value);
                }
                else
                    writer.WriteNull("subtypeId");

            if (updateTransactionRequest.TaxGroupIdOption.IsSet)
                if (updateTransactionRequest.TaxGroupIdOption.Value != null)
                {
                    writer.WriteString("taxGroupId", updateTransactionRequest.TaxGroupIdOption!.Value);
                    //var __value = updateTransactionRequest.TaxGroupIdOption.Value;
                    //writer.WriteString("taxGroupId", __value);
                }
                else
                    writer.WriteNull("taxGroupId");

            if (updateTransactionRequest.TermsOfPaymentIdOption.IsSet)
                if (updateTransactionRequest.TermsOfPaymentIdOption.Value != null)
                {
                    writer.WriteString("termsOfPaymentId", updateTransactionRequest.TermsOfPaymentIdOption!.Value);
                    //var __value = updateTransactionRequest.TermsOfPaymentIdOption.Value;
                    //writer.WriteString("termsOfPaymentId", __value);
                }
                else
                    writer.WriteNull("termsOfPaymentId");

            if (updateTransactionRequest.TypeIdOption.IsSet)
                if (updateTransactionRequest.TypeIdOption.Value != null)
                {
                    writer.WriteString("typeId", updateTransactionRequest.TypeIdOption!.Value);
                    //var __value = updateTransactionRequest.TypeIdOption.Value;
                    //writer.WriteString("typeId", __value);
                }
                else
                    writer.WriteNull("typeId");
        }
    }
}
