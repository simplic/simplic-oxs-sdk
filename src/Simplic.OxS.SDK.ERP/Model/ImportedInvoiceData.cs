/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// ImportedInvoiceData
    /// </summary>
    [DataContract(Name = "ImportedInvoiceData")]
    public partial class ImportedInvoiceData : IEquatable<ImportedInvoiceData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public CurrencyCode? Currency { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public InvoiceType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportedInvoiceData" /> class.
        /// </summary>
        /// <param name="number">number.</param>
        /// <param name="invoiceDate">invoiceDate.</param>
        /// <param name="deliveryDate">deliveryDate.</param>
        /// <param name="billingPeriod">billingPeriod.</param>
        /// <param name="currency">currency.</param>
        /// <param name="totals">totals.</param>
        /// <param name="businessProcess">businessProcess.</param>
        /// <param name="referenceNumber">referenceNumber.</param>
        /// <param name="buyerReference">buyerReference.</param>
        /// <param name="buyer">buyer.</param>
        /// <param name="seller">seller.</param>
        /// <param name="debitorBankAccounts">debitorBankAccounts.</param>
        /// <param name="creditorBankAccounts">creditorBankAccounts.</param>
        /// <param name="notes">notes.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="termsOfPayment">termsOfPayment.</param>
        /// <param name="taxes">taxes.</param>
        /// <param name="type">type.</param>
        /// <param name="textItems">textItems.</param>
        /// <param name="billableItems">billableItems.</param>
        /// <param name="discountsSurcharges">discountsSurcharges.</param>
        public ImportedInvoiceData(string number = default(string), DateTime? invoiceDate = default(DateTime?), DateTime? deliveryDate = default(DateTime?), ImportedBillingPeriod billingPeriod = default(ImportedBillingPeriod), CurrencyCode? currency = default(CurrencyCode?), ImportedTotals totals = default(ImportedTotals), string businessProcess = default(string), string referenceNumber = default(string), string buyerReference = default(string), ImportedParty buyer = default(ImportedParty), ImportedParty seller = default(ImportedParty), List<BankAccount> debitorBankAccounts = default(List<BankAccount>), List<BankAccount> creditorBankAccounts = default(List<BankAccount>), List<string> notes = default(List<string>), PaymentMethod paymentMethod = default(PaymentMethod), TermsOfPayment termsOfPayment = default(TermsOfPayment), List<ImportedTax> taxes = default(List<ImportedTax>), InvoiceType? type = default(InvoiceType?), List<ImportedInvoiceItemText> textItems = default(List<ImportedInvoiceItemText>), List<ImportedInvoiceItemBillable> billableItems = default(List<ImportedInvoiceItemBillable>), List<ImportedInvoiceDiscountSurcharge> discountsSurcharges = default(List<ImportedInvoiceDiscountSurcharge>))
        {
            this.Number = number;
            this.InvoiceDate = invoiceDate;
            this.DeliveryDate = deliveryDate;
            this.BillingPeriod = billingPeriod;
            this.Currency = currency;
            this.Totals = totals;
            this.BusinessProcess = businessProcess;
            this.ReferenceNumber = referenceNumber;
            this.BuyerReference = buyerReference;
            this.Buyer = buyer;
            this.Seller = seller;
            this.DebitorBankAccounts = debitorBankAccounts;
            this.CreditorBankAccounts = creditorBankAccounts;
            this.Notes = notes;
            this.PaymentMethod = paymentMethod;
            this.TermsOfPayment = termsOfPayment;
            this.Taxes = taxes;
            this.Type = type;
            this.TextItems = textItems;
            this.BillableItems = billableItems;
            this.DiscountsSurcharges = discountsSurcharges;
        }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name = "invoiceDate", EmitDefaultValue = true)]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryDate
        /// </summary>
        [DataMember(Name = "deliveryDate", EmitDefaultValue = true)]
        public DateTime? DeliveryDate { get; set; }

        /// <summary>
        /// Gets or Sets BillingPeriod
        /// </summary>
        [DataMember(Name = "billingPeriod", EmitDefaultValue = false)]
        public ImportedBillingPeriod BillingPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Totals
        /// </summary>
        [DataMember(Name = "totals", EmitDefaultValue = false)]
        public ImportedTotals Totals { get; set; }

        /// <summary>
        /// Gets or Sets BusinessProcess
        /// </summary>
        [DataMember(Name = "businessProcess", EmitDefaultValue = true)]
        public string BusinessProcess { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [DataMember(Name = "referenceNumber", EmitDefaultValue = true)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets BuyerReference
        /// </summary>
        [DataMember(Name = "buyerReference", EmitDefaultValue = true)]
        public string BuyerReference { get; set; }

        /// <summary>
        /// Gets or Sets Buyer
        /// </summary>
        [DataMember(Name = "buyer", EmitDefaultValue = false)]
        public ImportedParty Buyer { get; set; }

        /// <summary>
        /// Gets or Sets Seller
        /// </summary>
        [DataMember(Name = "seller", EmitDefaultValue = false)]
        public ImportedParty Seller { get; set; }

        /// <summary>
        /// Gets or Sets DebitorBankAccounts
        /// </summary>
        [DataMember(Name = "debitorBankAccounts", EmitDefaultValue = true)]
        public List<BankAccount> DebitorBankAccounts { get; set; }

        /// <summary>
        /// Gets or Sets CreditorBankAccounts
        /// </summary>
        [DataMember(Name = "creditorBankAccounts", EmitDefaultValue = true)]
        public List<BankAccount> CreditorBankAccounts { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public List<string> Notes { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = false)]
        public PaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets TermsOfPayment
        /// </summary>
        [DataMember(Name = "termsOfPayment", EmitDefaultValue = false)]
        public TermsOfPayment TermsOfPayment { get; set; }

        /// <summary>
        /// Gets or Sets Taxes
        /// </summary>
        [DataMember(Name = "taxes", EmitDefaultValue = true)]
        public List<ImportedTax> Taxes { get; set; }

        /// <summary>
        /// Gets or Sets TextItems
        /// </summary>
        [DataMember(Name = "textItems", EmitDefaultValue = true)]
        public List<ImportedInvoiceItemText> TextItems { get; set; }

        /// <summary>
        /// Gets or Sets BillableItems
        /// </summary>
        [DataMember(Name = "billableItems", EmitDefaultValue = true)]
        public List<ImportedInvoiceItemBillable> BillableItems { get; set; }

        /// <summary>
        /// Gets or Sets DiscountsSurcharges
        /// </summary>
        [DataMember(Name = "discountsSurcharges", EmitDefaultValue = true)]
        public List<ImportedInvoiceDiscountSurcharge> DiscountsSurcharges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportedInvoiceData {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  BillingPeriod: ").Append(BillingPeriod).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Totals: ").Append(Totals).Append("\n");
            sb.Append("  BusinessProcess: ").Append(BusinessProcess).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  BuyerReference: ").Append(BuyerReference).Append("\n");
            sb.Append("  Buyer: ").Append(Buyer).Append("\n");
            sb.Append("  Seller: ").Append(Seller).Append("\n");
            sb.Append("  DebitorBankAccounts: ").Append(DebitorBankAccounts).Append("\n");
            sb.Append("  CreditorBankAccounts: ").Append(CreditorBankAccounts).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  TermsOfPayment: ").Append(TermsOfPayment).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TextItems: ").Append(TextItems).Append("\n");
            sb.Append("  BillableItems: ").Append(BillableItems).Append("\n");
            sb.Append("  DiscountsSurcharges: ").Append(DiscountsSurcharges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportedInvoiceData);
        }

        /// <summary>
        /// Returns true if ImportedInvoiceData instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportedInvoiceData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportedInvoiceData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && 
                (
                    this.BillingPeriod == input.BillingPeriod ||
                    (this.BillingPeriod != null &&
                    this.BillingPeriod.Equals(input.BillingPeriod))
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.Totals == input.Totals ||
                    (this.Totals != null &&
                    this.Totals.Equals(input.Totals))
                ) && 
                (
                    this.BusinessProcess == input.BusinessProcess ||
                    (this.BusinessProcess != null &&
                    this.BusinessProcess.Equals(input.BusinessProcess))
                ) && 
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) && 
                (
                    this.BuyerReference == input.BuyerReference ||
                    (this.BuyerReference != null &&
                    this.BuyerReference.Equals(input.BuyerReference))
                ) && 
                (
                    this.Buyer == input.Buyer ||
                    (this.Buyer != null &&
                    this.Buyer.Equals(input.Buyer))
                ) && 
                (
                    this.Seller == input.Seller ||
                    (this.Seller != null &&
                    this.Seller.Equals(input.Seller))
                ) && 
                (
                    this.DebitorBankAccounts == input.DebitorBankAccounts ||
                    this.DebitorBankAccounts != null &&
                    input.DebitorBankAccounts != null &&
                    this.DebitorBankAccounts.SequenceEqual(input.DebitorBankAccounts)
                ) && 
                (
                    this.CreditorBankAccounts == input.CreditorBankAccounts ||
                    this.CreditorBankAccounts != null &&
                    input.CreditorBankAccounts != null &&
                    this.CreditorBankAccounts.SequenceEqual(input.CreditorBankAccounts)
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.TermsOfPayment == input.TermsOfPayment ||
                    (this.TermsOfPayment != null &&
                    this.TermsOfPayment.Equals(input.TermsOfPayment))
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    this.Taxes != null &&
                    input.Taxes != null &&
                    this.Taxes.SequenceEqual(input.Taxes)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.TextItems == input.TextItems ||
                    this.TextItems != null &&
                    input.TextItems != null &&
                    this.TextItems.SequenceEqual(input.TextItems)
                ) && 
                (
                    this.BillableItems == input.BillableItems ||
                    this.BillableItems != null &&
                    input.BillableItems != null &&
                    this.BillableItems.SequenceEqual(input.BillableItems)
                ) && 
                (
                    this.DiscountsSurcharges == input.DiscountsSurcharges ||
                    this.DiscountsSurcharges != null &&
                    input.DiscountsSurcharges != null &&
                    this.DiscountsSurcharges.SequenceEqual(input.DiscountsSurcharges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.InvoiceDate != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceDate.GetHashCode();
                }
                if (this.DeliveryDate != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryDate.GetHashCode();
                }
                if (this.BillingPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.BillingPeriod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                if (this.Totals != null)
                {
                    hashCode = (hashCode * 59) + this.Totals.GetHashCode();
                }
                if (this.BusinessProcess != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessProcess.GetHashCode();
                }
                if (this.ReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceNumber.GetHashCode();
                }
                if (this.BuyerReference != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerReference.GetHashCode();
                }
                if (this.Buyer != null)
                {
                    hashCode = (hashCode * 59) + this.Buyer.GetHashCode();
                }
                if (this.Seller != null)
                {
                    hashCode = (hashCode * 59) + this.Seller.GetHashCode();
                }
                if (this.DebitorBankAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.DebitorBankAccounts.GetHashCode();
                }
                if (this.CreditorBankAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.CreditorBankAccounts.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.TermsOfPayment != null)
                {
                    hashCode = (hashCode * 59) + this.TermsOfPayment.GetHashCode();
                }
                if (this.Taxes != null)
                {
                    hashCode = (hashCode * 59) + this.Taxes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.TextItems != null)
                {
                    hashCode = (hashCode * 59) + this.TextItems.GetHashCode();
                }
                if (this.BillableItems != null)
                {
                    hashCode = (hashCode * 59) + this.BillableItems.GetHashCode();
                }
                if (this.DiscountsSurcharges != null)
                {
                    hashCode = (hashCode * 59) + this.DiscountsSurcharges.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
