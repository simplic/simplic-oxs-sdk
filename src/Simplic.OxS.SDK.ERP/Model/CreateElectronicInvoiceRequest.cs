/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// Represents the request containing configuration and invoice data for creating a hybrid electronic invoice according to the ZUGFeRD standard.
    /// </summary>
    [DataContract(Name = "CreateElectronicInvoiceRequest")]
    public partial class CreateElectronicInvoiceRequest : IEquatable<CreateElectronicInvoiceRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name = "profile", EmitDefaultValue = false)]
        public Profile? Profile { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ZUGFeRDVersion? VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets RoundingMode
        /// </summary>
        [DataMember(Name = "roundingMode", EmitDefaultValue = false)]
        public RoundingMode? RoundingMode { get; set; }

        /// <summary>
        /// Gets or Sets ElectronicInvoiceType
        /// </summary>
        [DataMember(Name = "electronicInvoiceType", EmitDefaultValue = false)]
        public ElectronicInvoiceType? ElectronicInvoiceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateElectronicInvoiceRequest" /> class.
        /// </summary>
        /// <param name="pdf">Gets or sets the input PDF invoice file.  &lt;br&gt;  This is only required if ElectronicInvoiceType is set to ZUGFeRD.  .</param>
        /// <param name="profile">profile.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="roundingMode">roundingMode.</param>
        /// <param name="electronicInvoiceType">electronicInvoiceType.</param>
        /// <param name="addPeppolAddress">Gets or sets whether to add a PEPPOL address for buyer and seller..</param>
        /// <param name="invoiceData">invoiceData.</param>
        public CreateElectronicInvoiceRequest(byte[] pdf = default(byte[]), Profile? profile = default(Profile?), ZUGFeRDVersion? varVersion = default(ZUGFeRDVersion?), RoundingMode? roundingMode = default(RoundingMode?), ElectronicInvoiceType? electronicInvoiceType = default(ElectronicInvoiceType?), bool addPeppolAddress = default(bool), InvoiceDataRequest invoiceData = default(InvoiceDataRequest))
        {
            this.Pdf = pdf;
            this.Profile = profile;
            this.VarVersion = varVersion;
            this.RoundingMode = roundingMode;
            this.ElectronicInvoiceType = electronicInvoiceType;
            this.AddPeppolAddress = addPeppolAddress;
            this.InvoiceData = invoiceData;
        }

        /// <summary>
        /// Gets or sets the input PDF invoice file.  &lt;br&gt;  This is only required if ElectronicInvoiceType is set to ZUGFeRD.  
        /// </summary>
        /// <value>Gets or sets the input PDF invoice file.  &lt;br&gt;  This is only required if ElectronicInvoiceType is set to ZUGFeRD.  </value>
        [DataMember(Name = "pdf", EmitDefaultValue = true)]
        public byte[] Pdf { get; set; }

        /// <summary>
        /// Gets or sets whether to add a PEPPOL address for buyer and seller.
        /// </summary>
        /// <value>Gets or sets whether to add a PEPPOL address for buyer and seller.</value>
        [DataMember(Name = "addPeppolAddress", EmitDefaultValue = true)]
        public bool AddPeppolAddress { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceData
        /// </summary>
        [DataMember(Name = "invoiceData", EmitDefaultValue = false)]
        public InvoiceDataRequest InvoiceData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateElectronicInvoiceRequest {\n");
            sb.Append("  Pdf: ").Append(Pdf).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  RoundingMode: ").Append(RoundingMode).Append("\n");
            sb.Append("  ElectronicInvoiceType: ").Append(ElectronicInvoiceType).Append("\n");
            sb.Append("  AddPeppolAddress: ").Append(AddPeppolAddress).Append("\n");
            sb.Append("  InvoiceData: ").Append(InvoiceData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateElectronicInvoiceRequest);
        }

        /// <summary>
        /// Returns true if CreateElectronicInvoiceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateElectronicInvoiceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateElectronicInvoiceRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Pdf == input.Pdf ||
                    (this.Pdf != null &&
                    this.Pdf.Equals(input.Pdf))
                ) && 
                (
                    this.Profile == input.Profile ||
                    this.Profile.Equals(input.Profile)
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                ) && 
                (
                    this.RoundingMode == input.RoundingMode ||
                    this.RoundingMode.Equals(input.RoundingMode)
                ) && 
                (
                    this.ElectronicInvoiceType == input.ElectronicInvoiceType ||
                    this.ElectronicInvoiceType.Equals(input.ElectronicInvoiceType)
                ) && 
                (
                    this.AddPeppolAddress == input.AddPeppolAddress ||
                    this.AddPeppolAddress.Equals(input.AddPeppolAddress)
                ) && 
                (
                    this.InvoiceData == input.InvoiceData ||
                    (this.InvoiceData != null &&
                    this.InvoiceData.Equals(input.InvoiceData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pdf != null)
                {
                    hashCode = (hashCode * 59) + this.Pdf.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Profile.GetHashCode();
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.RoundingMode.GetHashCode();
                hashCode = (hashCode * 59) + this.ElectronicInvoiceType.GetHashCode();
                hashCode = (hashCode * 59) + this.AddPeppolAddress.GetHashCode();
                if (this.InvoiceData != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
