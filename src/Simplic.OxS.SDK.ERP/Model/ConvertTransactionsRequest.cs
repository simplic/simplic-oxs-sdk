/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// Represents a request to convert a set of transactions.
    /// </summary>
    [DataContract(Name = "ConvertTransactionsRequest")]
    public partial class ConvertTransactionsRequest : IEquatable<ConvertTransactionsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertTransactionsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConvertTransactionsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertTransactionsRequest" /> class.
        /// </summary>
        /// <param name="transactionSubsets">Gets or sets the set of transactions mapped to their booked transaction item IDs and quantities. (required).</param>
        /// <param name="targetTypeId">Gets or sets the type of the result transaction by ID. (required).</param>
        /// <param name="targetSubtypeId">Gets or sets the subtype of the result transaction by ID..</param>
        /// <param name="checkCompatibleProperties">Gets or sets the set of properties to check for each input transaction to ensure compatibility..</param>
        /// <param name="commit">Gets or sets the commit flag. If raised, the convert operation will be committed (required).</param>
        public ConvertTransactionsRequest(Dictionary<string, Dictionary<string, double>> transactionSubsets = default(Dictionary<string, Dictionary<string, double>>), Guid targetTypeId = default(Guid), Guid? targetSubtypeId = default(Guid?), List<string> checkCompatibleProperties = default(List<string>), bool commit = default(bool))
        {
            // to ensure "transactionSubsets" is required (not null)
            if (transactionSubsets == null)
            {
                throw new ArgumentNullException("transactionSubsets is a required property for ConvertTransactionsRequest and cannot be null");
            }
            this.TransactionSubsets = transactionSubsets;
            this.TargetTypeId = targetTypeId;
            this.Commit = commit;
            this.TargetSubtypeId = targetSubtypeId;
            this.CheckCompatibleProperties = checkCompatibleProperties;
        }

        /// <summary>
        /// Gets or sets the set of transactions mapped to their booked transaction item IDs and quantities.
        /// </summary>
        /// <value>Gets or sets the set of transactions mapped to their booked transaction item IDs and quantities.</value>
        [DataMember(Name = "transactionSubsets", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Dictionary<string, double>> TransactionSubsets { get; set; }

        /// <summary>
        /// Gets or sets the type of the result transaction by ID.
        /// </summary>
        /// <value>Gets or sets the type of the result transaction by ID.</value>
        [DataMember(Name = "targetTypeId", IsRequired = true, EmitDefaultValue = true)]
        public Guid TargetTypeId { get; set; }

        /// <summary>
        /// Gets or sets the subtype of the result transaction by ID.
        /// </summary>
        /// <value>Gets or sets the subtype of the result transaction by ID.</value>
        [DataMember(Name = "targetSubtypeId", EmitDefaultValue = true)]
        public Guid? TargetSubtypeId { get; set; }

        /// <summary>
        /// Gets or sets the set of properties to check for each input transaction to ensure compatibility.
        /// </summary>
        /// <value>Gets or sets the set of properties to check for each input transaction to ensure compatibility.</value>
        [DataMember(Name = "checkCompatibleProperties", EmitDefaultValue = true)]
        public List<string> CheckCompatibleProperties { get; set; }

        /// <summary>
        /// Gets or sets the commit flag. If raised, the convert operation will be committed
        /// </summary>
        /// <value>Gets or sets the commit flag. If raised, the convert operation will be committed</value>
        [DataMember(Name = "commit", IsRequired = true, EmitDefaultValue = true)]
        public bool Commit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConvertTransactionsRequest {\n");
            sb.Append("  TransactionSubsets: ").Append(TransactionSubsets).Append("\n");
            sb.Append("  TargetTypeId: ").Append(TargetTypeId).Append("\n");
            sb.Append("  TargetSubtypeId: ").Append(TargetSubtypeId).Append("\n");
            sb.Append("  CheckCompatibleProperties: ").Append(CheckCompatibleProperties).Append("\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConvertTransactionsRequest);
        }

        /// <summary>
        /// Returns true if ConvertTransactionsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ConvertTransactionsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertTransactionsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionSubsets == input.TransactionSubsets ||
                    this.TransactionSubsets != null &&
                    input.TransactionSubsets != null &&
                    this.TransactionSubsets.SequenceEqual(input.TransactionSubsets)
                ) && 
                (
                    this.TargetTypeId == input.TargetTypeId ||
                    (this.TargetTypeId != null &&
                    this.TargetTypeId.Equals(input.TargetTypeId))
                ) && 
                (
                    this.TargetSubtypeId == input.TargetSubtypeId ||
                    (this.TargetSubtypeId != null &&
                    this.TargetSubtypeId.Equals(input.TargetSubtypeId))
                ) && 
                (
                    this.CheckCompatibleProperties == input.CheckCompatibleProperties ||
                    this.CheckCompatibleProperties != null &&
                    input.CheckCompatibleProperties != null &&
                    this.CheckCompatibleProperties.SequenceEqual(input.CheckCompatibleProperties)
                ) && 
                (
                    this.Commit == input.Commit ||
                    this.Commit.Equals(input.Commit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionSubsets != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionSubsets.GetHashCode();
                }
                if (this.TargetTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetTypeId.GetHashCode();
                }
                if (this.TargetSubtypeId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetSubtypeId.GetHashCode();
                }
                if (this.CheckCompatibleProperties != null)
                {
                    hashCode = (hashCode * 59) + this.CheckCompatibleProperties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Commit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
