// <auto-generated>
/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// UpdateTermsOfPaymentRequest
    /// </summary>
    public partial class UpdateTermsOfPaymentRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public UpdateTermsOfPaymentRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateTermsOfPaymentRequest" /> class.
        /// </summary>
        /// <param name="cashDiscount">cashDiscount</param>
        /// <param name="cashDiscountDays">cashDiscountDays</param>
        /// <param name="formattedText">formattedText</param>
        /// <param name="name">name</param>
        /// <param name="number">number</param>
        /// <param name="paymentDeadlineDays">paymentDeadlineDays</param>
        /// <param name="states">states</param>
        //[JsonConstructor]
        public UpdateTermsOfPaymentRequest(Option<double> cashDiscount = default, Option<int> cashDiscountDays = default, Option<string> formattedText = default, Option<string> name = default, Option<int> number = default, Option<int> paymentDeadlineDays = default, Option<List<string>> states = default)
        {
            CashDiscountOption = cashDiscount;
            CashDiscountDaysOption = cashDiscountDays;
            FormattedTextOption = formattedText;
            NameOption = name;
            NumberOption = number;
            PaymentDeadlineDaysOption = paymentDeadlineDays;
            StatesOption = states;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CashDiscount
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> CashDiscountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CashDiscount
        /// </summary>
        [JsonPropertyName("cashDiscount")]
        public double? CashDiscount { get { return this. CashDiscountOption; } set { this.CashDiscountOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of CashDiscountDays
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> CashDiscountDaysOption { get; private set; }

        /// <summary>
        /// Gets or Sets CashDiscountDays
        /// </summary>
        [JsonPropertyName("cashDiscountDays")]
        public int? CashDiscountDays { get { return this. CashDiscountDaysOption; } set { this.CashDiscountDaysOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of FormattedText
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> FormattedTextOption { get; private set; }

        /// <summary>
        /// Gets or Sets FormattedText
        /// </summary>
        [JsonPropertyName("formattedText")]
        public string? FormattedText { get { return this. FormattedTextOption; } set { this.FormattedTextOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public int? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of PaymentDeadlineDays
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> PaymentDeadlineDaysOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentDeadlineDays
        /// </summary>
        [JsonPropertyName("paymentDeadlineDays")]
        public int? PaymentDeadlineDays { get { return this. PaymentDeadlineDaysOption; } set { this.PaymentDeadlineDaysOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of States
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> StatesOption { get; private set; }

        /// <summary>
        /// Gets or Sets States
        /// </summary>
        [JsonPropertyName("states")]
        public List<string>? States { get { return this. StatesOption; } set { this.StatesOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateTermsOfPaymentRequest {\n");
            sb.Append("  CashDiscount: ").Append(CashDiscount).Append("\n");
            sb.Append("  CashDiscountDays: ").Append(CashDiscountDays).Append("\n");
            sb.Append("  FormattedText: ").Append(FormattedText).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PaymentDeadlineDays: ").Append(PaymentDeadlineDays).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateTermsOfPaymentRequest" />
    /// </summary>
    public class UpdateTermsOfPaymentRequestJsonConverter : JsonConverter<UpdateTermsOfPaymentRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateTermsOfPaymentRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateTermsOfPaymentRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double> cashDiscount = default;
            Option<int> cashDiscountDays = default;
            Option<string> formattedText = default;
            Option<string> name = default;
            Option<int> number = default;
            Option<int> paymentDeadlineDays = default;
            Option<List<string>> states = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cashDiscount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cashDiscount = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "cashDiscountDays":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cashDiscountDays = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "formattedText":
                            formattedText = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                number = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "paymentDeadlineDays":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentDeadlineDays = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "states":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                states = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new UpdateTermsOfPaymentRequest(cashDiscount, cashDiscountDays, formattedText, name, number, paymentDeadlineDays, states);
            return new UpdateTermsOfPaymentRequest(cashDiscount, cashDiscountDays, formattedText, name, number, paymentDeadlineDays, states);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateTermsOfPaymentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateTermsOfPaymentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateTermsOfPaymentRequest updateTermsOfPaymentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, updateTermsOfPaymentRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateTermsOfPaymentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateTermsOfPaymentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, UpdateTermsOfPaymentRequest updateTermsOfPaymentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateTermsOfPaymentRequest.CashDiscountOption.IsSet)
                if (updateTermsOfPaymentRequest.CashDiscountOption.Value != null)
                {
                    writer.WriteNumber("cashDiscount", updateTermsOfPaymentRequest.CashDiscountOption!.Value);
                    //var __value = updateTermsOfPaymentRequest.CashDiscountOption.Value;
                    //writer.WriteString("cashDiscount", __value);
                }
                else
                    writer.WriteNull("cashDiscount");

            if (updateTermsOfPaymentRequest.CashDiscountDaysOption.IsSet)
                if (updateTermsOfPaymentRequest.CashDiscountDaysOption.Value != null)
                {
                    writer.WriteNumber("cashDiscountDays", updateTermsOfPaymentRequest.CashDiscountDaysOption!.Value);
                    //var __value = updateTermsOfPaymentRequest.CashDiscountDaysOption.Value;
                    //writer.WriteString("cashDiscountDays", __value);
                }
                else
                    writer.WriteNull("cashDiscountDays");

            if (updateTermsOfPaymentRequest.FormattedTextOption.IsSet)
                if (updateTermsOfPaymentRequest.FormattedTextOption.Value != null)
                {
                    writer.WriteString("formattedText", updateTermsOfPaymentRequest.FormattedText);
                    //var __value = updateTermsOfPaymentRequest.FormattedTextOption.Value;
                    //writer.WriteString("formattedText", __value);
                }
                else
                    writer.WriteNull("formattedText");

            if (updateTermsOfPaymentRequest.NameOption.IsSet)
                if (updateTermsOfPaymentRequest.NameOption.Value != null)
                {
                    writer.WriteString("name", updateTermsOfPaymentRequest.Name);
                    //var __value = updateTermsOfPaymentRequest.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (updateTermsOfPaymentRequest.NumberOption.IsSet)
                if (updateTermsOfPaymentRequest.NumberOption.Value != null)
                {
                    writer.WriteNumber("number", updateTermsOfPaymentRequest.NumberOption!.Value);
                    //var __value = updateTermsOfPaymentRequest.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (updateTermsOfPaymentRequest.PaymentDeadlineDaysOption.IsSet)
                if (updateTermsOfPaymentRequest.PaymentDeadlineDaysOption.Value != null)
                {
                    writer.WriteNumber("paymentDeadlineDays", updateTermsOfPaymentRequest.PaymentDeadlineDaysOption!.Value);
                    //var __value = updateTermsOfPaymentRequest.PaymentDeadlineDaysOption.Value;
                    //writer.WriteString("paymentDeadlineDays", __value);
                }
                else
                    writer.WriteNull("paymentDeadlineDays");

            if (updateTermsOfPaymentRequest.StatesOption.IsSet)
                if (updateTermsOfPaymentRequest.StatesOption.Value != null)
                {
                    writer.WritePropertyName("states");
                    JsonSerializer.Serialize(writer, updateTermsOfPaymentRequest.States, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("states");
        }
    }
}
