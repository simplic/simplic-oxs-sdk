/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// Represents a request to update a Simplic.OxS.ERP.TermsOfPayment configuration.
    /// </summary>
    [DataContract(Name = "UpdateTermsOfPaymentRequest")]
    public partial class UpdateTermsOfPaymentRequest : IEquatable<UpdateTermsOfPaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateTermsOfPaymentRequest" /> class.
        /// </summary>
        /// <param name="number">Gets or sets the number..</param>
        /// <param name="name">Gets or sets the name..</param>
        /// <param name="cashDiscount">Gets or sets the cash discount quantity..</param>
        /// <param name="cashDiscountDays">Gets or sets the number of days the cash discount applies for..</param>
        /// <param name="paymentDeadlineDays">Gets or sets the number of days until payment deadline..</param>
        /// <param name="states">Gets or sets a set of states that apply to the terms of payment.     Examples for states are: outgoing, incoming  .</param>
        /// <param name="formattedText">Gets or sets the formatted text..</param>
        public UpdateTermsOfPaymentRequest(int? number = default(int?), string name = default(string), double? cashDiscount = default(double?), int? cashDiscountDays = default(int?), int? paymentDeadlineDays = default(int?), List<string> states = default(List<string>), string formattedText = default(string))
        {
            this.Number = number;
            this.Name = name;
            this.CashDiscount = cashDiscount;
            this.CashDiscountDays = cashDiscountDays;
            this.PaymentDeadlineDays = paymentDeadlineDays;
            this.States = states;
            this.FormattedText = formattedText;
        }

        /// <summary>
        /// Gets or sets the number.
        /// </summary>
        /// <value>Gets or sets the number.</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public int? Number { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the cash discount quantity.
        /// </summary>
        /// <value>Gets or sets the cash discount quantity.</value>
        [DataMember(Name = "cashDiscount", EmitDefaultValue = true)]
        public double? CashDiscount { get; set; }

        /// <summary>
        /// Gets or sets the number of days the cash discount applies for.
        /// </summary>
        /// <value>Gets or sets the number of days the cash discount applies for.</value>
        [DataMember(Name = "cashDiscountDays", EmitDefaultValue = true)]
        public int? CashDiscountDays { get; set; }

        /// <summary>
        /// Gets or sets the number of days until payment deadline.
        /// </summary>
        /// <value>Gets or sets the number of days until payment deadline.</value>
        [DataMember(Name = "paymentDeadlineDays", EmitDefaultValue = true)]
        public int? PaymentDeadlineDays { get; set; }

        /// <summary>
        /// Gets or sets a set of states that apply to the terms of payment.     Examples for states are: outgoing, incoming  
        /// </summary>
        /// <value>Gets or sets a set of states that apply to the terms of payment.     Examples for states are: outgoing, incoming  </value>
        [DataMember(Name = "states", EmitDefaultValue = true)]
        public List<string> States { get; set; }

        /// <summary>
        /// Gets or sets the formatted text.
        /// </summary>
        /// <value>Gets or sets the formatted text.</value>
        [DataMember(Name = "formattedText", EmitDefaultValue = true)]
        public string FormattedText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateTermsOfPaymentRequest {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CashDiscount: ").Append(CashDiscount).Append("\n");
            sb.Append("  CashDiscountDays: ").Append(CashDiscountDays).Append("\n");
            sb.Append("  PaymentDeadlineDays: ").Append(PaymentDeadlineDays).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  FormattedText: ").Append(FormattedText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateTermsOfPaymentRequest);
        }

        /// <summary>
        /// Returns true if UpdateTermsOfPaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateTermsOfPaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateTermsOfPaymentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CashDiscount == input.CashDiscount ||
                    (this.CashDiscount != null &&
                    this.CashDiscount.Equals(input.CashDiscount))
                ) && 
                (
                    this.CashDiscountDays == input.CashDiscountDays ||
                    (this.CashDiscountDays != null &&
                    this.CashDiscountDays.Equals(input.CashDiscountDays))
                ) && 
                (
                    this.PaymentDeadlineDays == input.PaymentDeadlineDays ||
                    (this.PaymentDeadlineDays != null &&
                    this.PaymentDeadlineDays.Equals(input.PaymentDeadlineDays))
                ) && 
                (
                    this.States == input.States ||
                    this.States != null &&
                    input.States != null &&
                    this.States.SequenceEqual(input.States)
                ) && 
                (
                    this.FormattedText == input.FormattedText ||
                    (this.FormattedText != null &&
                    this.FormattedText.Equals(input.FormattedText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.CashDiscount != null)
                {
                    hashCode = (hashCode * 59) + this.CashDiscount.GetHashCode();
                }
                if (this.CashDiscountDays != null)
                {
                    hashCode = (hashCode * 59) + this.CashDiscountDays.GetHashCode();
                }
                if (this.PaymentDeadlineDays != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDeadlineDays.GetHashCode();
                }
                if (this.States != null)
                {
                    hashCode = (hashCode * 59) + this.States.GetHashCode();
                }
                if (this.FormattedText != null)
                {
                    hashCode = (hashCode * 59) + this.FormattedText.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
