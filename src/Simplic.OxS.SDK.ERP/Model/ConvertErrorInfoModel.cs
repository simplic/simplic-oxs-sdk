/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// ConvertErrorInfoModel
    /// </summary>
    [DataContract(Name = "ConvertErrorInfoModel")]
    public partial class ConvertErrorInfoModel : IEquatable<ConvertErrorInfoModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertErrorInfoModel" /> class.
        /// </summary>
        /// <param name="message">message.</param>
        /// <param name="invalidPropertyName">invalidPropertyName.</param>
        /// <param name="itemId">itemId.</param>
        /// <param name="bookedQuantity">bookedQuantity.</param>
        /// <param name="remainingQuantity">remainingQuantity.</param>
        public ConvertErrorInfoModel(string message = default(string), string invalidPropertyName = default(string), Guid? itemId = default(Guid?), double? bookedQuantity = default(double?), double? remainingQuantity = default(double?))
        {
            this.Message = message;
            this.InvalidPropertyName = invalidPropertyName;
            this.ItemId = itemId;
            this.BookedQuantity = bookedQuantity;
            this.RemainingQuantity = remainingQuantity;
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets InvalidPropertyName
        /// </summary>
        [DataMember(Name = "invalidPropertyName", EmitDefaultValue = true)]
        public string InvalidPropertyName { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name = "itemId", EmitDefaultValue = true)]
        public Guid? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets BookedQuantity
        /// </summary>
        [DataMember(Name = "bookedQuantity", EmitDefaultValue = true)]
        public double? BookedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets RemainingQuantity
        /// </summary>
        [DataMember(Name = "remainingQuantity", EmitDefaultValue = true)]
        public double? RemainingQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConvertErrorInfoModel {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  InvalidPropertyName: ").Append(InvalidPropertyName).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  BookedQuantity: ").Append(BookedQuantity).Append("\n");
            sb.Append("  RemainingQuantity: ").Append(RemainingQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConvertErrorInfoModel);
        }

        /// <summary>
        /// Returns true if ConvertErrorInfoModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ConvertErrorInfoModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertErrorInfoModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.InvalidPropertyName == input.InvalidPropertyName ||
                    (this.InvalidPropertyName != null &&
                    this.InvalidPropertyName.Equals(input.InvalidPropertyName))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.BookedQuantity == input.BookedQuantity ||
                    (this.BookedQuantity != null &&
                    this.BookedQuantity.Equals(input.BookedQuantity))
                ) && 
                (
                    this.RemainingQuantity == input.RemainingQuantity ||
                    (this.RemainingQuantity != null &&
                    this.RemainingQuantity.Equals(input.RemainingQuantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.InvalidPropertyName != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidPropertyName.GetHashCode();
                }
                if (this.ItemId != null)
                {
                    hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                }
                if (this.BookedQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.BookedQuantity.GetHashCode();
                }
                if (this.RemainingQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingQuantity.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
