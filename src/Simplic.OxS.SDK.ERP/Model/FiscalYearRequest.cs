/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// Represents a request to create a Simplic.OxS.ERP.FiscalYear.
    /// </summary>
    [DataContract(Name = "FiscalYearRequest")]
    public partial class FiscalYearRequest : IEquatable<FiscalYearRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FiscalYearRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FiscalYearRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FiscalYearRequest" /> class.
        /// </summary>
        /// <param name="number">Gets or sets the number. (required).</param>
        /// <param name="name">Gets or sets the name. (required).</param>
        /// <param name="from">Gets or sets the point in time the fiscal year begins. (required).</param>
        /// <param name="to">Gets or sets the point in time the fiscal year ends. (required).</param>
        /// <param name="periods">Gets or sets the contained periods. (required).</param>
        public FiscalYearRequest(int number = default(int), string name = default(string), DateTime from = default(DateTime), DateTime to = default(DateTime), List<PeriodRequest> periods = default(List<PeriodRequest>))
        {
            this.Number = number;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for FiscalYearRequest and cannot be null");
            }
            this.Name = name;
            this.From = from;
            this.To = to;
            // to ensure "periods" is required (not null)
            if (periods == null)
            {
                throw new ArgumentNullException("periods is a required property for FiscalYearRequest and cannot be null");
            }
            this.Periods = periods;
        }

        /// <summary>
        /// Gets or sets the number.
        /// </summary>
        /// <value>Gets or sets the number.</value>
        [DataMember(Name = "number", IsRequired = true, EmitDefaultValue = true)]
        public int Number { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the point in time the fiscal year begins.
        /// </summary>
        /// <value>Gets or sets the point in time the fiscal year begins.</value>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public DateTime From { get; set; }

        /// <summary>
        /// Gets or sets the point in time the fiscal year ends.
        /// </summary>
        /// <value>Gets or sets the point in time the fiscal year ends.</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public DateTime To { get; set; }

        /// <summary>
        /// Gets or sets the contained periods.
        /// </summary>
        /// <value>Gets or sets the contained periods.</value>
        [DataMember(Name = "periods", IsRequired = true, EmitDefaultValue = true)]
        public List<PeriodRequest> Periods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FiscalYearRequest {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Periods: ").Append(Periods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FiscalYearRequest);
        }

        /// <summary>
        /// Returns true if FiscalYearRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FiscalYearRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FiscalYearRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Periods == input.Periods ||
                    this.Periods != null &&
                    input.Periods != null &&
                    this.Periods.SequenceEqual(input.Periods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Periods != null)
                {
                    hashCode = (hashCode * 59) + this.Periods.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 2.", new [] { "Name" });
            }

            yield break;
        }
    }

}
