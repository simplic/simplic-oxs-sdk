/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// ImportedInvoiceItemBillable
    /// </summary>
    [DataContract(Name = "ImportedInvoiceItemBillable")]
    public partial class ImportedInvoiceItemBillable : IEquatable<ImportedInvoiceItemBillable>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets QuantityUnit
        /// </summary>
        [DataMember(Name = "quantityUnit", EmitDefaultValue = false)]
        public QuantityCode? QuantityUnit { get; set; }

        /// <summary>
        /// Gets or Sets TaxType
        /// </summary>
        [DataMember(Name = "taxType", EmitDefaultValue = false)]
        public TaxType? TaxType { get; set; }

        /// <summary>
        /// Gets or Sets TaxCategory
        /// </summary>
        [DataMember(Name = "taxCategory", EmitDefaultValue = false)]
        public TaxCategory? TaxCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportedInvoiceItemBillable" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="text">text.</param>
        /// <param name="quantityUnit">quantityUnit.</param>
        /// <param name="articleName">articleName.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="taxType">taxType.</param>
        /// <param name="taxCategory">taxCategory.</param>
        /// <param name="discountsSurcharges">discountsSurcharges.</param>
        /// <param name="taxRate">taxRate.</param>
        /// <param name="singlePriceNetBase">singlePriceNetBase.</param>
        /// <param name="singlePriceNet">singlePriceNet.</param>
        /// <param name="totalPriceNet">totalPriceNet.</param>
        public ImportedInvoiceItemBillable(string id = default(string), string text = default(string), QuantityCode? quantityUnit = default(QuantityCode?), string articleName = default(string), double quantity = default(double), TaxType? taxType = default(TaxType?), TaxCategory? taxCategory = default(TaxCategory?), List<ImportedDiscountSurcharge> discountsSurcharges = default(List<ImportedDiscountSurcharge>), double? taxRate = default(double?), double? singlePriceNetBase = default(double?), double? singlePriceNet = default(double?), double? totalPriceNet = default(double?))
        {
            this.Id = id;
            this.Text = text;
            this.QuantityUnit = quantityUnit;
            this.ArticleName = articleName;
            this.Quantity = quantity;
            this.TaxType = taxType;
            this.TaxCategory = taxCategory;
            this.DiscountsSurcharges = discountsSurcharges;
            this.TaxRate = taxRate;
            this.SinglePriceNetBase = singlePriceNetBase;
            this.SinglePriceNet = singlePriceNet;
            this.TotalPriceNet = totalPriceNet;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets ArticleName
        /// </summary>
        [DataMember(Name = "articleName", EmitDefaultValue = true)]
        public string ArticleName { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// Gets or Sets DiscountsSurcharges
        /// </summary>
        [DataMember(Name = "discountsSurcharges", EmitDefaultValue = true)]
        public List<ImportedDiscountSurcharge> DiscountsSurcharges { get; set; }

        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name = "taxRate", EmitDefaultValue = true)]
        public double? TaxRate { get; set; }

        /// <summary>
        /// Gets or Sets SinglePriceNetBase
        /// </summary>
        [DataMember(Name = "singlePriceNetBase", EmitDefaultValue = true)]
        public double? SinglePriceNetBase { get; set; }

        /// <summary>
        /// Gets or Sets SinglePriceNet
        /// </summary>
        [DataMember(Name = "singlePriceNet", EmitDefaultValue = true)]
        public double? SinglePriceNet { get; set; }

        /// <summary>
        /// Gets or Sets TotalPriceNet
        /// </summary>
        [DataMember(Name = "totalPriceNet", EmitDefaultValue = true)]
        public double? TotalPriceNet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportedInvoiceItemBillable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  QuantityUnit: ").Append(QuantityUnit).Append("\n");
            sb.Append("  ArticleName: ").Append(ArticleName).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  TaxCategory: ").Append(TaxCategory).Append("\n");
            sb.Append("  DiscountsSurcharges: ").Append(DiscountsSurcharges).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  SinglePriceNetBase: ").Append(SinglePriceNetBase).Append("\n");
            sb.Append("  SinglePriceNet: ").Append(SinglePriceNet).Append("\n");
            sb.Append("  TotalPriceNet: ").Append(TotalPriceNet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportedInvoiceItemBillable);
        }

        /// <summary>
        /// Returns true if ImportedInvoiceItemBillable instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportedInvoiceItemBillable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportedInvoiceItemBillable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.QuantityUnit == input.QuantityUnit ||
                    this.QuantityUnit.Equals(input.QuantityUnit)
                ) && 
                (
                    this.ArticleName == input.ArticleName ||
                    (this.ArticleName != null &&
                    this.ArticleName.Equals(input.ArticleName))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.TaxType == input.TaxType ||
                    this.TaxType.Equals(input.TaxType)
                ) && 
                (
                    this.TaxCategory == input.TaxCategory ||
                    this.TaxCategory.Equals(input.TaxCategory)
                ) && 
                (
                    this.DiscountsSurcharges == input.DiscountsSurcharges ||
                    this.DiscountsSurcharges != null &&
                    input.DiscountsSurcharges != null &&
                    this.DiscountsSurcharges.SequenceEqual(input.DiscountsSurcharges)
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.SinglePriceNetBase == input.SinglePriceNetBase ||
                    (this.SinglePriceNetBase != null &&
                    this.SinglePriceNetBase.Equals(input.SinglePriceNetBase))
                ) && 
                (
                    this.SinglePriceNet == input.SinglePriceNet ||
                    (this.SinglePriceNet != null &&
                    this.SinglePriceNet.Equals(input.SinglePriceNet))
                ) && 
                (
                    this.TotalPriceNet == input.TotalPriceNet ||
                    (this.TotalPriceNet != null &&
                    this.TotalPriceNet.Equals(input.TotalPriceNet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QuantityUnit.GetHashCode();
                if (this.ArticleName != null)
                {
                    hashCode = (hashCode * 59) + this.ArticleName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.TaxType.GetHashCode();
                hashCode = (hashCode * 59) + this.TaxCategory.GetHashCode();
                if (this.DiscountsSurcharges != null)
                {
                    hashCode = (hashCode * 59) + this.DiscountsSurcharges.GetHashCode();
                }
                if (this.TaxRate != null)
                {
                    hashCode = (hashCode * 59) + this.TaxRate.GetHashCode();
                }
                if (this.SinglePriceNetBase != null)
                {
                    hashCode = (hashCode * 59) + this.SinglePriceNetBase.GetHashCode();
                }
                if (this.SinglePriceNet != null)
                {
                    hashCode = (hashCode * 59) + this.SinglePriceNet.GetHashCode();
                }
                if (this.TotalPriceNet != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPriceNet.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
