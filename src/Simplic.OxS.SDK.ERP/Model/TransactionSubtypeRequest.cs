/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// Represents a request to create a Simplic.OxS.ERP.Transaction.TransactionSubtype.
    /// </summary>
    [DataContract(Name = "TransactionSubtypeRequest")]
    public partial class TransactionSubtypeRequest : IEquatable<TransactionSubtypeRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ArchiveMode
        /// </summary>
        [DataMember(Name = "archiveMode", EmitDefaultValue = false)]
        public TransactionSubtypeArchiveMode? ArchiveMode { get; set; }

        /// <summary>
        /// Gets or Sets DueDateMode
        /// </summary>
        [DataMember(Name = "dueDateMode", EmitDefaultValue = false)]
        public DueDateMode? DueDateMode { get; set; }

        /// <summary>
        /// Gets or Sets TransactionNumberDateSource
        /// </summary>
        [DataMember(Name = "transactionNumberDateSource", EmitDefaultValue = false)]
        public TransactionNumberDateSourceType? TransactionNumberDateSource { get; set; }

        /// <summary>
        /// Gets or Sets ExportCostQuantity
        /// </summary>
        [DataMember(Name = "exportCostQuantity", EmitDefaultValue = false)]
        public ExportCostQuantityType? ExportCostQuantity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSubtypeRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionSubtypeRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSubtypeRequest" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the ID..</param>
        /// <param name="reportId">Gets or sets an optional report for this subtype given by ID. (required).</param>
        /// <param name="sequenceId">Gets or sets an optional sequence for this subtype given by ID. (required).</param>
        /// <param name="outputConfigurationId">Gets or sets the output configuration given by ID.. (required).</param>
        /// <param name="number">Gets or sets a unique id (required).</param>
        /// <param name="name">Gets or sets the subtype name (required).</param>
        /// <param name="documentTitleTemplate">Gets or sets the document title template..</param>
        /// <param name="archiveMode">archiveMode.</param>
        /// <param name="barcodeTemplate">Gets or sets the barcode template.</param>
        /// <param name="useNumberReservation">Gets or sets whether to use transaction number generation or not.</param>
        /// <param name="customField2Template">Gets or sets the template for the custom field 2 in a financial export.</param>
        /// <param name="customField1Template">Gets or sets the template for the custom field 1 in a financial export.</param>
        /// <param name="bookingTextTemplate">Gets or sets the template for the booking text.</param>
        /// <param name="summarizeBookings">Gets or sets whether to summarize datev bookings.</param>
        /// <param name="accountingExportGroup">Gets or sets the accounting export group.</param>
        /// <param name="dueDateMode">dueDateMode.</param>
        /// <param name="transactionNumberDateSource">transactionNumberDateSource.</param>
        /// <param name="exportCostQuantity">exportCostQuantity.</param>
        public TransactionSubtypeRequest(Guid id = default(Guid), Guid reportId = default(Guid), Guid sequenceId = default(Guid), Guid outputConfigurationId = default(Guid), int number = default(int), string name = default(string), string documentTitleTemplate = default(string), TransactionSubtypeArchiveMode? archiveMode = default(TransactionSubtypeArchiveMode?), string barcodeTemplate = default(string), bool? useNumberReservation = default(bool?), string customField2Template = default(string), string customField1Template = default(string), string bookingTextTemplate = default(string), bool? summarizeBookings = default(bool?), string accountingExportGroup = default(string), DueDateMode? dueDateMode = default(DueDateMode?), TransactionNumberDateSourceType? transactionNumberDateSource = default(TransactionNumberDateSourceType?), ExportCostQuantityType? exportCostQuantity = default(ExportCostQuantityType?))
        {
            this.ReportId = reportId;
            this.SequenceId = sequenceId;
            this.OutputConfigurationId = outputConfigurationId;
            this.Number = number;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TransactionSubtypeRequest and cannot be null");
            }
            this.Name = name;
            this.Id = id;
            this.DocumentTitleTemplate = documentTitleTemplate;
            this.ArchiveMode = archiveMode;
            this.BarcodeTemplate = barcodeTemplate;
            this.UseNumberReservation = useNumberReservation;
            this.CustomField2Template = customField2Template;
            this.CustomField1Template = customField1Template;
            this.BookingTextTemplate = bookingTextTemplate;
            this.SummarizeBookings = summarizeBookings;
            this.AccountingExportGroup = accountingExportGroup;
            this.DueDateMode = dueDateMode;
            this.TransactionNumberDateSource = transactionNumberDateSource;
            this.ExportCostQuantity = exportCostQuantity;
        }

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        /// <value>Gets or sets the ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets an optional report for this subtype given by ID.
        /// </summary>
        /// <value>Gets or sets an optional report for this subtype given by ID.</value>
        [DataMember(Name = "reportId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ReportId { get; set; }

        /// <summary>
        /// Gets or sets an optional sequence for this subtype given by ID.
        /// </summary>
        /// <value>Gets or sets an optional sequence for this subtype given by ID.</value>
        [DataMember(Name = "sequenceId", IsRequired = true, EmitDefaultValue = true)]
        public Guid SequenceId { get; set; }

        /// <summary>
        /// Gets or sets the output configuration given by ID..
        /// </summary>
        /// <value>Gets or sets the output configuration given by ID..</value>
        [DataMember(Name = "outputConfigurationId", IsRequired = true, EmitDefaultValue = true)]
        public Guid OutputConfigurationId { get; set; }

        /// <summary>
        /// Gets or sets a unique id
        /// </summary>
        /// <value>Gets or sets a unique id</value>
        [DataMember(Name = "number", IsRequired = true, EmitDefaultValue = true)]
        public int Number { get; set; }

        /// <summary>
        /// Gets or sets the subtype name
        /// </summary>
        /// <value>Gets or sets the subtype name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the document title template.
        /// </summary>
        /// <value>Gets or sets the document title template.</value>
        [DataMember(Name = "documentTitleTemplate", EmitDefaultValue = true)]
        public string DocumentTitleTemplate { get; set; }

        /// <summary>
        /// Gets or sets the barcode template
        /// </summary>
        /// <value>Gets or sets the barcode template</value>
        [DataMember(Name = "barcodeTemplate", EmitDefaultValue = true)]
        public string BarcodeTemplate { get; set; }

        /// <summary>
        /// Gets or sets whether to use transaction number generation or not
        /// </summary>
        /// <value>Gets or sets whether to use transaction number generation or not</value>
        [DataMember(Name = "useNumberReservation", EmitDefaultValue = true)]
        public bool? UseNumberReservation { get; set; }

        /// <summary>
        /// Gets or sets the template for the custom field 2 in a financial export
        /// </summary>
        /// <value>Gets or sets the template for the custom field 2 in a financial export</value>
        [DataMember(Name = "customField2Template", EmitDefaultValue = true)]
        public string CustomField2Template { get; set; }

        /// <summary>
        /// Gets or sets the template for the custom field 1 in a financial export
        /// </summary>
        /// <value>Gets or sets the template for the custom field 1 in a financial export</value>
        [DataMember(Name = "customField1Template", EmitDefaultValue = true)]
        public string CustomField1Template { get; set; }

        /// <summary>
        /// Gets or sets the template for the booking text
        /// </summary>
        /// <value>Gets or sets the template for the booking text</value>
        [DataMember(Name = "bookingTextTemplate", EmitDefaultValue = true)]
        public string BookingTextTemplate { get; set; }

        /// <summary>
        /// Gets or sets whether to summarize datev bookings
        /// </summary>
        /// <value>Gets or sets whether to summarize datev bookings</value>
        [DataMember(Name = "summarizeBookings", EmitDefaultValue = true)]
        public bool? SummarizeBookings { get; set; }

        /// <summary>
        /// Gets or sets the accounting export group
        /// </summary>
        /// <value>Gets or sets the accounting export group</value>
        [DataMember(Name = "accountingExportGroup", EmitDefaultValue = true)]
        public string AccountingExportGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionSubtypeRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("  SequenceId: ").Append(SequenceId).Append("\n");
            sb.Append("  OutputConfigurationId: ").Append(OutputConfigurationId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DocumentTitleTemplate: ").Append(DocumentTitleTemplate).Append("\n");
            sb.Append("  ArchiveMode: ").Append(ArchiveMode).Append("\n");
            sb.Append("  BarcodeTemplate: ").Append(BarcodeTemplate).Append("\n");
            sb.Append("  UseNumberReservation: ").Append(UseNumberReservation).Append("\n");
            sb.Append("  CustomField2Template: ").Append(CustomField2Template).Append("\n");
            sb.Append("  CustomField1Template: ").Append(CustomField1Template).Append("\n");
            sb.Append("  BookingTextTemplate: ").Append(BookingTextTemplate).Append("\n");
            sb.Append("  SummarizeBookings: ").Append(SummarizeBookings).Append("\n");
            sb.Append("  AccountingExportGroup: ").Append(AccountingExportGroup).Append("\n");
            sb.Append("  DueDateMode: ").Append(DueDateMode).Append("\n");
            sb.Append("  TransactionNumberDateSource: ").Append(TransactionNumberDateSource).Append("\n");
            sb.Append("  ExportCostQuantity: ").Append(ExportCostQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionSubtypeRequest);
        }

        /// <summary>
        /// Returns true if TransactionSubtypeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionSubtypeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionSubtypeRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ReportId == input.ReportId ||
                    (this.ReportId != null &&
                    this.ReportId.Equals(input.ReportId))
                ) && 
                (
                    this.SequenceId == input.SequenceId ||
                    (this.SequenceId != null &&
                    this.SequenceId.Equals(input.SequenceId))
                ) && 
                (
                    this.OutputConfigurationId == input.OutputConfigurationId ||
                    (this.OutputConfigurationId != null &&
                    this.OutputConfigurationId.Equals(input.OutputConfigurationId))
                ) && 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DocumentTitleTemplate == input.DocumentTitleTemplate ||
                    (this.DocumentTitleTemplate != null &&
                    this.DocumentTitleTemplate.Equals(input.DocumentTitleTemplate))
                ) && 
                (
                    this.ArchiveMode == input.ArchiveMode ||
                    this.ArchiveMode.Equals(input.ArchiveMode)
                ) && 
                (
                    this.BarcodeTemplate == input.BarcodeTemplate ||
                    (this.BarcodeTemplate != null &&
                    this.BarcodeTemplate.Equals(input.BarcodeTemplate))
                ) && 
                (
                    this.UseNumberReservation == input.UseNumberReservation ||
                    (this.UseNumberReservation != null &&
                    this.UseNumberReservation.Equals(input.UseNumberReservation))
                ) && 
                (
                    this.CustomField2Template == input.CustomField2Template ||
                    (this.CustomField2Template != null &&
                    this.CustomField2Template.Equals(input.CustomField2Template))
                ) && 
                (
                    this.CustomField1Template == input.CustomField1Template ||
                    (this.CustomField1Template != null &&
                    this.CustomField1Template.Equals(input.CustomField1Template))
                ) && 
                (
                    this.BookingTextTemplate == input.BookingTextTemplate ||
                    (this.BookingTextTemplate != null &&
                    this.BookingTextTemplate.Equals(input.BookingTextTemplate))
                ) && 
                (
                    this.SummarizeBookings == input.SummarizeBookings ||
                    (this.SummarizeBookings != null &&
                    this.SummarizeBookings.Equals(input.SummarizeBookings))
                ) && 
                (
                    this.AccountingExportGroup == input.AccountingExportGroup ||
                    (this.AccountingExportGroup != null &&
                    this.AccountingExportGroup.Equals(input.AccountingExportGroup))
                ) && 
                (
                    this.DueDateMode == input.DueDateMode ||
                    this.DueDateMode.Equals(input.DueDateMode)
                ) && 
                (
                    this.TransactionNumberDateSource == input.TransactionNumberDateSource ||
                    this.TransactionNumberDateSource.Equals(input.TransactionNumberDateSource)
                ) && 
                (
                    this.ExportCostQuantity == input.ExportCostQuantity ||
                    this.ExportCostQuantity.Equals(input.ExportCostQuantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ReportId != null)
                {
                    hashCode = (hashCode * 59) + this.ReportId.GetHashCode();
                }
                if (this.SequenceId != null)
                {
                    hashCode = (hashCode * 59) + this.SequenceId.GetHashCode();
                }
                if (this.OutputConfigurationId != null)
                {
                    hashCode = (hashCode * 59) + this.OutputConfigurationId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DocumentTitleTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentTitleTemplate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ArchiveMode.GetHashCode();
                if (this.BarcodeTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.BarcodeTemplate.GetHashCode();
                }
                if (this.UseNumberReservation != null)
                {
                    hashCode = (hashCode * 59) + this.UseNumberReservation.GetHashCode();
                }
                if (this.CustomField2Template != null)
                {
                    hashCode = (hashCode * 59) + this.CustomField2Template.GetHashCode();
                }
                if (this.CustomField1Template != null)
                {
                    hashCode = (hashCode * 59) + this.CustomField1Template.GetHashCode();
                }
                if (this.BookingTextTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.BookingTextTemplate.GetHashCode();
                }
                if (this.SummarizeBookings != null)
                {
                    hashCode = (hashCode * 59) + this.SummarizeBookings.GetHashCode();
                }
                if (this.AccountingExportGroup != null)
                {
                    hashCode = (hashCode * 59) + this.AccountingExportGroup.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DueDateMode.GetHashCode();
                hashCode = (hashCode * 59) + this.TransactionNumberDateSource.GetHashCode();
                hashCode = (hashCode * 59) + this.ExportCostQuantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 2.", new [] { "Name" });
            }

            // BarcodeTemplate (string) maxLength
            if (this.BarcodeTemplate != null && this.BarcodeTemplate.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BarcodeTemplate, length must be less than 1000.", new [] { "BarcodeTemplate" });
            }

            // BarcodeTemplate (string) minLength
            if (this.BarcodeTemplate != null && this.BarcodeTemplate.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BarcodeTemplate, length must be greater than 1.", new [] { "BarcodeTemplate" });
            }

            // CustomField2Template (string) maxLength
            if (this.CustomField2Template != null && this.CustomField2Template.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomField2Template, length must be less than 1000.", new [] { "CustomField2Template" });
            }

            // CustomField2Template (string) minLength
            if (this.CustomField2Template != null && this.CustomField2Template.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomField2Template, length must be greater than 1.", new [] { "CustomField2Template" });
            }

            // CustomField1Template (string) maxLength
            if (this.CustomField1Template != null && this.CustomField1Template.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomField1Template, length must be less than 1000.", new [] { "CustomField1Template" });
            }

            // CustomField1Template (string) minLength
            if (this.CustomField1Template != null && this.CustomField1Template.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomField1Template, length must be greater than 1.", new [] { "CustomField1Template" });
            }

            // BookingTextTemplate (string) maxLength
            if (this.BookingTextTemplate != null && this.BookingTextTemplate.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BookingTextTemplate, length must be less than 1000.", new [] { "BookingTextTemplate" });
            }

            // BookingTextTemplate (string) minLength
            if (this.BookingTextTemplate != null && this.BookingTextTemplate.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BookingTextTemplate, length must be greater than 1.", new [] { "BookingTextTemplate" });
            }

            // AccountingExportGroup (string) maxLength
            if (this.AccountingExportGroup != null && this.AccountingExportGroup.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountingExportGroup, length must be less than 100.", new [] { "AccountingExportGroup" });
            }

            // AccountingExportGroup (string) minLength
            if (this.AccountingExportGroup != null && this.AccountingExportGroup.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountingExportGroup, length must be greater than 1.", new [] { "AccountingExportGroup" });
            }

            yield break;
        }
    }

}
