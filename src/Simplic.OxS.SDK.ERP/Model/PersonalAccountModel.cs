// <auto-generated>
/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// PersonalAccountModel
    /// </summary>
    public partial class PersonalAccountModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public PersonalAccountModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalAccountModel" /> class.
        /// </summary>
        /// <param name="addresses">addresses</param>
        /// <param name="createDateTime">createDateTime</param>
        /// <param name="createUserId">createUserId</param>
        /// <param name="createUserName">createUserName</param>
        /// <param name="creditLimit">creditLimit</param>
        /// <param name="id">id</param>
        /// <param name="number">number</param>
        /// <param name="purchaseTermsOfPayment">purchaseTermsOfPayment</param>
        /// <param name="saleTermsOfPayment">saleTermsOfPayment</param>
        /// <param name="taxGroup">taxGroup</param>
        /// <param name="type">type</param>
        /// <param name="updateDateTime">updateDateTime</param>
        /// <param name="updateUserId">updateUserId</param>
        /// <param name="updateUserName">updateUserName</param>
        /// <param name="vatId">vatId</param>
        //[JsonConstructor]
        public PersonalAccountModel(Option<List<PersonalAccountAddressModel>> addresses = default, Option<DateTime> createDateTime = default, Option<Guid> createUserId = default, Option<string> createUserName = default, Option<CreditLimitModel> creditLimit = default, Option<Guid> id = default, Option<string> number = default, Option<TermsOfPaymentModel> purchaseTermsOfPayment = default, Option<TermsOfPaymentModel> saleTermsOfPayment = default, Option<TaxGroupModel> taxGroup = default, Option<string> type = default, Option<DateTime> updateDateTime = default, Option<Guid> updateUserId = default, Option<string> updateUserName = default, Option<string> vatId = default)
        {
            AddressesOption = addresses;
            CreateDateTimeOption = createDateTime;
            CreateUserIdOption = createUserId;
            CreateUserNameOption = createUserName;
            CreditLimitOption = creditLimit;
            IdOption = id;
            NumberOption = number;
            PurchaseTermsOfPaymentOption = purchaseTermsOfPayment;
            SaleTermsOfPaymentOption = saleTermsOfPayment;
            TaxGroupOption = taxGroup;
            TypeOption = type;
            UpdateDateTimeOption = updateDateTime;
            UpdateUserIdOption = updateUserId;
            UpdateUserNameOption = updateUserName;
            VatIdOption = vatId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Addresses
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<PersonalAccountAddressModel>>))]
        public Option<List<PersonalAccountAddressModel>> AddressesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [JsonPropertyName("addresses")]
        public List<PersonalAccountAddressModel>? Addresses { get { return this. AddressesOption; } set { this.AddressesOption = new Option<List<PersonalAccountAddressModel>>(value); } }

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDateTime
        /// </summary>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CreateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserId
        /// </summary>
        [JsonPropertyName("createUserId")]
        public Guid? CreateUserId { get { return this. CreateUserIdOption; } set { this.CreateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CreateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateUserName
        /// </summary>
        [JsonPropertyName("createUserName")]
        public string? CreateUserName { get { return this. CreateUserNameOption; } set { this.CreateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CreditLimit
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<CreditLimitModel>))]
        public Option<CreditLimitModel> CreditLimitOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditLimit
        /// </summary>
        [JsonPropertyName("creditLimit")]
        public CreditLimitModel? CreditLimit { get { return this. CreditLimitOption; } set { this.CreditLimitOption = new Option<CreditLimitModel>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PurchaseTermsOfPayment
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TermsOfPaymentModel>))]
        public Option<TermsOfPaymentModel> PurchaseTermsOfPaymentOption { get; private set; }

        /// <summary>
        /// Gets or Sets PurchaseTermsOfPayment
        /// </summary>
        [JsonPropertyName("purchaseTermsOfPayment")]
        public TermsOfPaymentModel? PurchaseTermsOfPayment { get { return this. PurchaseTermsOfPaymentOption; } set { this.PurchaseTermsOfPaymentOption = new Option<TermsOfPaymentModel>(value); } }

        /// <summary>
        /// Used to track the state of SaleTermsOfPayment
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TermsOfPaymentModel>))]
        public Option<TermsOfPaymentModel> SaleTermsOfPaymentOption { get; private set; }

        /// <summary>
        /// Gets or Sets SaleTermsOfPayment
        /// </summary>
        [JsonPropertyName("saleTermsOfPayment")]
        public TermsOfPaymentModel? SaleTermsOfPayment { get { return this. SaleTermsOfPaymentOption; } set { this.SaleTermsOfPaymentOption = new Option<TermsOfPaymentModel>(value); } }

        /// <summary>
        /// Used to track the state of TaxGroup
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TaxGroupModel>))]
        public Option<TaxGroupModel> TaxGroupOption { get; private set; }

        /// <summary>
        /// Gets or Sets TaxGroup
        /// </summary>
        [JsonPropertyName("taxGroup")]
        public TaxGroupModel? TaxGroup { get { return this. TaxGroupOption; } set { this.TaxGroupOption = new Option<TaxGroupModel>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this. TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UpdateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UpdateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateDateTime
        /// </summary>
        [JsonPropertyName("updateDateTime")]
        public DateTime? UpdateDateTime { get { return this. UpdateDateTimeOption; } set { this.UpdateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UpdateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserId
        /// </summary>
        [JsonPropertyName("updateUserId")]
        public Guid? UpdateUserId { get { return this. UpdateUserIdOption; } set { this.UpdateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> UpdateUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateUserName
        /// </summary>
        [JsonPropertyName("updateUserName")]
        public string? UpdateUserName { get { return this. UpdateUserNameOption; } set { this.UpdateUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VatId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> VatIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets VatId
        /// </summary>
        [JsonPropertyName("vatId")]
        public string? VatId { get { return this. VatIdOption; } set { this.VatIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersonalAccountModel {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  CreateUserName: ").Append(CreateUserName).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PurchaseTermsOfPayment: ").Append(PurchaseTermsOfPayment).Append("\n");
            sb.Append("  SaleTermsOfPayment: ").Append(SaleTermsOfPayment).Append("\n");
            sb.Append("  TaxGroup: ").Append(TaxGroup).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("  UpdateUserName: ").Append(UpdateUserName).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PersonalAccountModel" />
    /// </summary>
    public class PersonalAccountModelJsonConverter : JsonConverter<PersonalAccountModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateDateTime
        /// </summary>
        public static string UpdateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PersonalAccountModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PersonalAccountModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<PersonalAccountAddressModel>> addresses = default;
            Option<DateTime> createDateTime = default;
            Option<Guid> createUserId = default;
            Option<string> createUserName = default;
            Option<CreditLimitModel> creditLimit = default;
            Option<Guid> id = default;
            Option<string> number = default;
            Option<TermsOfPaymentModel> purchaseTermsOfPayment = default;
            Option<TermsOfPaymentModel> saleTermsOfPayment = default;
            Option<TaxGroupModel> taxGroup = default;
            Option<string> type = default;
            Option<DateTime> updateDateTime = default;
            Option<Guid> updateUserId = default;
            Option<string> updateUserName = default;
            Option<string> vatId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addresses":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                addresses = new Option<List<PersonalAccountAddressModel>>(JsonSerializer.Deserialize<List<PersonalAccountAddressModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "createUserName":
                            createUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "creditLimit":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                creditLimit = new Option<CreditLimitModel>(JsonSerializer.Deserialize<CreditLimitModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "purchaseTermsOfPayment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                purchaseTermsOfPayment = new Option<TermsOfPaymentModel>(JsonSerializer.Deserialize<TermsOfPaymentModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "saleTermsOfPayment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                saleTermsOfPayment = new Option<TermsOfPaymentModel>(JsonSerializer.Deserialize<TermsOfPaymentModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "taxGroup":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxGroup = new Option<TaxGroupModel>(JsonSerializer.Deserialize<TaxGroupModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updateDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "updateUserName":
                            updateUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vatId":
                            vatId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class PersonalAccountModel.");

            if (creditLimit.IsSet && creditLimit.Value == null)
                throw new ArgumentNullException(nameof(creditLimit), "Property is not nullable for class PersonalAccountModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PersonalAccountModel.");

            if (purchaseTermsOfPayment.IsSet && purchaseTermsOfPayment.Value == null)
                throw new ArgumentNullException(nameof(purchaseTermsOfPayment), "Property is not nullable for class PersonalAccountModel.");

            if (saleTermsOfPayment.IsSet && saleTermsOfPayment.Value == null)
                throw new ArgumentNullException(nameof(saleTermsOfPayment), "Property is not nullable for class PersonalAccountModel.");

            if (taxGroup.IsSet && taxGroup.Value == null)
                throw new ArgumentNullException(nameof(taxGroup), "Property is not nullable for class PersonalAccountModel.");

            if (updateDateTime.IsSet && updateDateTime.Value == null)
                throw new ArgumentNullException(nameof(updateDateTime), "Property is not nullable for class PersonalAccountModel.");

            //2return new PersonalAccountModel(addresses, createDateTime, createUserId, createUserName, creditLimit, id, number, purchaseTermsOfPayment, saleTermsOfPayment, taxGroup, type, updateDateTime, updateUserId, updateUserName, vatId);
            return new PersonalAccountModel(addresses, createDateTime, createUserId, createUserName, creditLimit, id, number, purchaseTermsOfPayment, saleTermsOfPayment, taxGroup, type, updateDateTime, updateUserId, updateUserName, vatId);
        }

        /// <summary>
        /// Serializes a <see cref="PersonalAccountModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="personalAccountModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PersonalAccountModel personalAccountModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, personalAccountModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PersonalAccountModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="personalAccountModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, PersonalAccountModel personalAccountModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (personalAccountModel.CreditLimitOption.IsSet && personalAccountModel.CreditLimit == null)
                throw new ArgumentNullException(nameof(personalAccountModel.CreditLimit), "Property is required for class PersonalAccountModel.");

            if (personalAccountModel.PurchaseTermsOfPaymentOption.IsSet && personalAccountModel.PurchaseTermsOfPayment == null)
                throw new ArgumentNullException(nameof(personalAccountModel.PurchaseTermsOfPayment), "Property is required for class PersonalAccountModel.");

            if (personalAccountModel.SaleTermsOfPaymentOption.IsSet && personalAccountModel.SaleTermsOfPayment == null)
                throw new ArgumentNullException(nameof(personalAccountModel.SaleTermsOfPayment), "Property is required for class PersonalAccountModel.");

            if (personalAccountModel.TaxGroupOption.IsSet && personalAccountModel.TaxGroup == null)
                throw new ArgumentNullException(nameof(personalAccountModel.TaxGroup), "Property is required for class PersonalAccountModel.");

            if (personalAccountModel.AddressesOption.IsSet)
                if (personalAccountModel.AddressesOption.Value != null)
                {
                    writer.WritePropertyName("addresses");
                    JsonSerializer.Serialize(writer, personalAccountModel.Addresses, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("addresses");
            if (personalAccountModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", personalAccountModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (personalAccountModel.CreateUserIdOption.IsSet)
                if (personalAccountModel.CreateUserIdOption.Value != null)
                {
                    writer.WriteString("createUserId", personalAccountModel.CreateUserIdOption!.Value);
                    //var __value = personalAccountModel.CreateUserIdOption.Value;
                    //writer.WriteString("createUserId", __value);
                }
                else
                    writer.WriteNull("createUserId");

            if (personalAccountModel.CreateUserNameOption.IsSet)
                if (personalAccountModel.CreateUserNameOption.Value != null)
                {
                    writer.WriteString("createUserName", personalAccountModel.CreateUserName);
                    //var __value = personalAccountModel.CreateUserNameOption.Value;
                    //writer.WriteString("createUserName", __value);
                }
                else
                    writer.WriteNull("createUserName");

            if (personalAccountModel.CreditLimitOption.IsSet)
            {
                writer.WritePropertyName("creditLimit");
                JsonSerializer.Serialize(writer, personalAccountModel.CreditLimit, jsonSerializerOptions);
            }
            if (personalAccountModel.IdOption.IsSet)
                writer.WriteString("id", personalAccountModel.IdOption!.Value);

            if (personalAccountModel.NumberOption.IsSet)
                if (personalAccountModel.NumberOption.Value != null)
                {
                    writer.WriteString("number", personalAccountModel.Number);
                    //var __value = personalAccountModel.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (personalAccountModel.PurchaseTermsOfPaymentOption.IsSet)
            {
                writer.WritePropertyName("purchaseTermsOfPayment");
                JsonSerializer.Serialize(writer, personalAccountModel.PurchaseTermsOfPayment, jsonSerializerOptions);
            }
            if (personalAccountModel.SaleTermsOfPaymentOption.IsSet)
            {
                writer.WritePropertyName("saleTermsOfPayment");
                JsonSerializer.Serialize(writer, personalAccountModel.SaleTermsOfPayment, jsonSerializerOptions);
            }
            if (personalAccountModel.TaxGroupOption.IsSet)
            {
                writer.WritePropertyName("taxGroup");
                JsonSerializer.Serialize(writer, personalAccountModel.TaxGroup, jsonSerializerOptions);
            }
            if (personalAccountModel.TypeOption.IsSet)
                if (personalAccountModel.TypeOption.Value != null)
                {
                    writer.WriteString("type", personalAccountModel.Type);
                    //var __value = personalAccountModel.TypeOption.Value;
                    //writer.WriteString("type", __value);
                }
                else
                    writer.WriteNull("type");

            if (personalAccountModel.UpdateDateTimeOption.IsSet)
                writer.WriteString("updateDateTime", personalAccountModel.UpdateDateTimeOption!.Value.ToString(UpdateDateTimeFormat));

            if (personalAccountModel.UpdateUserIdOption.IsSet)
                if (personalAccountModel.UpdateUserIdOption.Value != null)
                {
                    writer.WriteString("updateUserId", personalAccountModel.UpdateUserIdOption!.Value);
                    //var __value = personalAccountModel.UpdateUserIdOption.Value;
                    //writer.WriteString("updateUserId", __value);
                }
                else
                    writer.WriteNull("updateUserId");

            if (personalAccountModel.UpdateUserNameOption.IsSet)
                if (personalAccountModel.UpdateUserNameOption.Value != null)
                {
                    writer.WriteString("updateUserName", personalAccountModel.UpdateUserName);
                    //var __value = personalAccountModel.UpdateUserNameOption.Value;
                    //writer.WriteString("updateUserName", __value);
                }
                else
                    writer.WriteNull("updateUserName");

            if (personalAccountModel.VatIdOption.IsSet)
                if (personalAccountModel.VatIdOption.Value != null)
                {
                    writer.WriteString("vatId", personalAccountModel.VatId);
                    //var __value = personalAccountModel.VatIdOption.Value;
                    //writer.WriteString("vatId", __value);
                }
                else
                    writer.WriteNull("vatId");
        }
    }
}
