/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// Represents an item level discount/surcharge request.
    /// </summary>
    [DataContract(Name = "DiscountSurchargeRequest")]
    public partial class DiscountSurchargeRequest : IEquatable<DiscountSurchargeRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DiscountSurchargeType
        /// </summary>
        [DataMember(Name = "discountSurchargeType", EmitDefaultValue = false)]
        public DiscountSurchargeType? DiscountSurchargeType { get; set; }

        /// <summary>
        /// Gets or Sets DiscountSurchargeMode
        /// </summary>
        [DataMember(Name = "discountSurchargeMode", EmitDefaultValue = false)]
        public DiscountSurchargeMode? DiscountSurchargeMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscountSurchargeRequest" /> class.
        /// </summary>
        /// <param name="discountSurchargeType">discountSurchargeType.</param>
        /// <param name="discountSurchargeMode">discountSurchargeMode.</param>
        /// <param name="description">Gets or sets the description..</param>
        /// <param name="deltaValueAbsolute">Gets or sets the absolute delta value in case of an absolute discount/surcharge..</param>
        /// <param name="deltaValueRelative">Gets or sets the relative delta value in case of a relative discount/surcharge..</param>
        public DiscountSurchargeRequest(DiscountSurchargeType? discountSurchargeType = default(DiscountSurchargeType?), DiscountSurchargeMode? discountSurchargeMode = default(DiscountSurchargeMode?), string description = default(string), double? deltaValueAbsolute = default(double?), double? deltaValueRelative = default(double?))
        {
            this.DiscountSurchargeType = discountSurchargeType;
            this.DiscountSurchargeMode = discountSurchargeMode;
            this.Description = description;
            this.DeltaValueAbsolute = deltaValueAbsolute;
            this.DeltaValueRelative = deltaValueRelative;
        }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        /// <value>Gets or sets the description.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the absolute delta value in case of an absolute discount/surcharge.
        /// </summary>
        /// <value>Gets or sets the absolute delta value in case of an absolute discount/surcharge.</value>
        [DataMember(Name = "deltaValueAbsolute", EmitDefaultValue = true)]
        public double? DeltaValueAbsolute { get; set; }

        /// <summary>
        /// Gets or sets the relative delta value in case of a relative discount/surcharge.
        /// </summary>
        /// <value>Gets or sets the relative delta value in case of a relative discount/surcharge.</value>
        [DataMember(Name = "deltaValueRelative", EmitDefaultValue = true)]
        public double? DeltaValueRelative { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiscountSurchargeRequest {\n");
            sb.Append("  DiscountSurchargeType: ").Append(DiscountSurchargeType).Append("\n");
            sb.Append("  DiscountSurchargeMode: ").Append(DiscountSurchargeMode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DeltaValueAbsolute: ").Append(DeltaValueAbsolute).Append("\n");
            sb.Append("  DeltaValueRelative: ").Append(DeltaValueRelative).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiscountSurchargeRequest);
        }

        /// <summary>
        /// Returns true if DiscountSurchargeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DiscountSurchargeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscountSurchargeRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DiscountSurchargeType == input.DiscountSurchargeType ||
                    this.DiscountSurchargeType.Equals(input.DiscountSurchargeType)
                ) && 
                (
                    this.DiscountSurchargeMode == input.DiscountSurchargeMode ||
                    this.DiscountSurchargeMode.Equals(input.DiscountSurchargeMode)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DeltaValueAbsolute == input.DeltaValueAbsolute ||
                    (this.DeltaValueAbsolute != null &&
                    this.DeltaValueAbsolute.Equals(input.DeltaValueAbsolute))
                ) && 
                (
                    this.DeltaValueRelative == input.DeltaValueRelative ||
                    (this.DeltaValueRelative != null &&
                    this.DeltaValueRelative.Equals(input.DeltaValueRelative))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DiscountSurchargeType.GetHashCode();
                hashCode = (hashCode * 59) + this.DiscountSurchargeMode.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DeltaValueAbsolute != null)
                {
                    hashCode = (hashCode * 59) + this.DeltaValueAbsolute.GetHashCode();
                }
                if (this.DeltaValueRelative != null)
                {
                    hashCode = (hashCode * 59) + this.DeltaValueRelative.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
