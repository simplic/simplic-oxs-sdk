/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// Represents the request object for an electronic invoice item.
    /// </summary>
    [DataContract(Name = "InvoiceItemRequest")]
    public partial class InvoiceItemRequest : IEquatable<InvoiceItemRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets QuantityUnit
        /// </summary>
        [DataMember(Name = "quantityUnit", EmitDefaultValue = false)]
        public QuantityCode? QuantityUnit { get; set; }

        /// <summary>
        /// Gets or Sets TaxType
        /// </summary>
        [DataMember(Name = "taxType", EmitDefaultValue = false)]
        public TaxType? TaxType { get; set; }

        /// <summary>
        /// Gets or Sets TaxCategory
        /// </summary>
        [DataMember(Name = "taxCategory", EmitDefaultValue = false)]
        public TaxCategory? TaxCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceItemRequest" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the ID..</param>
        /// <param name="text">Gets or sets the text..</param>
        /// <param name="quantityUnit">quantityUnit.</param>
        /// <param name="articleName">Gets or sets the article name..</param>
        /// <param name="singlePriceNetBase">Gets or sets the single price excluding discounts and surcharges..</param>
        /// <param name="totalPriceNetBase">Gets or sets the total price excluding discounts and surcharges.  &lt;br&gt;  TotalPriceBase corresponds to the ZUGFeRD property GrossPriceProductTradePrice.  .</param>
        /// <param name="quantity">Gets or sets the quantity..</param>
        /// <param name="taxType">taxType.</param>
        /// <param name="taxCategory">taxCategory.</param>
        /// <param name="discountsSurcharges">Gets or sets the item level discounts and surcharges..</param>
        public InvoiceItemRequest(string id = default(string), string text = default(string), QuantityCode? quantityUnit = default(QuantityCode?), string articleName = default(string), double? singlePriceNetBase = default(double?), double? totalPriceNetBase = default(double?), double? quantity = default(double?), TaxType? taxType = default(TaxType?), TaxCategory? taxCategory = default(TaxCategory?), List<DiscountSurchargeRequest> discountsSurcharges = default(List<DiscountSurchargeRequest>))
        {
            this.Id = id;
            this.Text = text;
            this.QuantityUnit = quantityUnit;
            this.ArticleName = articleName;
            this.SinglePriceNetBase = singlePriceNetBase;
            this.TotalPriceNetBase = totalPriceNetBase;
            this.Quantity = quantity;
            this.TaxType = taxType;
            this.TaxCategory = taxCategory;
            this.DiscountsSurcharges = discountsSurcharges;
        }

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        /// <value>Gets or sets the ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the text.
        /// </summary>
        /// <value>Gets or sets the text.</value>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets the article name.
        /// </summary>
        /// <value>Gets or sets the article name.</value>
        [DataMember(Name = "articleName", EmitDefaultValue = true)]
        public string ArticleName { get; set; }

        /// <summary>
        /// Gets or sets the single price excluding discounts and surcharges.
        /// </summary>
        /// <value>Gets or sets the single price excluding discounts and surcharges.</value>
        [DataMember(Name = "singlePriceNetBase", EmitDefaultValue = true)]
        public double? SinglePriceNetBase { get; set; }

        /// <summary>
        /// Gets or sets the total price excluding discounts and surcharges.  &lt;br&gt;  TotalPriceBase corresponds to the ZUGFeRD property GrossPriceProductTradePrice.  
        /// </summary>
        /// <value>Gets or sets the total price excluding discounts and surcharges.  &lt;br&gt;  TotalPriceBase corresponds to the ZUGFeRD property GrossPriceProductTradePrice.  </value>
        [DataMember(Name = "totalPriceNetBase", EmitDefaultValue = true)]
        public double? TotalPriceNetBase { get; set; }

        /// <summary>
        /// Gets or sets the quantity.
        /// </summary>
        /// <value>Gets or sets the quantity.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = true)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or sets the item level discounts and surcharges.
        /// </summary>
        /// <value>Gets or sets the item level discounts and surcharges.</value>
        [DataMember(Name = "discountsSurcharges", EmitDefaultValue = true)]
        public List<DiscountSurchargeRequest> DiscountsSurcharges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceItemRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  QuantityUnit: ").Append(QuantityUnit).Append("\n");
            sb.Append("  ArticleName: ").Append(ArticleName).Append("\n");
            sb.Append("  SinglePriceNetBase: ").Append(SinglePriceNetBase).Append("\n");
            sb.Append("  TotalPriceNetBase: ").Append(TotalPriceNetBase).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  TaxCategory: ").Append(TaxCategory).Append("\n");
            sb.Append("  DiscountsSurcharges: ").Append(DiscountsSurcharges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceItemRequest);
        }

        /// <summary>
        /// Returns true if InvoiceItemRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceItemRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceItemRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.QuantityUnit == input.QuantityUnit ||
                    this.QuantityUnit.Equals(input.QuantityUnit)
                ) && 
                (
                    this.ArticleName == input.ArticleName ||
                    (this.ArticleName != null &&
                    this.ArticleName.Equals(input.ArticleName))
                ) && 
                (
                    this.SinglePriceNetBase == input.SinglePriceNetBase ||
                    (this.SinglePriceNetBase != null &&
                    this.SinglePriceNetBase.Equals(input.SinglePriceNetBase))
                ) && 
                (
                    this.TotalPriceNetBase == input.TotalPriceNetBase ||
                    (this.TotalPriceNetBase != null &&
                    this.TotalPriceNetBase.Equals(input.TotalPriceNetBase))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.TaxType == input.TaxType ||
                    this.TaxType.Equals(input.TaxType)
                ) && 
                (
                    this.TaxCategory == input.TaxCategory ||
                    this.TaxCategory.Equals(input.TaxCategory)
                ) && 
                (
                    this.DiscountsSurcharges == input.DiscountsSurcharges ||
                    this.DiscountsSurcharges != null &&
                    input.DiscountsSurcharges != null &&
                    this.DiscountsSurcharges.SequenceEqual(input.DiscountsSurcharges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QuantityUnit.GetHashCode();
                if (this.ArticleName != null)
                {
                    hashCode = (hashCode * 59) + this.ArticleName.GetHashCode();
                }
                if (this.SinglePriceNetBase != null)
                {
                    hashCode = (hashCode * 59) + this.SinglePriceNetBase.GetHashCode();
                }
                if (this.TotalPriceNetBase != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPriceNetBase.GetHashCode();
                }
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TaxType.GetHashCode();
                hashCode = (hashCode * 59) + this.TaxCategory.GetHashCode();
                if (this.DiscountsSurcharges != null)
                {
                    hashCode = (hashCode * 59) + this.DiscountsSurcharges.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
