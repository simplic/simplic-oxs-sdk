/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// ImportedParty
    /// </summary>
    [DataContract(Name = "ImportedParty")]
    public partial class ImportedParty : IEquatable<ImportedParty>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public CountryCode? Country { get; set; }

        /// <summary>
        /// Gets or Sets ElectronicAddressType
        /// </summary>
        [DataMember(Name = "electronicAddressType", EmitDefaultValue = false)]
        public ElectronicAddressType? ElectronicAddressType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportedParty" /> class.
        /// </summary>
        /// <param name="contactName">contactName.</param>
        /// <param name="companyName">companyName.</param>
        /// <param name="zipcode">zipcode.</param>
        /// <param name="city">city.</param>
        /// <param name="street">street.</param>
        /// <param name="country">country.</param>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="faxNumber">faxNumber.</param>
        /// <param name="taxRegistrations">taxRegistrations.</param>
        /// <param name="electronicAddressType">electronicAddressType.</param>
        public ImportedParty(string contactName = default(string), string companyName = default(string), string zipcode = default(string), string city = default(string), string street = default(string), CountryCode? country = default(CountryCode?), string emailAddress = default(string), string phoneNumber = default(string), string faxNumber = default(string), List<TaxRegistration> taxRegistrations = default(List<TaxRegistration>), ElectronicAddressType? electronicAddressType = default(ElectronicAddressType?))
        {
            this.ContactName = contactName;
            this.CompanyName = companyName;
            this.Zipcode = zipcode;
            this.City = city;
            this.Street = street;
            this.Country = country;
            this.EmailAddress = emailAddress;
            this.PhoneNumber = phoneNumber;
            this.FaxNumber = faxNumber;
            this.TaxRegistrations = taxRegistrations;
            this.ElectronicAddressType = electronicAddressType;
        }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name = "contactName", EmitDefaultValue = true)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name = "companyName", EmitDefaultValue = true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets Zipcode
        /// </summary>
        [DataMember(Name = "zipcode", EmitDefaultValue = true)]
        public string Zipcode { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "street", EmitDefaultValue = true)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "emailAddress", EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets FaxNumber
        /// </summary>
        [DataMember(Name = "faxNumber", EmitDefaultValue = true)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Gets or Sets TaxRegistrations
        /// </summary>
        [DataMember(Name = "taxRegistrations", EmitDefaultValue = true)]
        public List<TaxRegistration> TaxRegistrations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportedParty {\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  TaxRegistrations: ").Append(TaxRegistrations).Append("\n");
            sb.Append("  ElectronicAddressType: ").Append(ElectronicAddressType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportedParty);
        }

        /// <summary>
        /// Returns true if ImportedParty instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportedParty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportedParty input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Zipcode == input.Zipcode ||
                    (this.Zipcode != null &&
                    this.Zipcode.Equals(input.Zipcode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Country == input.Country ||
                    this.Country.Equals(input.Country)
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.FaxNumber == input.FaxNumber ||
                    (this.FaxNumber != null &&
                    this.FaxNumber.Equals(input.FaxNumber))
                ) && 
                (
                    this.TaxRegistrations == input.TaxRegistrations ||
                    this.TaxRegistrations != null &&
                    input.TaxRegistrations != null &&
                    this.TaxRegistrations.SequenceEqual(input.TaxRegistrations)
                ) && 
                (
                    this.ElectronicAddressType == input.ElectronicAddressType ||
                    this.ElectronicAddressType.Equals(input.ElectronicAddressType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactName.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.Zipcode != null)
                {
                    hashCode = (hashCode * 59) + this.Zipcode.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.Street != null)
                {
                    hashCode = (hashCode * 59) + this.Street.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Country.GetHashCode();
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                if (this.FaxNumber != null)
                {
                    hashCode = (hashCode * 59) + this.FaxNumber.GetHashCode();
                }
                if (this.TaxRegistrations != null)
                {
                    hashCode = (hashCode * 59) + this.TaxRegistrations.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ElectronicAddressType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
