// <auto-generated>
/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    /// <summary>
    /// TransactionContactModel
    /// </summary>
    public partial class TransactionContactModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TransactionContactModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionContactModel" /> class.
        /// </summary>
        /// <param name="accountNumber">accountNumber</param>
        /// <param name="address">address</param>
        /// <param name="companyName">companyName</param>
        /// <param name="firstName">firstName</param>
        /// <param name="id">id</param>
        /// <param name="lastName">lastName</param>
        //[JsonConstructor]
        public TransactionContactModel(Option<string> accountNumber = default, Option<TransactionAddressModel> address = default, Option<string> companyName = default, Option<string> firstName = default, Option<Guid> id = default, Option<string> lastName = default)
        {
            AccountNumberOption = accountNumber;
            AddressOption = address;
            CompanyNameOption = companyName;
            FirstNameOption = firstName;
            IdOption = id;
            LastNameOption = lastName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AccountNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> AccountNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [JsonPropertyName("accountNumber")]
        public string? AccountNumber { get { return this. AccountNumberOption; } set { this.AccountNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransactionAddressModel>))]
        public Option<TransactionAddressModel> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public TransactionAddressModel? Address { get { return this. AddressOption; } set { this.AddressOption = new Option<TransactionAddressModel>(value); } }

        /// <summary>
        /// Used to track the state of CompanyName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> CompanyNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [JsonPropertyName("companyName")]
        public string? CompanyName { get { return this. CompanyNameOption; } set { this.CompanyNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> FirstNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [JsonPropertyName("firstName")]
        public string? FirstName { get { return this. FirstNameOption; } set { this.FirstNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> LastNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [JsonPropertyName("lastName")]
        public string? LastName { get { return this. LastNameOption; } set { this.LastNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionContactModel {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionContactModel" />
    /// </summary>
    public class TransactionContactModelJsonConverter : JsonConverter<TransactionContactModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransactionContactModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionContactModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> accountNumber = default;
            Option<TransactionAddressModel> address = default;
            Option<string> companyName = default;
            Option<string> firstName = default;
            Option<Guid> id = default;
            Option<string> lastName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountNumber":
                            accountNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                address = new Option<TransactionAddressModel>(JsonSerializer.Deserialize<TransactionAddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "companyName":
                            companyName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "firstName":
                            firstName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "lastName":
                            lastName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class TransactionContactModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TransactionContactModel.");

            //2return new TransactionContactModel(accountNumber, address, companyName, firstName, id, lastName);
            return new TransactionContactModel(accountNumber, address, companyName, firstName, id, lastName);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionContactModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionContactModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionContactModel transactionContactModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, transactionContactModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionContactModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionContactModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TransactionContactModel transactionContactModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionContactModel.AddressOption.IsSet && transactionContactModel.Address == null)
                throw new ArgumentNullException(nameof(transactionContactModel.Address), "Property is required for class TransactionContactModel.");

            if (transactionContactModel.AccountNumberOption.IsSet)
                if (transactionContactModel.AccountNumberOption.Value != null)
                {
                    writer.WriteString("accountNumber", transactionContactModel.AccountNumber);
                    //var __value = transactionContactModel.AccountNumberOption.Value;
                    //writer.WriteString("accountNumber", __value);
                }
                else
                    writer.WriteNull("accountNumber");

            if (transactionContactModel.AddressOption.IsSet)
            {
                writer.WritePropertyName("address");
                JsonSerializer.Serialize(writer, transactionContactModel.Address, jsonSerializerOptions);
            }
            if (transactionContactModel.CompanyNameOption.IsSet)
                if (transactionContactModel.CompanyNameOption.Value != null)
                {
                    writer.WriteString("companyName", transactionContactModel.CompanyName);
                    //var __value = transactionContactModel.CompanyNameOption.Value;
                    //writer.WriteString("companyName", __value);
                }
                else
                    writer.WriteNull("companyName");

            if (transactionContactModel.FirstNameOption.IsSet)
                if (transactionContactModel.FirstNameOption.Value != null)
                {
                    writer.WriteString("firstName", transactionContactModel.FirstName);
                    //var __value = transactionContactModel.FirstNameOption.Value;
                    //writer.WriteString("firstName", __value);
                }
                else
                    writer.WriteNull("firstName");

            if (transactionContactModel.IdOption.IsSet)
                writer.WriteString("id", transactionContactModel.IdOption!.Value);

            if (transactionContactModel.LastNameOption.IsSet)
                if (transactionContactModel.LastNameOption.Value != null)
                {
                    writer.WriteString("lastName", transactionContactModel.LastName);
                    //var __value = transactionContactModel.LastNameOption.Value;
                    //writer.WriteString("lastName", __value);
                }
                else
                    writer.WriteNull("lastName");
        }
    }
}
