// <auto-generated>
/*
 * Simplic.OxS.ERP
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.ERP
{
    //--Custom wrapper start
    /// <summary>
    /// Client to interact with the API endpoints of the erp service.
    /// </summary>
    public interface ITransactionItemTypeClient
    {
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        string GetBasePath();

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        //IReadableConfiguration Configuration;

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete(Guid id);

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(Guid id);
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionItemTypeModel</returns>
        TransactionItemTypeModel Get(Guid id);

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TransactionItemTypeModel</returns>
        ApiResponse<TransactionItemTypeModel> GetWithHttpInfo(Guid id);
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionItemTypeModel</returns>
        Task<TransactionItemTypeModel> GetAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionItemTypeModel)</returns>
        Task<ApiResponse<TransactionItemTypeModel>> GetWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateTransactionItemTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionItemTypeModel</returns>
        TransactionItemTypeModel Patch(Guid id, UpdateTransactionItemTypeRequest updateTransactionItemTypeRequest = default(UpdateTransactionItemTypeRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
/// <param name="updateTransactionItemTypeRequest"> (optional)</param>
        /// <returns>ApiResponse of TransactionItemTypeModel</returns>
        ApiResponse<TransactionItemTypeModel> PatchWithHttpInfo(Guid id, UpdateTransactionItemTypeRequest updateTransactionItemTypeRequest = default(UpdateTransactionItemTypeRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateTransactionItemTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionItemTypeModel</returns>
        Task<TransactionItemTypeModel> PatchAsync(Guid id, UpdateTransactionItemTypeRequest updateTransactionItemTypeRequest = default(UpdateTransactionItemTypeRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateTransactionItemTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionItemTypeModel)</returns>
        Task<ApiResponse<TransactionItemTypeModel>> PatchWithHttpInfoAsync(Guid id, UpdateTransactionItemTypeRequest updateTransactionItemTypeRequest = default(UpdateTransactionItemTypeRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionItemTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionItemTypeModel</returns>
        TransactionItemTypeModel Post(TransactionItemTypeRequest transactionItemTypeRequest = default(TransactionItemTypeRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionItemTypeRequest"> (optional)</param>
        /// <returns>ApiResponse of TransactionItemTypeModel</returns>
        ApiResponse<TransactionItemTypeModel> PostWithHttpInfo(TransactionItemTypeRequest transactionItemTypeRequest = default(TransactionItemTypeRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionItemTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionItemTypeModel</returns>
        Task<TransactionItemTypeModel> PostAsync(TransactionItemTypeRequest transactionItemTypeRequest = default(TransactionItemTypeRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionItemTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionItemTypeModel)</returns>
        Task<ApiResponse<TransactionItemTypeModel>> PostWithHttpInfoAsync(TransactionItemTypeRequest transactionItemTypeRequest = default(TransactionItemTypeRequest), CancellationToken cancellationToken = default(CancellationToken));

    }

    /// <inheritdoc cref="ITransactionItemTypeClient">
    public class TransactionItemTypeClient : ITransactionItemTypeClient
    {
        private __TransactionItemTypeClient _internalClient;
        private HttpClient _httpClient;

        public TransactionItemTypeClient(string host, string? authorization = null)
        {
            _httpClient = new HttpClient() { BaseAddress = new Uri($"{host}/erp-api/v1") };
            var jsonSerializerOptions = new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            var jsonSerializerOptionsProvider = new JsonSerializerOptionsProvider(jsonSerializerOptions);
            var events = new TransactionItemTypeClientEvents();
            if (authorization is null)
            {
                _internalClient = new __TransactionItemTypeClient(_httpClient, jsonSerializerOptionsProvider, events, new NullTokenProvider<ApiKeyToken>());
            }
            else
            {
                var token = new ApiKeyToken(authorization, "Authorization", "");
                _internalClient = new __TransactionItemTypeClient(_httpClient, jsonSerializerOptionsProvider, events, new ApiKeyTokenProvider(new[] { token }));
            }
        }

        public TransactionItemTypeClient(Environment env, string? authorization = null)
            : this(
                env == Environment.Development
                    ? "https://dev-oxs.simplic.io"
                    : "https://oxs.simplic.io",
                authorization
            ) { }

        /// <inheritdoc />
        public string GetBasePath() => _httpClient.BaseAddress.ToString();

        /// <inheritdoc />
        public void Delete(Guid id)
        {
            try
            {
                var response = _internalClient.DeleteAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> DeleteWithHttpInfo(Guid id)
        {
            try
            {
                var response = _internalClient.DeleteAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task DeleteAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.DeleteAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.DeleteAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public TransactionItemTypeModel Get(Guid id)
        {
            try
            {
                var response = _internalClient.GetAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<TransactionItemTypeModel> GetWithHttpInfo(Guid id)
        {
            try
            {
                var response = _internalClient.GetAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<TransactionItemTypeModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<TransactionItemTypeModel> GetAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<TransactionItemTypeModel>> GetWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<TransactionItemTypeModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public TransactionItemTypeModel Patch(Guid id, UpdateTransactionItemTypeRequest updateTransactionItemTypeRequest = default(UpdateTransactionItemTypeRequest))
        {
            try
            {
                var response = _internalClient.PatchAsync(id, updateTransactionItemTypeRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<TransactionItemTypeModel> PatchWithHttpInfo(Guid id, UpdateTransactionItemTypeRequest updateTransactionItemTypeRequest = default(UpdateTransactionItemTypeRequest))
        {
            try
            {
                var response = _internalClient.PatchAsync(id, updateTransactionItemTypeRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<TransactionItemTypeModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<TransactionItemTypeModel> PatchAsync(Guid id, UpdateTransactionItemTypeRequest updateTransactionItemTypeRequest = default(UpdateTransactionItemTypeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PatchAsync(id, updateTransactionItemTypeRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<TransactionItemTypeModel>> PatchWithHttpInfoAsync(Guid id, UpdateTransactionItemTypeRequest updateTransactionItemTypeRequest = default(UpdateTransactionItemTypeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PatchAsync(id, updateTransactionItemTypeRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<TransactionItemTypeModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public TransactionItemTypeModel Post(TransactionItemTypeRequest transactionItemTypeRequest = default(TransactionItemTypeRequest))
        {
            try
            {
                var response = _internalClient.PostAsync(transactionItemTypeRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<TransactionItemTypeModel> PostWithHttpInfo(TransactionItemTypeRequest transactionItemTypeRequest = default(TransactionItemTypeRequest))
        {
            try
            {
                var response = _internalClient.PostAsync(transactionItemTypeRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<TransactionItemTypeModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<TransactionItemTypeModel> PostAsync(TransactionItemTypeRequest transactionItemTypeRequest = default(TransactionItemTypeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PostAsync(transactionItemTypeRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<TransactionItemTypeModel>> PostWithHttpInfoAsync(TransactionItemTypeRequest transactionItemTypeRequest = default(TransactionItemTypeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PostAsync(transactionItemTypeRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<TransactionItemTypeModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    

        private string FormatErrorMessage(string message, int errorCode) => $"<{errorCode} - {(HttpStatusCode)errorCode}> {message}";
    }
    //--Custom wrapper end
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    internal interface __ITransactionItemTypeClient : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TransactionItemTypeClientEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse"/>&gt;</returns>
        Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse> DeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse"/>?&gt;</returns>
        Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse?> DeleteOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse"/>&gt;</returns>
        Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse> GetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse"/>?&gt;</returns>
        Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse?> GetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateTransactionItemTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse"/>&gt;</returns>
        Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse> PatchAsync(Guid id, Option<UpdateTransactionItemTypeRequest> updateTransactionItemTypeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="updateTransactionItemTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse"/>?&gt;</returns>
        Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse?> PatchOrDefaultAsync(Guid id, Option<UpdateTransactionItemTypeRequest> updateTransactionItemTypeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionItemTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypePostApiResponse"/>&gt;</returns>
        Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypePostApiResponse> PostAsync(Option<TransactionItemTypeRequest> transactionItemTypeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transactionItemTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypePostApiResponse"/>?&gt;</returns>
        Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypePostApiResponse?> PostOrDefaultAsync(Option<TransactionItemTypeRequest> transactionItemTypeRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TransactionItemTypeClientEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTransactionItemTypeIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTransactionItemTypeIdDelete;

        internal void ExecuteOnTransactionItemTypeIdDelete(__TransactionItemTypeClient.TransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse apiResponse)
        {
            OnTransactionItemTypeIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransactionItemTypeIdDelete(Exception exception)
        {
            OnErrorTransactionItemTypeIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTransactionItemTypeIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTransactionItemTypeIdGet;

        internal void ExecuteOnTransactionItemTypeIdGet(__TransactionItemTypeClient.TransactionItemTypeClientTransactionItemTypeIdGetApiResponse apiResponse)
        {
            OnTransactionItemTypeIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransactionItemTypeIdGet(Exception exception)
        {
            OnErrorTransactionItemTypeIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTransactionItemTypeIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTransactionItemTypeIdPatch;

        internal void ExecuteOnTransactionItemTypeIdPatch(__TransactionItemTypeClient.TransactionItemTypeClientTransactionItemTypeIdPatchApiResponse apiResponse)
        {
            OnTransactionItemTypeIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransactionItemTypeIdPatch(Exception exception)
        {
            OnErrorTransactionItemTypeIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTransactionItemTypePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTransactionItemTypePost;

        internal void ExecuteOnTransactionItemTypePost(__TransactionItemTypeClient.TransactionItemTypeClientTransactionItemTypePostApiResponse apiResponse)
        {
            OnTransactionItemTypePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransactionItemTypePost(Exception exception)
        {
            OnErrorTransactionItemTypePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal sealed partial class __TransactionItemTypeClient : __ITransactionItemTypeClient
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TransactionItemTypeClientEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionItemTypeClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __TransactionItemTypeClient(
            HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            TransactionItemTypeClientEvents transactionItemTypeClientEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider
        )
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            HttpClient = httpClient;
            Events = transactionItemTypeClientEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatTransactionItemTypeIdDelete(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterTransactionItemTypeIdDeleteDefaultImplementation(__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterTransactionItemTypeIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterTransactionItemTypeIdDelete(ref bool suppressDefaultLog, __TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        private void OnErrorTransactionItemTypeIdDeleteDefaultImplementation(Exception exception, string pathFormat, string path, Guid id)
        {
            bool suppressDefaultLog = false;
            OnErrorTransactionItemTypeIdDelete(ref suppressDefaultLog, exception, pathFormat, path, id);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        partial void OnErrorTransactionItemTypeIdDelete(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid id);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse"/>&gt;</returns>
        public async Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse?> DeleteOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse"/>&gt;</returns>
        public async Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse> DeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatTransactionItemTypeIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/TransactionItemType/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        TransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse apiResponseLocalVar = new TransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/TransactionItemType/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransactionItemTypeIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnTransactionItemTypeIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransactionItemTypeIdDeleteDefaultImplementation(e, "/TransactionItemType/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorTransactionItemTypeIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse"/>
        /// </summary>
        internal interface ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse : Simplic.OxS.SDK.__IApiResponse, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="TransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse"/>
        /// </summary>
        internal partial class TransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse : Simplic.OxS.SDK.__ApiResponse, ITransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse
        {
            /// <summary>
            /// The <see cref="TransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransactionItemTypeClientTransactionItemTypeIdDeleteApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransactionItemTypeIdGet(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterTransactionItemTypeIdGetDefaultImplementation(__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterTransactionItemTypeIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterTransactionItemTypeIdGet(ref bool suppressDefaultLog, __TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        private void OnErrorTransactionItemTypeIdGetDefaultImplementation(Exception exception, string pathFormat, string path, Guid id)
        {
            bool suppressDefaultLog = false;
            OnErrorTransactionItemTypeIdGet(ref suppressDefaultLog, exception, pathFormat, path, id);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        partial void OnErrorTransactionItemTypeIdGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid id);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse"/>&gt;</returns>
        public async Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse?> GetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse"/>&gt;</returns>
        public async Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse> GetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatTransactionItemTypeIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/TransactionItemType/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        TransactionItemTypeClientTransactionItemTypeIdGetApiResponse apiResponseLocalVar = new TransactionItemTypeClientTransactionItemTypeIdGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/TransactionItemType/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransactionItemTypeIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnTransactionItemTypeIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransactionItemTypeIdGetDefaultImplementation(e, "/TransactionItemType/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorTransactionItemTypeIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse"/>
        /// </summary>
        internal interface ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<TransactionItemTypeModel>, IUnauthorized<ProblemDetails>, IBadRequest<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
        }

        /// <summary>
        /// The <see cref="TransactionItemTypeClientTransactionItemTypeIdGetApiResponse"/>
        /// </summary>
        internal partial class TransactionItemTypeClientTransactionItemTypeIdGetApiResponse : Simplic.OxS.SDK.__ApiResponse, ITransactionItemTypeClientTransactionItemTypeIdGetApiResponse
        {
            /// <summary>
            /// The <see cref="TransactionItemTypeClientTransactionItemTypeIdGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransactionItemTypeClientTransactionItemTypeIdGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public TransactionItemTypeModel Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TransactionItemTypeModel>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out TransactionItemTypeModel result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransactionItemTypeIdPatch(ref Guid id, Option<UpdateTransactionItemTypeRequest> updateTransactionItemTypeRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateTransactionItemTypeRequest"></param>
        /// <returns></returns>
        private void ValidateTransactionItemTypeIdPatch(Option<UpdateTransactionItemTypeRequest> updateTransactionItemTypeRequest)
        {
            if (updateTransactionItemTypeRequest.IsSet && updateTransactionItemTypeRequest.Value == null)
                throw new ArgumentNullException(nameof(updateTransactionItemTypeRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateTransactionItemTypeRequest"></param>
        private void AfterTransactionItemTypeIdPatchDefaultImplementation(__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse apiResponseLocalVar, Guid id, Option<UpdateTransactionItemTypeRequest> updateTransactionItemTypeRequest)
        {
            bool suppressDefaultLog = false;
            AfterTransactionItemTypeIdPatch(ref suppressDefaultLog, apiResponseLocalVar, id, updateTransactionItemTypeRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateTransactionItemTypeRequest"></param>
        partial void AfterTransactionItemTypeIdPatch(ref bool suppressDefaultLog, __TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse apiResponseLocalVar, Guid id, Option<UpdateTransactionItemTypeRequest> updateTransactionItemTypeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="updateTransactionItemTypeRequest"></param>
        private void OnErrorTransactionItemTypeIdPatchDefaultImplementation(Exception exception, string pathFormat, string path, Guid id, Option<UpdateTransactionItemTypeRequest> updateTransactionItemTypeRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorTransactionItemTypeIdPatch(ref suppressDefaultLog, exception, pathFormat, path, id, updateTransactionItemTypeRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="updateTransactionItemTypeRequest"></param>
        partial void OnErrorTransactionItemTypeIdPatch(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid id, Option<UpdateTransactionItemTypeRequest> updateTransactionItemTypeRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="id"></param>
        /// <param name="updateTransactionItemTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse"/>&gt;</returns>
        public async Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse?> PatchOrDefaultAsync(Guid id, Option<UpdateTransactionItemTypeRequest> updateTransactionItemTypeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PatchAsync(id, updateTransactionItemTypeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateTransactionItemTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse"/>&gt;</returns>
        public async Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse> PatchAsync(Guid id, Option<UpdateTransactionItemTypeRequest> updateTransactionItemTypeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransactionItemTypeIdPatch(updateTransactionItemTypeRequest);

                FormatTransactionItemTypeIdPatch(ref id, updateTransactionItemTypeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/TransactionItemType/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (updateTransactionItemTypeRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (updateTransactionItemTypeRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateTransactionItemTypeRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        TransactionItemTypeClientTransactionItemTypeIdPatchApiResponse apiResponseLocalVar = new TransactionItemTypeClientTransactionItemTypeIdPatchApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/TransactionItemType/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransactionItemTypeIdPatchDefaultImplementation(apiResponseLocalVar, id, updateTransactionItemTypeRequest);

                        Events.ExecuteOnTransactionItemTypeIdPatch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransactionItemTypeIdPatchDefaultImplementation(e, "/TransactionItemType/{id}", uriBuilderLocalVar.Path, id, updateTransactionItemTypeRequest);
                Events.ExecuteOnErrorTransactionItemTypeIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse"/>
        /// </summary>
        internal interface ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<TransactionItemTypeModel>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="TransactionItemTypeClientTransactionItemTypeIdPatchApiResponse"/>
        /// </summary>
        internal partial class TransactionItemTypeClientTransactionItemTypeIdPatchApiResponse : Simplic.OxS.SDK.__ApiResponse, ITransactionItemTypeClientTransactionItemTypeIdPatchApiResponse
        {
            /// <summary>
            /// The <see cref="TransactionItemTypeClientTransactionItemTypeIdPatchApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransactionItemTypeClientTransactionItemTypeIdPatchApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public TransactionItemTypeModel Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TransactionItemTypeModel>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out TransactionItemTypeModel result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransactionItemTypePost(Option<TransactionItemTypeRequest> transactionItemTypeRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="transactionItemTypeRequest"></param>
        /// <returns></returns>
        private void ValidateTransactionItemTypePost(Option<TransactionItemTypeRequest> transactionItemTypeRequest)
        {
            if (transactionItemTypeRequest.IsSet && transactionItemTypeRequest.Value == null)
                throw new ArgumentNullException(nameof(transactionItemTypeRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transactionItemTypeRequest"></param>
        private void AfterTransactionItemTypePostDefaultImplementation(__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypePostApiResponse apiResponseLocalVar, Option<TransactionItemTypeRequest> transactionItemTypeRequest)
        {
            bool suppressDefaultLog = false;
            AfterTransactionItemTypePost(ref suppressDefaultLog, apiResponseLocalVar, transactionItemTypeRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transactionItemTypeRequest"></param>
        partial void AfterTransactionItemTypePost(ref bool suppressDefaultLog, __TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypePostApiResponse apiResponseLocalVar, Option<TransactionItemTypeRequest> transactionItemTypeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transactionItemTypeRequest"></param>
        private void OnErrorTransactionItemTypePostDefaultImplementation(Exception exception, string pathFormat, string path, Option<TransactionItemTypeRequest> transactionItemTypeRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorTransactionItemTypePost(ref suppressDefaultLog, exception, pathFormat, path, transactionItemTypeRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transactionItemTypeRequest"></param>
        partial void OnErrorTransactionItemTypePost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<TransactionItemTypeRequest> transactionItemTypeRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="transactionItemTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypePostApiResponse"/>&gt;</returns>
        public async Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypePostApiResponse?> PostOrDefaultAsync(Option<TransactionItemTypeRequest> transactionItemTypeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostAsync(transactionItemTypeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionItemTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypePostApiResponse"/>&gt;</returns>
        public async Task<__TransactionItemTypeClient.ITransactionItemTypeClientTransactionItemTypePostApiResponse> PostAsync(Option<TransactionItemTypeRequest> transactionItemTypeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransactionItemTypePost(transactionItemTypeRequest);

                FormatTransactionItemTypePost(transactionItemTypeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/TransactionItemType";

                    if (transactionItemTypeRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (transactionItemTypeRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(transactionItemTypeRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        TransactionItemTypeClientTransactionItemTypePostApiResponse apiResponseLocalVar = new TransactionItemTypeClientTransactionItemTypePostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/TransactionItemType", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransactionItemTypePostDefaultImplementation(apiResponseLocalVar, transactionItemTypeRequest);

                        Events.ExecuteOnTransactionItemTypePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransactionItemTypePostDefaultImplementation(e, "/TransactionItemType", uriBuilderLocalVar.Path, transactionItemTypeRequest);
                Events.ExecuteOnErrorTransactionItemTypePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ITransactionItemTypeClientTransactionItemTypePostApiResponse"/>
        /// </summary>
        internal interface ITransactionItemTypeClientTransactionItemTypePostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<TransactionItemTypeModel>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="TransactionItemTypeClientTransactionItemTypePostApiResponse"/>
        /// </summary>
        internal partial class TransactionItemTypeClientTransactionItemTypePostApiResponse : Simplic.OxS.SDK.__ApiResponse, ITransactionItemTypeClientTransactionItemTypePostApiResponse
        {
            /// <summary>
            /// The <see cref="TransactionItemTypeClientTransactionItemTypePostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransactionItemTypeClientTransactionItemTypePostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public TransactionItemTypeModel Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TransactionItemTypeModel>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out TransactionItemTypeModel result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
