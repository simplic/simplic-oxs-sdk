/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;

// -- Custom --
using System.Threading;
using System.Threading.Tasks;
// -^ Custom ^-

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    // ------------------------- Custom -------------------------------
//: Interface
    
/// <summary>
/// Client to interact with the API endpoints of the logistics service.
/// </summary>
public interface IScheduledPlanningClient
{
    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    string GetBasePath();


    /// <summary>
    /// Gets all plans for given day. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dateTime"> (optional)</param>
    /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
    List<ScheduledPlanningAssignmentResponse> GetByDate(DateTime? dateTime = default(DateTime?));

    /// <summary>
    /// Gets all plans for given day. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dateTime"> (optional)</param>
    /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
    ApiResponse<List<ScheduledPlanningAssignmentResponse>> GetByDateWithHttpInfo(DateTime? dateTime = default(DateTime?));
        
    /// <summary>
    /// Gets all plans for given day. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dateTime"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
    Task<List<ScheduledPlanningAssignmentResponse>> GetByDateAsync(DateTime? dateTime = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Gets all plans for given day. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dateTime"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
    Task<ApiResponse<List<ScheduledPlanningAssignmentResponse>>> GetByDateWithHttpInfoAsync(DateTime? dateTime = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    /// Gets shifts for resource on given day. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="resourceId"></param>
    /// <param name="dateTime"> (optional)</param>
    /// <param name="shiftId"> (optional)</param>
    /// <returns>ScheduledPlanningAssignmentResponse</returns>
    ScheduledPlanningAssignmentResponse GetByResource(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?));

    /// <summary>
    /// Gets shifts for resource on given day. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="resourceId"></param>
    /// <param name="dateTime"> (optional)</param>
    /// <param name="shiftId"> (optional)</param>
    /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
    ApiResponse<ScheduledPlanningAssignmentResponse> GetByResourceWithHttpInfo(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?));
        
    /// <summary>
    /// Gets shifts for resource on given day. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="resourceId"></param>
    /// <param name="dateTime"> (optional)</param>
    /// <param name="shiftId"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
    Task<ScheduledPlanningAssignmentResponse> GetByResourceAsync(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Gets shifts for resource on given day. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="resourceId"></param>
    /// <param name="dateTime"> (optional)</param>
    /// <param name="shiftId"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
    Task<ApiResponse<ScheduledPlanningAssignmentResponse>> GetByResourceWithHttpInfoAsync(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    /// Gets plans matching given shift id for given day. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="shiftId"></param>
    /// <param name="dateTime"> (optional)</param>
    /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
    List<ScheduledPlanningAssignmentResponse> GetByShift(Guid shiftId, DateTime? dateTime = default(DateTime?));

    /// <summary>
    /// Gets plans matching given shift id for given day. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="shiftId"></param>
    /// <param name="dateTime"> (optional)</param>
    /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
    ApiResponse<List<ScheduledPlanningAssignmentResponse>> GetByShiftWithHttpInfo(Guid shiftId, DateTime? dateTime = default(DateTime?));
        
    /// <summary>
    /// Gets plans matching given shift id for given day. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="shiftId"></param>
    /// <param name="dateTime"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
    Task<List<ScheduledPlanningAssignmentResponse>> GetByShiftAsync(Guid shiftId, DateTime? dateTime = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Gets plans matching given shift id for given day. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="shiftId"></param>
    /// <param name="dateTime"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
    Task<ApiResponse<List<ScheduledPlanningAssignmentResponse>>> GetByShiftWithHttpInfoAsync(Guid shiftId, DateTime? dateTime = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    /// Deletes plan matching given id. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <returns></returns>
    void Delete(Guid id);

    /// <summary>
    /// Deletes plan matching given id. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> DeleteWithHttpInfo(Guid id);
        
    /// <summary>
    /// Deletes plan matching given id. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task DeleteAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Deletes plan matching given id. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    /// Gets plan matching given id. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <returns>ScheduledPlanningAssignmentResponse</returns>
    ScheduledPlanningAssignmentResponse Get(Guid id);

    /// <summary>
    /// Gets plan matching given id. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
    ApiResponse<ScheduledPlanningAssignmentResponse> GetWithHttpInfo(Guid id);
        
    /// <summary>
    /// Gets plan matching given id. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
    Task<ScheduledPlanningAssignmentResponse> GetAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Gets plan matching given id. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
    Task<ApiResponse<ScheduledPlanningAssignmentResponse>> GetWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    /// Patches plan matching given id. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="patchScheduledPlanningRequest"> (optional)</param>
    /// <returns>ScheduledPlanningAssignmentResponse</returns>
    ScheduledPlanningAssignmentResponse Patch(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?));

    /// <summary>
    /// Patches plan matching given id. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="patchScheduledPlanningRequest"> (optional)</param>
    /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
    ApiResponse<ScheduledPlanningAssignmentResponse> PatchWithHttpInfo(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?));
        
    /// <summary>
    /// Patches plan matching given id. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="patchScheduledPlanningRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
    Task<ScheduledPlanningAssignmentResponse> PatchAsync(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Patches plan matching given id. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="patchScheduledPlanningRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
    Task<ApiResponse<ScheduledPlanningAssignmentResponse>> PatchWithHttpInfoAsync(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    /// Posts a new plan. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="postScheduledPlanningRequest"> (optional)</param>
    /// <returns>ScheduledPlanningAssignmentResponse</returns>
    ScheduledPlanningAssignmentResponse Post(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?));

    /// <summary>
    /// Posts a new plan. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="postScheduledPlanningRequest"> (optional)</param>
    /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
    ApiResponse<ScheduledPlanningAssignmentResponse> PostWithHttpInfo(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?));
        
    /// <summary>
    /// Posts a new plan. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="postScheduledPlanningRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
    Task<ScheduledPlanningAssignmentResponse> PostAsync(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Posts a new plan. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="postScheduledPlanningRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
    Task<ApiResponse<ScheduledPlanningAssignmentResponse>> PostWithHttpInfoAsync(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), CancellationToken cancellationToken = default(CancellationToken));


    /// <summary>
    /// Checks whether any resource has been assigned in multiple plans. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ValidateResponse</returns>
    ValidateResponse Validate();

    /// <summary>
    /// Checks whether any resource has been assigned in multiple plans. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of ValidateResponse</returns>
    ApiResponse<ValidateResponse> ValidateWithHttpInfo();
        
    /// <summary>
    /// Checks whether any resource has been assigned in multiple plans. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ValidateResponse</returns>
    Task<ValidateResponse> ValidateAsync(CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Checks whether any resource has been assigned in multiple plans. 
    /// </summary>
    /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ValidateResponse)</returns>
    Task<ApiResponse<ValidateResponse>> ValidateWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));

}


//: Implementation

    /// <summary>
    /// Client to interact with the API endpoints of the logistics service.
    /// </summary>
    public class ScheduledPlanningClient : IScheduledPlanningClient
    {
        private __ScheduledPlanningClient _internalClient;
        private Simplic.OxS.SDK.ExceptionFactory _exceptionFactory = (name, response) => null;

        public ScheduledPlanningClient(string host, string? authorization = null)
        {
            if (authorization != null)
            {
                _internalClient = new __ScheduledPlanningClient(new Configuration
                {
                    BasePath = $"{host}/logistics-api/v1",
                    DefaultHeaders = { { "Authorization", authorization } }
                });
            }
            else
            {
                _internalClient = new __ScheduledPlanningClient(new Configuration
                {
                    BasePath = $"{host}/logistics-api/v1",
                });
            }
        }

        public ScheduledPlanningClient(Environment env, string? authorization = null)
            : this(
                env == Environment.Development
                    ? "https://dev-oxs.simplic.io"
                    : "https://oxs.simplic.io",
                authorization
            ) { }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath() => _internalClient.GetBasePath();

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Simplic.OxS.SDK.IReadableConfiguration Configuration
        {
            get => _internalClient.Configuration;
            set
            {
                _internalClient.Configuration = value;
            }
        }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Simplic.OxS.SDK.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public List<ScheduledPlanningAssignmentResponse> GetByDate(DateTime? dateTime = default(DateTime?))
        {
            try
            {
                return _internalClient.GetByDate(dateTime);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public Simplic.OxS.SDK.ApiResponse<List<ScheduledPlanningAssignmentResponse>> GetByDateWithHttpInfo(DateTime? dateTime = default(DateTime?))
        {
            try
            {
                return _internalClient.GetByDateWithHttpInfo(dateTime);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public System.Threading.Tasks.Task<List<ScheduledPlanningAssignmentResponse>> GetByDateAsync(DateTime? dateTime = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetByDateAsync(dateTime, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<List<ScheduledPlanningAssignmentResponse>>> GetByDateWithHttpInfoAsync(DateTime? dateTime = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetByDateWithHttpInfoAsync(dateTime, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        public ScheduledPlanningAssignmentResponse GetByResource(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?))
        {
            try
            {
                return _internalClient.GetByResource(resourceId, dateTime, shiftId);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> GetByResourceWithHttpInfo(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?))
        {
            try
            {
                return _internalClient.GetByResourceWithHttpInfo(resourceId, dateTime, shiftId);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        public System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> GetByResourceAsync(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetByResourceAsync(resourceId, dateTime, shiftId, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse>> GetByResourceWithHttpInfoAsync(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetByResourceWithHttpInfoAsync(resourceId, dateTime, shiftId, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public List<ScheduledPlanningAssignmentResponse> GetByShift(Guid shiftId, DateTime? dateTime = default(DateTime?))
        {
            try
            {
                return _internalClient.GetByShift(shiftId, dateTime);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public Simplic.OxS.SDK.ApiResponse<List<ScheduledPlanningAssignmentResponse>> GetByShiftWithHttpInfo(Guid shiftId, DateTime? dateTime = default(DateTime?))
        {
            try
            {
                return _internalClient.GetByShiftWithHttpInfo(shiftId, dateTime);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public System.Threading.Tasks.Task<List<ScheduledPlanningAssignmentResponse>> GetByShiftAsync(Guid shiftId, DateTime? dateTime = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetByShiftAsync(shiftId, dateTime, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<List<ScheduledPlanningAssignmentResponse>>> GetByShiftWithHttpInfoAsync(Guid shiftId, DateTime? dateTime = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetByShiftWithHttpInfoAsync(shiftId, dateTime, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void Delete(Guid id)
        {
            try
            {
                _internalClient.Delete(id);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> DeleteWithHttpInfo(Guid id)
        {
            try
            {
                return _internalClient.DeleteWithHttpInfo(id);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task DeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.DeleteAsync(id, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.DeleteWithHttpInfoAsync(id, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        public ScheduledPlanningAssignmentResponse Get(Guid id)
        {
            try
            {
                return _internalClient.Get(id);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> GetWithHttpInfo(Guid id)
        {
            try
            {
                return _internalClient.GetWithHttpInfo(id);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        public System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> GetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetAsync(id, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse>> GetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.GetWithHttpInfoAsync(id, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        public ScheduledPlanningAssignmentResponse Patch(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?))
        {
            try
            {
                return _internalClient.Patch(id, patchScheduledPlanningRequest);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> PatchWithHttpInfo(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?))
        {
            try
            {
                return _internalClient.PatchWithHttpInfo(id, patchScheduledPlanningRequest);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        public System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> PatchAsync(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.PatchAsync(id, patchScheduledPlanningRequest, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse>> PatchWithHttpInfoAsync(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.PatchWithHttpInfoAsync(id, patchScheduledPlanningRequest, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        public ScheduledPlanningAssignmentResponse Post(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?))
        {
            try
            {
                return _internalClient.Post(postScheduledPlanningRequest);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> PostWithHttpInfo(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?))
        {
            try
            {
                return _internalClient.PostWithHttpInfo(postScheduledPlanningRequest);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        public System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> PostAsync(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.PostAsync(postScheduledPlanningRequest, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse>> PostWithHttpInfoAsync(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.PostWithHttpInfoAsync(postScheduledPlanningRequest, cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ValidateResponse</returns>
        public ValidateResponse Validate()
        {
            try
            {
                return _internalClient.Validate();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ValidateResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<ValidateResponse> ValidateWithHttpInfo()
        {
            try
            {
                return _internalClient.ValidateWithHttpInfo();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateResponse</returns>
        public System.Threading.Tasks.Task<ValidateResponse> ValidateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.ValidateAsync(cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateResponse)</returns>
        public System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<ValidateResponse>> ValidateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            try
            {
                return _internalClient.ValidateWithHttpInfoAsync(cancellationToken: cancellationToken);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    

        private string FormatErrorMessage(string message, int errorCode) => $"<{errorCode} - {(HttpStatusCode)errorCode}> {message}";
    }

// ------------------------^ Custom ^------------------------------


    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface __IScheduledPlanningClientSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all plans for given day.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        List<ScheduledPlanningAssignmentResponse> GetByDate(DateTime? dateTime = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Gets all plans for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        ApiResponse<List<ScheduledPlanningAssignmentResponse>> GetByDateWithHttpInfo(DateTime? dateTime = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Gets shifts for resource on given day.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        ScheduledPlanningAssignmentResponse GetByResource(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Gets shifts for resource on given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        ApiResponse<ScheduledPlanningAssignmentResponse> GetByResourceWithHttpInfo(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Gets plans matching given shift id for given day.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        List<ScheduledPlanningAssignmentResponse> GetByShift(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Gets plans matching given shift id for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        ApiResponse<List<ScheduledPlanningAssignmentResponse>> GetByShiftWithHttpInfo(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Deletes plan matching given id.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete(Guid id, int operationIndex = 0);

        /// <summary>
        /// Deletes plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Gets plan matching given id.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        ScheduledPlanningAssignmentResponse Get(Guid id, int operationIndex = 0);

        /// <summary>
        /// Gets plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        ApiResponse<ScheduledPlanningAssignmentResponse> GetWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Patches plan matching given id.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        ScheduledPlanningAssignmentResponse Patch(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0);

        /// <summary>
        /// Patches plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        ApiResponse<ScheduledPlanningAssignmentResponse> PatchWithHttpInfo(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0);
        /// <summary>
        /// Posts a new plan.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        ScheduledPlanningAssignmentResponse Post(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0);

        /// <summary>
        /// Posts a new plan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        ApiResponse<ScheduledPlanningAssignmentResponse> PostWithHttpInfo(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0);
        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidateResponse</returns>
        ValidateResponse Validate(int operationIndex = 0);

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidateResponse</returns>
        ApiResponse<ValidateResponse> ValidateWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface __IScheduledPlanningClientAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Gets all plans for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ScheduledPlanningAssignmentResponse>> GetByDateAsync(DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all plans for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ScheduledPlanningAssignmentResponse>>> GetByDateWithHttpInfoAsync(DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets shifts for resource on given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> GetByResourceAsync(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets shifts for resource on given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledPlanningAssignmentResponse>> GetByResourceWithHttpInfoAsync(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets plans matching given shift id for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ScheduledPlanningAssignmentResponse>> GetByShiftAsync(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets plans matching given shift id for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ScheduledPlanningAssignmentResponse>>> GetByShiftWithHttpInfoAsync(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> GetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledPlanningAssignmentResponse>> GetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patches plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> PatchAsync(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patches plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledPlanningAssignmentResponse>> PatchWithHttpInfoAsync(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Posts a new plan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> PostAsync(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Posts a new plan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledPlanningAssignmentResponse>> PostWithHttpInfoAsync(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateResponse</returns>
        System.Threading.Tasks.Task<ValidateResponse> ValidateAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateResponse>> ValidateWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface __IScheduledPlanningClient : __IScheduledPlanningClientSync, __IScheduledPlanningClientAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal /*partial*/ class __ScheduledPlanningClient : __IScheduledPlanningClient
    {
        private Simplic.OxS.SDK.ExceptionFactory _exceptionFactory = (name, response) => null;

        /*
        /// <summary>
        /// Initializes a new instance of the <see cref="__ScheduledPlanningClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __ScheduledPlanningClient() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="__ScheduledPlanningClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __ScheduledPlanningClient(string basePath)
        {
            this.Configuration = Simplic.OxS.SDK.Configuration.MergeConfigurations(
                Simplic.OxS.SDK.GlobalConfiguration.Instance,
                new Simplic.OxS.SDK.Configuration { BasePath = basePath }
            );
            this.Client = new Simplic.OxS.SDK.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Simplic.OxS.SDK.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Simplic.OxS.SDK.Configuration.DefaultExceptionFactory;
        }
        */

        /// <summary>
        /// Initializes a new instance of the <see cref="__ScheduledPlanningClient"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public __ScheduledPlanningClient(Simplic.OxS.SDK.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Simplic.OxS.SDK.Configuration.MergeConfigurations(
                Simplic.OxS.SDK.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Simplic.OxS.SDK.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Simplic.OxS.SDK.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Simplic.OxS.SDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="__ScheduledPlanningClient"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public __ScheduledPlanningClient(Simplic.OxS.SDK.ISynchronousClient client, Simplic.OxS.SDK.IAsynchronousClient asyncClient, Simplic.OxS.SDK.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Simplic.OxS.SDK.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Simplic.OxS.SDK.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Simplic.OxS.SDK.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Simplic.OxS.SDK.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Simplic.OxS.SDK.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public List<ScheduledPlanningAssignmentResponse> GetByDate(DateTime? dateTime = default(DateTime?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.ApiResponse<List<ScheduledPlanningAssignmentResponse>> localVarResponse = GetByDateWithHttpInfo(dateTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public Simplic.OxS.SDK.ApiResponse<List<ScheduledPlanningAssignmentResponse>> GetByDateWithHttpInfo(DateTime? dateTime = default(DateTime?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningGetByDateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ScheduledPlanningAssignmentResponse>>("/ScheduledPlanning/get-by-date", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningGetByDateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ScheduledPlanningAssignmentResponse>> GetByDateAsync(DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.ApiResponse<List<ScheduledPlanningAssignmentResponse>> localVarResponse = await GetByDateWithHttpInfoAsync(dateTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<List<ScheduledPlanningAssignmentResponse>>> GetByDateWithHttpInfoAsync(DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningGetByDateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ScheduledPlanningAssignmentResponse>>("/ScheduledPlanning/get-by-date", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningGetByDateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        public ScheduledPlanningAssignmentResponse GetByResource(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = GetByResourceWithHttpInfo(resourceId, dateTime, shiftId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> GetByResourceWithHttpInfo(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceId", Simplic.OxS.SDK.ClientUtils.ParameterToString(resourceId)); // path parameter
            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }
            if (shiftId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "shiftId", shiftId));
            }

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningGetByResourceResourceIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning/get-by-resource/{resourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningGetByResourceResourceIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        public async System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> GetByResourceAsync(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = await GetByResourceWithHttpInfoAsync(resourceId, dateTime, shiftId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse>> GetByResourceWithHttpInfoAsync(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceId", Simplic.OxS.SDK.ClientUtils.ParameterToString(resourceId)); // path parameter
            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }
            if (shiftId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "shiftId", shiftId));
            }

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningGetByResourceResourceIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning/get-by-resource/{resourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningGetByResourceResourceIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public List<ScheduledPlanningAssignmentResponse> GetByShift(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.ApiResponse<List<ScheduledPlanningAssignmentResponse>> localVarResponse = GetByShiftWithHttpInfo(shiftId, dateTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public Simplic.OxS.SDK.ApiResponse<List<ScheduledPlanningAssignmentResponse>> GetByShiftWithHttpInfo(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shiftId", Simplic.OxS.SDK.ClientUtils.ParameterToString(shiftId)); // path parameter
            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningGetByShiftShiftIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ScheduledPlanningAssignmentResponse>>("/ScheduledPlanning/get-by-shift/{shiftId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningGetByShiftShiftIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ScheduledPlanningAssignmentResponse>> GetByShiftAsync(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.ApiResponse<List<ScheduledPlanningAssignmentResponse>> localVarResponse = await GetByShiftWithHttpInfoAsync(shiftId, dateTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<List<ScheduledPlanningAssignmentResponse>>> GetByShiftWithHttpInfoAsync(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shiftId", Simplic.OxS.SDK.ClientUtils.ParameterToString(shiftId)); // path parameter
            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningGetByShiftShiftIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ScheduledPlanningAssignmentResponse>>("/ScheduledPlanning/get-by-shift/{shiftId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningGetByShiftShiftIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Delete(Guid id, int operationIndex = 0)
        {
            DeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.ApiResponse<Object> DeleteWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ScheduledPlanning/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ScheduledPlanning/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        public ScheduledPlanningAssignmentResponse Get(Guid id, int operationIndex = 0)
        {
            Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = GetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> GetWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        public async System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> GetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = await GetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse>> GetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        public ScheduledPlanningAssignmentResponse Patch(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = PatchWithHttpInfo(id, patchScheduledPlanningRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> PatchWithHttpInfo(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchScheduledPlanningRequest;

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        public async System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> PatchAsync(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = await PatchWithHttpInfoAsync(id, patchScheduledPlanningRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse>> PatchWithHttpInfoAsync(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchScheduledPlanningRequest;

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        public ScheduledPlanningAssignmentResponse Post(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = PostWithHttpInfo(postScheduledPlanningRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> PostWithHttpInfo(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postScheduledPlanningRequest;

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        public async System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> PostAsync(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = await PostWithHttpInfoAsync(postScheduledPlanningRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<ScheduledPlanningAssignmentResponse>> PostWithHttpInfoAsync(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postScheduledPlanningRequest;

            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidateResponse</returns>
        public ValidateResponse Validate(int operationIndex = 0)
        {
            Simplic.OxS.SDK.ApiResponse<ValidateResponse> localVarResponse = ValidateWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidateResponse</returns>
        public Simplic.OxS.SDK.ApiResponse<ValidateResponse> ValidateWithHttpInfo(int operationIndex = 0)
        {
            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningValidateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ValidateResponse>("/ScheduledPlanning/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningValidateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateResponse</returns>
        public async System.Threading.Tasks.Task<ValidateResponse> ValidateAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.ApiResponse<ValidateResponse> localVarResponse = await ValidateWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.ApiResponse<ValidateResponse>> ValidateWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ScheduledPlanningClient.ScheduledPlanningValidateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ValidateResponse>("/ScheduledPlanning/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningValidateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
