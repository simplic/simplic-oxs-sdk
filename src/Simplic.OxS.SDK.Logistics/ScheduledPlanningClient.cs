// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    //--Custom wrapper start
    /// <summary>
    /// Client to interact with the API endpoints of the logistics service.
    /// </summary>
    public interface IScheduledPlanningClient
    {
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        string GetBasePath();

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        //IReadableConfiguration Configuration;

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        List<ScheduledPlanningAssignmentResponse> GetByDate(DateTime dateTime = default(DateTime));

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        ApiResponse<List<ScheduledPlanningAssignmentResponse>> GetByDateWithHttpInfo(DateTime dateTime = default(DateTime));
         
        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        Task<List<ScheduledPlanningAssignmentResponse>> GetByDateAsync(DateTime dateTime = default(DateTime), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
        Task<ApiResponse<List<ScheduledPlanningAssignmentResponse>>> GetByDateWithHttpInfoAsync(DateTime dateTime = default(DateTime), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        ScheduledPlanningAssignmentResponse GetByResource(Guid resourceId, DateTime dateTime = default(DateTime), Guid shiftId = default(Guid));

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
/// <param name="dateTime"> (optional)</param>
/// <param name="shiftId"> (optional)</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        ApiResponse<ScheduledPlanningAssignmentResponse> GetByResourceWithHttpInfo(Guid resourceId, DateTime dateTime = default(DateTime), Guid shiftId = default(Guid));
         
        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        Task<ScheduledPlanningAssignmentResponse> GetByResourceAsync(Guid resourceId, DateTime dateTime = default(DateTime), Guid shiftId = default(Guid), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        Task<ApiResponse<ScheduledPlanningAssignmentResponse>> GetByResourceWithHttpInfoAsync(Guid resourceId, DateTime dateTime = default(DateTime), Guid shiftId = default(Guid), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        List<ScheduledPlanningAssignmentResponse> GetByShift(Guid shiftId, DateTime dateTime = default(DateTime));

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
/// <param name="dateTime"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        ApiResponse<List<ScheduledPlanningAssignmentResponse>> GetByShiftWithHttpInfo(Guid shiftId, DateTime dateTime = default(DateTime));
         
        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        Task<List<ScheduledPlanningAssignmentResponse>> GetByShiftAsync(Guid shiftId, DateTime dateTime = default(DateTime), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
        Task<ApiResponse<List<ScheduledPlanningAssignmentResponse>>> GetByShiftWithHttpInfoAsync(Guid shiftId, DateTime dateTime = default(DateTime), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete(Guid id);

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(Guid id);
         
        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        ScheduledPlanningAssignmentResponse Get(Guid id);

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        ApiResponse<ScheduledPlanningAssignmentResponse> GetWithHttpInfo(Guid id);
         
        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        Task<ScheduledPlanningAssignmentResponse> GetAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        Task<ApiResponse<ScheduledPlanningAssignmentResponse>> GetWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        ScheduledPlanningAssignmentResponse Patch(Guid id, PatchScheduledPlanningRequest patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest));

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
/// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        ApiResponse<ScheduledPlanningAssignmentResponse> PatchWithHttpInfo(Guid id, PatchScheduledPlanningRequest patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest));
         
        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        Task<ScheduledPlanningAssignmentResponse> PatchAsync(Guid id, PatchScheduledPlanningRequest patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        Task<ApiResponse<ScheduledPlanningAssignmentResponse>> PatchWithHttpInfoAsync(Guid id, PatchScheduledPlanningRequest patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        ScheduledPlanningAssignmentResponse Post(PostScheduledPlanningRequest postScheduledPlanningRequest = default(PostScheduledPlanningRequest));

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        ApiResponse<ScheduledPlanningAssignmentResponse> PostWithHttpInfo(PostScheduledPlanningRequest postScheduledPlanningRequest = default(PostScheduledPlanningRequest));
         
        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        Task<ScheduledPlanningAssignmentResponse> PostAsync(PostScheduledPlanningRequest postScheduledPlanningRequest = default(PostScheduledPlanningRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        Task<ApiResponse<ScheduledPlanningAssignmentResponse>> PostWithHttpInfoAsync(PostScheduledPlanningRequest postScheduledPlanningRequest = default(PostScheduledPlanningRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidateResponse</returns>
        ValidateResponse Validate();

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
                /// <returns>ApiResponse of ValidateResponse</returns>
        ApiResponse<ValidateResponse> ValidateWithHttpInfo();
         
        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateResponse</returns>
        Task<ValidateResponse> ValidateAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateResponse)</returns>
        Task<ApiResponse<ValidateResponse>> ValidateWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));

    }

    /// <inheritdoc cref="IScheduledPlanningClient">
    public class ScheduledPlanningClient : IScheduledPlanningClient
    {
        private __ScheduledPlanningClient _internalClient;
        private HttpClient _httpClient;

        public ScheduledPlanningClient(string host, string? authorization = null)
        {
            _httpClient = new HttpClient() { BaseAddress = new Uri($"{host}/logistics-api/v1") };
            var jsonSerializerOptions = new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            var jsonSerializerOptionsProvider = new JsonSerializerOptionsProvider(jsonSerializerOptions);
            var events = new ScheduledPlanningClientEvents();
            if (authorization is null)
            {
                _internalClient = new __ScheduledPlanningClient(_httpClient, jsonSerializerOptionsProvider, events, new NullTokenProvider<ApiKeyToken>());
            }
            else
            {
                var token = new ApiKeyToken(authorization, "Authorization", "");
                _internalClient = new __ScheduledPlanningClient(_httpClient, jsonSerializerOptionsProvider, events, new ApiKeyTokenProvider(new[] { token }));
            }
        }

        public ScheduledPlanningClient(Environment env, string? authorization = null)
            : this(
                env == Environment.Development
                    ? "https://dev-oxs.simplic.io"
                    : "https://oxs.simplic.io",
                authorization
            ) { }

        /// <inheritdoc />
        public string GetBasePath() => _httpClient.BaseAddress.ToString();

        /// <inheritdoc />
        public List<ScheduledPlanningAssignmentResponse> GetByDate(DateTime dateTime = default(DateTime))
        {
            try
            {
                var response = _internalClient.GetByDateAsync(dateTime).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<List<ScheduledPlanningAssignmentResponse>> GetByDateWithHttpInfo(DateTime dateTime = default(DateTime))
        {
            try
            {
                var response = _internalClient.GetByDateAsync(dateTime).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<ScheduledPlanningAssignmentResponse>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<List<ScheduledPlanningAssignmentResponse>> GetByDateAsync(DateTime dateTime = default(DateTime), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByDateAsync(dateTime, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<List<ScheduledPlanningAssignmentResponse>>> GetByDateWithHttpInfoAsync(DateTime dateTime = default(DateTime), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByDateAsync(dateTime, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<ScheduledPlanningAssignmentResponse>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public ScheduledPlanningAssignmentResponse GetByResource(Guid resourceId, DateTime dateTime = default(DateTime), Guid shiftId = default(Guid))
        {
            try
            {
                var response = _internalClient.GetByResourceAsync(resourceId, dateTime, shiftId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<ScheduledPlanningAssignmentResponse> GetByResourceWithHttpInfo(Guid resourceId, DateTime dateTime = default(DateTime), Guid shiftId = default(Guid))
        {
            try
            {
                var response = _internalClient.GetByResourceAsync(resourceId, dateTime, shiftId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ScheduledPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<ScheduledPlanningAssignmentResponse> GetByResourceAsync(Guid resourceId, DateTime dateTime = default(DateTime), Guid shiftId = default(Guid), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByResourceAsync(resourceId, dateTime, shiftId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<ScheduledPlanningAssignmentResponse>> GetByResourceWithHttpInfoAsync(Guid resourceId, DateTime dateTime = default(DateTime), Guid shiftId = default(Guid), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByResourceAsync(resourceId, dateTime, shiftId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ScheduledPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public List<ScheduledPlanningAssignmentResponse> GetByShift(Guid shiftId, DateTime dateTime = default(DateTime))
        {
            try
            {
                var response = _internalClient.GetByShiftAsync(shiftId, dateTime).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<List<ScheduledPlanningAssignmentResponse>> GetByShiftWithHttpInfo(Guid shiftId, DateTime dateTime = default(DateTime))
        {
            try
            {
                var response = _internalClient.GetByShiftAsync(shiftId, dateTime).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<ScheduledPlanningAssignmentResponse>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<List<ScheduledPlanningAssignmentResponse>> GetByShiftAsync(Guid shiftId, DateTime dateTime = default(DateTime), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByShiftAsync(shiftId, dateTime, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<List<ScheduledPlanningAssignmentResponse>>> GetByShiftWithHttpInfoAsync(Guid shiftId, DateTime dateTime = default(DateTime), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByShiftAsync(shiftId, dateTime, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<ScheduledPlanningAssignmentResponse>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void Delete(Guid id)
        {
            try
            {
                var response = _internalClient.DeleteAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> DeleteWithHttpInfo(Guid id)
        {
            try
            {
                var response = _internalClient.DeleteAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task DeleteAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.DeleteAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.DeleteAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public ScheduledPlanningAssignmentResponse Get(Guid id)
        {
            try
            {
                var response = _internalClient.GetAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<ScheduledPlanningAssignmentResponse> GetWithHttpInfo(Guid id)
        {
            try
            {
                var response = _internalClient.GetAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ScheduledPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<ScheduledPlanningAssignmentResponse> GetAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<ScheduledPlanningAssignmentResponse>> GetWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ScheduledPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public ScheduledPlanningAssignmentResponse Patch(Guid id, PatchScheduledPlanningRequest patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest))
        {
            try
            {
                var response = _internalClient.PatchAsync(id, patchScheduledPlanningRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<ScheduledPlanningAssignmentResponse> PatchWithHttpInfo(Guid id, PatchScheduledPlanningRequest patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest))
        {
            try
            {
                var response = _internalClient.PatchAsync(id, patchScheduledPlanningRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ScheduledPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<ScheduledPlanningAssignmentResponse> PatchAsync(Guid id, PatchScheduledPlanningRequest patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PatchAsync(id, patchScheduledPlanningRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<ScheduledPlanningAssignmentResponse>> PatchWithHttpInfoAsync(Guid id, PatchScheduledPlanningRequest patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PatchAsync(id, patchScheduledPlanningRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ScheduledPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public ScheduledPlanningAssignmentResponse Post(PostScheduledPlanningRequest postScheduledPlanningRequest = default(PostScheduledPlanningRequest))
        {
            try
            {
                var response = _internalClient.PostAsync(postScheduledPlanningRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<ScheduledPlanningAssignmentResponse> PostWithHttpInfo(PostScheduledPlanningRequest postScheduledPlanningRequest = default(PostScheduledPlanningRequest))
        {
            try
            {
                var response = _internalClient.PostAsync(postScheduledPlanningRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ScheduledPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<ScheduledPlanningAssignmentResponse> PostAsync(PostScheduledPlanningRequest postScheduledPlanningRequest = default(PostScheduledPlanningRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PostAsync(postScheduledPlanningRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<ScheduledPlanningAssignmentResponse>> PostWithHttpInfoAsync(PostScheduledPlanningRequest postScheduledPlanningRequest = default(PostScheduledPlanningRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PostAsync(postScheduledPlanningRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ScheduledPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public ValidateResponse Validate()
        {
            try
            {
                var response = _internalClient.ValidateAsync().GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<ValidateResponse> ValidateWithHttpInfo()
        {
            try
            {
                var response = _internalClient.ValidateAsync().GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ValidateResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<ValidateResponse> ValidateAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.ValidateAsync(cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<ValidateResponse>> ValidateWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.ValidateAsync(cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ValidateResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    

        private string FormatErrorMessage(string message, int errorCode) => $"<{errorCode} - {(HttpStatusCode)errorCode}> {message}";
    }
    //--Custom wrapper end
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    internal interface __IScheduledPlanningClient : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ScheduledPlanningClientEvents Events { get; }

        /// <summary>
        /// Gets all plans for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse"/>&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse> GetByDateAsync(Option<DateTime> dateTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets all plans for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse"/>?&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse?> GetByDateOrDefaultAsync(Option<DateTime> dateTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets shifts for resource on given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse"/>&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse> GetByResourceAsync(Guid resourceId, Option<DateTime> dateTime = default, Option<Guid> shiftId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets shifts for resource on given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse"/>?&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse?> GetByResourceOrDefaultAsync(Guid resourceId, Option<DateTime> dateTime = default, Option<Guid> shiftId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets plans matching given shift id for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse"/>&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse> GetByShiftAsync(Guid shiftId, Option<DateTime> dateTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets plans matching given shift id for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse"/>?&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse?> GetByShiftOrDefaultAsync(Guid shiftId, Option<DateTime> dateTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse"/>&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse> DeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse"/>?&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse?> DeleteOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdGetApiResponse"/>&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdGetApiResponse> GetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdGetApiResponse"/>?&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdGetApiResponse?> GetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Patches plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdPatchApiResponse"/>&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdPatchApiResponse> PatchAsync(Guid id, Option<PatchScheduledPlanningRequest> patchScheduledPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Patches plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdPatchApiResponse"/>?&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdPatchApiResponse?> PatchOrDefaultAsync(Guid id, Option<PatchScheduledPlanningRequest> patchScheduledPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Posts a new plan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningPostApiResponse"/>&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningPostApiResponse> PostAsync(Option<PostScheduledPlanningRequest> postScheduledPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Posts a new plan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningPostApiResponse"/>?&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningPostApiResponse?> PostOrDefaultAsync(Option<PostScheduledPlanningRequest> postScheduledPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningValidateGetApiResponse"/>&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningValidateGetApiResponse> ValidateAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningValidateGetApiResponse"/>?&gt;</returns>
        Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningValidateGetApiResponse?> ValidateOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ScheduledPlanningClientEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnScheduledPlanningGetByDateGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorScheduledPlanningGetByDateGet;

        internal void ExecuteOnScheduledPlanningGetByDateGet(__ScheduledPlanningClient.ScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse apiResponse)
        {
            OnScheduledPlanningGetByDateGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorScheduledPlanningGetByDateGet(Exception exception)
        {
            OnErrorScheduledPlanningGetByDateGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnScheduledPlanningGetByResourceResourceIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorScheduledPlanningGetByResourceResourceIdGet;

        internal void ExecuteOnScheduledPlanningGetByResourceResourceIdGet(__ScheduledPlanningClient.ScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse apiResponse)
        {
            OnScheduledPlanningGetByResourceResourceIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorScheduledPlanningGetByResourceResourceIdGet(Exception exception)
        {
            OnErrorScheduledPlanningGetByResourceResourceIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnScheduledPlanningGetByShiftShiftIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorScheduledPlanningGetByShiftShiftIdGet;

        internal void ExecuteOnScheduledPlanningGetByShiftShiftIdGet(__ScheduledPlanningClient.ScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse apiResponse)
        {
            OnScheduledPlanningGetByShiftShiftIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorScheduledPlanningGetByShiftShiftIdGet(Exception exception)
        {
            OnErrorScheduledPlanningGetByShiftShiftIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnScheduledPlanningIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorScheduledPlanningIdDelete;

        internal void ExecuteOnScheduledPlanningIdDelete(__ScheduledPlanningClient.ScheduledPlanningClientScheduledPlanningIdDeleteApiResponse apiResponse)
        {
            OnScheduledPlanningIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorScheduledPlanningIdDelete(Exception exception)
        {
            OnErrorScheduledPlanningIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnScheduledPlanningIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorScheduledPlanningIdGet;

        internal void ExecuteOnScheduledPlanningIdGet(__ScheduledPlanningClient.ScheduledPlanningClientScheduledPlanningIdGetApiResponse apiResponse)
        {
            OnScheduledPlanningIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorScheduledPlanningIdGet(Exception exception)
        {
            OnErrorScheduledPlanningIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnScheduledPlanningIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorScheduledPlanningIdPatch;

        internal void ExecuteOnScheduledPlanningIdPatch(__ScheduledPlanningClient.ScheduledPlanningClientScheduledPlanningIdPatchApiResponse apiResponse)
        {
            OnScheduledPlanningIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorScheduledPlanningIdPatch(Exception exception)
        {
            OnErrorScheduledPlanningIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnScheduledPlanningPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorScheduledPlanningPost;

        internal void ExecuteOnScheduledPlanningPost(__ScheduledPlanningClient.ScheduledPlanningClientScheduledPlanningPostApiResponse apiResponse)
        {
            OnScheduledPlanningPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorScheduledPlanningPost(Exception exception)
        {
            OnErrorScheduledPlanningPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnScheduledPlanningValidateGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorScheduledPlanningValidateGet;

        internal void ExecuteOnScheduledPlanningValidateGet(__ScheduledPlanningClient.ScheduledPlanningClientScheduledPlanningValidateGetApiResponse apiResponse)
        {
            OnScheduledPlanningValidateGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorScheduledPlanningValidateGet(Exception exception)
        {
            OnErrorScheduledPlanningValidateGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal sealed partial class __ScheduledPlanningClient : __IScheduledPlanningClient
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ScheduledPlanningClientEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledPlanningClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __ScheduledPlanningClient(
            HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            ScheduledPlanningClientEvents scheduledPlanningClientEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider
        )
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            HttpClient = httpClient;
            Events = scheduledPlanningClientEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatScheduledPlanningGetByDateGet(ref Option<DateTime> dateTime);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dateTime"></param>
        private void AfterScheduledPlanningGetByDateGetDefaultImplementation(__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse apiResponseLocalVar, Option<DateTime> dateTime)
        {
            bool suppressDefaultLog = false;
            AfterScheduledPlanningGetByDateGet(ref suppressDefaultLog, apiResponseLocalVar, dateTime);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dateTime"></param>
        partial void AfterScheduledPlanningGetByDateGet(ref bool suppressDefaultLog, __ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse apiResponseLocalVar, Option<DateTime> dateTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="dateTime"></param>
        private void OnErrorScheduledPlanningGetByDateGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<DateTime> dateTime)
        {
            bool suppressDefaultLog = false;
            OnErrorScheduledPlanningGetByDateGet(ref suppressDefaultLog, exception, pathFormat, path, dateTime);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="dateTime"></param>
        partial void OnErrorScheduledPlanningGetByDateGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<DateTime> dateTime);

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse?> GetByDateOrDefaultAsync(Option<DateTime> dateTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetByDateAsync(dateTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse> GetByDateAsync(Option<DateTime> dateTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatScheduledPlanningGetByDateGet(ref dateTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/ScheduledPlanning/get-by-date";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (dateTime.IsSet)
                        parseQueryStringLocalVar["dateTime"] = dateTime.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse apiResponseLocalVar = new ScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ScheduledPlanning/get-by-date", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterScheduledPlanningGetByDateGetDefaultImplementation(apiResponseLocalVar, dateTime);

                        Events.ExecuteOnScheduledPlanningGetByDateGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorScheduledPlanningGetByDateGetDefaultImplementation(e, "/ScheduledPlanning/get-by-date", uriBuilderLocalVar.Path, dateTime);
                Events.ExecuteOnErrorScheduledPlanningGetByDateGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse"/>
        /// </summary>
        internal interface IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<List<ScheduledPlanningAssignmentResponse>>, IUnauthorized<ProblemDetails>, INotFound<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            bool IsNotFound { get; }
        }

        /// <summary>
        /// The <see cref="ScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse"/>
        /// </summary>
        internal partial class ScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse
        {
            /// <summary>
            /// The <see cref="ScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ScheduledPlanningClientScheduledPlanningGetByDateGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public List<ScheduledPlanningAssignmentResponse> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ScheduledPlanningAssignmentResponse>>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<ScheduledPlanningAssignmentResponse> result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return IsNotFound;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatScheduledPlanningGetByResourceResourceIdGet(ref Guid resourceId, ref Option<DateTime> dateTime, ref Option<Guid> shiftId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"></param>
        /// <param name="shiftId"></param>
        private void AfterScheduledPlanningGetByResourceResourceIdGetDefaultImplementation(__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse apiResponseLocalVar, Guid resourceId, Option<DateTime> dateTime, Option<Guid> shiftId)
        {
            bool suppressDefaultLog = false;
            AfterScheduledPlanningGetByResourceResourceIdGet(ref suppressDefaultLog, apiResponseLocalVar, resourceId, dateTime, shiftId);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"></param>
        /// <param name="shiftId"></param>
        partial void AfterScheduledPlanningGetByResourceResourceIdGet(ref bool suppressDefaultLog, __ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse apiResponseLocalVar, Guid resourceId, Option<DateTime> dateTime, Option<Guid> shiftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"></param>
        /// <param name="shiftId"></param>
        private void OnErrorScheduledPlanningGetByResourceResourceIdGetDefaultImplementation(Exception exception, string pathFormat, string path, Guid resourceId, Option<DateTime> dateTime, Option<Guid> shiftId)
        {
            bool suppressDefaultLog = false;
            OnErrorScheduledPlanningGetByResourceResourceIdGet(ref suppressDefaultLog, exception, pathFormat, path, resourceId, dateTime, shiftId);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"></param>
        /// <param name="shiftId"></param>
        partial void OnErrorScheduledPlanningGetByResourceResourceIdGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid resourceId, Option<DateTime> dateTime, Option<Guid> shiftId);

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse?> GetByResourceOrDefaultAsync(Guid resourceId, Option<DateTime> dateTime = default, Option<Guid> shiftId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetByResourceAsync(resourceId, dateTime, shiftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse> GetByResourceAsync(Guid resourceId, Option<DateTime> dateTime = default, Option<Guid> shiftId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatScheduledPlanningGetByResourceResourceIdGet(ref resourceId, ref dateTime, ref shiftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/ScheduledPlanning/get-by-resource/{resourceId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BresourceId%7D", Uri.EscapeDataString(resourceId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (dateTime.IsSet)
                        parseQueryStringLocalVar["dateTime"] = dateTime.Value.ToString();

                    if (shiftId.IsSet)
                        parseQueryStringLocalVar["shiftId"] = shiftId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse apiResponseLocalVar = new ScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ScheduledPlanning/get-by-resource/{resourceId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterScheduledPlanningGetByResourceResourceIdGetDefaultImplementation(apiResponseLocalVar, resourceId, dateTime, shiftId);

                        Events.ExecuteOnScheduledPlanningGetByResourceResourceIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorScheduledPlanningGetByResourceResourceIdGetDefaultImplementation(e, "/ScheduledPlanning/get-by-resource/{resourceId}", uriBuilderLocalVar.Path, resourceId, dateTime, shiftId);
                Events.ExecuteOnErrorScheduledPlanningGetByResourceResourceIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse"/>
        /// </summary>
        internal interface IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<ScheduledPlanningAssignmentResponse>, IUnauthorized<ProblemDetails>, INotFound<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            bool IsNotFound { get; }
        }

        /// <summary>
        /// The <see cref="ScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse"/>
        /// </summary>
        internal partial class ScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse
        {
            /// <summary>
            /// The <see cref="ScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ScheduledPlanningClientScheduledPlanningGetByResourceResourceIdGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ScheduledPlanningAssignmentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ScheduledPlanningAssignmentResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ScheduledPlanningAssignmentResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return IsNotFound;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatScheduledPlanningGetByShiftShiftIdGet(ref Guid shiftId, ref Option<DateTime> dateTime);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"></param>
        private void AfterScheduledPlanningGetByShiftShiftIdGetDefaultImplementation(__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse apiResponseLocalVar, Guid shiftId, Option<DateTime> dateTime)
        {
            bool suppressDefaultLog = false;
            AfterScheduledPlanningGetByShiftShiftIdGet(ref suppressDefaultLog, apiResponseLocalVar, shiftId, dateTime);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"></param>
        partial void AfterScheduledPlanningGetByShiftShiftIdGet(ref bool suppressDefaultLog, __ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse apiResponseLocalVar, Guid shiftId, Option<DateTime> dateTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"></param>
        private void OnErrorScheduledPlanningGetByShiftShiftIdGetDefaultImplementation(Exception exception, string pathFormat, string path, Guid shiftId, Option<DateTime> dateTime)
        {
            bool suppressDefaultLog = false;
            OnErrorScheduledPlanningGetByShiftShiftIdGet(ref suppressDefaultLog, exception, pathFormat, path, shiftId, dateTime);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"></param>
        partial void OnErrorScheduledPlanningGetByShiftShiftIdGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid shiftId, Option<DateTime> dateTime);

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse?> GetByShiftOrDefaultAsync(Guid shiftId, Option<DateTime> dateTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetByShiftAsync(shiftId, dateTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse> GetByShiftAsync(Guid shiftId, Option<DateTime> dateTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatScheduledPlanningGetByShiftShiftIdGet(ref shiftId, ref dateTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/ScheduledPlanning/get-by-shift/{shiftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshiftId%7D", Uri.EscapeDataString(shiftId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (dateTime.IsSet)
                        parseQueryStringLocalVar["dateTime"] = dateTime.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse apiResponseLocalVar = new ScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ScheduledPlanning/get-by-shift/{shiftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterScheduledPlanningGetByShiftShiftIdGetDefaultImplementation(apiResponseLocalVar, shiftId, dateTime);

                        Events.ExecuteOnScheduledPlanningGetByShiftShiftIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorScheduledPlanningGetByShiftShiftIdGetDefaultImplementation(e, "/ScheduledPlanning/get-by-shift/{shiftId}", uriBuilderLocalVar.Path, shiftId, dateTime);
                Events.ExecuteOnErrorScheduledPlanningGetByShiftShiftIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse"/>
        /// </summary>
        internal interface IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<List<ScheduledPlanningAssignmentResponse>>, IUnauthorized<ProblemDetails>, INotFound<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            bool IsNotFound { get; }
        }

        /// <summary>
        /// The <see cref="ScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse"/>
        /// </summary>
        internal partial class ScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse
        {
            /// <summary>
            /// The <see cref="ScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ScheduledPlanningClientScheduledPlanningGetByShiftShiftIdGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public List<ScheduledPlanningAssignmentResponse> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ScheduledPlanningAssignmentResponse>>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<ScheduledPlanningAssignmentResponse> result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return IsNotFound;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatScheduledPlanningIdDelete(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterScheduledPlanningIdDeleteDefaultImplementation(__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterScheduledPlanningIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterScheduledPlanningIdDelete(ref bool suppressDefaultLog, __ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        private void OnErrorScheduledPlanningIdDeleteDefaultImplementation(Exception exception, string pathFormat, string path, Guid id)
        {
            bool suppressDefaultLog = false;
            OnErrorScheduledPlanningIdDelete(ref suppressDefaultLog, exception, pathFormat, path, id);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        partial void OnErrorScheduledPlanningIdDelete(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid id);

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse?> DeleteOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse> DeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatScheduledPlanningIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/ScheduledPlanning/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ScheduledPlanningClientScheduledPlanningIdDeleteApiResponse apiResponseLocalVar = new ScheduledPlanningClientScheduledPlanningIdDeleteApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ScheduledPlanning/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterScheduledPlanningIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnScheduledPlanningIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorScheduledPlanningIdDeleteDefaultImplementation(e, "/ScheduledPlanning/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorScheduledPlanningIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse"/>
        /// </summary>
        internal interface IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse : Simplic.OxS.SDK.__IApiResponse, IUnauthorized<ProblemDetails>, INotFound<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            bool IsNotFound { get; }
        }

        /// <summary>
        /// The <see cref="ScheduledPlanningClientScheduledPlanningIdDeleteApiResponse"/>
        /// </summary>
        internal partial class ScheduledPlanningClientScheduledPlanningIdDeleteApiResponse : Simplic.OxS.SDK.__ApiResponse, IScheduledPlanningClientScheduledPlanningIdDeleteApiResponse
        {
            /// <summary>
            /// The <see cref="ScheduledPlanningClientScheduledPlanningIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ScheduledPlanningClientScheduledPlanningIdDeleteApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return IsNotFound;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatScheduledPlanningIdGet(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterScheduledPlanningIdGetDefaultImplementation(__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdGetApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterScheduledPlanningIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterScheduledPlanningIdGet(ref bool suppressDefaultLog, __ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdGetApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        private void OnErrorScheduledPlanningIdGetDefaultImplementation(Exception exception, string pathFormat, string path, Guid id)
        {
            bool suppressDefaultLog = false;
            OnErrorScheduledPlanningIdGet(ref suppressDefaultLog, exception, pathFormat, path, id);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        partial void OnErrorScheduledPlanningIdGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid id);

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdGetApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdGetApiResponse?> GetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdGetApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdGetApiResponse> GetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatScheduledPlanningIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/ScheduledPlanning/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ScheduledPlanningClientScheduledPlanningIdGetApiResponse apiResponseLocalVar = new ScheduledPlanningClientScheduledPlanningIdGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ScheduledPlanning/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterScheduledPlanningIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnScheduledPlanningIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorScheduledPlanningIdGetDefaultImplementation(e, "/ScheduledPlanning/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorScheduledPlanningIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IScheduledPlanningClientScheduledPlanningIdGetApiResponse"/>
        /// </summary>
        internal interface IScheduledPlanningClientScheduledPlanningIdGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<ScheduledPlanningAssignmentResponse>, IUnauthorized<ProblemDetails>, INotFound<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            bool IsNotFound { get; }
        }

        /// <summary>
        /// The <see cref="ScheduledPlanningClientScheduledPlanningIdGetApiResponse"/>
        /// </summary>
        internal partial class ScheduledPlanningClientScheduledPlanningIdGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IScheduledPlanningClientScheduledPlanningIdGetApiResponse
        {
            /// <summary>
            /// The <see cref="ScheduledPlanningClientScheduledPlanningIdGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ScheduledPlanningClientScheduledPlanningIdGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ScheduledPlanningAssignmentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ScheduledPlanningAssignmentResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ScheduledPlanningAssignmentResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return IsNotFound;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatScheduledPlanningIdPatch(ref Guid id, Option<PatchScheduledPlanningRequest> patchScheduledPlanningRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="patchScheduledPlanningRequest"></param>
        /// <returns></returns>
        private void ValidateScheduledPlanningIdPatch(Option<PatchScheduledPlanningRequest> patchScheduledPlanningRequest)
        {
            if (patchScheduledPlanningRequest.IsSet && patchScheduledPlanningRequest.Value == null)
                throw new ArgumentNullException(nameof(patchScheduledPlanningRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"></param>
        private void AfterScheduledPlanningIdPatchDefaultImplementation(__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdPatchApiResponse apiResponseLocalVar, Guid id, Option<PatchScheduledPlanningRequest> patchScheduledPlanningRequest)
        {
            bool suppressDefaultLog = false;
            AfterScheduledPlanningIdPatch(ref suppressDefaultLog, apiResponseLocalVar, id, patchScheduledPlanningRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"></param>
        partial void AfterScheduledPlanningIdPatch(ref bool suppressDefaultLog, __ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdPatchApiResponse apiResponseLocalVar, Guid id, Option<PatchScheduledPlanningRequest> patchScheduledPlanningRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"></param>
        private void OnErrorScheduledPlanningIdPatchDefaultImplementation(Exception exception, string pathFormat, string path, Guid id, Option<PatchScheduledPlanningRequest> patchScheduledPlanningRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorScheduledPlanningIdPatch(ref suppressDefaultLog, exception, pathFormat, path, id, patchScheduledPlanningRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"></param>
        partial void OnErrorScheduledPlanningIdPatch(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid id, Option<PatchScheduledPlanningRequest> patchScheduledPlanningRequest);

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdPatchApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdPatchApiResponse?> PatchOrDefaultAsync(Guid id, Option<PatchScheduledPlanningRequest> patchScheduledPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PatchAsync(id, patchScheduledPlanningRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdPatchApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningIdPatchApiResponse> PatchAsync(Guid id, Option<PatchScheduledPlanningRequest> patchScheduledPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateScheduledPlanningIdPatch(patchScheduledPlanningRequest);

                FormatScheduledPlanningIdPatch(ref id, patchScheduledPlanningRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/ScheduledPlanning/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (patchScheduledPlanningRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (patchScheduledPlanningRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchScheduledPlanningRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ScheduledPlanningClientScheduledPlanningIdPatchApiResponse apiResponseLocalVar = new ScheduledPlanningClientScheduledPlanningIdPatchApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ScheduledPlanning/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterScheduledPlanningIdPatchDefaultImplementation(apiResponseLocalVar, id, patchScheduledPlanningRequest);

                        Events.ExecuteOnScheduledPlanningIdPatch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorScheduledPlanningIdPatchDefaultImplementation(e, "/ScheduledPlanning/{id}", uriBuilderLocalVar.Path, id, patchScheduledPlanningRequest);
                Events.ExecuteOnErrorScheduledPlanningIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IScheduledPlanningClientScheduledPlanningIdPatchApiResponse"/>
        /// </summary>
        internal interface IScheduledPlanningClientScheduledPlanningIdPatchApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<ScheduledPlanningAssignmentResponse>, IUnauthorized<ProblemDetails>, IBadRequest<ProblemDetails>, INotFound<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            bool IsNotFound { get; }
        }

        /// <summary>
        /// The <see cref="ScheduledPlanningClientScheduledPlanningIdPatchApiResponse"/>
        /// </summary>
        internal partial class ScheduledPlanningClientScheduledPlanningIdPatchApiResponse : Simplic.OxS.SDK.__ApiResponse, IScheduledPlanningClientScheduledPlanningIdPatchApiResponse
        {
            /// <summary>
            /// The <see cref="ScheduledPlanningClientScheduledPlanningIdPatchApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ScheduledPlanningClientScheduledPlanningIdPatchApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ScheduledPlanningAssignmentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ScheduledPlanningAssignmentResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ScheduledPlanningAssignmentResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return IsNotFound;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatScheduledPlanningPost(Option<PostScheduledPlanningRequest> postScheduledPlanningRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postScheduledPlanningRequest"></param>
        /// <returns></returns>
        private void ValidateScheduledPlanningPost(Option<PostScheduledPlanningRequest> postScheduledPlanningRequest)
        {
            if (postScheduledPlanningRequest.IsSet && postScheduledPlanningRequest.Value == null)
                throw new ArgumentNullException(nameof(postScheduledPlanningRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postScheduledPlanningRequest"></param>
        private void AfterScheduledPlanningPostDefaultImplementation(__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningPostApiResponse apiResponseLocalVar, Option<PostScheduledPlanningRequest> postScheduledPlanningRequest)
        {
            bool suppressDefaultLog = false;
            AfterScheduledPlanningPost(ref suppressDefaultLog, apiResponseLocalVar, postScheduledPlanningRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postScheduledPlanningRequest"></param>
        partial void AfterScheduledPlanningPost(ref bool suppressDefaultLog, __ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningPostApiResponse apiResponseLocalVar, Option<PostScheduledPlanningRequest> postScheduledPlanningRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postScheduledPlanningRequest"></param>
        private void OnErrorScheduledPlanningPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostScheduledPlanningRequest> postScheduledPlanningRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorScheduledPlanningPost(ref suppressDefaultLog, exception, pathFormat, path, postScheduledPlanningRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postScheduledPlanningRequest"></param>
        partial void OnErrorScheduledPlanningPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostScheduledPlanningRequest> postScheduledPlanningRequest);

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningPostApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningPostApiResponse?> PostOrDefaultAsync(Option<PostScheduledPlanningRequest> postScheduledPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostAsync(postScheduledPlanningRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningPostApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningPostApiResponse> PostAsync(Option<PostScheduledPlanningRequest> postScheduledPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateScheduledPlanningPost(postScheduledPlanningRequest);

                FormatScheduledPlanningPost(postScheduledPlanningRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/ScheduledPlanning";

                    if (postScheduledPlanningRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postScheduledPlanningRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postScheduledPlanningRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ScheduledPlanningClientScheduledPlanningPostApiResponse apiResponseLocalVar = new ScheduledPlanningClientScheduledPlanningPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ScheduledPlanning", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterScheduledPlanningPostDefaultImplementation(apiResponseLocalVar, postScheduledPlanningRequest);

                        Events.ExecuteOnScheduledPlanningPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorScheduledPlanningPostDefaultImplementation(e, "/ScheduledPlanning", uriBuilderLocalVar.Path, postScheduledPlanningRequest);
                Events.ExecuteOnErrorScheduledPlanningPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IScheduledPlanningClientScheduledPlanningPostApiResponse"/>
        /// </summary>
        internal interface IScheduledPlanningClientScheduledPlanningPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<ScheduledPlanningAssignmentResponse>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>, INotFound<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            bool IsNotFound { get; }
        }

        /// <summary>
        /// The <see cref="ScheduledPlanningClientScheduledPlanningPostApiResponse"/>
        /// </summary>
        internal partial class ScheduledPlanningClientScheduledPlanningPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IScheduledPlanningClientScheduledPlanningPostApiResponse
        {
            /// <summary>
            /// The <see cref="ScheduledPlanningClientScheduledPlanningPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ScheduledPlanningClientScheduledPlanningPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ScheduledPlanningAssignmentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ScheduledPlanningAssignmentResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ScheduledPlanningAssignmentResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return IsNotFound;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterScheduledPlanningValidateGetDefaultImplementation(__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningValidateGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterScheduledPlanningValidateGet(ref suppressDefaultLog, apiResponseLocalVar);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterScheduledPlanningValidateGet(ref bool suppressDefaultLog, __ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningValidateGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorScheduledPlanningValidateGetDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorScheduledPlanningValidateGet(ref suppressDefaultLog, exception, pathFormat, path);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorScheduledPlanningValidateGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningValidateGetApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningValidateGetApiResponse?> ValidateOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ValidateAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningValidateGetApiResponse"/>&gt;</returns>
        public async Task<__ScheduledPlanningClient.IScheduledPlanningClientScheduledPlanningValidateGetApiResponse> ValidateAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/ScheduledPlanning/validate";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ScheduledPlanningClientScheduledPlanningValidateGetApiResponse apiResponseLocalVar = new ScheduledPlanningClientScheduledPlanningValidateGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ScheduledPlanning/validate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterScheduledPlanningValidateGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnScheduledPlanningValidateGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorScheduledPlanningValidateGetDefaultImplementation(e, "/ScheduledPlanning/validate", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorScheduledPlanningValidateGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IScheduledPlanningClientScheduledPlanningValidateGetApiResponse"/>
        /// </summary>
        internal interface IScheduledPlanningClientScheduledPlanningValidateGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<ValidateResponse>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="ScheduledPlanningClientScheduledPlanningValidateGetApiResponse"/>
        /// </summary>
        internal partial class ScheduledPlanningClientScheduledPlanningValidateGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IScheduledPlanningClientScheduledPlanningValidateGetApiResponse
        {
            /// <summary>
            /// The <see cref="ScheduledPlanningClientScheduledPlanningValidateGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ScheduledPlanningClientScheduledPlanningValidateGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ValidateResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ValidateResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ValidateResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
