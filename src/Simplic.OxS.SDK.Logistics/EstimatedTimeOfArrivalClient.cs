// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    //--Custom wrapper start
    /// <summary>
    /// Client to interact with the API endpoints of the logistics service.
    /// </summary>
    public interface IEstimatedTimeOfArrivalClient
    {
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        string GetBasePath();

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        //IReadableConfiguration Configuration;

        /// <summary>
        /// Retrives all etas for the current organization. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EstimatedTimeOfArrivalResponse&gt;</returns>
        List<EstimatedTimeOfArrivalResponse> GetAll();

        /// <summary>
        /// Retrives all etas for the current organization. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
                /// <returns>ApiResponse of List&lt;EstimatedTimeOfArrivalResponse&gt;</returns>
        ApiResponse<List<EstimatedTimeOfArrivalResponse>> GetAllWithHttpInfo();
         
        /// <summary>
        /// Retrives all etas for the current organization. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EstimatedTimeOfArrivalResponse&gt;</returns>
        Task<List<EstimatedTimeOfArrivalResponse>> GetAllAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrives all etas for the current organization. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EstimatedTimeOfArrivalResponse&gt;)</returns>
        Task<ApiResponse<List<EstimatedTimeOfArrivalResponse>>> GetAllWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrives the eta with the given tourId. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="tourId">Id of a tour. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EstimatedTimeOfArrivalResponse</returns>
        EstimatedTimeOfArrivalResponse GetByTour(string id, Guid tourId = default(Guid));

        /// <summary>
        /// Retrives the eta with the given tourId. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
/// <param name="tourId">Id of a tour. (optional)</param>
        /// <returns>ApiResponse of EstimatedTimeOfArrivalResponse</returns>
        ApiResponse<EstimatedTimeOfArrivalResponse> GetByTourWithHttpInfo(string id, Guid tourId = default(Guid));
         
        /// <summary>
        /// Retrives the eta with the given tourId. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="tourId">Id of a tour. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EstimatedTimeOfArrivalResponse</returns>
        Task<EstimatedTimeOfArrivalResponse> GetByTourAsync(string id, Guid tourId = default(Guid), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrives the eta with the given tourId. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="tourId">Id of a tour. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EstimatedTimeOfArrivalResponse)</returns>
        Task<ApiResponse<EstimatedTimeOfArrivalResponse>> GetByTourWithHttpInfoAsync(string id, Guid tourId = default(Guid), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrives the eta with the given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the eta.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EstimatedTimeOfArrivalResponse</returns>
        EstimatedTimeOfArrivalResponse Get(Guid id);

        /// <summary>
        /// Retrives the eta with the given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the eta.</param>
        /// <returns>ApiResponse of EstimatedTimeOfArrivalResponse</returns>
        ApiResponse<EstimatedTimeOfArrivalResponse> GetWithHttpInfo(Guid id);
         
        /// <summary>
        /// Retrives the eta with the given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the eta.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EstimatedTimeOfArrivalResponse</returns>
        Task<EstimatedTimeOfArrivalResponse> GetAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrives the eta with the given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the eta.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EstimatedTimeOfArrivalResponse)</returns>
        Task<ApiResponse<EstimatedTimeOfArrivalResponse>> GetWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

    }

    /// <inheritdoc cref="IEstimatedTimeOfArrivalClient">
    public class EstimatedTimeOfArrivalClient : IEstimatedTimeOfArrivalClient
    {
        private __EstimatedTimeOfArrivalClient _internalClient;
        private HttpClient _httpClient;

        public EstimatedTimeOfArrivalClient(string host, string? authorization = null)
        {
            _httpClient = new HttpClient() { BaseAddress = new Uri($"{host}/logistics-api/v1") };
            var jsonSerializerOptions = new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            var jsonSerializerOptionsProvider = new JsonSerializerOptionsProvider(jsonSerializerOptions);
            var events = new EstimatedTimeOfArrivalClientEvents();
            if (authorization is null)
            {
                _internalClient = new __EstimatedTimeOfArrivalClient(_httpClient, jsonSerializerOptionsProvider, events, new NullTokenProvider<ApiKeyToken>());
            }
            else
            {
                var token = new ApiKeyToken(authorization, "Authorization", "");
                _internalClient = new __EstimatedTimeOfArrivalClient(_httpClient, jsonSerializerOptionsProvider, events, new ApiKeyTokenProvider(new[] { token }));
            }
        }

        public EstimatedTimeOfArrivalClient(Environment env, string? authorization = null)
            : this(
                env == Environment.Development
                    ? "https://dev-oxs.simplic.io"
                    : "https://oxs.simplic.io",
                authorization
            ) { }

        /// <inheritdoc />
        public string GetBasePath() => _httpClient.BaseAddress.ToString();

        /// <inheritdoc />
        public List<EstimatedTimeOfArrivalResponse> GetAll()
        {
            try
            {
                var response = _internalClient.GetAllAsync().GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<List<EstimatedTimeOfArrivalResponse>> GetAllWithHttpInfo()
        {
            try
            {
                var response = _internalClient.GetAllAsync().GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<EstimatedTimeOfArrivalResponse>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<List<EstimatedTimeOfArrivalResponse>> GetAllAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAllAsync(cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<List<EstimatedTimeOfArrivalResponse>>> GetAllWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAllAsync(cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<EstimatedTimeOfArrivalResponse>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public EstimatedTimeOfArrivalResponse GetByTour(string id, Guid tourId = default(Guid))
        {
            try
            {
                var response = _internalClient.GetByTourAsync(id, tourId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<EstimatedTimeOfArrivalResponse> GetByTourWithHttpInfo(string id, Guid tourId = default(Guid))
        {
            try
            {
                var response = _internalClient.GetByTourAsync(id, tourId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<EstimatedTimeOfArrivalResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<EstimatedTimeOfArrivalResponse> GetByTourAsync(string id, Guid tourId = default(Guid), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByTourAsync(id, tourId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<EstimatedTimeOfArrivalResponse>> GetByTourWithHttpInfoAsync(string id, Guid tourId = default(Guid), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByTourAsync(id, tourId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<EstimatedTimeOfArrivalResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public EstimatedTimeOfArrivalResponse Get(Guid id)
        {
            try
            {
                var response = _internalClient.GetAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<EstimatedTimeOfArrivalResponse> GetWithHttpInfo(Guid id)
        {
            try
            {
                var response = _internalClient.GetAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<EstimatedTimeOfArrivalResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<EstimatedTimeOfArrivalResponse> GetAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<EstimatedTimeOfArrivalResponse>> GetWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<EstimatedTimeOfArrivalResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    

        private string FormatErrorMessage(string message, int errorCode) => $"<{errorCode} - {(HttpStatusCode)errorCode}> {message}";
    }
    //--Custom wrapper end
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    internal interface __IEstimatedTimeOfArrivalClient : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EstimatedTimeOfArrivalClientEvents Events { get; }

        /// <summary>
        /// Retrives all etas for the current organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse"/>&gt;</returns>
        Task<__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse> GetAllAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrives all etas for the current organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse"/>?&gt;</returns>
        Task<__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse?> GetAllOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrives the eta with the given tourId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="tourId">Id of a tour. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse"/>&gt;</returns>
        Task<__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse> GetByTourAsync(string id, Option<Guid> tourId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrives the eta with the given tourId.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="tourId">Id of a tour. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse"/>?&gt;</returns>
        Task<__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse?> GetByTourOrDefaultAsync(string id, Option<Guid> tourId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrives the eta with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the eta.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse"/>&gt;</returns>
        Task<__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse> GetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrives the eta with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">Id of the eta.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse"/>?&gt;</returns>
        Task<__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse?> GetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EstimatedTimeOfArrivalClientEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEstimatedTimeOfArrivalGetAllGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEstimatedTimeOfArrivalGetAllGet;

        internal void ExecuteOnEstimatedTimeOfArrivalGetAllGet(__EstimatedTimeOfArrivalClient.EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse apiResponse)
        {
            OnEstimatedTimeOfArrivalGetAllGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEstimatedTimeOfArrivalGetAllGet(Exception exception)
        {
            OnErrorEstimatedTimeOfArrivalGetAllGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEstimatedTimeOfArrivalGetByTourIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEstimatedTimeOfArrivalGetByTourIdGet;

        internal void ExecuteOnEstimatedTimeOfArrivalGetByTourIdGet(__EstimatedTimeOfArrivalClient.EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse apiResponse)
        {
            OnEstimatedTimeOfArrivalGetByTourIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEstimatedTimeOfArrivalGetByTourIdGet(Exception exception)
        {
            OnErrorEstimatedTimeOfArrivalGetByTourIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEstimatedTimeOfArrivalIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEstimatedTimeOfArrivalIdGet;

        internal void ExecuteOnEstimatedTimeOfArrivalIdGet(__EstimatedTimeOfArrivalClient.EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse apiResponse)
        {
            OnEstimatedTimeOfArrivalIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEstimatedTimeOfArrivalIdGet(Exception exception)
        {
            OnErrorEstimatedTimeOfArrivalIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal sealed partial class __EstimatedTimeOfArrivalClient : __IEstimatedTimeOfArrivalClient
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EstimatedTimeOfArrivalClientEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EstimatedTimeOfArrivalClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __EstimatedTimeOfArrivalClient(
            HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            EstimatedTimeOfArrivalClientEvents estimatedTimeOfArrivalClientEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider
        )
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            HttpClient = httpClient;
            Events = estimatedTimeOfArrivalClientEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterEstimatedTimeOfArrivalGetAllGetDefaultImplementation(__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterEstimatedTimeOfArrivalGetAllGet(ref suppressDefaultLog, apiResponseLocalVar);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterEstimatedTimeOfArrivalGetAllGet(ref bool suppressDefaultLog, __EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorEstimatedTimeOfArrivalGetAllGetDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorEstimatedTimeOfArrivalGetAllGet(ref suppressDefaultLog, exception, pathFormat, path);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorEstimatedTimeOfArrivalGetAllGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Retrives all etas for the current organization. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse"/>&gt;</returns>
        public async Task<__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse?> GetAllOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrives all etas for the current organization. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse"/>&gt;</returns>
        public async Task<__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse> GetAllAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/EstimatedTimeOfArrival/get-all";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse apiResponseLocalVar = new EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/EstimatedTimeOfArrival/get-all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEstimatedTimeOfArrivalGetAllGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnEstimatedTimeOfArrivalGetAllGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEstimatedTimeOfArrivalGetAllGetDefaultImplementation(e, "/EstimatedTimeOfArrival/get-all", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorEstimatedTimeOfArrivalGetAllGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse"/>
        /// </summary>
        internal interface IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<List<EstimatedTimeOfArrivalResponse>>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse"/>
        /// </summary>
        internal partial class EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse
        {
            /// <summary>
            /// The <see cref="EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetAllGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public List<EstimatedTimeOfArrivalResponse> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EstimatedTimeOfArrivalResponse>>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<EstimatedTimeOfArrivalResponse> result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEstimatedTimeOfArrivalGetByTourIdGet(ref string id, ref Option<Guid> tourId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateEstimatedTimeOfArrivalGetByTourIdGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tourId"></param>
        private void AfterEstimatedTimeOfArrivalGetByTourIdGetDefaultImplementation(__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse apiResponseLocalVar, string id, Option<Guid> tourId)
        {
            bool suppressDefaultLog = false;
            AfterEstimatedTimeOfArrivalGetByTourIdGet(ref suppressDefaultLog, apiResponseLocalVar, id, tourId);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tourId"></param>
        partial void AfterEstimatedTimeOfArrivalGetByTourIdGet(ref bool suppressDefaultLog, __EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse apiResponseLocalVar, string id, Option<Guid> tourId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="tourId"></param>
        private void OnErrorEstimatedTimeOfArrivalGetByTourIdGetDefaultImplementation(Exception exception, string pathFormat, string path, string id, Option<Guid> tourId)
        {
            bool suppressDefaultLog = false;
            OnErrorEstimatedTimeOfArrivalGetByTourIdGet(ref suppressDefaultLog, exception, pathFormat, path, id, tourId);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="tourId"></param>
        partial void OnErrorEstimatedTimeOfArrivalGetByTourIdGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string id, Option<Guid> tourId);

        /// <summary>
        /// Retrives the eta with the given tourId. 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="tourId">Id of a tour. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse"/>&gt;</returns>
        public async Task<__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse?> GetByTourOrDefaultAsync(string id, Option<Guid> tourId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetByTourAsync(id, tourId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrives the eta with the given tourId. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="tourId">Id of a tour. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse"/>&gt;</returns>
        public async Task<__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse> GetByTourAsync(string id, Option<Guid> tourId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEstimatedTimeOfArrivalGetByTourIdGet(id);

                FormatEstimatedTimeOfArrivalGetByTourIdGet(ref id, ref tourId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/EstimatedTimeOfArrival/get-by-tour/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (tourId.IsSet)
                        parseQueryStringLocalVar["tourId"] = tourId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse apiResponseLocalVar = new EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/EstimatedTimeOfArrival/get-by-tour/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEstimatedTimeOfArrivalGetByTourIdGetDefaultImplementation(apiResponseLocalVar, id, tourId);

                        Events.ExecuteOnEstimatedTimeOfArrivalGetByTourIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEstimatedTimeOfArrivalGetByTourIdGetDefaultImplementation(e, "/EstimatedTimeOfArrival/get-by-tour/{id}", uriBuilderLocalVar.Path, id, tourId);
                Events.ExecuteOnErrorEstimatedTimeOfArrivalGetByTourIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse"/>
        /// </summary>
        internal interface IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<EstimatedTimeOfArrivalResponse>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse"/>
        /// </summary>
        internal partial class EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse
        {
            /// <summary>
            /// The <see cref="EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalGetByTourIdGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public EstimatedTimeOfArrivalResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EstimatedTimeOfArrivalResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out EstimatedTimeOfArrivalResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEstimatedTimeOfArrivalIdGet(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterEstimatedTimeOfArrivalIdGetDefaultImplementation(__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterEstimatedTimeOfArrivalIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterEstimatedTimeOfArrivalIdGet(ref bool suppressDefaultLog, __EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        private void OnErrorEstimatedTimeOfArrivalIdGetDefaultImplementation(Exception exception, string pathFormat, string path, Guid id)
        {
            bool suppressDefaultLog = false;
            OnErrorEstimatedTimeOfArrivalIdGet(ref suppressDefaultLog, exception, pathFormat, path, id);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        partial void OnErrorEstimatedTimeOfArrivalIdGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid id);

        /// <summary>
        /// Retrives the eta with the given id. 
        /// </summary>
        /// <param name="id">Id of the eta.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse"/>&gt;</returns>
        public async Task<__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse?> GetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrives the eta with the given id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the eta.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse"/>&gt;</returns>
        public async Task<__EstimatedTimeOfArrivalClient.IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse> GetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatEstimatedTimeOfArrivalIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/EstimatedTimeOfArrival/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse apiResponseLocalVar = new EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/EstimatedTimeOfArrival/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEstimatedTimeOfArrivalIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnEstimatedTimeOfArrivalIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEstimatedTimeOfArrivalIdGetDefaultImplementation(e, "/EstimatedTimeOfArrival/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorEstimatedTimeOfArrivalIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse"/>
        /// </summary>
        internal interface IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<EstimatedTimeOfArrivalResponse>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse"/>
        /// </summary>
        internal partial class EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IEstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse
        {
            /// <summary>
            /// The <see cref="EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EstimatedTimeOfArrivalClientEstimatedTimeOfArrivalIdGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public EstimatedTimeOfArrivalResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EstimatedTimeOfArrivalResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out EstimatedTimeOfArrivalResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
