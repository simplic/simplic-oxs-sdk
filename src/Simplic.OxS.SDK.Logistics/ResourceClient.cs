// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    //--Custom wrapper start
    /// <summary>
    /// Client to interact with the API endpoints of the logistics service.
    /// </summary>
    public interface IResourceClient
    {
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        string GetBasePath();

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        //IReadableConfiguration Configuration;

        /// <summary>
        /// Retrieves all resources. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ResourceModel&gt;</returns>
        List<ResourceModel> GetAllByGroup(DateTime useableUntil = default(DateTime), string group = default(string));

        /// <summary>
        /// Retrieves all resources. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="useableUntil"> (optional)</param>
/// <param name="group"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ResourceModel&gt;</returns>
        ApiResponse<List<ResourceModel>> GetAllByGroupWithHttpInfo(DateTime useableUntil = default(DateTime), string group = default(string));
         
        /// <summary>
        /// Retrieves all resources. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResourceModel&gt;</returns>
        Task<List<ResourceModel>> GetAllByGroupAsync(DateTime useableUntil = default(DateTime), string group = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves all resources. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceModel&gt;)</returns>
        Task<ApiResponse<List<ResourceModel>>> GetAllByGroupWithHttpInfoAsync(DateTime useableUntil = default(DateTime), string group = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves all resources. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ResourceModel&gt;</returns>
        List<ResourceModel> GetAll(DateTime useableUntil = default(DateTime));

        /// <summary>
        /// Retrieves all resources. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="useableUntil"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ResourceModel&gt;</returns>
        ApiResponse<List<ResourceModel>> GetAllWithHttpInfo(DateTime useableUntil = default(DateTime));
         
        /// <summary>
        /// Retrieves all resources. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResourceModel&gt;</returns>
        Task<List<ResourceModel>> GetAllAsync(DateTime useableUntil = default(DateTime), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves all resources. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceModel&gt;)</returns>
        Task<ApiResponse<List<ResourceModel>>> GetAllWithHttpInfoAsync(DateTime useableUntil = default(DateTime), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves resources from a specific group and location. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="maxDistanceMeter"> (optional)</param>
        /// <param name="minDistanceMeter"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ResourceModel&gt;</returns>
        List<ResourceModel> GetByLocation(double longitude = default(double), double latitude = default(double), double maxDistanceMeter = default(double), double minDistanceMeter = default(double), string group = default(string));

        /// <summary>
        /// Retrieves resources from a specific group and location. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude"> (optional)</param>
/// <param name="latitude"> (optional)</param>
/// <param name="maxDistanceMeter"> (optional)</param>
/// <param name="minDistanceMeter"> (optional)</param>
/// <param name="group"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ResourceModel&gt;</returns>
        ApiResponse<List<ResourceModel>> GetByLocationWithHttpInfo(double longitude = default(double), double latitude = default(double), double maxDistanceMeter = default(double), double minDistanceMeter = default(double), string group = default(string));
         
        /// <summary>
        /// Retrieves resources from a specific group and location. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="maxDistanceMeter"> (optional)</param>
        /// <param name="minDistanceMeter"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResourceModel&gt;</returns>
        Task<List<ResourceModel>> GetByLocationAsync(double longitude = default(double), double latitude = default(double), double maxDistanceMeter = default(double), double minDistanceMeter = default(double), string group = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves resources from a specific group and location. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="maxDistanceMeter"> (optional)</param>
        /// <param name="minDistanceMeter"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceModel&gt;)</returns>
        Task<ApiResponse<List<ResourceModel>>> GetByLocationWithHttpInfoAsync(double longitude = default(double), double latitude = default(double), double maxDistanceMeter = default(double), double minDistanceMeter = default(double), string group = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a data page of resources. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filterString"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ResourceModel&gt;</returns>
        List<ResourceModel> GetPageData(int skip = default(int), int page = default(int), int pageSize = default(int), string filterString = default(string));

        /// <summary>
        /// Retrieves a data page of resources. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip"> (optional)</param>
/// <param name="page"> (optional)</param>
/// <param name="pageSize"> (optional)</param>
/// <param name="filterString"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ResourceModel&gt;</returns>
        ApiResponse<List<ResourceModel>> GetPageDataWithHttpInfo(int skip = default(int), int page = default(int), int pageSize = default(int), string filterString = default(string));
         
        /// <summary>
        /// Retrieves a data page of resources. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filterString"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResourceModel&gt;</returns>
        Task<List<ResourceModel>> GetPageDataAsync(int skip = default(int), int page = default(int), int pageSize = default(int), string filterString = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a data page of resources. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filterString"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceModel&gt;)</returns>
        Task<ApiResponse<List<ResourceModel>>> GetPageDataWithHttpInfoAsync(int skip = default(int), int page = default(int), int pageSize = default(int), string filterString = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrives the resource with the given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the resource</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceModel</returns>
        ResourceModel Get(Guid id);

        /// <summary>
        /// Retrives the resource with the given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the resource</param>
        /// <returns>ApiResponse of ResourceModel</returns>
        ApiResponse<ResourceModel> GetWithHttpInfo(Guid id);
         
        /// <summary>
        /// Retrives the resource with the given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceModel</returns>
        Task<ResourceModel> GetAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrives the resource with the given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceModel)</returns>
        Task<ApiResponse<ResourceModel>> GetWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceModel</returns>
        ResourceModel Put(Guid id, UpdateResourceRequest updateResourceRequest = default(UpdateResourceRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
/// <param name="updateResourceRequest"> (optional)</param>
        /// <returns>ApiResponse of ResourceModel</returns>
        ApiResponse<ResourceModel> PutWithHttpInfo(Guid id, UpdateResourceRequest updateResourceRequest = default(UpdateResourceRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceModel</returns>
        Task<ResourceModel> PutAsync(Guid id, UpdateResourceRequest updateResourceRequest = default(UpdateResourceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceModel)</returns>
        Task<ApiResponse<ResourceModel>> PutWithHttpInfoAsync(Guid id, UpdateResourceRequest updateResourceRequest = default(UpdateResourceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceModel</returns>
        ResourceModel Post(CreateResourceRequest createResourceRequest = default(CreateResourceRequest));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createResourceRequest"> (optional)</param>
        /// <returns>ApiResponse of ResourceModel</returns>
        ApiResponse<ResourceModel> PostWithHttpInfo(CreateResourceRequest createResourceRequest = default(CreateResourceRequest));
         
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceModel</returns>
        Task<ResourceModel> PostAsync(CreateResourceRequest createResourceRequest = default(CreateResourceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceModel)</returns>
        Task<ApiResponse<ResourceModel>> PostWithHttpInfoAsync(CreateResourceRequest createResourceRequest = default(CreateResourceRequest), CancellationToken cancellationToken = default(CancellationToken));

    }

    /// <inheritdoc cref="IResourceClient">
    public class ResourceClient : IResourceClient
    {
        private __ResourceClient _internalClient;
        private HttpClient _httpClient;

        public ResourceClient(string host, string? authorization = null)
        {
            _httpClient = new HttpClient() { BaseAddress = new Uri($"{host}/logistics-api/v1") };
            var jsonSerializerOptions = new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            var jsonSerializerOptionsProvider = new JsonSerializerOptionsProvider(jsonSerializerOptions);
            var events = new ResourceClientEvents();
            if (authorization is null)
            {
                _internalClient = new __ResourceClient(_httpClient, jsonSerializerOptionsProvider, events, new NullTokenProvider<ApiKeyToken>());
            }
            else
            {
                var token = new ApiKeyToken(authorization, "Authorization", "");
                _internalClient = new __ResourceClient(_httpClient, jsonSerializerOptionsProvider, events, new ApiKeyTokenProvider(new[] { token }));
            }
        }

        public ResourceClient(Environment env, string? authorization = null)
            : this(
                env == Environment.Development
                    ? "https://dev-oxs.simplic.io"
                    : "https://oxs.simplic.io",
                authorization
            ) { }

        /// <inheritdoc />
        public string GetBasePath() => _httpClient.BaseAddress.ToString();

        /// <inheritdoc />
        public List<ResourceModel> GetAllByGroup(DateTime useableUntil = default(DateTime), string group = default(string))
        {
            try
            {
                var response = _internalClient.GetAllByGroupAsync(useableUntil, group).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<List<ResourceModel>> GetAllByGroupWithHttpInfo(DateTime useableUntil = default(DateTime), string group = default(string))
        {
            try
            {
                var response = _internalClient.GetAllByGroupAsync(useableUntil, group).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<ResourceModel>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<List<ResourceModel>> GetAllByGroupAsync(DateTime useableUntil = default(DateTime), string group = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAllByGroupAsync(useableUntil, group, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<List<ResourceModel>>> GetAllByGroupWithHttpInfoAsync(DateTime useableUntil = default(DateTime), string group = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAllByGroupAsync(useableUntil, group, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<ResourceModel>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public List<ResourceModel> GetAll(DateTime useableUntil = default(DateTime))
        {
            try
            {
                var response = _internalClient.GetAllAsync(useableUntil).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<List<ResourceModel>> GetAllWithHttpInfo(DateTime useableUntil = default(DateTime))
        {
            try
            {
                var response = _internalClient.GetAllAsync(useableUntil).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<ResourceModel>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<List<ResourceModel>> GetAllAsync(DateTime useableUntil = default(DateTime), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAllAsync(useableUntil, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<List<ResourceModel>>> GetAllWithHttpInfoAsync(DateTime useableUntil = default(DateTime), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAllAsync(useableUntil, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<ResourceModel>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public List<ResourceModel> GetByLocation(double longitude = default(double), double latitude = default(double), double maxDistanceMeter = default(double), double minDistanceMeter = default(double), string group = default(string))
        {
            try
            {
                var response = _internalClient.GetByLocationAsync(longitude, latitude, maxDistanceMeter, minDistanceMeter, group).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<List<ResourceModel>> GetByLocationWithHttpInfo(double longitude = default(double), double latitude = default(double), double maxDistanceMeter = default(double), double minDistanceMeter = default(double), string group = default(string))
        {
            try
            {
                var response = _internalClient.GetByLocationAsync(longitude, latitude, maxDistanceMeter, minDistanceMeter, group).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<ResourceModel>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<List<ResourceModel>> GetByLocationAsync(double longitude = default(double), double latitude = default(double), double maxDistanceMeter = default(double), double minDistanceMeter = default(double), string group = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByLocationAsync(longitude, latitude, maxDistanceMeter, minDistanceMeter, group, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<List<ResourceModel>>> GetByLocationWithHttpInfoAsync(double longitude = default(double), double latitude = default(double), double maxDistanceMeter = default(double), double minDistanceMeter = default(double), string group = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByLocationAsync(longitude, latitude, maxDistanceMeter, minDistanceMeter, group, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<ResourceModel>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public List<ResourceModel> GetPageData(int skip = default(int), int page = default(int), int pageSize = default(int), string filterString = default(string))
        {
            try
            {
                var response = _internalClient.GetPageDataAsync(skip, page, pageSize, filterString).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<List<ResourceModel>> GetPageDataWithHttpInfo(int skip = default(int), int page = default(int), int pageSize = default(int), string filterString = default(string))
        {
            try
            {
                var response = _internalClient.GetPageDataAsync(skip, page, pageSize, filterString).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<ResourceModel>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<List<ResourceModel>> GetPageDataAsync(int skip = default(int), int page = default(int), int pageSize = default(int), string filterString = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetPageDataAsync(skip, page, pageSize, filterString, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<List<ResourceModel>>> GetPageDataWithHttpInfoAsync(int skip = default(int), int page = default(int), int pageSize = default(int), string filterString = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetPageDataAsync(skip, page, pageSize, filterString, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<List<ResourceModel>>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public ResourceModel Get(Guid id)
        {
            try
            {
                var response = _internalClient.GetAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<ResourceModel> GetWithHttpInfo(Guid id)
        {
            try
            {
                var response = _internalClient.GetAsync(id).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ResourceModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<ResourceModel> GetAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<ResourceModel>> GetWithHttpInfoAsync(Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetAsync(id, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ResourceModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public ResourceModel Put(Guid id, UpdateResourceRequest updateResourceRequest = default(UpdateResourceRequest))
        {
            try
            {
                var response = _internalClient.PutAsync(id, updateResourceRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<ResourceModel> PutWithHttpInfo(Guid id, UpdateResourceRequest updateResourceRequest = default(UpdateResourceRequest))
        {
            try
            {
                var response = _internalClient.PutAsync(id, updateResourceRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ResourceModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<ResourceModel> PutAsync(Guid id, UpdateResourceRequest updateResourceRequest = default(UpdateResourceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PutAsync(id, updateResourceRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<ResourceModel>> PutWithHttpInfoAsync(Guid id, UpdateResourceRequest updateResourceRequest = default(UpdateResourceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PutAsync(id, updateResourceRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ResourceModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public ResourceModel Post(CreateResourceRequest createResourceRequest = default(CreateResourceRequest))
        {
            try
            {
                var response = _internalClient.PostAsync(createResourceRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<ResourceModel> PostWithHttpInfo(CreateResourceRequest createResourceRequest = default(CreateResourceRequest))
        {
            try
            {
                var response = _internalClient.PostAsync(createResourceRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ResourceModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<ResourceModel> PostAsync(CreateResourceRequest createResourceRequest = default(CreateResourceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PostAsync(createResourceRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<ResourceModel>> PostWithHttpInfoAsync(CreateResourceRequest createResourceRequest = default(CreateResourceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PostAsync(createResourceRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ResourceModel>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    

        private string FormatErrorMessage(string message, int errorCode) => $"<{errorCode} - {(HttpStatusCode)errorCode}> {message}";
    }
    //--Custom wrapper end
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    internal interface __IResourceClient : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ResourceClientEvents Events { get; }

        /// <summary>
        /// Retrieves all resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetAllByGroupGetApiResponse"/>&gt;</returns>
        Task<__ResourceClient.IResourceClientResourceGetAllByGroupGetApiResponse> GetAllByGroupAsync(Option<DateTime> useableUntil = default, Option<string> group = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves all resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetAllByGroupGetApiResponse"/>?&gt;</returns>
        Task<__ResourceClient.IResourceClientResourceGetAllByGroupGetApiResponse?> GetAllByGroupOrDefaultAsync(Option<DateTime> useableUntil = default, Option<string> group = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves all resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetAllGetApiResponse"/>&gt;</returns>
        Task<__ResourceClient.IResourceClientResourceGetAllGetApiResponse> GetAllAsync(Option<DateTime> useableUntil = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves all resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetAllGetApiResponse"/>?&gt;</returns>
        Task<__ResourceClient.IResourceClientResourceGetAllGetApiResponse?> GetAllOrDefaultAsync(Option<DateTime> useableUntil = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources from a specific group and location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="maxDistanceMeter"> (optional)</param>
        /// <param name="minDistanceMeter"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetByLocationGetApiResponse"/>&gt;</returns>
        Task<__ResourceClient.IResourceClientResourceGetByLocationGetApiResponse> GetByLocationAsync(Option<double> longitude = default, Option<double> latitude = default, Option<double> maxDistanceMeter = default, Option<double> minDistanceMeter = default, Option<string> group = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources from a specific group and location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="longitude"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="maxDistanceMeter"> (optional)</param>
        /// <param name="minDistanceMeter"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetByLocationGetApiResponse"/>?&gt;</returns>
        Task<__ResourceClient.IResourceClientResourceGetByLocationGetApiResponse?> GetByLocationOrDefaultAsync(Option<double> longitude = default, Option<double> latitude = default, Option<double> maxDistanceMeter = default, Option<double> minDistanceMeter = default, Option<string> group = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a data page of resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filterString"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetPageDataGetApiResponse"/>&gt;</returns>
        Task<__ResourceClient.IResourceClientResourceGetPageDataGetApiResponse> GetPageDataAsync(Option<int> skip = default, Option<int> page = default, Option<int> pageSize = default, Option<string> filterString = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a data page of resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="skip"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filterString"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetPageDataGetApiResponse"/>?&gt;</returns>
        Task<__ResourceClient.IResourceClientResourceGetPageDataGetApiResponse?> GetPageDataOrDefaultAsync(Option<int> skip = default, Option<int> page = default, Option<int> pageSize = default, Option<string> filterString = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrives the resource with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceIdGetApiResponse"/>&gt;</returns>
        Task<__ResourceClient.IResourceClientResourceIdGetApiResponse> GetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrives the resource with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">Id of the resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceIdGetApiResponse"/>?&gt;</returns>
        Task<__ResourceClient.IResourceClientResourceIdGetApiResponse?> GetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceIdPutApiResponse"/>&gt;</returns>
        Task<__ResourceClient.IResourceClientResourceIdPutApiResponse> PutAsync(Guid id, Option<UpdateResourceRequest> updateResourceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="updateResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceIdPutApiResponse"/>?&gt;</returns>
        Task<__ResourceClient.IResourceClientResourceIdPutApiResponse?> PutOrDefaultAsync(Guid id, Option<UpdateResourceRequest> updateResourceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourcePostApiResponse"/>&gt;</returns>
        Task<__ResourceClient.IResourceClientResourcePostApiResponse> PostAsync(Option<CreateResourceRequest> createResourceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourcePostApiResponse"/>?&gt;</returns>
        Task<__ResourceClient.IResourceClientResourcePostApiResponse?> PostOrDefaultAsync(Option<CreateResourceRequest> createResourceRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ResourceClientEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResourceGetAllByGroupGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResourceGetAllByGroupGet;

        internal void ExecuteOnResourceGetAllByGroupGet(__ResourceClient.ResourceClientResourceGetAllByGroupGetApiResponse apiResponse)
        {
            OnResourceGetAllByGroupGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResourceGetAllByGroupGet(Exception exception)
        {
            OnErrorResourceGetAllByGroupGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResourceGetAllGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResourceGetAllGet;

        internal void ExecuteOnResourceGetAllGet(__ResourceClient.ResourceClientResourceGetAllGetApiResponse apiResponse)
        {
            OnResourceGetAllGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResourceGetAllGet(Exception exception)
        {
            OnErrorResourceGetAllGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResourceGetByLocationGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResourceGetByLocationGet;

        internal void ExecuteOnResourceGetByLocationGet(__ResourceClient.ResourceClientResourceGetByLocationGetApiResponse apiResponse)
        {
            OnResourceGetByLocationGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResourceGetByLocationGet(Exception exception)
        {
            OnErrorResourceGetByLocationGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResourceGetPageDataGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResourceGetPageDataGet;

        internal void ExecuteOnResourceGetPageDataGet(__ResourceClient.ResourceClientResourceGetPageDataGetApiResponse apiResponse)
        {
            OnResourceGetPageDataGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResourceGetPageDataGet(Exception exception)
        {
            OnErrorResourceGetPageDataGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResourceIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResourceIdGet;

        internal void ExecuteOnResourceIdGet(__ResourceClient.ResourceClientResourceIdGetApiResponse apiResponse)
        {
            OnResourceIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResourceIdGet(Exception exception)
        {
            OnErrorResourceIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResourceIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResourceIdPut;

        internal void ExecuteOnResourceIdPut(__ResourceClient.ResourceClientResourceIdPutApiResponse apiResponse)
        {
            OnResourceIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResourceIdPut(Exception exception)
        {
            OnErrorResourceIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResourcePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResourcePost;

        internal void ExecuteOnResourcePost(__ResourceClient.ResourceClientResourcePostApiResponse apiResponse)
        {
            OnResourcePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResourcePost(Exception exception)
        {
            OnErrorResourcePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal sealed partial class __ResourceClient : __IResourceClient
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ResourceClientEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __ResourceClient(
            HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            ResourceClientEvents resourceClientEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider
        )
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            HttpClient = httpClient;
            Events = resourceClientEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatResourceGetAllByGroupGet(ref Option<DateTime> useableUntil, ref Option<string> group);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <returns></returns>
        private void ValidateResourceGetAllByGroupGet(Option<string> group)
        {
            if (group.IsSet && group.Value == null)
                throw new ArgumentNullException(nameof(group));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="useableUntil"></param>
        /// <param name="group"></param>
        private void AfterResourceGetAllByGroupGetDefaultImplementation(__ResourceClient.IResourceClientResourceGetAllByGroupGetApiResponse apiResponseLocalVar, Option<DateTime> useableUntil, Option<string> group)
        {
            bool suppressDefaultLog = false;
            AfterResourceGetAllByGroupGet(ref suppressDefaultLog, apiResponseLocalVar, useableUntil, group);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="useableUntil"></param>
        /// <param name="group"></param>
        partial void AfterResourceGetAllByGroupGet(ref bool suppressDefaultLog, __ResourceClient.IResourceClientResourceGetAllByGroupGetApiResponse apiResponseLocalVar, Option<DateTime> useableUntil, Option<string> group);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="useableUntil"></param>
        /// <param name="group"></param>
        private void OnErrorResourceGetAllByGroupGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<DateTime> useableUntil, Option<string> group)
        {
            bool suppressDefaultLog = false;
            OnErrorResourceGetAllByGroupGet(ref suppressDefaultLog, exception, pathFormat, path, useableUntil, group);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="useableUntil"></param>
        /// <param name="group"></param>
        partial void OnErrorResourceGetAllByGroupGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<DateTime> useableUntil, Option<string> group);

        /// <summary>
        /// Retrieves all resources. 
        /// </summary>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetAllByGroupGetApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourceGetAllByGroupGetApiResponse?> GetAllByGroupOrDefaultAsync(Option<DateTime> useableUntil = default, Option<string> group = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllByGroupAsync(useableUntil, group, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves all resources. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetAllByGroupGetApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourceGetAllByGroupGetApiResponse> GetAllByGroupAsync(Option<DateTime> useableUntil = default, Option<string> group = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateResourceGetAllByGroupGet(group);

                FormatResourceGetAllByGroupGet(ref useableUntil, ref group);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Resource/get-all-by-group";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (useableUntil.IsSet)
                        parseQueryStringLocalVar["useableUntil"] = useableUntil.Value.ToString();

                    if (group.IsSet)
                        parseQueryStringLocalVar["group"] = group.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ResourceClientResourceGetAllByGroupGetApiResponse apiResponseLocalVar = new ResourceClientResourceGetAllByGroupGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Resource/get-all-by-group", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResourceGetAllByGroupGetDefaultImplementation(apiResponseLocalVar, useableUntil, group);

                        Events.ExecuteOnResourceGetAllByGroupGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResourceGetAllByGroupGetDefaultImplementation(e, "/Resource/get-all-by-group", uriBuilderLocalVar.Path, useableUntil, group);
                Events.ExecuteOnErrorResourceGetAllByGroupGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IResourceClientResourceGetAllByGroupGetApiResponse"/>
        /// </summary>
        internal interface IResourceClientResourceGetAllByGroupGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<List<ResourceModel>>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="ResourceClientResourceGetAllByGroupGetApiResponse"/>
        /// </summary>
        internal partial class ResourceClientResourceGetAllByGroupGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IResourceClientResourceGetAllByGroupGetApiResponse
        {
            /// <summary>
            /// The <see cref="ResourceClientResourceGetAllByGroupGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResourceClientResourceGetAllByGroupGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public List<ResourceModel> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ResourceModel>>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<ResourceModel> result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatResourceGetAllGet(ref Option<DateTime> useableUntil);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="useableUntil"></param>
        private void AfterResourceGetAllGetDefaultImplementation(__ResourceClient.IResourceClientResourceGetAllGetApiResponse apiResponseLocalVar, Option<DateTime> useableUntil)
        {
            bool suppressDefaultLog = false;
            AfterResourceGetAllGet(ref suppressDefaultLog, apiResponseLocalVar, useableUntil);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="useableUntil"></param>
        partial void AfterResourceGetAllGet(ref bool suppressDefaultLog, __ResourceClient.IResourceClientResourceGetAllGetApiResponse apiResponseLocalVar, Option<DateTime> useableUntil);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="useableUntil"></param>
        private void OnErrorResourceGetAllGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<DateTime> useableUntil)
        {
            bool suppressDefaultLog = false;
            OnErrorResourceGetAllGet(ref suppressDefaultLog, exception, pathFormat, path, useableUntil);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="useableUntil"></param>
        partial void OnErrorResourceGetAllGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<DateTime> useableUntil);

        /// <summary>
        /// Retrieves all resources. 
        /// </summary>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetAllGetApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourceGetAllGetApiResponse?> GetAllOrDefaultAsync(Option<DateTime> useableUntil = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllAsync(useableUntil, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves all resources. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="useableUntil"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetAllGetApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourceGetAllGetApiResponse> GetAllAsync(Option<DateTime> useableUntil = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatResourceGetAllGet(ref useableUntil);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Resource/get-all";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (useableUntil.IsSet)
                        parseQueryStringLocalVar["useableUntil"] = useableUntil.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ResourceClientResourceGetAllGetApiResponse apiResponseLocalVar = new ResourceClientResourceGetAllGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Resource/get-all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResourceGetAllGetDefaultImplementation(apiResponseLocalVar, useableUntil);

                        Events.ExecuteOnResourceGetAllGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResourceGetAllGetDefaultImplementation(e, "/Resource/get-all", uriBuilderLocalVar.Path, useableUntil);
                Events.ExecuteOnErrorResourceGetAllGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IResourceClientResourceGetAllGetApiResponse"/>
        /// </summary>
        internal interface IResourceClientResourceGetAllGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<List<ResourceModel>>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="ResourceClientResourceGetAllGetApiResponse"/>
        /// </summary>
        internal partial class ResourceClientResourceGetAllGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IResourceClientResourceGetAllGetApiResponse
        {
            /// <summary>
            /// The <see cref="ResourceClientResourceGetAllGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResourceClientResourceGetAllGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public List<ResourceModel> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ResourceModel>>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<ResourceModel> result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatResourceGetByLocationGet(ref Option<double> longitude, ref Option<double> latitude, ref Option<double> maxDistanceMeter, ref Option<double> minDistanceMeter, ref Option<string> group);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="group"></param>
        /// <returns></returns>
        private void ValidateResourceGetByLocationGet(Option<string> group)
        {
            if (group.IsSet && group.Value == null)
                throw new ArgumentNullException(nameof(group));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="longitude"></param>
        /// <param name="latitude"></param>
        /// <param name="maxDistanceMeter"></param>
        /// <param name="minDistanceMeter"></param>
        /// <param name="group"></param>
        private void AfterResourceGetByLocationGetDefaultImplementation(__ResourceClient.IResourceClientResourceGetByLocationGetApiResponse apiResponseLocalVar, Option<double> longitude, Option<double> latitude, Option<double> maxDistanceMeter, Option<double> minDistanceMeter, Option<string> group)
        {
            bool suppressDefaultLog = false;
            AfterResourceGetByLocationGet(ref suppressDefaultLog, apiResponseLocalVar, longitude, latitude, maxDistanceMeter, minDistanceMeter, group);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="longitude"></param>
        /// <param name="latitude"></param>
        /// <param name="maxDistanceMeter"></param>
        /// <param name="minDistanceMeter"></param>
        /// <param name="group"></param>
        partial void AfterResourceGetByLocationGet(ref bool suppressDefaultLog, __ResourceClient.IResourceClientResourceGetByLocationGetApiResponse apiResponseLocalVar, Option<double> longitude, Option<double> latitude, Option<double> maxDistanceMeter, Option<double> minDistanceMeter, Option<string> group);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="longitude"></param>
        /// <param name="latitude"></param>
        /// <param name="maxDistanceMeter"></param>
        /// <param name="minDistanceMeter"></param>
        /// <param name="group"></param>
        private void OnErrorResourceGetByLocationGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<double> longitude, Option<double> latitude, Option<double> maxDistanceMeter, Option<double> minDistanceMeter, Option<string> group)
        {
            bool suppressDefaultLog = false;
            OnErrorResourceGetByLocationGet(ref suppressDefaultLog, exception, pathFormat, path, longitude, latitude, maxDistanceMeter, minDistanceMeter, group);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="longitude"></param>
        /// <param name="latitude"></param>
        /// <param name="maxDistanceMeter"></param>
        /// <param name="minDistanceMeter"></param>
        /// <param name="group"></param>
        partial void OnErrorResourceGetByLocationGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<double> longitude, Option<double> latitude, Option<double> maxDistanceMeter, Option<double> minDistanceMeter, Option<string> group);

        /// <summary>
        /// Retrieves resources from a specific group and location. 
        /// </summary>
        /// <param name="longitude"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="maxDistanceMeter"> (optional)</param>
        /// <param name="minDistanceMeter"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetByLocationGetApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourceGetByLocationGetApiResponse?> GetByLocationOrDefaultAsync(Option<double> longitude = default, Option<double> latitude = default, Option<double> maxDistanceMeter = default, Option<double> minDistanceMeter = default, Option<string> group = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetByLocationAsync(longitude, latitude, maxDistanceMeter, minDistanceMeter, group, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources from a specific group and location. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude"> (optional)</param>
        /// <param name="latitude"> (optional)</param>
        /// <param name="maxDistanceMeter"> (optional)</param>
        /// <param name="minDistanceMeter"> (optional)</param>
        /// <param name="group"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetByLocationGetApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourceGetByLocationGetApiResponse> GetByLocationAsync(Option<double> longitude = default, Option<double> latitude = default, Option<double> maxDistanceMeter = default, Option<double> minDistanceMeter = default, Option<string> group = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateResourceGetByLocationGet(group);

                FormatResourceGetByLocationGet(ref longitude, ref latitude, ref maxDistanceMeter, ref minDistanceMeter, ref group);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Resource/get-by-location";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (longitude.IsSet)
                        parseQueryStringLocalVar["longitude"] = longitude.Value.ToString();

                    if (latitude.IsSet)
                        parseQueryStringLocalVar["latitude"] = latitude.Value.ToString();

                    if (maxDistanceMeter.IsSet)
                        parseQueryStringLocalVar["maxDistanceMeter"] = maxDistanceMeter.Value.ToString();

                    if (minDistanceMeter.IsSet)
                        parseQueryStringLocalVar["minDistanceMeter"] = minDistanceMeter.Value.ToString();

                    if (group.IsSet)
                        parseQueryStringLocalVar["group"] = group.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ResourceClientResourceGetByLocationGetApiResponse apiResponseLocalVar = new ResourceClientResourceGetByLocationGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Resource/get-by-location", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResourceGetByLocationGetDefaultImplementation(apiResponseLocalVar, longitude, latitude, maxDistanceMeter, minDistanceMeter, group);

                        Events.ExecuteOnResourceGetByLocationGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResourceGetByLocationGetDefaultImplementation(e, "/Resource/get-by-location", uriBuilderLocalVar.Path, longitude, latitude, maxDistanceMeter, minDistanceMeter, group);
                Events.ExecuteOnErrorResourceGetByLocationGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IResourceClientResourceGetByLocationGetApiResponse"/>
        /// </summary>
        internal interface IResourceClientResourceGetByLocationGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<List<ResourceModel>>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="ResourceClientResourceGetByLocationGetApiResponse"/>
        /// </summary>
        internal partial class ResourceClientResourceGetByLocationGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IResourceClientResourceGetByLocationGetApiResponse
        {
            /// <summary>
            /// The <see cref="ResourceClientResourceGetByLocationGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResourceClientResourceGetByLocationGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public List<ResourceModel> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ResourceModel>>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<ResourceModel> result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatResourceGetPageDataGet(ref Option<int> skip, ref Option<int> page, ref Option<int> pageSize, ref Option<string> filterString);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filterString"></param>
        /// <returns></returns>
        private void ValidateResourceGetPageDataGet(Option<string> filterString)
        {
            if (filterString.IsSet && filterString.Value == null)
                throw new ArgumentNullException(nameof(filterString));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="skip"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filterString"></param>
        private void AfterResourceGetPageDataGetDefaultImplementation(__ResourceClient.IResourceClientResourceGetPageDataGetApiResponse apiResponseLocalVar, Option<int> skip, Option<int> page, Option<int> pageSize, Option<string> filterString)
        {
            bool suppressDefaultLog = false;
            AfterResourceGetPageDataGet(ref suppressDefaultLog, apiResponseLocalVar, skip, page, pageSize, filterString);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="skip"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filterString"></param>
        partial void AfterResourceGetPageDataGet(ref bool suppressDefaultLog, __ResourceClient.IResourceClientResourceGetPageDataGetApiResponse apiResponseLocalVar, Option<int> skip, Option<int> page, Option<int> pageSize, Option<string> filterString);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="skip"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filterString"></param>
        private void OnErrorResourceGetPageDataGetDefaultImplementation(Exception exception, string pathFormat, string path, Option<int> skip, Option<int> page, Option<int> pageSize, Option<string> filterString)
        {
            bool suppressDefaultLog = false;
            OnErrorResourceGetPageDataGet(ref suppressDefaultLog, exception, pathFormat, path, skip, page, pageSize, filterString);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="skip"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filterString"></param>
        partial void OnErrorResourceGetPageDataGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<int> skip, Option<int> page, Option<int> pageSize, Option<string> filterString);

        /// <summary>
        /// Retrieves a data page of resources. 
        /// </summary>
        /// <param name="skip"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filterString"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetPageDataGetApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourceGetPageDataGetApiResponse?> GetPageDataOrDefaultAsync(Option<int> skip = default, Option<int> page = default, Option<int> pageSize = default, Option<string> filterString = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPageDataAsync(skip, page, pageSize, filterString, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a data page of resources. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filterString"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceGetPageDataGetApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourceGetPageDataGetApiResponse> GetPageDataAsync(Option<int> skip = default, Option<int> page = default, Option<int> pageSize = default, Option<string> filterString = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateResourceGetPageDataGet(filterString);

                FormatResourceGetPageDataGet(ref skip, ref page, ref pageSize, ref filterString);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Resource/get-page-data";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = skip.Value.ToString();

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = page.Value.ToString();

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = pageSize.Value.ToString();

                    if (filterString.IsSet)
                        parseQueryStringLocalVar["filterString"] = filterString.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ResourceClientResourceGetPageDataGetApiResponse apiResponseLocalVar = new ResourceClientResourceGetPageDataGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Resource/get-page-data", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResourceGetPageDataGetDefaultImplementation(apiResponseLocalVar, skip, page, pageSize, filterString);

                        Events.ExecuteOnResourceGetPageDataGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResourceGetPageDataGetDefaultImplementation(e, "/Resource/get-page-data", uriBuilderLocalVar.Path, skip, page, pageSize, filterString);
                Events.ExecuteOnErrorResourceGetPageDataGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IResourceClientResourceGetPageDataGetApiResponse"/>
        /// </summary>
        internal interface IResourceClientResourceGetPageDataGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<List<ResourceModel>>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="ResourceClientResourceGetPageDataGetApiResponse"/>
        /// </summary>
        internal partial class ResourceClientResourceGetPageDataGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IResourceClientResourceGetPageDataGetApiResponse
        {
            /// <summary>
            /// The <see cref="ResourceClientResourceGetPageDataGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResourceClientResourceGetPageDataGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public List<ResourceModel> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ResourceModel>>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<ResourceModel> result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatResourceIdGet(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterResourceIdGetDefaultImplementation(__ResourceClient.IResourceClientResourceIdGetApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterResourceIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterResourceIdGet(ref bool suppressDefaultLog, __ResourceClient.IResourceClientResourceIdGetApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        private void OnErrorResourceIdGetDefaultImplementation(Exception exception, string pathFormat, string path, Guid id)
        {
            bool suppressDefaultLog = false;
            OnErrorResourceIdGet(ref suppressDefaultLog, exception, pathFormat, path, id);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        partial void OnErrorResourceIdGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid id);

        /// <summary>
        /// Retrives the resource with the given id. 
        /// </summary>
        /// <param name="id">Id of the resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceIdGetApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourceIdGetApiResponse?> GetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrives the resource with the given id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceIdGetApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourceIdGetApiResponse> GetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatResourceIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Resource/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ResourceClientResourceIdGetApiResponse apiResponseLocalVar = new ResourceClientResourceIdGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Resource/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResourceIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnResourceIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResourceIdGetDefaultImplementation(e, "/Resource/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorResourceIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IResourceClientResourceIdGetApiResponse"/>
        /// </summary>
        internal interface IResourceClientResourceIdGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<ResourceModel>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="ResourceClientResourceIdGetApiResponse"/>
        /// </summary>
        internal partial class ResourceClientResourceIdGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IResourceClientResourceIdGetApiResponse
        {
            /// <summary>
            /// The <see cref="ResourceClientResourceIdGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResourceClientResourceIdGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ResourceModel Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ResourceModel>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ResourceModel result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatResourceIdPut(ref Guid id, Option<UpdateResourceRequest> updateResourceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateResourceRequest"></param>
        /// <returns></returns>
        private void ValidateResourceIdPut(Option<UpdateResourceRequest> updateResourceRequest)
        {
            if (updateResourceRequest.IsSet && updateResourceRequest.Value == null)
                throw new ArgumentNullException(nameof(updateResourceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateResourceRequest"></param>
        private void AfterResourceIdPutDefaultImplementation(__ResourceClient.IResourceClientResourceIdPutApiResponse apiResponseLocalVar, Guid id, Option<UpdateResourceRequest> updateResourceRequest)
        {
            bool suppressDefaultLog = false;
            AfterResourceIdPut(ref suppressDefaultLog, apiResponseLocalVar, id, updateResourceRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateResourceRequest"></param>
        partial void AfterResourceIdPut(ref bool suppressDefaultLog, __ResourceClient.IResourceClientResourceIdPutApiResponse apiResponseLocalVar, Guid id, Option<UpdateResourceRequest> updateResourceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="updateResourceRequest"></param>
        private void OnErrorResourceIdPutDefaultImplementation(Exception exception, string pathFormat, string path, Guid id, Option<UpdateResourceRequest> updateResourceRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorResourceIdPut(ref suppressDefaultLog, exception, pathFormat, path, id, updateResourceRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="updateResourceRequest"></param>
        partial void OnErrorResourceIdPut(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid id, Option<UpdateResourceRequest> updateResourceRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="id"></param>
        /// <param name="updateResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceIdPutApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourceIdPutApiResponse?> PutOrDefaultAsync(Guid id, Option<UpdateResourceRequest> updateResourceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutAsync(id, updateResourceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourceIdPutApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourceIdPutApiResponse> PutAsync(Guid id, Option<UpdateResourceRequest> updateResourceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateResourceIdPut(updateResourceRequest);

                FormatResourceIdPut(ref id, updateResourceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Resource/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (updateResourceRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (updateResourceRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateResourceRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ResourceClientResourceIdPutApiResponse apiResponseLocalVar = new ResourceClientResourceIdPutApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Resource/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResourceIdPutDefaultImplementation(apiResponseLocalVar, id, updateResourceRequest);

                        Events.ExecuteOnResourceIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResourceIdPutDefaultImplementation(e, "/Resource/{id}", uriBuilderLocalVar.Path, id, updateResourceRequest);
                Events.ExecuteOnErrorResourceIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IResourceClientResourceIdPutApiResponse"/>
        /// </summary>
        internal interface IResourceClientResourceIdPutApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<ResourceModel>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="ResourceClientResourceIdPutApiResponse"/>
        /// </summary>
        internal partial class ResourceClientResourceIdPutApiResponse : Simplic.OxS.SDK.__ApiResponse, IResourceClientResourceIdPutApiResponse
        {
            /// <summary>
            /// The <see cref="ResourceClientResourceIdPutApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResourceClientResourceIdPutApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ResourceModel Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ResourceModel>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ResourceModel result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatResourcePost(Option<CreateResourceRequest> createResourceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createResourceRequest"></param>
        /// <returns></returns>
        private void ValidateResourcePost(Option<CreateResourceRequest> createResourceRequest)
        {
            if (createResourceRequest.IsSet && createResourceRequest.Value == null)
                throw new ArgumentNullException(nameof(createResourceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createResourceRequest"></param>
        private void AfterResourcePostDefaultImplementation(__ResourceClient.IResourceClientResourcePostApiResponse apiResponseLocalVar, Option<CreateResourceRequest> createResourceRequest)
        {
            bool suppressDefaultLog = false;
            AfterResourcePost(ref suppressDefaultLog, apiResponseLocalVar, createResourceRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createResourceRequest"></param>
        partial void AfterResourcePost(ref bool suppressDefaultLog, __ResourceClient.IResourceClientResourcePostApiResponse apiResponseLocalVar, Option<CreateResourceRequest> createResourceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="createResourceRequest"></param>
        private void OnErrorResourcePostDefaultImplementation(Exception exception, string pathFormat, string path, Option<CreateResourceRequest> createResourceRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorResourcePost(ref suppressDefaultLog, exception, pathFormat, path, createResourceRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="createResourceRequest"></param>
        partial void OnErrorResourcePost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<CreateResourceRequest> createResourceRequest);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="createResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourcePostApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourcePostApiResponse?> PostOrDefaultAsync(Option<CreateResourceRequest> createResourceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostAsync(createResourceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createResourceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__ResourceClient.IResourceClientResourcePostApiResponse"/>&gt;</returns>
        public async Task<__ResourceClient.IResourceClientResourcePostApiResponse> PostAsync(Option<CreateResourceRequest> createResourceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateResourcePost(createResourceRequest);

                FormatResourcePost(createResourceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/Resource";

                    if (createResourceRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createResourceRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createResourceRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ResourceClientResourcePostApiResponse apiResponseLocalVar = new ResourceClientResourcePostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Resource", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResourcePostDefaultImplementation(apiResponseLocalVar, createResourceRequest);

                        Events.ExecuteOnResourcePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResourcePostDefaultImplementation(e, "/Resource", uriBuilderLocalVar.Path, createResourceRequest);
                Events.ExecuteOnErrorResourcePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IResourceClientResourcePostApiResponse"/>
        /// </summary>
        internal interface IResourceClientResourcePostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<ResourceModel>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="ResourceClientResourcePostApiResponse"/>
        /// </summary>
        internal partial class ResourceClientResourcePostApiResponse : Simplic.OxS.SDK.__ApiResponse, IResourceClientResourcePostApiResponse
        {
            /// <summary>
            /// The <see cref="ResourceClientResourcePostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResourceClientResourcePostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ResourceModel Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ResourceModel>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ResourceModel result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
