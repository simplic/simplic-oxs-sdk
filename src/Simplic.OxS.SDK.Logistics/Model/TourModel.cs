/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of tour.
    /// </summary>
    [DataContract(Name = "TourModel")]
    public partial class TourModel : IEquatable<TourModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TourModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id.  &lt;br&gt;  Represents a unique identifier for a tour.  .</param>
        /// <param name="globalTourId">Gets or sets the global tour id.  &lt;br&gt;  The global tour id is used to group tours that were generated from the same tour.  .</param>
        /// <param name="number">Gets or sets the number of the tour..</param>
        /// <param name="reference">Gets or sets the reference number..</param>
        /// <param name="resource">resource.</param>
        /// <param name="startAddress">startAddress.</param>
        /// <param name="endAddress">endAddress.</param>
        /// <param name="startDateTime">Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start..</param>
        /// <param name="endDateTime">Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end..</param>
        /// <param name="actualStartDateTime">Gets or sets the actual start date and time.  &lt;br&gt;  This represents the time the resource actually started it&#39;s trip, not the planned start.  .</param>
        /// <param name="actualEndDateTime">Gets or sets the actual end date and time.  &lt;br&gt;  This represents the time the resource actually ended it&#39;s trip, not the planned end.  .</param>
        /// <param name="calculatedStartDateTime">Gets or sets the calculated start date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  .</param>
        /// <param name="calculatedEndDateTime">Gets or sets the calculated end date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  .</param>
        /// <param name="actions">Gets or sets the tour actions.  &lt;br&gt;  This list contains a list of actions which define single events during the trip.    This list will be the primary resource for the generation of attached resources and entities.  &lt;br&gt;  Some of these actoins might be e.g.: \&quot;Add trailer\&quot;, \&quot;Change tractor unit\&quot; or \&quot;Load shipment\&quot;.  .</param>
        /// <param name="attachedResources">Gets or sets the attached resources.  &lt;br&gt;  Each attached resource will be generetad from a attaching and detaching action.    The user should not be able to add data to this list directly..</param>
        /// <param name="attachedEntities">Gets or sets the attached entities.  &lt;br&gt;  Each attached entity will be generated from a attaching and detaching action.    The user should not be able to add data to this list directly..</param>
        /// <param name="tags">Gets or sets tour tags.  &lt;br&gt;  Tags are shorts additional information that can be added to a tour.  .</param>
        /// <param name="transits">Gets or sets transits.  &lt;br&gt;  A transit is a trip/movement of the primary resource from one place to another.  .</param>
        /// <param name="status">status.</param>
        /// <param name="isMirroredTour">Gets or sets whether the tour is mirrored..</param>
        /// <param name="notes">Gets or sets a note to the tour..</param>
        /// <param name="isDeleted">Gets or sets werther the tour is deleted..</param>
        /// <param name="createDateTime">Gets or sets the tour create date time.</param>
        /// <param name="updateDateTime">Gets or sets the tour update date time.</param>
        public TourModel(Guid id = default(Guid), Guid globalTourId = default(Guid), string number = default(string), string reference = default(string), ResourceModel resource = default(ResourceModel), AddressModel startAddress = default(AddressModel), AddressModel endAddress = default(AddressModel), DateTime startDateTime = default(DateTime), DateTime endDateTime = default(DateTime), DateTime? actualStartDateTime = default(DateTime?), DateTime? actualEndDateTime = default(DateTime?), DateTime? calculatedStartDateTime = default(DateTime?), DateTime? calculatedEndDateTime = default(DateTime?), List<TourActionModel> actions = default(List<TourActionModel>), List<AttachedResourceModel> attachedResources = default(List<AttachedResourceModel>), List<AttachedEntityModel> attachedEntities = default(List<AttachedEntityModel>), List<TourTagModel> tags = default(List<TourTagModel>), List<TransitModel> transits = default(List<TransitModel>), TourStatusModel status = default(TourStatusModel), bool? isMirroredTour = default(bool?), string notes = default(string), bool isDeleted = default(bool), DateTime createDateTime = default(DateTime), DateTime updateDateTime = default(DateTime))
        {
            this.Id = id;
            this.GlobalTourId = globalTourId;
            this.Number = number;
            this.Reference = reference;
            this.Resource = resource;
            this.StartAddress = startAddress;
            this.EndAddress = endAddress;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.ActualStartDateTime = actualStartDateTime;
            this.ActualEndDateTime = actualEndDateTime;
            this.CalculatedStartDateTime = calculatedStartDateTime;
            this.CalculatedEndDateTime = calculatedEndDateTime;
            this.Actions = actions;
            this.AttachedResources = attachedResources;
            this.AttachedEntities = attachedEntities;
            this.Tags = tags;
            this.Transits = transits;
            this.Status = status;
            this.IsMirroredTour = isMirroredTour;
            this.Notes = notes;
            this.IsDeleted = isDeleted;
            this.CreateDateTime = createDateTime;
            this.UpdateDateTime = updateDateTime;
        }

        /// <summary>
        /// Gets or sets the id.  &lt;br&gt;  Represents a unique identifier for a tour.  
        /// </summary>
        /// <value>Gets or sets the id.  &lt;br&gt;  Represents a unique identifier for a tour.  </value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the global tour id.  &lt;br&gt;  The global tour id is used to group tours that were generated from the same tour.  
        /// </summary>
        /// <value>Gets or sets the global tour id.  &lt;br&gt;  The global tour id is used to group tours that were generated from the same tour.  </value>
        [DataMember(Name = "globalTourId", EmitDefaultValue = false)]
        public Guid GlobalTourId { get; set; }

        /// <summary>
        /// Gets or sets the number of the tour.
        /// </summary>
        /// <value>Gets or sets the number of the tour.</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets the reference number.
        /// </summary>
        /// <value>Gets or sets the reference number.</value>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name = "resource", EmitDefaultValue = false)]
        public ResourceModel Resource { get; set; }

        /// <summary>
        /// Gets or Sets StartAddress
        /// </summary>
        [DataMember(Name = "startAddress", EmitDefaultValue = false)]
        public AddressModel StartAddress { get; set; }

        /// <summary>
        /// Gets or Sets EndAddress
        /// </summary>
        [DataMember(Name = "endAddress", EmitDefaultValue = false)]
        public AddressModel EndAddress { get; set; }

        /// <summary>
        /// Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.
        /// </summary>
        /// <value>Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.</value>
        [DataMember(Name = "startDateTime", EmitDefaultValue = false)]
        public DateTime StartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.
        /// </summary>
        /// <value>Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.</value>
        [DataMember(Name = "endDateTime", EmitDefaultValue = false)]
        public DateTime EndDateTime { get; set; }

        /// <summary>
        /// Gets or sets the actual start date and time.  &lt;br&gt;  This represents the time the resource actually started it&#39;s trip, not the planned start.  
        /// </summary>
        /// <value>Gets or sets the actual start date and time.  &lt;br&gt;  This represents the time the resource actually started it&#39;s trip, not the planned start.  </value>
        [DataMember(Name = "actualStartDateTime", EmitDefaultValue = true)]
        public DateTime? ActualStartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the actual end date and time.  &lt;br&gt;  This represents the time the resource actually ended it&#39;s trip, not the planned end.  
        /// </summary>
        /// <value>Gets or sets the actual end date and time.  &lt;br&gt;  This represents the time the resource actually ended it&#39;s trip, not the planned end.  </value>
        [DataMember(Name = "actualEndDateTime", EmitDefaultValue = true)]
        public DateTime? ActualEndDateTime { get; set; }

        /// <summary>
        /// Gets or sets the calculated start date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  
        /// </summary>
        /// <value>Gets or sets the calculated start date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  </value>
        [DataMember(Name = "calculatedStartDateTime", EmitDefaultValue = true)]
        public DateTime? CalculatedStartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the calculated end date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  
        /// </summary>
        /// <value>Gets or sets the calculated end date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  </value>
        [DataMember(Name = "calculatedEndDateTime", EmitDefaultValue = true)]
        public DateTime? CalculatedEndDateTime { get; set; }

        /// <summary>
        /// Gets or sets the tour actions.  &lt;br&gt;  This list contains a list of actions which define single events during the trip.    This list will be the primary resource for the generation of attached resources and entities.  &lt;br&gt;  Some of these actoins might be e.g.: \&quot;Add trailer\&quot;, \&quot;Change tractor unit\&quot; or \&quot;Load shipment\&quot;.  
        /// </summary>
        /// <value>Gets or sets the tour actions.  &lt;br&gt;  This list contains a list of actions which define single events during the trip.    This list will be the primary resource for the generation of attached resources and entities.  &lt;br&gt;  Some of these actoins might be e.g.: \&quot;Add trailer\&quot;, \&quot;Change tractor unit\&quot; or \&quot;Load shipment\&quot;.  </value>
        [DataMember(Name = "actions", EmitDefaultValue = true)]
        public List<TourActionModel> Actions { get; set; }

        /// <summary>
        /// Gets or sets the attached resources.  &lt;br&gt;  Each attached resource will be generetad from a attaching and detaching action.    The user should not be able to add data to this list directly.
        /// </summary>
        /// <value>Gets or sets the attached resources.  &lt;br&gt;  Each attached resource will be generetad from a attaching and detaching action.    The user should not be able to add data to this list directly.</value>
        [DataMember(Name = "attachedResources", EmitDefaultValue = true)]
        public List<AttachedResourceModel> AttachedResources { get; set; }

        /// <summary>
        /// Gets or sets the attached entities.  &lt;br&gt;  Each attached entity will be generated from a attaching and detaching action.    The user should not be able to add data to this list directly.
        /// </summary>
        /// <value>Gets or sets the attached entities.  &lt;br&gt;  Each attached entity will be generated from a attaching and detaching action.    The user should not be able to add data to this list directly.</value>
        [DataMember(Name = "attachedEntities", EmitDefaultValue = true)]
        public List<AttachedEntityModel> AttachedEntities { get; set; }

        /// <summary>
        /// Gets or sets tour tags.  &lt;br&gt;  Tags are shorts additional information that can be added to a tour.  
        /// </summary>
        /// <value>Gets or sets tour tags.  &lt;br&gt;  Tags are shorts additional information that can be added to a tour.  </value>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<TourTagModel> Tags { get; set; }

        /// <summary>
        /// Gets or sets transits.  &lt;br&gt;  A transit is a trip/movement of the primary resource from one place to another.  
        /// </summary>
        /// <value>Gets or sets transits.  &lt;br&gt;  A transit is a trip/movement of the primary resource from one place to another.  </value>
        [DataMember(Name = "transits", EmitDefaultValue = true)]
        public List<TransitModel> Transits { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public TourStatusModel Status { get; set; }

        /// <summary>
        /// Gets or sets whether the tour is mirrored.
        /// </summary>
        /// <value>Gets or sets whether the tour is mirrored.</value>
        [DataMember(Name = "isMirroredTour", EmitDefaultValue = true)]
        public bool? IsMirroredTour { get; set; }

        /// <summary>
        /// Gets or sets a note to the tour.
        /// </summary>
        /// <value>Gets or sets a note to the tour.</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or sets werther the tour is deleted.
        /// </summary>
        /// <value>Gets or sets werther the tour is deleted.</value>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or sets the tour create date time
        /// </summary>
        /// <value>Gets or sets the tour create date time</value>
        [DataMember(Name = "createDateTime", EmitDefaultValue = false)]
        public DateTime CreateDateTime { get; set; }

        /// <summary>
        /// Gets or sets the tour update date time
        /// </summary>
        /// <value>Gets or sets the tour update date time</value>
        [DataMember(Name = "updateDateTime", EmitDefaultValue = false)]
        public DateTime UpdateDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TourModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GlobalTourId: ").Append(GlobalTourId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  StartAddress: ").Append(StartAddress).Append("\n");
            sb.Append("  EndAddress: ").Append(EndAddress).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  ActualStartDateTime: ").Append(ActualStartDateTime).Append("\n");
            sb.Append("  ActualEndDateTime: ").Append(ActualEndDateTime).Append("\n");
            sb.Append("  CalculatedStartDateTime: ").Append(CalculatedStartDateTime).Append("\n");
            sb.Append("  CalculatedEndDateTime: ").Append(CalculatedEndDateTime).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  AttachedResources: ").Append(AttachedResources).Append("\n");
            sb.Append("  AttachedEntities: ").Append(AttachedEntities).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Transits: ").Append(Transits).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IsMirroredTour: ").Append(IsMirroredTour).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TourModel);
        }

        /// <summary>
        /// Returns true if TourModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TourModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TourModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GlobalTourId == input.GlobalTourId ||
                    (this.GlobalTourId != null &&
                    this.GlobalTourId.Equals(input.GlobalTourId))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Resource == input.Resource ||
                    (this.Resource != null &&
                    this.Resource.Equals(input.Resource))
                ) && 
                (
                    this.StartAddress == input.StartAddress ||
                    (this.StartAddress != null &&
                    this.StartAddress.Equals(input.StartAddress))
                ) && 
                (
                    this.EndAddress == input.EndAddress ||
                    (this.EndAddress != null &&
                    this.EndAddress.Equals(input.EndAddress))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.ActualStartDateTime == input.ActualStartDateTime ||
                    (this.ActualStartDateTime != null &&
                    this.ActualStartDateTime.Equals(input.ActualStartDateTime))
                ) && 
                (
                    this.ActualEndDateTime == input.ActualEndDateTime ||
                    (this.ActualEndDateTime != null &&
                    this.ActualEndDateTime.Equals(input.ActualEndDateTime))
                ) && 
                (
                    this.CalculatedStartDateTime == input.CalculatedStartDateTime ||
                    (this.CalculatedStartDateTime != null &&
                    this.CalculatedStartDateTime.Equals(input.CalculatedStartDateTime))
                ) && 
                (
                    this.CalculatedEndDateTime == input.CalculatedEndDateTime ||
                    (this.CalculatedEndDateTime != null &&
                    this.CalculatedEndDateTime.Equals(input.CalculatedEndDateTime))
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.AttachedResources == input.AttachedResources ||
                    this.AttachedResources != null &&
                    input.AttachedResources != null &&
                    this.AttachedResources.SequenceEqual(input.AttachedResources)
                ) && 
                (
                    this.AttachedEntities == input.AttachedEntities ||
                    this.AttachedEntities != null &&
                    input.AttachedEntities != null &&
                    this.AttachedEntities.SequenceEqual(input.AttachedEntities)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Transits == input.Transits ||
                    this.Transits != null &&
                    input.Transits != null &&
                    this.Transits.SequenceEqual(input.Transits)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.IsMirroredTour == input.IsMirroredTour ||
                    (this.IsMirroredTour != null &&
                    this.IsMirroredTour.Equals(input.IsMirroredTour))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.CreateDateTime == input.CreateDateTime ||
                    (this.CreateDateTime != null &&
                    this.CreateDateTime.Equals(input.CreateDateTime))
                ) && 
                (
                    this.UpdateDateTime == input.UpdateDateTime ||
                    (this.UpdateDateTime != null &&
                    this.UpdateDateTime.Equals(input.UpdateDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.GlobalTourId != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalTourId.GetHashCode();
                }
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.Resource != null)
                {
                    hashCode = (hashCode * 59) + this.Resource.GetHashCode();
                }
                if (this.StartAddress != null)
                {
                    hashCode = (hashCode * 59) + this.StartAddress.GetHashCode();
                }
                if (this.EndAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EndAddress.GetHashCode();
                }
                if (this.StartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartDateTime.GetHashCode();
                }
                if (this.EndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndDateTime.GetHashCode();
                }
                if (this.ActualStartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ActualStartDateTime.GetHashCode();
                }
                if (this.ActualEndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ActualEndDateTime.GetHashCode();
                }
                if (this.CalculatedStartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedStartDateTime.GetHashCode();
                }
                if (this.CalculatedEndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedEndDateTime.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                if (this.AttachedResources != null)
                {
                    hashCode = (hashCode * 59) + this.AttachedResources.GetHashCode();
                }
                if (this.AttachedEntities != null)
                {
                    hashCode = (hashCode * 59) + this.AttachedEntities.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.Transits != null)
                {
                    hashCode = (hashCode * 59) + this.Transits.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.IsMirroredTour != null)
                {
                    hashCode = (hashCode * 59) + this.IsMirroredTour.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                if (this.CreateDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreateDateTime.GetHashCode();
                }
                if (this.UpdateDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateDateTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
