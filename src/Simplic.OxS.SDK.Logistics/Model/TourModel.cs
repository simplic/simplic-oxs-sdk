// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of tour.
    /// </summary>
    public partial class TourModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TourModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TourModel" /> class.
        /// </summary>
        /// <param name="actions">Gets or sets the tour actions.  &lt;br&gt;  This list contains a list of actions which define single events during the trip.    This list will be the primary resource for the generation of attached resources and entities.  &lt;br&gt;  Some of these actoins might be e.g.: \&quot;Add trailer\&quot;, \&quot;Change tractor unit\&quot; or \&quot;Load shipment\&quot;.  </param>
        /// <param name="actualEndDateTime">Gets or sets the actual end date and time.  &lt;br&gt;  This represents the time the resource actually ended it&#39;s trip, not the planned end.  </param>
        /// <param name="actualStartDateTime">Gets or sets the actual start date and time.  &lt;br&gt;  This represents the time the resource actually started it&#39;s trip, not the planned start.  </param>
        /// <param name="attachedEntities">Gets or sets the attached entities.  &lt;br&gt;  Each attached entity will be generated from a attaching and detaching action.    The user should not be able to add data to this list directly.</param>
        /// <param name="attachedResources">Gets or sets the attached resources.  &lt;br&gt;  Each attached resource will be generetad from a attaching and detaching action.    The user should not be able to add data to this list directly.</param>
        /// <param name="calculatedEndDateTime">Gets or sets the calculated end date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  </param>
        /// <param name="calculatedStartDateTime">Gets or sets the calculated start date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  </param>
        /// <param name="createDateTime">Gets or sets the tour create date time</param>
        /// <param name="endAddress">endAddress</param>
        /// <param name="endDateTime">Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.</param>
        /// <param name="globalTourId">Gets or sets the global tour id.  &lt;br&gt;  The global tour id is used to group tours that were generated from the same tour.  </param>
        /// <param name="id">Gets or sets the id.  &lt;br&gt;  Represents a unique identifier for a tour.  </param>
        /// <param name="isDeleted">Gets or sets werther the tour is deleted.</param>
        /// <param name="isMirroredTour">Gets or sets whether the tour is mirrored.</param>
        /// <param name="notes">Gets or sets a note to the tour.</param>
        /// <param name="number">Gets or sets the number of the tour.</param>
        /// <param name="reference">Gets or sets the reference number.</param>
        /// <param name="resource">resource</param>
        /// <param name="startAddress">startAddress</param>
        /// <param name="startDateTime">Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.</param>
        /// <param name="status">status</param>
        /// <param name="tags">Gets or sets tour tags.  &lt;br&gt;  Tags are shorts additional information that can be added to a tour.  </param>
        /// <param name="transits">Gets or sets transits.  &lt;br&gt;  A transit is a trip/movement of the primary resource from one place to another.  </param>
        /// <param name="updateDateTime">Gets or sets the tour update date time</param>
        //[JsonConstructor]
        public TourModel(Option<List<TourActionModel>> actions = default, Option<DateTime> actualEndDateTime = default, Option<DateTime> actualStartDateTime = default, Option<List<AttachedEntityModel>> attachedEntities = default, Option<List<AttachedResourceModel>> attachedResources = default, Option<DateTime> calculatedEndDateTime = default, Option<DateTime> calculatedStartDateTime = default, Option<DateTime> createDateTime = default, Option<AddressModel> endAddress = default, Option<DateTime> endDateTime = default, Option<Guid> globalTourId = default, Option<Guid> id = default, Option<bool> isDeleted = default, Option<bool> isMirroredTour = default, Option<string> notes = default, Option<string> number = default, Option<string> reference = default, Option<ResourceModel> resource = default, Option<AddressModel> startAddress = default, Option<DateTime> startDateTime = default, Option<TourStatusModel> status = default, Option<List<TourTagModel>> tags = default, Option<List<TransitModel>> transits = default, Option<DateTime> updateDateTime = default)
        {
            ActionsOption = actions;
            ActualEndDateTimeOption = actualEndDateTime;
            ActualStartDateTimeOption = actualStartDateTime;
            AttachedEntitiesOption = attachedEntities;
            AttachedResourcesOption = attachedResources;
            CalculatedEndDateTimeOption = calculatedEndDateTime;
            CalculatedStartDateTimeOption = calculatedStartDateTime;
            CreateDateTimeOption = createDateTime;
            EndAddressOption = endAddress;
            EndDateTimeOption = endDateTime;
            GlobalTourIdOption = globalTourId;
            IdOption = id;
            IsDeletedOption = isDeleted;
            IsMirroredTourOption = isMirroredTour;
            NotesOption = notes;
            NumberOption = number;
            ReferenceOption = reference;
            ResourceOption = resource;
            StartAddressOption = startAddress;
            StartDateTimeOption = startDateTime;
            StatusOption = status;
            TagsOption = tags;
            TransitsOption = transits;
            UpdateDateTimeOption = updateDateTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Actions
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<TourActionModel>>))]
        public Option<List<TourActionModel>> ActionsOption { get; private set; }

        /// <summary>
        /// Gets or sets the tour actions.  &lt;br&gt;  This list contains a list of actions which define single events during the trip.    This list will be the primary resource for the generation of attached resources and entities.  &lt;br&gt;  Some of these actoins might be e.g.: \&quot;Add trailer\&quot;, \&quot;Change tractor unit\&quot; or \&quot;Load shipment\&quot;.  
        /// </summary>
        /// <value>Gets or sets the tour actions.  &lt;br&gt;  This list contains a list of actions which define single events during the trip.    This list will be the primary resource for the generation of attached resources and entities.  &lt;br&gt;  Some of these actoins might be e.g.: \&quot;Add trailer\&quot;, \&quot;Change tractor unit\&quot; or \&quot;Load shipment\&quot;.  </value>
        [JsonPropertyName("actions")]
        public List<TourActionModel>? Actions { get { return this. ActionsOption; } set { this.ActionsOption = new Option<List<TourActionModel>>(value); } }

        /// <summary>
        /// Used to track the state of ActualEndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ActualEndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual end date and time.  &lt;br&gt;  This represents the time the resource actually ended it&#39;s trip, not the planned end.  
        /// </summary>
        /// <value>Gets or sets the actual end date and time.  &lt;br&gt;  This represents the time the resource actually ended it&#39;s trip, not the planned end.  </value>
        [JsonPropertyName("actualEndDateTime")]
        public DateTime? ActualEndDateTime { get { return this. ActualEndDateTimeOption; } set { this.ActualEndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of ActualStartDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ActualStartDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual start date and time.  &lt;br&gt;  This represents the time the resource actually started it&#39;s trip, not the planned start.  
        /// </summary>
        /// <value>Gets or sets the actual start date and time.  &lt;br&gt;  This represents the time the resource actually started it&#39;s trip, not the planned start.  </value>
        [JsonPropertyName("actualStartDateTime")]
        public DateTime? ActualStartDateTime { get { return this. ActualStartDateTimeOption; } set { this.ActualStartDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of AttachedEntities
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<AttachedEntityModel>>))]
        public Option<List<AttachedEntityModel>> AttachedEntitiesOption { get; private set; }

        /// <summary>
        /// Gets or sets the attached entities.  &lt;br&gt;  Each attached entity will be generated from a attaching and detaching action.    The user should not be able to add data to this list directly.
        /// </summary>
        /// <value>Gets or sets the attached entities.  &lt;br&gt;  Each attached entity will be generated from a attaching and detaching action.    The user should not be able to add data to this list directly.</value>
        [JsonPropertyName("attachedEntities")]
        public List<AttachedEntityModel>? AttachedEntities { get { return this. AttachedEntitiesOption; } set { this.AttachedEntitiesOption = new Option<List<AttachedEntityModel>>(value); } }

        /// <summary>
        /// Used to track the state of AttachedResources
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<AttachedResourceModel>>))]
        public Option<List<AttachedResourceModel>> AttachedResourcesOption { get; private set; }

        /// <summary>
        /// Gets or sets the attached resources.  &lt;br&gt;  Each attached resource will be generetad from a attaching and detaching action.    The user should not be able to add data to this list directly.
        /// </summary>
        /// <value>Gets or sets the attached resources.  &lt;br&gt;  Each attached resource will be generetad from a attaching and detaching action.    The user should not be able to add data to this list directly.</value>
        [JsonPropertyName("attachedResources")]
        public List<AttachedResourceModel>? AttachedResources { get { return this. AttachedResourcesOption; } set { this.AttachedResourcesOption = new Option<List<AttachedResourceModel>>(value); } }

        /// <summary>
        /// Used to track the state of CalculatedEndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CalculatedEndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the calculated end date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  
        /// </summary>
        /// <value>Gets or sets the calculated end date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  </value>
        [JsonPropertyName("calculatedEndDateTime")]
        public DateTime? CalculatedEndDateTime { get { return this. CalculatedEndDateTimeOption; } set { this.CalculatedEndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CalculatedStartDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CalculatedStartDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the calculated start date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  
        /// </summary>
        /// <value>Gets or sets the calculated start date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  </value>
        [JsonPropertyName("calculatedStartDateTime")]
        public DateTime? CalculatedStartDateTime { get { return this. CalculatedStartDateTimeOption; } set { this.CalculatedStartDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the tour create date time
        /// </summary>
        /// <value>Gets or sets the tour create date time</value>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of EndAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> EndAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndAddress
        /// </summary>
        [JsonPropertyName("endAddress")]
        public AddressModel? EndAddress { get { return this. EndAddressOption; } set { this.EndAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of EndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.
        /// </summary>
        /// <value>Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.</value>
        [JsonPropertyName("endDateTime")]
        public DateTime? EndDateTime { get { return this. EndDateTimeOption; } set { this.EndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of GlobalTourId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> GlobalTourIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the global tour id.  &lt;br&gt;  The global tour id is used to group tours that were generated from the same tour.  
        /// </summary>
        /// <value>Gets or sets the global tour id.  &lt;br&gt;  The global tour id is used to group tours that were generated from the same tour.  </value>
        [JsonPropertyName("globalTourId")]
        public Guid? GlobalTourId { get { return this. GlobalTourIdOption; } set { this.GlobalTourIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id.  &lt;br&gt;  Represents a unique identifier for a tour.  
        /// </summary>
        /// <value>Gets or sets the id.  &lt;br&gt;  Represents a unique identifier for a tour.  </value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or sets werther the tour is deleted.
        /// </summary>
        /// <value>Gets or sets werther the tour is deleted.</value>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of IsMirroredTour
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsMirroredTourOption { get; private set; }

        /// <summary>
        /// Gets or sets whether the tour is mirrored.
        /// </summary>
        /// <value>Gets or sets whether the tour is mirrored.</value>
        [JsonPropertyName("isMirroredTour")]
        public bool? IsMirroredTour { get { return this. IsMirroredTourOption; } set { this.IsMirroredTourOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Gets or sets a note to the tour.
        /// </summary>
        /// <value>Gets or sets a note to the tour.</value>
        [JsonPropertyName("notes")]
        public string? Notes { get { return this. NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the number of the tour.
        /// </summary>
        /// <value>Gets or sets the number of the tour.</value>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Gets or sets the reference number.
        /// </summary>
        /// <value>Gets or sets the reference number.</value>
        [JsonPropertyName("reference")]
        public string? Reference { get { return this. ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Resource
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> ResourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [JsonPropertyName("resource")]
        public ResourceModel? Resource { get { return this. ResourceOption; } set { this.ResourceOption = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Used to track the state of StartAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> StartAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartAddress
        /// </summary>
        [JsonPropertyName("startAddress")]
        public AddressModel? StartAddress { get { return this. StartAddressOption; } set { this.StartAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of StartDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.
        /// </summary>
        /// <value>Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.</value>
        [JsonPropertyName("startDateTime")]
        public DateTime? StartDateTime { get { return this. StartDateTimeOption; } set { this.StartDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TourStatusModel>))]
        public Option<TourStatusModel> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public TourStatusModel? Status { get { return this. StatusOption; } set { this.StatusOption = new Option<TourStatusModel>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<TourTagModel>>))]
        public Option<List<TourTagModel>> TagsOption { get; private set; }

        /// <summary>
        /// Gets or sets tour tags.  &lt;br&gt;  Tags are shorts additional information that can be added to a tour.  
        /// </summary>
        /// <value>Gets or sets tour tags.  &lt;br&gt;  Tags are shorts additional information that can be added to a tour.  </value>
        [JsonPropertyName("tags")]
        public List<TourTagModel>? Tags { get { return this. TagsOption; } set { this.TagsOption = new Option<List<TourTagModel>>(value); } }

        /// <summary>
        /// Used to track the state of Transits
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<TransitModel>>))]
        public Option<List<TransitModel>> TransitsOption { get; private set; }

        /// <summary>
        /// Gets or sets transits.  &lt;br&gt;  A transit is a trip/movement of the primary resource from one place to another.  
        /// </summary>
        /// <value>Gets or sets transits.  &lt;br&gt;  A transit is a trip/movement of the primary resource from one place to another.  </value>
        [JsonPropertyName("transits")]
        public List<TransitModel>? Transits { get { return this. TransitsOption; } set { this.TransitsOption = new Option<List<TransitModel>>(value); } }

        /// <summary>
        /// Used to track the state of UpdateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UpdateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the tour update date time
        /// </summary>
        /// <value>Gets or sets the tour update date time</value>
        [JsonPropertyName("updateDateTime")]
        public DateTime? UpdateDateTime { get { return this. UpdateDateTimeOption; } set { this.UpdateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TourModel {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  ActualEndDateTime: ").Append(ActualEndDateTime).Append("\n");
            sb.Append("  ActualStartDateTime: ").Append(ActualStartDateTime).Append("\n");
            sb.Append("  AttachedEntities: ").Append(AttachedEntities).Append("\n");
            sb.Append("  AttachedResources: ").Append(AttachedResources).Append("\n");
            sb.Append("  CalculatedEndDateTime: ").Append(CalculatedEndDateTime).Append("\n");
            sb.Append("  CalculatedStartDateTime: ").Append(CalculatedStartDateTime).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  EndAddress: ").Append(EndAddress).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  GlobalTourId: ").Append(GlobalTourId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  IsMirroredTour: ").Append(IsMirroredTour).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  StartAddress: ").Append(StartAddress).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Transits: ").Append(Transits).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TourModel" />
    /// </summary>
    public class TourModelJsonConverter : JsonConverter<TourModel>
    {
        /// <summary>
        /// The format to use to serialize ActualEndDateTime
        /// </summary>
        public static string ActualEndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ActualStartDateTime
        /// </summary>
        public static string ActualStartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CalculatedEndDateTime
        /// </summary>
        public static string CalculatedEndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CalculatedStartDateTime
        /// </summary>
        public static string CalculatedStartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDateTime
        /// </summary>
        public static string EndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDateTime
        /// </summary>
        public static string StartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateDateTime
        /// </summary>
        public static string UpdateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TourModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TourModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<TourActionModel>> actions = default;
            Option<DateTime> actualEndDateTime = default;
            Option<DateTime> actualStartDateTime = default;
            Option<List<AttachedEntityModel>> attachedEntities = default;
            Option<List<AttachedResourceModel>> attachedResources = default;
            Option<DateTime> calculatedEndDateTime = default;
            Option<DateTime> calculatedStartDateTime = default;
            Option<DateTime> createDateTime = default;
            Option<AddressModel> endAddress = default;
            Option<DateTime> endDateTime = default;
            Option<Guid> globalTourId = default;
            Option<Guid> id = default;
            Option<bool> isDeleted = default;
            Option<bool> isMirroredTour = default;
            Option<string> notes = default;
            Option<string> number = default;
            Option<string> reference = default;
            Option<ResourceModel> resource = default;
            Option<AddressModel> startAddress = default;
            Option<DateTime> startDateTime = default;
            Option<TourStatusModel> status = default;
            Option<List<TourTagModel>> tags = default;
            Option<List<TransitModel>> transits = default;
            Option<DateTime> updateDateTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actions = new Option<List<TourActionModel>>(JsonSerializer.Deserialize<List<TourActionModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "actualEndDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actualEndDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "actualStartDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actualStartDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attachedEntities":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attachedEntities = new Option<List<AttachedEntityModel>>(JsonSerializer.Deserialize<List<AttachedEntityModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attachedResources":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attachedResources = new Option<List<AttachedResourceModel>>(JsonSerializer.Deserialize<List<AttachedResourceModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "calculatedEndDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                calculatedEndDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "calculatedStartDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                calculatedStartDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "globalTourId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                globalTourId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "isMirroredTour":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isMirroredTour = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "resource":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resource = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "startAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "startDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<TourStatusModel>(JsonSerializer.Deserialize<TourStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tags = new Option<List<TourTagModel>>(JsonSerializer.Deserialize<List<TourTagModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "transits":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transits = new Option<List<TransitModel>>(JsonSerializer.Deserialize<List<TransitModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class TourModel.");

            if (endAddress.IsSet && endAddress.Value == null)
                throw new ArgumentNullException(nameof(endAddress), "Property is not nullable for class TourModel.");

            if (endDateTime.IsSet && endDateTime.Value == null)
                throw new ArgumentNullException(nameof(endDateTime), "Property is not nullable for class TourModel.");

            if (globalTourId.IsSet && globalTourId.Value == null)
                throw new ArgumentNullException(nameof(globalTourId), "Property is not nullable for class TourModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TourModel.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class TourModel.");

            if (resource.IsSet && resource.Value == null)
                throw new ArgumentNullException(nameof(resource), "Property is not nullable for class TourModel.");

            if (startAddress.IsSet && startAddress.Value == null)
                throw new ArgumentNullException(nameof(startAddress), "Property is not nullable for class TourModel.");

            if (startDateTime.IsSet && startDateTime.Value == null)
                throw new ArgumentNullException(nameof(startDateTime), "Property is not nullable for class TourModel.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class TourModel.");

            if (updateDateTime.IsSet && updateDateTime.Value == null)
                throw new ArgumentNullException(nameof(updateDateTime), "Property is not nullable for class TourModel.");

            //2return new TourModel(actions, actualEndDateTime, actualStartDateTime, attachedEntities, attachedResources, calculatedEndDateTime, calculatedStartDateTime, createDateTime, endAddress, endDateTime, globalTourId, id, isDeleted, isMirroredTour, notes, number, reference, resource, startAddress, startDateTime, status, tags, transits, updateDateTime);
            return new TourModel(actions, actualEndDateTime, actualStartDateTime, attachedEntities, attachedResources, calculatedEndDateTime, calculatedStartDateTime, createDateTime, endAddress, endDateTime, globalTourId, id, isDeleted, isMirroredTour, notes, number, reference, resource, startAddress, startDateTime, status, tags, transits, updateDateTime);
        }

        /// <summary>
        /// Serializes a <see cref="TourModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tourModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TourModel tourModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, tourModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TourModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tourModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TourModel tourModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tourModel.EndAddressOption.IsSet && tourModel.EndAddress == null)
                throw new ArgumentNullException(nameof(tourModel.EndAddress), "Property is required for class TourModel.");

            if (tourModel.ResourceOption.IsSet && tourModel.Resource == null)
                throw new ArgumentNullException(nameof(tourModel.Resource), "Property is required for class TourModel.");

            if (tourModel.StartAddressOption.IsSet && tourModel.StartAddress == null)
                throw new ArgumentNullException(nameof(tourModel.StartAddress), "Property is required for class TourModel.");

            if (tourModel.StatusOption.IsSet && tourModel.Status == null)
                throw new ArgumentNullException(nameof(tourModel.Status), "Property is required for class TourModel.");

            if (tourModel.ActionsOption.IsSet)
                if (tourModel.ActionsOption.Value != null)
                {
                    writer.WritePropertyName("actions");
                    JsonSerializer.Serialize(writer, tourModel.Actions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("actions");
            if (tourModel.ActualEndDateTimeOption.IsSet)
                if (tourModel.ActualEndDateTimeOption.Value != null)
                {
                    writer.WriteString("actualEndDateTime", tourModel.ActualEndDateTimeOption!.Value.ToString(ActualEndDateTimeFormat));
                    //var __value = tourModel.ActualEndDateTimeOption.Value;
                    //writer.WriteString("actualEndDateTime", __value);
                }
                else
                    writer.WriteNull("actualEndDateTime");

            if (tourModel.ActualStartDateTimeOption.IsSet)
                if (tourModel.ActualStartDateTimeOption.Value != null)
                {
                    writer.WriteString("actualStartDateTime", tourModel.ActualStartDateTimeOption!.Value.ToString(ActualStartDateTimeFormat));
                    //var __value = tourModel.ActualStartDateTimeOption.Value;
                    //writer.WriteString("actualStartDateTime", __value);
                }
                else
                    writer.WriteNull("actualStartDateTime");

            if (tourModel.AttachedEntitiesOption.IsSet)
                if (tourModel.AttachedEntitiesOption.Value != null)
                {
                    writer.WritePropertyName("attachedEntities");
                    JsonSerializer.Serialize(writer, tourModel.AttachedEntities, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachedEntities");
            if (tourModel.AttachedResourcesOption.IsSet)
                if (tourModel.AttachedResourcesOption.Value != null)
                {
                    writer.WritePropertyName("attachedResources");
                    JsonSerializer.Serialize(writer, tourModel.AttachedResources, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachedResources");
            if (tourModel.CalculatedEndDateTimeOption.IsSet)
                if (tourModel.CalculatedEndDateTimeOption.Value != null)
                {
                    writer.WriteString("calculatedEndDateTime", tourModel.CalculatedEndDateTimeOption!.Value.ToString(CalculatedEndDateTimeFormat));
                    //var __value = tourModel.CalculatedEndDateTimeOption.Value;
                    //writer.WriteString("calculatedEndDateTime", __value);
                }
                else
                    writer.WriteNull("calculatedEndDateTime");

            if (tourModel.CalculatedStartDateTimeOption.IsSet)
                if (tourModel.CalculatedStartDateTimeOption.Value != null)
                {
                    writer.WriteString("calculatedStartDateTime", tourModel.CalculatedStartDateTimeOption!.Value.ToString(CalculatedStartDateTimeFormat));
                    //var __value = tourModel.CalculatedStartDateTimeOption.Value;
                    //writer.WriteString("calculatedStartDateTime", __value);
                }
                else
                    writer.WriteNull("calculatedStartDateTime");

            if (tourModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", tourModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (tourModel.EndAddressOption.IsSet)
            {
                writer.WritePropertyName("endAddress");
                JsonSerializer.Serialize(writer, tourModel.EndAddress, jsonSerializerOptions);
            }
            if (tourModel.EndDateTimeOption.IsSet)
                writer.WriteString("endDateTime", tourModel.EndDateTimeOption!.Value.ToString(EndDateTimeFormat));

            if (tourModel.GlobalTourIdOption.IsSet)
                writer.WriteString("globalTourId", tourModel.GlobalTourIdOption!.Value);

            if (tourModel.IdOption.IsSet)
                writer.WriteString("id", tourModel.IdOption!.Value);

            if (tourModel.IsDeletedOption.IsSet)
                writer.WriteBoolean("isDeleted", tourModel.IsDeletedOption!.Value);

            if (tourModel.IsMirroredTourOption.IsSet)
                if (tourModel.IsMirroredTourOption.Value != null)
                {
                    writer.WriteBoolean("isMirroredTour", tourModel.IsMirroredTourOption!.Value);
                    //var __value = tourModel.IsMirroredTourOption.Value;
                    //writer.WriteString("isMirroredTour", __value);
                }
                else
                    writer.WriteNull("isMirroredTour");

            if (tourModel.NotesOption.IsSet)
                if (tourModel.NotesOption.Value != null)
                {
                    writer.WriteString("notes", tourModel.Notes);
                    //var __value = tourModel.NotesOption.Value;
                    //writer.WriteString("notes", __value);
                }
                else
                    writer.WriteNull("notes");

            if (tourModel.NumberOption.IsSet)
                if (tourModel.NumberOption.Value != null)
                {
                    writer.WriteString("number", tourModel.Number);
                    //var __value = tourModel.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (tourModel.ReferenceOption.IsSet)
                if (tourModel.ReferenceOption.Value != null)
                {
                    writer.WriteString("reference", tourModel.Reference);
                    //var __value = tourModel.ReferenceOption.Value;
                    //writer.WriteString("reference", __value);
                }
                else
                    writer.WriteNull("reference");

            if (tourModel.ResourceOption.IsSet)
            {
                writer.WritePropertyName("resource");
                JsonSerializer.Serialize(writer, tourModel.Resource, jsonSerializerOptions);
            }
            if (tourModel.StartAddressOption.IsSet)
            {
                writer.WritePropertyName("startAddress");
                JsonSerializer.Serialize(writer, tourModel.StartAddress, jsonSerializerOptions);
            }
            if (tourModel.StartDateTimeOption.IsSet)
                writer.WriteString("startDateTime", tourModel.StartDateTimeOption!.Value.ToString(StartDateTimeFormat));

            if (tourModel.StatusOption.IsSet)
            {
                writer.WritePropertyName("status");
                JsonSerializer.Serialize(writer, tourModel.Status, jsonSerializerOptions);
            }
            if (tourModel.TagsOption.IsSet)
                if (tourModel.TagsOption.Value != null)
                {
                    writer.WritePropertyName("tags");
                    JsonSerializer.Serialize(writer, tourModel.Tags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tags");
            if (tourModel.TransitsOption.IsSet)
                if (tourModel.TransitsOption.Value != null)
                {
                    writer.WritePropertyName("transits");
                    JsonSerializer.Serialize(writer, tourModel.Transits, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("transits");
            if (tourModel.UpdateDateTimeOption.IsSet)
                writer.WriteString("updateDateTime", tourModel.UpdateDateTimeOption!.Value.ToString(UpdateDateTimeFormat));
        }
    }
}
