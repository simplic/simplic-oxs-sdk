// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of billable contact.
    /// </summary>
    public partial class BillableContactModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public BillableContactModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillableContactModel" /> class.
        /// </summary>
        /// <param name="accountNumber">Gets or sets the account number.</param>
        /// <param name="address">address</param>
        /// <param name="personalAccountId">Gets or sets the personal account id.  &lt;br&gt;  Represents the id of a personal account from the Simplic.ApplicationCollection project.  </param>
        //[JsonConstructor]
        public BillableContactModel(Option<string> accountNumber = default, Option<AddressModel> address = default, Option<Guid> personalAccountId = default)
        {
            AccountNumberOption = accountNumber;
            AddressOption = address;
            PersonalAccountIdOption = personalAccountId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AccountNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> AccountNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the account number.
        /// </summary>
        /// <value>Gets or sets the account number.</value>
        [JsonPropertyName("accountNumber")]
        public string? AccountNumber { get { return this. AccountNumberOption; } set { this.AccountNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public AddressModel? Address { get { return this. AddressOption; } set { this.AddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of PersonalAccountId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> PersonalAccountIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the personal account id.  &lt;br&gt;  Represents the id of a personal account from the Simplic.ApplicationCollection project.  
        /// </summary>
        /// <value>Gets or sets the personal account id.  &lt;br&gt;  Represents the id of a personal account from the Simplic.ApplicationCollection project.  </value>
        [JsonPropertyName("personalAccountId")]
        public Guid? PersonalAccountId { get { return this. PersonalAccountIdOption; } set { this.PersonalAccountIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BillableContactModel {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PersonalAccountId: ").Append(PersonalAccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BillableContactModel" />
    /// </summary>
    public class BillableContactModelJsonConverter : JsonConverter<BillableContactModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="BillableContactModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BillableContactModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> accountNumber = default;
            Option<AddressModel> address = default;
            Option<Guid> personalAccountId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountNumber":
                            accountNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                address = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "personalAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                personalAccountId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class BillableContactModel.");

            //2return new BillableContactModel(accountNumber, address, personalAccountId);
            return new BillableContactModel(accountNumber, address, personalAccountId);
        }

        /// <summary>
        /// Serializes a <see cref="BillableContactModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billableContactModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BillableContactModel billableContactModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, billableContactModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BillableContactModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billableContactModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, BillableContactModel billableContactModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (billableContactModel.AddressOption.IsSet && billableContactModel.Address == null)
                throw new ArgumentNullException(nameof(billableContactModel.Address), "Property is required for class BillableContactModel.");

            if (billableContactModel.AccountNumberOption.IsSet)
                if (billableContactModel.AccountNumberOption.Value != null)
                {
                    writer.WriteString("accountNumber", billableContactModel.AccountNumber);
                    //var __value = billableContactModel.AccountNumberOption.Value;
                    //writer.WriteString("accountNumber", __value);
                }
                else
                    writer.WriteNull("accountNumber");

            if (billableContactModel.AddressOption.IsSet)
            {
                writer.WritePropertyName("address");
                JsonSerializer.Serialize(writer, billableContactModel.Address, jsonSerializerOptions);
            }
            if (billableContactModel.PersonalAccountIdOption.IsSet)
                if (billableContactModel.PersonalAccountIdOption.Value != null)
                {
                    writer.WriteString("personalAccountId", billableContactModel.PersonalAccountIdOption!.Value);
                    //var __value = billableContactModel.PersonalAccountIdOption.Value;
                    //writer.WriteString("personalAccountId", __value);
                }
                else
                    writer.WriteNull("personalAccountId");
        }
    }
}
