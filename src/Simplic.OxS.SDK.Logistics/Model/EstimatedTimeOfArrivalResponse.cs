/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// EstimatedTimeOfArrivalResponse
    /// </summary>
    [DataContract(Name = "EstimatedTimeOfArrivalResponse")]
    public partial class EstimatedTimeOfArrivalResponse : IEquatable<EstimatedTimeOfArrivalResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public ETAState? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EstimatedTimeOfArrivalResponse" /> class.
        /// </summary>
        /// <param name="tourId">Gets or sets the tour id..</param>
        /// <param name="resourceId">Gets or sets the id of the main resource of the tour..</param>
        /// <param name="startActionId">Gets or sets the id of the action that starts the eta.     When the start action id is null the tour start will be the start of the eta.  .</param>
        /// <param name="globalStartActionId">Gets or sets the global id of the start action..</param>
        /// <param name="endActionId">Gets er sets the id of the action that ends the eta.     When the end action id is null the tour end will be the end of the eta.  .</param>
        /// <param name="globalEndActionId">Gets or sets the global id of the end action..</param>
        /// <param name="startDateTime">Gets or sets the date and time when the eta will start..</param>
        /// <param name="startLongitude">Gets or sets the longitude of the start of the eta..</param>
        /// <param name="startLatitude">Gets or sets the latitude of the start of the eta..</param>
        /// <param name="currentLongitude">Gets or sets the longitude of the current position of the resource..</param>
        /// <param name="currentLatitude">Gets or sets the latitude of the current position of the resource..</param>
        /// <param name="endLongitude">Gets or sets the longitude of the end of th eta..</param>
        /// <param name="endLatitude">Gets or sets the latitude of the end of the eta..</param>
        /// <param name="remainingMinutes">Gets or sets the remaining time in minutes..</param>
        /// <param name="remainingDistanceMeters">Gets or sets the remaining distance in meters..</param>
        /// <param name="remainingTimePercent">Gets or sets the percentage of the time remaining..</param>
        /// <param name="remainingDistancePercent">Gets or sets the percentage of the distance remaining..</param>
        /// <param name="calculatedEndDateTime">Gets or sets the calculated end date time..</param>
        /// <param name="plannedEndDateTime">Gets or sets the planned end date and time.    The State will be calculated by comparing the calculated end date time with the planned and the tolerance..</param>
        /// <param name="toleranceMinutes">Gets or sets the tolerance for a delay in minutes..</param>
        /// <param name="lastCalculation">Gets or sets the date and time of the last calculation..</param>
        /// <param name="state">state.</param>
        public EstimatedTimeOfArrivalResponse(Guid tourId = default(Guid), Guid resourceId = default(Guid), Guid? startActionId = default(Guid?), Guid? globalStartActionId = default(Guid?), Guid? endActionId = default(Guid?), Guid? globalEndActionId = default(Guid?), DateTime? startDateTime = default(DateTime?), double startLongitude = default(double), double startLatitude = default(double), double currentLongitude = default(double), double currentLatitude = default(double), double endLongitude = default(double), double endLatitude = default(double), int remainingMinutes = default(int), int remainingDistanceMeters = default(int), int remainingTimePercent = default(int), int remainingDistancePercent = default(int), DateTime calculatedEndDateTime = default(DateTime), DateTime plannedEndDateTime = default(DateTime), int toleranceMinutes = default(int), DateTime lastCalculation = default(DateTime), ETAState? state = default(ETAState?))
        {
            this.TourId = tourId;
            this.ResourceId = resourceId;
            this.StartActionId = startActionId;
            this.GlobalStartActionId = globalStartActionId;
            this.EndActionId = endActionId;
            this.GlobalEndActionId = globalEndActionId;
            this.StartDateTime = startDateTime;
            this.StartLongitude = startLongitude;
            this.StartLatitude = startLatitude;
            this.CurrentLongitude = currentLongitude;
            this.CurrentLatitude = currentLatitude;
            this.EndLongitude = endLongitude;
            this.EndLatitude = endLatitude;
            this.RemainingMinutes = remainingMinutes;
            this.RemainingDistanceMeters = remainingDistanceMeters;
            this.RemainingTimePercent = remainingTimePercent;
            this.RemainingDistancePercent = remainingDistancePercent;
            this.CalculatedEndDateTime = calculatedEndDateTime;
            this.PlannedEndDateTime = plannedEndDateTime;
            this.ToleranceMinutes = toleranceMinutes;
            this.LastCalculation = lastCalculation;
            this.State = state;
        }

        /// <summary>
        /// Gets or sets the tour id.
        /// </summary>
        /// <value>Gets or sets the tour id.</value>
        [DataMember(Name = "tourId", EmitDefaultValue = false)]
        public Guid TourId { get; set; }

        /// <summary>
        /// Gets or sets the id of the main resource of the tour.
        /// </summary>
        /// <value>Gets or sets the id of the main resource of the tour.</value>
        [DataMember(Name = "resourceId", EmitDefaultValue = false)]
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the id of the action that starts the eta.     When the start action id is null the tour start will be the start of the eta.  
        /// </summary>
        /// <value>Gets or sets the id of the action that starts the eta.     When the start action id is null the tour start will be the start of the eta.  </value>
        [DataMember(Name = "startActionId", EmitDefaultValue = true)]
        public Guid? StartActionId { get; set; }

        /// <summary>
        /// Gets or sets the global id of the start action.
        /// </summary>
        /// <value>Gets or sets the global id of the start action.</value>
        [DataMember(Name = "globalStartActionId", EmitDefaultValue = true)]
        public Guid? GlobalStartActionId { get; set; }

        /// <summary>
        /// Gets er sets the id of the action that ends the eta.     When the end action id is null the tour end will be the end of the eta.  
        /// </summary>
        /// <value>Gets er sets the id of the action that ends the eta.     When the end action id is null the tour end will be the end of the eta.  </value>
        [DataMember(Name = "endActionId", EmitDefaultValue = true)]
        public Guid? EndActionId { get; set; }

        /// <summary>
        /// Gets or sets the global id of the end action.
        /// </summary>
        /// <value>Gets or sets the global id of the end action.</value>
        [DataMember(Name = "globalEndActionId", EmitDefaultValue = true)]
        public Guid? GlobalEndActionId { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the eta will start.
        /// </summary>
        /// <value>Gets or sets the date and time when the eta will start.</value>
        [DataMember(Name = "startDateTime", EmitDefaultValue = true)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the longitude of the start of the eta.
        /// </summary>
        /// <value>Gets or sets the longitude of the start of the eta.</value>
        [DataMember(Name = "startLongitude", EmitDefaultValue = false)]
        public double StartLongitude { get; set; }

        /// <summary>
        /// Gets or sets the latitude of the start of the eta.
        /// </summary>
        /// <value>Gets or sets the latitude of the start of the eta.</value>
        [DataMember(Name = "startLatitude", EmitDefaultValue = false)]
        public double StartLatitude { get; set; }

        /// <summary>
        /// Gets or sets the longitude of the current position of the resource.
        /// </summary>
        /// <value>Gets or sets the longitude of the current position of the resource.</value>
        [DataMember(Name = "currentLongitude", EmitDefaultValue = false)]
        public double CurrentLongitude { get; set; }

        /// <summary>
        /// Gets or sets the latitude of the current position of the resource.
        /// </summary>
        /// <value>Gets or sets the latitude of the current position of the resource.</value>
        [DataMember(Name = "currentLatitude", EmitDefaultValue = false)]
        public double CurrentLatitude { get; set; }

        /// <summary>
        /// Gets or sets the longitude of the end of th eta.
        /// </summary>
        /// <value>Gets or sets the longitude of the end of th eta.</value>
        [DataMember(Name = "endLongitude", EmitDefaultValue = false)]
        public double EndLongitude { get; set; }

        /// <summary>
        /// Gets or sets the latitude of the end of the eta.
        /// </summary>
        /// <value>Gets or sets the latitude of the end of the eta.</value>
        [DataMember(Name = "endLatitude", EmitDefaultValue = false)]
        public double EndLatitude { get; set; }

        /// <summary>
        /// Gets or sets the remaining time in minutes.
        /// </summary>
        /// <value>Gets or sets the remaining time in minutes.</value>
        [DataMember(Name = "remainingMinutes", EmitDefaultValue = false)]
        public int RemainingMinutes { get; set; }

        /// <summary>
        /// Gets or sets the remaining distance in meters.
        /// </summary>
        /// <value>Gets or sets the remaining distance in meters.</value>
        [DataMember(Name = "remainingDistanceMeters", EmitDefaultValue = false)]
        public int RemainingDistanceMeters { get; set; }

        /// <summary>
        /// Gets or sets the percentage of the time remaining.
        /// </summary>
        /// <value>Gets or sets the percentage of the time remaining.</value>
        [DataMember(Name = "remainingTimePercent", EmitDefaultValue = false)]
        public int RemainingTimePercent { get; set; }

        /// <summary>
        /// Gets or sets the percentage of the distance remaining.
        /// </summary>
        /// <value>Gets or sets the percentage of the distance remaining.</value>
        [DataMember(Name = "remainingDistancePercent", EmitDefaultValue = false)]
        public int RemainingDistancePercent { get; set; }

        /// <summary>
        /// Gets or sets the calculated end date time.
        /// </summary>
        /// <value>Gets or sets the calculated end date time.</value>
        [DataMember(Name = "calculatedEndDateTime", EmitDefaultValue = false)]
        public DateTime CalculatedEndDateTime { get; set; }

        /// <summary>
        /// Gets or sets the planned end date and time.    The State will be calculated by comparing the calculated end date time with the planned and the tolerance.
        /// </summary>
        /// <value>Gets or sets the planned end date and time.    The State will be calculated by comparing the calculated end date time with the planned and the tolerance.</value>
        [DataMember(Name = "plannedEndDateTime", EmitDefaultValue = false)]
        public DateTime PlannedEndDateTime { get; set; }

        /// <summary>
        /// Gets or sets the tolerance for a delay in minutes.
        /// </summary>
        /// <value>Gets or sets the tolerance for a delay in minutes.</value>
        [DataMember(Name = "toleranceMinutes", EmitDefaultValue = false)]
        public int ToleranceMinutes { get; set; }

        /// <summary>
        /// Gets or sets the date and time of the last calculation.
        /// </summary>
        /// <value>Gets or sets the date and time of the last calculation.</value>
        [DataMember(Name = "lastCalculation", EmitDefaultValue = false)]
        public DateTime LastCalculation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EstimatedTimeOfArrivalResponse {\n");
            sb.Append("  TourId: ").Append(TourId).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  StartActionId: ").Append(StartActionId).Append("\n");
            sb.Append("  GlobalStartActionId: ").Append(GlobalStartActionId).Append("\n");
            sb.Append("  EndActionId: ").Append(EndActionId).Append("\n");
            sb.Append("  GlobalEndActionId: ").Append(GlobalEndActionId).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  StartLongitude: ").Append(StartLongitude).Append("\n");
            sb.Append("  StartLatitude: ").Append(StartLatitude).Append("\n");
            sb.Append("  CurrentLongitude: ").Append(CurrentLongitude).Append("\n");
            sb.Append("  CurrentLatitude: ").Append(CurrentLatitude).Append("\n");
            sb.Append("  EndLongitude: ").Append(EndLongitude).Append("\n");
            sb.Append("  EndLatitude: ").Append(EndLatitude).Append("\n");
            sb.Append("  RemainingMinutes: ").Append(RemainingMinutes).Append("\n");
            sb.Append("  RemainingDistanceMeters: ").Append(RemainingDistanceMeters).Append("\n");
            sb.Append("  RemainingTimePercent: ").Append(RemainingTimePercent).Append("\n");
            sb.Append("  RemainingDistancePercent: ").Append(RemainingDistancePercent).Append("\n");
            sb.Append("  CalculatedEndDateTime: ").Append(CalculatedEndDateTime).Append("\n");
            sb.Append("  PlannedEndDateTime: ").Append(PlannedEndDateTime).Append("\n");
            sb.Append("  ToleranceMinutes: ").Append(ToleranceMinutes).Append("\n");
            sb.Append("  LastCalculation: ").Append(LastCalculation).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EstimatedTimeOfArrivalResponse);
        }

        /// <summary>
        /// Returns true if EstimatedTimeOfArrivalResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EstimatedTimeOfArrivalResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EstimatedTimeOfArrivalResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TourId == input.TourId ||
                    (this.TourId != null &&
                    this.TourId.Equals(input.TourId))
                ) && 
                (
                    this.ResourceId == input.ResourceId ||
                    (this.ResourceId != null &&
                    this.ResourceId.Equals(input.ResourceId))
                ) && 
                (
                    this.StartActionId == input.StartActionId ||
                    (this.StartActionId != null &&
                    this.StartActionId.Equals(input.StartActionId))
                ) && 
                (
                    this.GlobalStartActionId == input.GlobalStartActionId ||
                    (this.GlobalStartActionId != null &&
                    this.GlobalStartActionId.Equals(input.GlobalStartActionId))
                ) && 
                (
                    this.EndActionId == input.EndActionId ||
                    (this.EndActionId != null &&
                    this.EndActionId.Equals(input.EndActionId))
                ) && 
                (
                    this.GlobalEndActionId == input.GlobalEndActionId ||
                    (this.GlobalEndActionId != null &&
                    this.GlobalEndActionId.Equals(input.GlobalEndActionId))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.StartLongitude == input.StartLongitude ||
                    this.StartLongitude.Equals(input.StartLongitude)
                ) && 
                (
                    this.StartLatitude == input.StartLatitude ||
                    this.StartLatitude.Equals(input.StartLatitude)
                ) && 
                (
                    this.CurrentLongitude == input.CurrentLongitude ||
                    this.CurrentLongitude.Equals(input.CurrentLongitude)
                ) && 
                (
                    this.CurrentLatitude == input.CurrentLatitude ||
                    this.CurrentLatitude.Equals(input.CurrentLatitude)
                ) && 
                (
                    this.EndLongitude == input.EndLongitude ||
                    this.EndLongitude.Equals(input.EndLongitude)
                ) && 
                (
                    this.EndLatitude == input.EndLatitude ||
                    this.EndLatitude.Equals(input.EndLatitude)
                ) && 
                (
                    this.RemainingMinutes == input.RemainingMinutes ||
                    this.RemainingMinutes.Equals(input.RemainingMinutes)
                ) && 
                (
                    this.RemainingDistanceMeters == input.RemainingDistanceMeters ||
                    this.RemainingDistanceMeters.Equals(input.RemainingDistanceMeters)
                ) && 
                (
                    this.RemainingTimePercent == input.RemainingTimePercent ||
                    this.RemainingTimePercent.Equals(input.RemainingTimePercent)
                ) && 
                (
                    this.RemainingDistancePercent == input.RemainingDistancePercent ||
                    this.RemainingDistancePercent.Equals(input.RemainingDistancePercent)
                ) && 
                (
                    this.CalculatedEndDateTime == input.CalculatedEndDateTime ||
                    (this.CalculatedEndDateTime != null &&
                    this.CalculatedEndDateTime.Equals(input.CalculatedEndDateTime))
                ) && 
                (
                    this.PlannedEndDateTime == input.PlannedEndDateTime ||
                    (this.PlannedEndDateTime != null &&
                    this.PlannedEndDateTime.Equals(input.PlannedEndDateTime))
                ) && 
                (
                    this.ToleranceMinutes == input.ToleranceMinutes ||
                    this.ToleranceMinutes.Equals(input.ToleranceMinutes)
                ) && 
                (
                    this.LastCalculation == input.LastCalculation ||
                    (this.LastCalculation != null &&
                    this.LastCalculation.Equals(input.LastCalculation))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TourId != null)
                {
                    hashCode = (hashCode * 59) + this.TourId.GetHashCode();
                }
                if (this.ResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceId.GetHashCode();
                }
                if (this.StartActionId != null)
                {
                    hashCode = (hashCode * 59) + this.StartActionId.GetHashCode();
                }
                if (this.GlobalStartActionId != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalStartActionId.GetHashCode();
                }
                if (this.EndActionId != null)
                {
                    hashCode = (hashCode * 59) + this.EndActionId.GetHashCode();
                }
                if (this.GlobalEndActionId != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalEndActionId.GetHashCode();
                }
                if (this.StartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartLongitude.GetHashCode();
                hashCode = (hashCode * 59) + this.StartLatitude.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentLongitude.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentLatitude.GetHashCode();
                hashCode = (hashCode * 59) + this.EndLongitude.GetHashCode();
                hashCode = (hashCode * 59) + this.EndLatitude.GetHashCode();
                hashCode = (hashCode * 59) + this.RemainingMinutes.GetHashCode();
                hashCode = (hashCode * 59) + this.RemainingDistanceMeters.GetHashCode();
                hashCode = (hashCode * 59) + this.RemainingTimePercent.GetHashCode();
                hashCode = (hashCode * 59) + this.RemainingDistancePercent.GetHashCode();
                if (this.CalculatedEndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedEndDateTime.GetHashCode();
                }
                if (this.PlannedEndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.PlannedEndDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ToleranceMinutes.GetHashCode();
                if (this.LastCalculation != null)
                {
                    hashCode = (hashCode * 59) + this.LastCalculation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
