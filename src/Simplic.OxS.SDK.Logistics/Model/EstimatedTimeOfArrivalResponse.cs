// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// EstimatedTimeOfArrivalResponse
    /// </summary>
    public partial class EstimatedTimeOfArrivalResponse : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public EstimatedTimeOfArrivalResponse()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EstimatedTimeOfArrivalResponse" /> class.
        /// </summary>
        /// <param name="calculatedEndDateTime">Gets or sets the calculated end date time.</param>
        /// <param name="currentLatitude">Gets or sets the latitude of the current position of the resource.</param>
        /// <param name="currentLongitude">Gets or sets the longitude of the current position of the resource.</param>
        /// <param name="endActionId">Gets er sets the id of the action that ends the eta.  &lt;br&gt;  When the end action id is null the tour end will be the end of the eta.  </param>
        /// <param name="endLatitude">Gets or sets the latitude of the end of the eta.</param>
        /// <param name="endLongitude">Gets or sets the longitude of the end of th eta.</param>
        /// <param name="globalEndActionId">Gets or sets the global id of the end action.</param>
        /// <param name="globalStartActionId">Gets or sets the global id of the start action.</param>
        /// <param name="lastCalculation">Gets or sets the date and time of the last calculation.</param>
        /// <param name="plannedEndDateTime">Gets or sets the planned end date and time.   &lt;br&gt;The State will be calculated by comparing the calculated end date time with the planned and the tolerance.</param>
        /// <param name="remainingDistanceMeters">Gets or sets the remaining distance in meters.</param>
        /// <param name="remainingDistancePercent">Gets or sets the percentage of the distance remaining.</param>
        /// <param name="remainingMinutes">Gets or sets the remaining time in minutes.</param>
        /// <param name="remainingTimePercent">Gets or sets the percentage of the time remaining.</param>
        /// <param name="resourceId">Gets or sets the id of the main resource of the tour.</param>
        /// <param name="startActionId">Gets or sets the id of the action that starts the eta.  &lt;br&gt;  When the start action id is null the tour start will be the start of the eta.  </param>
        /// <param name="startDateTime">Gets or sets the date and time when the eta will start.</param>
        /// <param name="startLatitude">Gets or sets the latitude of the start of the eta.</param>
        /// <param name="startLongitude">Gets or sets the longitude of the start of the eta.</param>
        /// <param name="state">state</param>
        /// <param name="toleranceMinutes">Gets or sets the tolerance for a delay in minutes.</param>
        /// <param name="tourId">Gets or sets the tour id.</param>
        //[JsonConstructor]
        public EstimatedTimeOfArrivalResponse(Option<DateTime> calculatedEndDateTime = default, Option<double> currentLatitude = default, Option<double> currentLongitude = default, Option<Guid> endActionId = default, Option<double> endLatitude = default, Option<double> endLongitude = default, Option<Guid> globalEndActionId = default, Option<Guid> globalStartActionId = default, Option<DateTime> lastCalculation = default, Option<DateTime> plannedEndDateTime = default, Option<int> remainingDistanceMeters = default, Option<int> remainingDistancePercent = default, Option<int> remainingMinutes = default, Option<int> remainingTimePercent = default, Option<Guid> resourceId = default, Option<Guid> startActionId = default, Option<DateTime> startDateTime = default, Option<double> startLatitude = default, Option<double> startLongitude = default, Option<ETAState> state = default, Option<int> toleranceMinutes = default, Option<Guid> tourId = default)
        {
            CalculatedEndDateTimeOption = calculatedEndDateTime;
            CurrentLatitudeOption = currentLatitude;
            CurrentLongitudeOption = currentLongitude;
            EndActionIdOption = endActionId;
            EndLatitudeOption = endLatitude;
            EndLongitudeOption = endLongitude;
            GlobalEndActionIdOption = globalEndActionId;
            GlobalStartActionIdOption = globalStartActionId;
            LastCalculationOption = lastCalculation;
            PlannedEndDateTimeOption = plannedEndDateTime;
            RemainingDistanceMetersOption = remainingDistanceMeters;
            RemainingDistancePercentOption = remainingDistancePercent;
            RemainingMinutesOption = remainingMinutes;
            RemainingTimePercentOption = remainingTimePercent;
            ResourceIdOption = resourceId;
            StartActionIdOption = startActionId;
            StartDateTimeOption = startDateTime;
            StartLatitudeOption = startLatitude;
            StartLongitudeOption = startLongitude;
            StateOption = state;
            ToleranceMinutesOption = toleranceMinutes;
            TourIdOption = tourId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ETAState>))]
        public Option<ETAState> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public ETAState? State { get { return this.StateOption; } set { this.StateOption = new Option<ETAState>(value); } }

        /// <summary>
        /// Used to track the state of CalculatedEndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CalculatedEndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the calculated end date time.
        /// </summary>
        /// <value>Gets or sets the calculated end date time.</value>
        [JsonPropertyName("calculatedEndDateTime")]
        public DateTime? CalculatedEndDateTime { get { return this. CalculatedEndDateTimeOption; } set { this.CalculatedEndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CurrentLatitude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> CurrentLatitudeOption { get; private set; }

        /// <summary>
        /// Gets or sets the latitude of the current position of the resource.
        /// </summary>
        /// <value>Gets or sets the latitude of the current position of the resource.</value>
        [JsonPropertyName("currentLatitude")]
        public double? CurrentLatitude { get { return this. CurrentLatitudeOption; } set { this.CurrentLatitudeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of CurrentLongitude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> CurrentLongitudeOption { get; private set; }

        /// <summary>
        /// Gets or sets the longitude of the current position of the resource.
        /// </summary>
        /// <value>Gets or sets the longitude of the current position of the resource.</value>
        [JsonPropertyName("currentLongitude")]
        public double? CurrentLongitude { get { return this. CurrentLongitudeOption; } set { this.CurrentLongitudeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of EndActionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> EndActionIdOption { get; private set; }

        /// <summary>
        /// Gets er sets the id of the action that ends the eta.  &lt;br&gt;  When the end action id is null the tour end will be the end of the eta.  
        /// </summary>
        /// <value>Gets er sets the id of the action that ends the eta.  &lt;br&gt;  When the end action id is null the tour end will be the end of the eta.  </value>
        [JsonPropertyName("endActionId")]
        public Guid? EndActionId { get { return this. EndActionIdOption; } set { this.EndActionIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of EndLatitude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> EndLatitudeOption { get; private set; }

        /// <summary>
        /// Gets or sets the latitude of the end of the eta.
        /// </summary>
        /// <value>Gets or sets the latitude of the end of the eta.</value>
        [JsonPropertyName("endLatitude")]
        public double? EndLatitude { get { return this. EndLatitudeOption; } set { this.EndLatitudeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of EndLongitude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> EndLongitudeOption { get; private set; }

        /// <summary>
        /// Gets or sets the longitude of the end of th eta.
        /// </summary>
        /// <value>Gets or sets the longitude of the end of th eta.</value>
        [JsonPropertyName("endLongitude")]
        public double? EndLongitude { get { return this. EndLongitudeOption; } set { this.EndLongitudeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of GlobalEndActionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> GlobalEndActionIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the global id of the end action.
        /// </summary>
        /// <value>Gets or sets the global id of the end action.</value>
        [JsonPropertyName("globalEndActionId")]
        public Guid? GlobalEndActionId { get { return this. GlobalEndActionIdOption; } set { this.GlobalEndActionIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of GlobalStartActionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> GlobalStartActionIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the global id of the start action.
        /// </summary>
        /// <value>Gets or sets the global id of the start action.</value>
        [JsonPropertyName("globalStartActionId")]
        public Guid? GlobalStartActionId { get { return this. GlobalStartActionIdOption; } set { this.GlobalStartActionIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of LastCalculation
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> LastCalculationOption { get; private set; }

        /// <summary>
        /// Gets or sets the date and time of the last calculation.
        /// </summary>
        /// <value>Gets or sets the date and time of the last calculation.</value>
        [JsonPropertyName("lastCalculation")]
        public DateTime? LastCalculation { get { return this. LastCalculationOption; } set { this.LastCalculationOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of PlannedEndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> PlannedEndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the planned end date and time.   &lt;br&gt;The State will be calculated by comparing the calculated end date time with the planned and the tolerance.
        /// </summary>
        /// <value>Gets or sets the planned end date and time.   &lt;br&gt;The State will be calculated by comparing the calculated end date time with the planned and the tolerance.</value>
        [JsonPropertyName("plannedEndDateTime")]
        public DateTime? PlannedEndDateTime { get { return this. PlannedEndDateTimeOption; } set { this.PlannedEndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of RemainingDistanceMeters
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> RemainingDistanceMetersOption { get; private set; }

        /// <summary>
        /// Gets or sets the remaining distance in meters.
        /// </summary>
        /// <value>Gets or sets the remaining distance in meters.</value>
        [JsonPropertyName("remainingDistanceMeters")]
        public int? RemainingDistanceMeters { get { return this. RemainingDistanceMetersOption; } set { this.RemainingDistanceMetersOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of RemainingDistancePercent
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> RemainingDistancePercentOption { get; private set; }

        /// <summary>
        /// Gets or sets the percentage of the distance remaining.
        /// </summary>
        /// <value>Gets or sets the percentage of the distance remaining.</value>
        [JsonPropertyName("remainingDistancePercent")]
        public int? RemainingDistancePercent { get { return this. RemainingDistancePercentOption; } set { this.RemainingDistancePercentOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of RemainingMinutes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> RemainingMinutesOption { get; private set; }

        /// <summary>
        /// Gets or sets the remaining time in minutes.
        /// </summary>
        /// <value>Gets or sets the remaining time in minutes.</value>
        [JsonPropertyName("remainingMinutes")]
        public int? RemainingMinutes { get { return this. RemainingMinutesOption; } set { this.RemainingMinutesOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of RemainingTimePercent
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> RemainingTimePercentOption { get; private set; }

        /// <summary>
        /// Gets or sets the percentage of the time remaining.
        /// </summary>
        /// <value>Gets or sets the percentage of the time remaining.</value>
        [JsonPropertyName("remainingTimePercent")]
        public int? RemainingTimePercent { get { return this. RemainingTimePercentOption; } set { this.RemainingTimePercentOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of ResourceId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ResourceIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the main resource of the tour.
        /// </summary>
        /// <value>Gets or sets the id of the main resource of the tour.</value>
        [JsonPropertyName("resourceId")]
        public Guid? ResourceId { get { return this. ResourceIdOption; } set { this.ResourceIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of StartActionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> StartActionIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the action that starts the eta.  &lt;br&gt;  When the start action id is null the tour start will be the start of the eta.  
        /// </summary>
        /// <value>Gets or sets the id of the action that starts the eta.  &lt;br&gt;  When the start action id is null the tour start will be the start of the eta.  </value>
        [JsonPropertyName("startActionId")]
        public Guid? StartActionId { get { return this. StartActionIdOption; } set { this.StartActionIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of StartDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the date and time when the eta will start.
        /// </summary>
        /// <value>Gets or sets the date and time when the eta will start.</value>
        [JsonPropertyName("startDateTime")]
        public DateTime? StartDateTime { get { return this. StartDateTimeOption; } set { this.StartDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of StartLatitude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> StartLatitudeOption { get; private set; }

        /// <summary>
        /// Gets or sets the latitude of the start of the eta.
        /// </summary>
        /// <value>Gets or sets the latitude of the start of the eta.</value>
        [JsonPropertyName("startLatitude")]
        public double? StartLatitude { get { return this. StartLatitudeOption; } set { this.StartLatitudeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of StartLongitude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> StartLongitudeOption { get; private set; }

        /// <summary>
        /// Gets or sets the longitude of the start of the eta.
        /// </summary>
        /// <value>Gets or sets the longitude of the start of the eta.</value>
        [JsonPropertyName("startLongitude")]
        public double? StartLongitude { get { return this. StartLongitudeOption; } set { this.StartLongitudeOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of ToleranceMinutes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> ToleranceMinutesOption { get; private set; }

        /// <summary>
        /// Gets or sets the tolerance for a delay in minutes.
        /// </summary>
        /// <value>Gets or sets the tolerance for a delay in minutes.</value>
        [JsonPropertyName("toleranceMinutes")]
        public int? ToleranceMinutes { get { return this. ToleranceMinutesOption; } set { this.ToleranceMinutesOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of TourId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TourIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the tour id.
        /// </summary>
        /// <value>Gets or sets the tour id.</value>
        [JsonPropertyName("tourId")]
        public Guid? TourId { get { return this. TourIdOption; } set { this.TourIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EstimatedTimeOfArrivalResponse {\n");
            sb.Append("  CalculatedEndDateTime: ").Append(CalculatedEndDateTime).Append("\n");
            sb.Append("  CurrentLatitude: ").Append(CurrentLatitude).Append("\n");
            sb.Append("  CurrentLongitude: ").Append(CurrentLongitude).Append("\n");
            sb.Append("  EndActionId: ").Append(EndActionId).Append("\n");
            sb.Append("  EndLatitude: ").Append(EndLatitude).Append("\n");
            sb.Append("  EndLongitude: ").Append(EndLongitude).Append("\n");
            sb.Append("  GlobalEndActionId: ").Append(GlobalEndActionId).Append("\n");
            sb.Append("  GlobalStartActionId: ").Append(GlobalStartActionId).Append("\n");
            sb.Append("  LastCalculation: ").Append(LastCalculation).Append("\n");
            sb.Append("  PlannedEndDateTime: ").Append(PlannedEndDateTime).Append("\n");
            sb.Append("  RemainingDistanceMeters: ").Append(RemainingDistanceMeters).Append("\n");
            sb.Append("  RemainingDistancePercent: ").Append(RemainingDistancePercent).Append("\n");
            sb.Append("  RemainingMinutes: ").Append(RemainingMinutes).Append("\n");
            sb.Append("  RemainingTimePercent: ").Append(RemainingTimePercent).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  StartActionId: ").Append(StartActionId).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  StartLatitude: ").Append(StartLatitude).Append("\n");
            sb.Append("  StartLongitude: ").Append(StartLongitude).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ToleranceMinutes: ").Append(ToleranceMinutes).Append("\n");
            sb.Append("  TourId: ").Append(TourId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EstimatedTimeOfArrivalResponse" />
    /// </summary>
    public class EstimatedTimeOfArrivalResponseJsonConverter : JsonConverter<EstimatedTimeOfArrivalResponse>
    {
        /// <summary>
        /// The format to use to serialize CalculatedEndDateTime
        /// </summary>
        public static string CalculatedEndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastCalculation
        /// </summary>
        public static string LastCalculationFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PlannedEndDateTime
        /// </summary>
        public static string PlannedEndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDateTime
        /// </summary>
        public static string StartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EstimatedTimeOfArrivalResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EstimatedTimeOfArrivalResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> calculatedEndDateTime = default;
            Option<double> currentLatitude = default;
            Option<double> currentLongitude = default;
            Option<Guid> endActionId = default;
            Option<double> endLatitude = default;
            Option<double> endLongitude = default;
            Option<Guid> globalEndActionId = default;
            Option<Guid> globalStartActionId = default;
            Option<DateTime> lastCalculation = default;
            Option<DateTime> plannedEndDateTime = default;
            Option<int> remainingDistanceMeters = default;
            Option<int> remainingDistancePercent = default;
            Option<int> remainingMinutes = default;
            Option<int> remainingTimePercent = default;
            Option<Guid> resourceId = default;
            Option<Guid> startActionId = default;
            Option<DateTime> startDateTime = default;
            Option<double> startLatitude = default;
            Option<double> startLongitude = default;
            Option<ETAState> state = default;
            Option<int> toleranceMinutes = default;
            Option<Guid> tourId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "calculatedEndDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                calculatedEndDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "currentLatitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currentLatitude = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "currentLongitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currentLongitude = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "endActionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endActionId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "endLatitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endLatitude = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "endLongitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endLongitude = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "globalEndActionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                globalEndActionId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "globalStartActionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                globalStartActionId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "lastCalculation":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastCalculation = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "plannedEndDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                plannedEndDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "remainingDistanceMeters":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                remainingDistanceMeters = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "remainingDistancePercent":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                remainingDistancePercent = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "remainingMinutes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                remainingMinutes = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "remainingTimePercent":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                remainingTimePercent = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "resourceId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resourceId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "startActionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startActionId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "startDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "startLatitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startLatitude = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "startLongitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startLongitude = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "state":
                            string? stateRawValue = utf8JsonReader.GetString();
                            if (stateRawValue != null)
                                state = new Option<ETAState>(ETAStateValueConverter.FromStringOrDefault(stateRawValue));
                            break;
                        case "toleranceMinutes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                toleranceMinutes = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "tourId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tourId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (calculatedEndDateTime.IsSet && calculatedEndDateTime.Value == null)
                throw new ArgumentNullException(nameof(calculatedEndDateTime), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (currentLatitude.IsSet && currentLatitude.Value == null)
                throw new ArgumentNullException(nameof(currentLatitude), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (currentLongitude.IsSet && currentLongitude.Value == null)
                throw new ArgumentNullException(nameof(currentLongitude), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (endLatitude.IsSet && endLatitude.Value == null)
                throw new ArgumentNullException(nameof(endLatitude), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (endLongitude.IsSet && endLongitude.Value == null)
                throw new ArgumentNullException(nameof(endLongitude), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (lastCalculation.IsSet && lastCalculation.Value == null)
                throw new ArgumentNullException(nameof(lastCalculation), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (plannedEndDateTime.IsSet && plannedEndDateTime.Value == null)
                throw new ArgumentNullException(nameof(plannedEndDateTime), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (remainingDistanceMeters.IsSet && remainingDistanceMeters.Value == null)
                throw new ArgumentNullException(nameof(remainingDistanceMeters), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (remainingDistancePercent.IsSet && remainingDistancePercent.Value == null)
                throw new ArgumentNullException(nameof(remainingDistancePercent), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (remainingMinutes.IsSet && remainingMinutes.Value == null)
                throw new ArgumentNullException(nameof(remainingMinutes), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (remainingTimePercent.IsSet && remainingTimePercent.Value == null)
                throw new ArgumentNullException(nameof(remainingTimePercent), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (resourceId.IsSet && resourceId.Value == null)
                throw new ArgumentNullException(nameof(resourceId), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (startLatitude.IsSet && startLatitude.Value == null)
                throw new ArgumentNullException(nameof(startLatitude), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (startLongitude.IsSet && startLongitude.Value == null)
                throw new ArgumentNullException(nameof(startLongitude), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (toleranceMinutes.IsSet && toleranceMinutes.Value == null)
                throw new ArgumentNullException(nameof(toleranceMinutes), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            if (tourId.IsSet && tourId.Value == null)
                throw new ArgumentNullException(nameof(tourId), "Property is not nullable for class EstimatedTimeOfArrivalResponse.");

            //2return new EstimatedTimeOfArrivalResponse(calculatedEndDateTime, currentLatitude, currentLongitude, endActionId, endLatitude, endLongitude, globalEndActionId, globalStartActionId, lastCalculation, plannedEndDateTime, remainingDistanceMeters, remainingDistancePercent, remainingMinutes, remainingTimePercent, resourceId, startActionId, startDateTime, startLatitude, startLongitude, state, toleranceMinutes, tourId);
            return new EstimatedTimeOfArrivalResponse(calculatedEndDateTime, currentLatitude, currentLongitude, endActionId, endLatitude, endLongitude, globalEndActionId, globalStartActionId, lastCalculation, plannedEndDateTime, remainingDistanceMeters, remainingDistancePercent, remainingMinutes, remainingTimePercent, resourceId, startActionId, startDateTime, startLatitude, startLongitude, state, toleranceMinutes, tourId);
        }

        /// <summary>
        /// Serializes a <see cref="EstimatedTimeOfArrivalResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="estimatedTimeOfArrivalResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EstimatedTimeOfArrivalResponse estimatedTimeOfArrivalResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, estimatedTimeOfArrivalResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EstimatedTimeOfArrivalResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="estimatedTimeOfArrivalResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, EstimatedTimeOfArrivalResponse estimatedTimeOfArrivalResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (estimatedTimeOfArrivalResponse.CalculatedEndDateTimeOption.IsSet)
                writer.WriteString("calculatedEndDateTime", estimatedTimeOfArrivalResponse.CalculatedEndDateTimeOption!.Value.ToString(CalculatedEndDateTimeFormat));

            if (estimatedTimeOfArrivalResponse.CurrentLatitudeOption.IsSet)
                writer.WriteNumber("currentLatitude", estimatedTimeOfArrivalResponse.CurrentLatitudeOption!.Value);

            if (estimatedTimeOfArrivalResponse.CurrentLongitudeOption.IsSet)
                writer.WriteNumber("currentLongitude", estimatedTimeOfArrivalResponse.CurrentLongitudeOption!.Value);

            if (estimatedTimeOfArrivalResponse.EndActionIdOption.IsSet)
                if (estimatedTimeOfArrivalResponse.EndActionIdOption.Value != null)
                {
                    writer.WriteString("endActionId", estimatedTimeOfArrivalResponse.EndActionIdOption!.Value);
                    //var __value = estimatedTimeOfArrivalResponse.EndActionIdOption.Value;
                    //writer.WriteString("endActionId", __value);
                }
                else
                    writer.WriteNull("endActionId");

            if (estimatedTimeOfArrivalResponse.EndLatitudeOption.IsSet)
                writer.WriteNumber("endLatitude", estimatedTimeOfArrivalResponse.EndLatitudeOption!.Value);

            if (estimatedTimeOfArrivalResponse.EndLongitudeOption.IsSet)
                writer.WriteNumber("endLongitude", estimatedTimeOfArrivalResponse.EndLongitudeOption!.Value);

            if (estimatedTimeOfArrivalResponse.GlobalEndActionIdOption.IsSet)
                if (estimatedTimeOfArrivalResponse.GlobalEndActionIdOption.Value != null)
                {
                    writer.WriteString("globalEndActionId", estimatedTimeOfArrivalResponse.GlobalEndActionIdOption!.Value);
                    //var __value = estimatedTimeOfArrivalResponse.GlobalEndActionIdOption.Value;
                    //writer.WriteString("globalEndActionId", __value);
                }
                else
                    writer.WriteNull("globalEndActionId");

            if (estimatedTimeOfArrivalResponse.GlobalStartActionIdOption.IsSet)
                if (estimatedTimeOfArrivalResponse.GlobalStartActionIdOption.Value != null)
                {
                    writer.WriteString("globalStartActionId", estimatedTimeOfArrivalResponse.GlobalStartActionIdOption!.Value);
                    //var __value = estimatedTimeOfArrivalResponse.GlobalStartActionIdOption.Value;
                    //writer.WriteString("globalStartActionId", __value);
                }
                else
                    writer.WriteNull("globalStartActionId");

            if (estimatedTimeOfArrivalResponse.LastCalculationOption.IsSet)
                writer.WriteString("lastCalculation", estimatedTimeOfArrivalResponse.LastCalculationOption!.Value.ToString(LastCalculationFormat));

            if (estimatedTimeOfArrivalResponse.PlannedEndDateTimeOption.IsSet)
                writer.WriteString("plannedEndDateTime", estimatedTimeOfArrivalResponse.PlannedEndDateTimeOption!.Value.ToString(PlannedEndDateTimeFormat));

            if (estimatedTimeOfArrivalResponse.RemainingDistanceMetersOption.IsSet)
                writer.WriteNumber("remainingDistanceMeters", estimatedTimeOfArrivalResponse.RemainingDistanceMetersOption!.Value);

            if (estimatedTimeOfArrivalResponse.RemainingDistancePercentOption.IsSet)
                writer.WriteNumber("remainingDistancePercent", estimatedTimeOfArrivalResponse.RemainingDistancePercentOption!.Value);

            if (estimatedTimeOfArrivalResponse.RemainingMinutesOption.IsSet)
                writer.WriteNumber("remainingMinutes", estimatedTimeOfArrivalResponse.RemainingMinutesOption!.Value);

            if (estimatedTimeOfArrivalResponse.RemainingTimePercentOption.IsSet)
                writer.WriteNumber("remainingTimePercent", estimatedTimeOfArrivalResponse.RemainingTimePercentOption!.Value);

            if (estimatedTimeOfArrivalResponse.ResourceIdOption.IsSet)
                writer.WriteString("resourceId", estimatedTimeOfArrivalResponse.ResourceIdOption!.Value);

            if (estimatedTimeOfArrivalResponse.StartActionIdOption.IsSet)
                if (estimatedTimeOfArrivalResponse.StartActionIdOption.Value != null)
                {
                    writer.WriteString("startActionId", estimatedTimeOfArrivalResponse.StartActionIdOption!.Value);
                    //var __value = estimatedTimeOfArrivalResponse.StartActionIdOption.Value;
                    //writer.WriteString("startActionId", __value);
                }
                else
                    writer.WriteNull("startActionId");

            if (estimatedTimeOfArrivalResponse.StartDateTimeOption.IsSet)
                if (estimatedTimeOfArrivalResponse.StartDateTimeOption.Value != null)
                {
                    writer.WriteString("startDateTime", estimatedTimeOfArrivalResponse.StartDateTimeOption!.Value.ToString(StartDateTimeFormat));
                    //var __value = estimatedTimeOfArrivalResponse.StartDateTimeOption.Value;
                    //writer.WriteString("startDateTime", __value);
                }
                else
                    writer.WriteNull("startDateTime");

            if (estimatedTimeOfArrivalResponse.StartLatitudeOption.IsSet)
                writer.WriteNumber("startLatitude", estimatedTimeOfArrivalResponse.StartLatitudeOption!.Value);

            if (estimatedTimeOfArrivalResponse.StartLongitudeOption.IsSet)
                writer.WriteNumber("startLongitude", estimatedTimeOfArrivalResponse.StartLongitudeOption!.Value);

            if (estimatedTimeOfArrivalResponse.StateOption.IsSet)
            {
                var stateRawValue = ETAStateValueConverter.ToJsonValue(estimatedTimeOfArrivalResponse.State!.Value);
                writer.WriteNumber("state", stateRawValue);
            }
            if (estimatedTimeOfArrivalResponse.ToleranceMinutesOption.IsSet)
                writer.WriteNumber("toleranceMinutes", estimatedTimeOfArrivalResponse.ToleranceMinutesOption!.Value);

            if (estimatedTimeOfArrivalResponse.TourIdOption.IsSet)
                writer.WriteString("tourId", estimatedTimeOfArrivalResponse.TourIdOption!.Value);
        }
    }
}
