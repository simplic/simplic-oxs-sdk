// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Class to represent a transit.  &lt;br&gt;  A transit describes a movement of the primary resource from one place to another during a tour.    Transits will be automaically generated and updated from a service.
    /// </summary>
    public partial class TransitModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TransitModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransitModel" /> class.
        /// </summary>
        /// <param name="distance">Gets or sets the distance in meter</param>
        /// <param name="endActionId">Gets or sets the id of the end action.  &lt;br&gt;  When the guid is null the transit will end at the end of the tour.  </param>
        /// <param name="endAddress">endAddress</param>
        /// <param name="endDateTime">Gets or sets the end date time off the transit.</param>
        /// <param name="globalEndActionId">Gets or sets the global id of the end action.  &lt;br&gt;  Will contain the tour id in case of the end of the tour.  </param>
        /// <param name="globalStartActionId">Gets or sets the global id of the start action.  &lt;br&gt;  Will contain the tour id in case of the start of the tour.  </param>
        /// <param name="id">Gets or sets the id.</param>
        /// <param name="startActionId">Gets or sets the id of the start action.  &lt;br&gt;  When the guid is null the transit will start at the start of the tour.  </param>
        /// <param name="startAddress">startAddress</param>
        /// <param name="startDateTime">Gets or sets the start date time of the transit.</param>
        /// <param name="tollDistance">Gets or sets the toll distance in meter</param>
        //[JsonConstructor]
        public TransitModel(Option<int> distance = default, Option<Guid> endActionId = default, Option<AddressModel> endAddress = default, Option<DateTime> endDateTime = default, Option<Guid> globalEndActionId = default, Option<Guid> globalStartActionId = default, Option<Guid> id = default, Option<Guid> startActionId = default, Option<AddressModel> startAddress = default, Option<DateTime> startDateTime = default, Option<int> tollDistance = default)
        {
            DistanceOption = distance;
            EndActionIdOption = endActionId;
            EndAddressOption = endAddress;
            EndDateTimeOption = endDateTime;
            GlobalEndActionIdOption = globalEndActionId;
            GlobalStartActionIdOption = globalStartActionId;
            IdOption = id;
            StartActionIdOption = startActionId;
            StartAddressOption = startAddress;
            StartDateTimeOption = startDateTime;
            TollDistanceOption = tollDistance;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Distance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> DistanceOption { get; private set; }

        /// <summary>
        /// Gets or sets the distance in meter
        /// </summary>
        /// <value>Gets or sets the distance in meter</value>
        [JsonPropertyName("distance")]
        public int? Distance { get { return this. DistanceOption; } set { this.DistanceOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of EndActionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> EndActionIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the end action.  &lt;br&gt;  When the guid is null the transit will end at the end of the tour.  
        /// </summary>
        /// <value>Gets or sets the id of the end action.  &lt;br&gt;  When the guid is null the transit will end at the end of the tour.  </value>
        [JsonPropertyName("endActionId")]
        public Guid? EndActionId { get { return this. EndActionIdOption; } set { this.EndActionIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of EndAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> EndAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndAddress
        /// </summary>
        [JsonPropertyName("endAddress")]
        public AddressModel? EndAddress { get { return this. EndAddressOption; } set { this.EndAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of EndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the end date time off the transit.
        /// </summary>
        /// <value>Gets or sets the end date time off the transit.</value>
        [JsonPropertyName("endDateTime")]
        public DateTime? EndDateTime { get { return this. EndDateTimeOption; } set { this.EndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of GlobalEndActionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> GlobalEndActionIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the global id of the end action.  &lt;br&gt;  Will contain the tour id in case of the end of the tour.  
        /// </summary>
        /// <value>Gets or sets the global id of the end action.  &lt;br&gt;  Will contain the tour id in case of the end of the tour.  </value>
        [JsonPropertyName("globalEndActionId")]
        public Guid? GlobalEndActionId { get { return this. GlobalEndActionIdOption; } set { this.GlobalEndActionIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of GlobalStartActionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> GlobalStartActionIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the global id of the start action.  &lt;br&gt;  Will contain the tour id in case of the start of the tour.  
        /// </summary>
        /// <value>Gets or sets the global id of the start action.  &lt;br&gt;  Will contain the tour id in case of the start of the tour.  </value>
        [JsonPropertyName("globalStartActionId")]
        public Guid? GlobalStartActionId { get { return this. GlobalStartActionIdOption; } set { this.GlobalStartActionIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of StartActionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> StartActionIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the start action.  &lt;br&gt;  When the guid is null the transit will start at the start of the tour.  
        /// </summary>
        /// <value>Gets or sets the id of the start action.  &lt;br&gt;  When the guid is null the transit will start at the start of the tour.  </value>
        [JsonPropertyName("startActionId")]
        public Guid? StartActionId { get { return this. StartActionIdOption; } set { this.StartActionIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of StartAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> StartAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartAddress
        /// </summary>
        [JsonPropertyName("startAddress")]
        public AddressModel? StartAddress { get { return this. StartAddressOption; } set { this.StartAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of StartDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the start date time of the transit.
        /// </summary>
        /// <value>Gets or sets the start date time of the transit.</value>
        [JsonPropertyName("startDateTime")]
        public DateTime? StartDateTime { get { return this. StartDateTimeOption; } set { this.StartDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of TollDistance
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> TollDistanceOption { get; private set; }

        /// <summary>
        /// Gets or sets the toll distance in meter
        /// </summary>
        /// <value>Gets or sets the toll distance in meter</value>
        [JsonPropertyName("tollDistance")]
        public int? TollDistance { get { return this. TollDistanceOption; } set { this.TollDistanceOption = new Option<int>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransitModel {\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  EndActionId: ").Append(EndActionId).Append("\n");
            sb.Append("  EndAddress: ").Append(EndAddress).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  GlobalEndActionId: ").Append(GlobalEndActionId).Append("\n");
            sb.Append("  GlobalStartActionId: ").Append(GlobalStartActionId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartActionId: ").Append(StartActionId).Append("\n");
            sb.Append("  StartAddress: ").Append(StartAddress).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  TollDistance: ").Append(TollDistance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransitModel" />
    /// </summary>
    public class TransitModelJsonConverter : JsonConverter<TransitModel>
    {
        /// <summary>
        /// The format to use to serialize EndDateTime
        /// </summary>
        public static string EndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDateTime
        /// </summary>
        public static string StartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TransitModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransitModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int> distance = default;
            Option<Guid> endActionId = default;
            Option<AddressModel> endAddress = default;
            Option<DateTime> endDateTime = default;
            Option<Guid> globalEndActionId = default;
            Option<Guid> globalStartActionId = default;
            Option<Guid> id = default;
            Option<Guid> startActionId = default;
            Option<AddressModel> startAddress = default;
            Option<DateTime> startDateTime = default;
            Option<int> tollDistance = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "distance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                distance = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "endActionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endActionId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "endAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "globalEndActionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                globalEndActionId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "globalStartActionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                globalStartActionId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "startActionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startActionId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "startAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "startDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tollDistance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tollDistance = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (distance.IsSet && distance.Value == null)
                throw new ArgumentNullException(nameof(distance), "Property is not nullable for class TransitModel.");

            if (endAddress.IsSet && endAddress.Value == null)
                throw new ArgumentNullException(nameof(endAddress), "Property is not nullable for class TransitModel.");

            if (endDateTime.IsSet && endDateTime.Value == null)
                throw new ArgumentNullException(nameof(endDateTime), "Property is not nullable for class TransitModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TransitModel.");

            if (startAddress.IsSet && startAddress.Value == null)
                throw new ArgumentNullException(nameof(startAddress), "Property is not nullable for class TransitModel.");

            if (startDateTime.IsSet && startDateTime.Value == null)
                throw new ArgumentNullException(nameof(startDateTime), "Property is not nullable for class TransitModel.");

            if (tollDistance.IsSet && tollDistance.Value == null)
                throw new ArgumentNullException(nameof(tollDistance), "Property is not nullable for class TransitModel.");

            //2return new TransitModel(distance, endActionId, endAddress, endDateTime, globalEndActionId, globalStartActionId, id, startActionId, startAddress, startDateTime, tollDistance);
            return new TransitModel(distance, endActionId, endAddress, endDateTime, globalEndActionId, globalStartActionId, id, startActionId, startAddress, startDateTime, tollDistance);
        }

        /// <summary>
        /// Serializes a <see cref="TransitModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transitModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransitModel transitModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, transitModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransitModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transitModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TransitModel transitModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transitModel.EndAddressOption.IsSet && transitModel.EndAddress == null)
                throw new ArgumentNullException(nameof(transitModel.EndAddress), "Property is required for class TransitModel.");

            if (transitModel.StartAddressOption.IsSet && transitModel.StartAddress == null)
                throw new ArgumentNullException(nameof(transitModel.StartAddress), "Property is required for class TransitModel.");

            if (transitModel.DistanceOption.IsSet)
                writer.WriteNumber("distance", transitModel.DistanceOption!.Value);

            if (transitModel.EndActionIdOption.IsSet)
                if (transitModel.EndActionIdOption.Value != null)
                {
                    writer.WriteString("endActionId", transitModel.EndActionIdOption!.Value);
                    //var __value = transitModel.EndActionIdOption.Value;
                    //writer.WriteString("endActionId", __value);
                }
                else
                    writer.WriteNull("endActionId");

            if (transitModel.EndAddressOption.IsSet)
            {
                writer.WritePropertyName("endAddress");
                JsonSerializer.Serialize(writer, transitModel.EndAddress, jsonSerializerOptions);
            }
            if (transitModel.EndDateTimeOption.IsSet)
                writer.WriteString("endDateTime", transitModel.EndDateTimeOption!.Value.ToString(EndDateTimeFormat));

            if (transitModel.GlobalEndActionIdOption.IsSet)
                if (transitModel.GlobalEndActionIdOption.Value != null)
                {
                    writer.WriteString("globalEndActionId", transitModel.GlobalEndActionIdOption!.Value);
                    //var __value = transitModel.GlobalEndActionIdOption.Value;
                    //writer.WriteString("globalEndActionId", __value);
                }
                else
                    writer.WriteNull("globalEndActionId");

            if (transitModel.GlobalStartActionIdOption.IsSet)
                if (transitModel.GlobalStartActionIdOption.Value != null)
                {
                    writer.WriteString("globalStartActionId", transitModel.GlobalStartActionIdOption!.Value);
                    //var __value = transitModel.GlobalStartActionIdOption.Value;
                    //writer.WriteString("globalStartActionId", __value);
                }
                else
                    writer.WriteNull("globalStartActionId");

            if (transitModel.IdOption.IsSet)
                writer.WriteString("id", transitModel.IdOption!.Value);

            if (transitModel.StartActionIdOption.IsSet)
                if (transitModel.StartActionIdOption.Value != null)
                {
                    writer.WriteString("startActionId", transitModel.StartActionIdOption!.Value);
                    //var __value = transitModel.StartActionIdOption.Value;
                    //writer.WriteString("startActionId", __value);
                }
                else
                    writer.WriteNull("startActionId");

            if (transitModel.StartAddressOption.IsSet)
            {
                writer.WritePropertyName("startAddress");
                JsonSerializer.Serialize(writer, transitModel.StartAddress, jsonSerializerOptions);
            }
            if (transitModel.StartDateTimeOption.IsSet)
                writer.WriteString("startDateTime", transitModel.StartDateTimeOption!.Value.ToString(StartDateTimeFormat));

            if (transitModel.TollDistanceOption.IsSet)
                writer.WriteNumber("tollDistance", transitModel.TollDistanceOption!.Value);
        }
    }
}
