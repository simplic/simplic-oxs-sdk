// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model for attached entities.
    /// </summary>
    public partial class AttachedEntityModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public AttachedEntityModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachedEntityModel" /> class.
        /// </summary>
        /// <param name="attachingAction">attachingAction</param>
        /// <param name="detachingAction">detachingAction</param>
        /// <param name="entitiy">entitiy</param>
        /// <param name="id">Gets or sets the attachment.</param>
        //[JsonConstructor]
        public AttachedEntityModel(Option<TourActionModel> attachingAction = default, Option<TourActionModel> detachingAction = default, Option<TourEntityModel> entitiy = default, Option<Guid> id = default)
        {
            AttachingActionOption = attachingAction;
            DetachingActionOption = detachingAction;
            EntitiyOption = entitiy;
            IdOption = id;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AttachingAction
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TourActionModel>))]
        public Option<TourActionModel> AttachingActionOption { get; private set; }

        /// <summary>
        /// Gets or Sets AttachingAction
        /// </summary>
        [JsonPropertyName("attachingAction")]
        public TourActionModel? AttachingAction { get { return this. AttachingActionOption; } set { this.AttachingActionOption = new Option<TourActionModel>(value); } }

        /// <summary>
        /// Used to track the state of DetachingAction
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TourActionModel>))]
        public Option<TourActionModel> DetachingActionOption { get; private set; }

        /// <summary>
        /// Gets or Sets DetachingAction
        /// </summary>
        [JsonPropertyName("detachingAction")]
        public TourActionModel? DetachingAction { get { return this. DetachingActionOption; } set { this.DetachingActionOption = new Option<TourActionModel>(value); } }

        /// <summary>
        /// Used to track the state of Entitiy
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TourEntityModel>))]
        public Option<TourEntityModel> EntitiyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Entitiy
        /// </summary>
        [JsonPropertyName("entitiy")]
        public TourEntityModel? Entitiy { get { return this. EntitiyOption; } set { this.EntitiyOption = new Option<TourEntityModel>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the attachment.
        /// </summary>
        /// <value>Gets or sets the attachment.</value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachedEntityModel {\n");
            sb.Append("  AttachingAction: ").Append(AttachingAction).Append("\n");
            sb.Append("  DetachingAction: ").Append(DetachingAction).Append("\n");
            sb.Append("  Entitiy: ").Append(Entitiy).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AttachedEntityModel" />
    /// </summary>
    public class AttachedEntityModelJsonConverter : JsonConverter<AttachedEntityModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="AttachedEntityModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AttachedEntityModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TourActionModel> attachingAction = default;
            Option<TourActionModel> detachingAction = default;
            Option<TourEntityModel> entitiy = default;
            Option<Guid> id = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attachingAction":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attachingAction = new Option<TourActionModel>(JsonSerializer.Deserialize<TourActionModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "detachingAction":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                detachingAction = new Option<TourActionModel>(JsonSerializer.Deserialize<TourActionModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "entitiy":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                entitiy = new Option<TourEntityModel>(JsonSerializer.Deserialize<TourEntityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (attachingAction.IsSet && attachingAction.Value == null)
                throw new ArgumentNullException(nameof(attachingAction), "Property is not nullable for class AttachedEntityModel.");

            if (detachingAction.IsSet && detachingAction.Value == null)
                throw new ArgumentNullException(nameof(detachingAction), "Property is not nullable for class AttachedEntityModel.");

            if (entitiy.IsSet && entitiy.Value == null)
                throw new ArgumentNullException(nameof(entitiy), "Property is not nullable for class AttachedEntityModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AttachedEntityModel.");

            //2return new AttachedEntityModel(attachingAction, detachingAction, entitiy, id);
            return new AttachedEntityModel(attachingAction, detachingAction, entitiy, id);
        }

        /// <summary>
        /// Serializes a <see cref="AttachedEntityModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachedEntityModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AttachedEntityModel attachedEntityModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, attachedEntityModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AttachedEntityModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachedEntityModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, AttachedEntityModel attachedEntityModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (attachedEntityModel.AttachingActionOption.IsSet && attachedEntityModel.AttachingAction == null)
                throw new ArgumentNullException(nameof(attachedEntityModel.AttachingAction), "Property is required for class AttachedEntityModel.");

            if (attachedEntityModel.DetachingActionOption.IsSet && attachedEntityModel.DetachingAction == null)
                throw new ArgumentNullException(nameof(attachedEntityModel.DetachingAction), "Property is required for class AttachedEntityModel.");

            if (attachedEntityModel.EntitiyOption.IsSet && attachedEntityModel.Entitiy == null)
                throw new ArgumentNullException(nameof(attachedEntityModel.Entitiy), "Property is required for class AttachedEntityModel.");

            if (attachedEntityModel.AttachingActionOption.IsSet)
            {
                writer.WritePropertyName("attachingAction");
                JsonSerializer.Serialize(writer, attachedEntityModel.AttachingAction, jsonSerializerOptions);
            }
            if (attachedEntityModel.DetachingActionOption.IsSet)
            {
                writer.WritePropertyName("detachingAction");
                JsonSerializer.Serialize(writer, attachedEntityModel.DetachingAction, jsonSerializerOptions);
            }
            if (attachedEntityModel.EntitiyOption.IsSet)
            {
                writer.WritePropertyName("entitiy");
                JsonSerializer.Serialize(writer, attachedEntityModel.Entitiy, jsonSerializerOptions);
            }
            if (attachedEntityModel.IdOption.IsSet)
                writer.WriteString("id", attachedEntityModel.IdOption!.Value);
        }
    }
}
