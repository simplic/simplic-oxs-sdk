// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Request to remove a tag from a tour.
    /// </summary>
    public partial class RemoveTagFromTourRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public RemoveTagFromTourRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoveTagFromTourRequest" /> class.
        /// </summary>
        /// <param name="tagId">Gets or sets the tag id.</param>
        /// <param name="tourId">Gets or sets the tour id.</param>
        //[JsonConstructor]
        public RemoveTagFromTourRequest(Option<Guid> tagId = default, Option<Guid> tourId = default)
        {
            TagIdOption = tagId;
            TourIdOption = tourId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TagId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TagIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the tag id.
        /// </summary>
        /// <value>Gets or sets the tag id.</value>
        [JsonPropertyName("tagId")]
        public Guid? TagId { get { return this. TagIdOption; } set { this.TagIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of TourId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TourIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the tour id.
        /// </summary>
        /// <value>Gets or sets the tour id.</value>
        [JsonPropertyName("tourId")]
        public Guid? TourId { get { return this. TourIdOption; } set { this.TourIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RemoveTagFromTourRequest {\n");
            sb.Append("  TagId: ").Append(TagId).Append("\n");
            sb.Append("  TourId: ").Append(TourId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RemoveTagFromTourRequest" />
    /// </summary>
    public class RemoveTagFromTourRequestJsonConverter : JsonConverter<RemoveTagFromTourRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="RemoveTagFromTourRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RemoveTagFromTourRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid> tagId = default;
            Option<Guid> tourId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "tagId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tagId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "tourId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tourId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (tagId.IsSet && tagId.Value == null)
                throw new ArgumentNullException(nameof(tagId), "Property is not nullable for class RemoveTagFromTourRequest.");

            if (tourId.IsSet && tourId.Value == null)
                throw new ArgumentNullException(nameof(tourId), "Property is not nullable for class RemoveTagFromTourRequest.");

            //2return new RemoveTagFromTourRequest(tagId, tourId);
            return new RemoveTagFromTourRequest(tagId, tourId);
        }

        /// <summary>
        /// Serializes a <see cref="RemoveTagFromTourRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="removeTagFromTourRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RemoveTagFromTourRequest removeTagFromTourRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, removeTagFromTourRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RemoveTagFromTourRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="removeTagFromTourRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, RemoveTagFromTourRequest removeTagFromTourRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (removeTagFromTourRequest.TagIdOption.IsSet)
                writer.WriteString("tagId", removeTagFromTourRequest.TagIdOption!.Value);

            if (removeTagFromTourRequest.TourIdOption.IsSet)
                writer.WriteString("tourId", removeTagFromTourRequest.TourIdOption!.Value);
        }
    }
}
