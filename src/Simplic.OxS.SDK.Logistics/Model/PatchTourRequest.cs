/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Request model to patch a tour.
    /// </summary>
    [DataContract(Name = "PatchTourRequest")]
    public partial class PatchTourRequest : IEquatable<PatchTourRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchTourRequest" /> class.
        /// </summary>
        /// <param name="number">Gets or sets the number of the tour..</param>
        /// <param name="reference">Gets or sets the reference number..</param>
        /// <param name="resourceId">Gets or sets the resource id.     Will be resolved as resouce.  .</param>
        /// <param name="startAddressId">Gets or sets the start address id.     Will be resolved to the start address.  .</param>
        /// <param name="endAddressId">Gets or sets the end address id.     Will be resolved to the end address.  .</param>
        /// <param name="startDateTime">Gets or sets the start date time.     Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start..</param>
        /// <param name="endDateTime">Gets or sets the end date time.     Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end..</param>
        /// <param name="actualStartDateTime">Gets or sets the actual start date and time.     This represents the time the resource actually started it&#39;s trip, not the planned start.  .</param>
        /// <param name="actualEndDateTime">Gets or sets the actual end date and time.     This represents the time the resource actually ended it&#39;s trip, not the planned end.  .</param>
        /// <param name="calculatedStartDateTime">Gets or sets the calculated start date and time.     This value should be calculated by a service and not set by the user in most cases.  .</param>
        /// <param name="calculatedEndDateTime">Gets or sets the calculated end date and time.     This value should be calculated by a service and not set by the user in most cases.  .</param>
        /// <param name="notes">Gets or sets a note..</param>
        /// <param name="tags">Sets the tags of the tour..</param>
        /// <param name="actions">Gets or sets the tour actions.     This list contains a list of actions which define single events during the trip.    This list will be the primary resource for the generation of attached resources and entities.     Some of these actoins might be e.g.: \&quot;Add trailer\&quot;, \&quot;Change tractor unit\&quot; or \&quot;Load shipment\&quot;.  .</param>
        public PatchTourRequest(string number = default(string), string reference = default(string), Guid? resourceId = default(Guid?), Guid? startAddressId = default(Guid?), Guid? endAddressId = default(Guid?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), DateTime? actualStartDateTime = default(DateTime?), DateTime? actualEndDateTime = default(DateTime?), DateTime? calculatedStartDateTime = default(DateTime?), DateTime? calculatedEndDateTime = default(DateTime?), string notes = default(string), List<Guid> tags = default(List<Guid>), List<PatchTourActionRequest> actions = default(List<PatchTourActionRequest>))
        {
            this.Number = number;
            this.Reference = reference;
            this.ResourceId = resourceId;
            this.StartAddressId = startAddressId;
            this.EndAddressId = endAddressId;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.ActualStartDateTime = actualStartDateTime;
            this.ActualEndDateTime = actualEndDateTime;
            this.CalculatedStartDateTime = calculatedStartDateTime;
            this.CalculatedEndDateTime = calculatedEndDateTime;
            this.Notes = notes;
            this.Tags = tags;
            this.Actions = actions;
        }

        /// <summary>
        /// Gets or sets the number of the tour.
        /// </summary>
        /// <value>Gets or sets the number of the tour.</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets the reference number.
        /// </summary>
        /// <value>Gets or sets the reference number.</value>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or sets the resource id.     Will be resolved as resouce.  
        /// </summary>
        /// <value>Gets or sets the resource id.     Will be resolved as resouce.  </value>
        [DataMember(Name = "resourceId", EmitDefaultValue = true)]
        public Guid? ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the start address id.     Will be resolved to the start address.  
        /// </summary>
        /// <value>Gets or sets the start address id.     Will be resolved to the start address.  </value>
        [DataMember(Name = "startAddressId", EmitDefaultValue = true)]
        public Guid? StartAddressId { get; set; }

        /// <summary>
        /// Gets or sets the end address id.     Will be resolved to the end address.  
        /// </summary>
        /// <value>Gets or sets the end address id.     Will be resolved to the end address.  </value>
        [DataMember(Name = "endAddressId", EmitDefaultValue = true)]
        public Guid? EndAddressId { get; set; }

        /// <summary>
        /// Gets or sets the start date time.     Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.
        /// </summary>
        /// <value>Gets or sets the start date time.     Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.</value>
        [DataMember(Name = "startDateTime", EmitDefaultValue = true)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the end date time.     Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.
        /// </summary>
        /// <value>Gets or sets the end date time.     Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.</value>
        [DataMember(Name = "endDateTime", EmitDefaultValue = true)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or sets the actual start date and time.     This represents the time the resource actually started it&#39;s trip, not the planned start.  
        /// </summary>
        /// <value>Gets or sets the actual start date and time.     This represents the time the resource actually started it&#39;s trip, not the planned start.  </value>
        [DataMember(Name = "actualStartDateTime", EmitDefaultValue = true)]
        public DateTime? ActualStartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the actual end date and time.     This represents the time the resource actually ended it&#39;s trip, not the planned end.  
        /// </summary>
        /// <value>Gets or sets the actual end date and time.     This represents the time the resource actually ended it&#39;s trip, not the planned end.  </value>
        [DataMember(Name = "actualEndDateTime", EmitDefaultValue = true)]
        public DateTime? ActualEndDateTime { get; set; }

        /// <summary>
        /// Gets or sets the calculated start date and time.     This value should be calculated by a service and not set by the user in most cases.  
        /// </summary>
        /// <value>Gets or sets the calculated start date and time.     This value should be calculated by a service and not set by the user in most cases.  </value>
        [DataMember(Name = "calculatedStartDateTime", EmitDefaultValue = true)]
        public DateTime? CalculatedStartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the calculated end date and time.     This value should be calculated by a service and not set by the user in most cases.  
        /// </summary>
        /// <value>Gets or sets the calculated end date and time.     This value should be calculated by a service and not set by the user in most cases.  </value>
        [DataMember(Name = "calculatedEndDateTime", EmitDefaultValue = true)]
        public DateTime? CalculatedEndDateTime { get; set; }

        /// <summary>
        /// Gets or sets a note.
        /// </summary>
        /// <value>Gets or sets a note.</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Sets the tags of the tour.
        /// </summary>
        /// <value>Sets the tags of the tour.</value>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<Guid> Tags { get; set; }

        /// <summary>
        /// Gets or sets the tour actions.     This list contains a list of actions which define single events during the trip.    This list will be the primary resource for the generation of attached resources and entities.     Some of these actoins might be e.g.: \&quot;Add trailer\&quot;, \&quot;Change tractor unit\&quot; or \&quot;Load shipment\&quot;.  
        /// </summary>
        /// <value>Gets or sets the tour actions.     This list contains a list of actions which define single events during the trip.    This list will be the primary resource for the generation of attached resources and entities.     Some of these actoins might be e.g.: \&quot;Add trailer\&quot;, \&quot;Change tractor unit\&quot; or \&quot;Load shipment\&quot;.  </value>
        [DataMember(Name = "actions", EmitDefaultValue = true)]
        public List<PatchTourActionRequest> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchTourRequest {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  StartAddressId: ").Append(StartAddressId).Append("\n");
            sb.Append("  EndAddressId: ").Append(EndAddressId).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  ActualStartDateTime: ").Append(ActualStartDateTime).Append("\n");
            sb.Append("  ActualEndDateTime: ").Append(ActualEndDateTime).Append("\n");
            sb.Append("  CalculatedStartDateTime: ").Append(CalculatedStartDateTime).Append("\n");
            sb.Append("  CalculatedEndDateTime: ").Append(CalculatedEndDateTime).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatchTourRequest);
        }

        /// <summary>
        /// Returns true if PatchTourRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PatchTourRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchTourRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.ResourceId == input.ResourceId ||
                    (this.ResourceId != null &&
                    this.ResourceId.Equals(input.ResourceId))
                ) && 
                (
                    this.StartAddressId == input.StartAddressId ||
                    (this.StartAddressId != null &&
                    this.StartAddressId.Equals(input.StartAddressId))
                ) && 
                (
                    this.EndAddressId == input.EndAddressId ||
                    (this.EndAddressId != null &&
                    this.EndAddressId.Equals(input.EndAddressId))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.ActualStartDateTime == input.ActualStartDateTime ||
                    (this.ActualStartDateTime != null &&
                    this.ActualStartDateTime.Equals(input.ActualStartDateTime))
                ) && 
                (
                    this.ActualEndDateTime == input.ActualEndDateTime ||
                    (this.ActualEndDateTime != null &&
                    this.ActualEndDateTime.Equals(input.ActualEndDateTime))
                ) && 
                (
                    this.CalculatedStartDateTime == input.CalculatedStartDateTime ||
                    (this.CalculatedStartDateTime != null &&
                    this.CalculatedStartDateTime.Equals(input.CalculatedStartDateTime))
                ) && 
                (
                    this.CalculatedEndDateTime == input.CalculatedEndDateTime ||
                    (this.CalculatedEndDateTime != null &&
                    this.CalculatedEndDateTime.Equals(input.CalculatedEndDateTime))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.ResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceId.GetHashCode();
                }
                if (this.StartAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.StartAddressId.GetHashCode();
                }
                if (this.EndAddressId != null)
                {
                    hashCode = (hashCode * 59) + this.EndAddressId.GetHashCode();
                }
                if (this.StartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartDateTime.GetHashCode();
                }
                if (this.EndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndDateTime.GetHashCode();
                }
                if (this.ActualStartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ActualStartDateTime.GetHashCode();
                }
                if (this.ActualEndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ActualEndDateTime.GetHashCode();
                }
                if (this.CalculatedStartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedStartDateTime.GetHashCode();
                }
                if (this.CalculatedEndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedEndDateTime.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
