// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Request model to patch a tour.
    /// </summary>
    public partial class PatchTourRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public PatchTourRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PatchTourRequest" /> class.
        /// </summary>
        /// <param name="actions">Gets or sets the tour actions.  &lt;br&gt;  This list contains a list of actions which define single events during the trip.    This list will be the primary resource for the generation of attached resources and entities.  &lt;br&gt;  Some of these actoins might be e.g.: \&quot;Add trailer\&quot;, \&quot;Change tractor unit\&quot; or \&quot;Load shipment\&quot;.  </param>
        /// <param name="actualEndDateTime">Gets or sets the actual end date and time.  &lt;br&gt;  This represents the time the resource actually ended it&#39;s trip, not the planned end.  </param>
        /// <param name="actualStartDateTime">Gets or sets the actual start date and time.  &lt;br&gt;  This represents the time the resource actually started it&#39;s trip, not the planned start.  </param>
        /// <param name="calculatedEndDateTime">Gets or sets the calculated end date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  </param>
        /// <param name="calculatedStartDateTime">Gets or sets the calculated start date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  </param>
        /// <param name="endAddressId">Gets or sets the end address id.  &lt;br&gt;  Will be resolved to the end address.  </param>
        /// <param name="endDateTime">Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.</param>
        /// <param name="notes">Gets or sets a note.</param>
        /// <param name="number">Gets or sets the number of the tour.</param>
        /// <param name="reference">Gets or sets the reference number.</param>
        /// <param name="resourceId">Gets or sets the resource id.  &lt;br&gt;  Will be resolved as resouce.  </param>
        /// <param name="startAddressId">Gets or sets the start address id.  &lt;br&gt;  Will be resolved to the start address.  </param>
        /// <param name="startDateTime">Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.</param>
        /// <param name="tags">Sets the tags of the tour.</param>
        //[JsonConstructor]
        public PatchTourRequest(Option<List<PatchTourActionRequest>> actions = default, Option<DateTime> actualEndDateTime = default, Option<DateTime> actualStartDateTime = default, Option<DateTime> calculatedEndDateTime = default, Option<DateTime> calculatedStartDateTime = default, Option<Guid> endAddressId = default, Option<DateTime> endDateTime = default, Option<string> notes = default, Option<string> number = default, Option<string> reference = default, Option<Guid> resourceId = default, Option<Guid> startAddressId = default, Option<DateTime> startDateTime = default, Option<List<Guid>> tags = default)
        {
            ActionsOption = actions;
            ActualEndDateTimeOption = actualEndDateTime;
            ActualStartDateTimeOption = actualStartDateTime;
            CalculatedEndDateTimeOption = calculatedEndDateTime;
            CalculatedStartDateTimeOption = calculatedStartDateTime;
            EndAddressIdOption = endAddressId;
            EndDateTimeOption = endDateTime;
            NotesOption = notes;
            NumberOption = number;
            ReferenceOption = reference;
            ResourceIdOption = resourceId;
            StartAddressIdOption = startAddressId;
            StartDateTimeOption = startDateTime;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Actions
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<PatchTourActionRequest>>))]
        public Option<List<PatchTourActionRequest>> ActionsOption { get; private set; }

        /// <summary>
        /// Gets or sets the tour actions.  &lt;br&gt;  This list contains a list of actions which define single events during the trip.    This list will be the primary resource for the generation of attached resources and entities.  &lt;br&gt;  Some of these actoins might be e.g.: \&quot;Add trailer\&quot;, \&quot;Change tractor unit\&quot; or \&quot;Load shipment\&quot;.  
        /// </summary>
        /// <value>Gets or sets the tour actions.  &lt;br&gt;  This list contains a list of actions which define single events during the trip.    This list will be the primary resource for the generation of attached resources and entities.  &lt;br&gt;  Some of these actoins might be e.g.: \&quot;Add trailer\&quot;, \&quot;Change tractor unit\&quot; or \&quot;Load shipment\&quot;.  </value>
        [JsonPropertyName("actions")]
        public List<PatchTourActionRequest>? Actions { get { return this. ActionsOption; } set { this.ActionsOption = new Option<List<PatchTourActionRequest>>(value); } }

        /// <summary>
        /// Used to track the state of ActualEndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ActualEndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual end date and time.  &lt;br&gt;  This represents the time the resource actually ended it&#39;s trip, not the planned end.  
        /// </summary>
        /// <value>Gets or sets the actual end date and time.  &lt;br&gt;  This represents the time the resource actually ended it&#39;s trip, not the planned end.  </value>
        [JsonPropertyName("actualEndDateTime")]
        public DateTime? ActualEndDateTime { get { return this. ActualEndDateTimeOption; } set { this.ActualEndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of ActualStartDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ActualStartDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual start date and time.  &lt;br&gt;  This represents the time the resource actually started it&#39;s trip, not the planned start.  
        /// </summary>
        /// <value>Gets or sets the actual start date and time.  &lt;br&gt;  This represents the time the resource actually started it&#39;s trip, not the planned start.  </value>
        [JsonPropertyName("actualStartDateTime")]
        public DateTime? ActualStartDateTime { get { return this. ActualStartDateTimeOption; } set { this.ActualStartDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CalculatedEndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CalculatedEndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the calculated end date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  
        /// </summary>
        /// <value>Gets or sets the calculated end date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  </value>
        [JsonPropertyName("calculatedEndDateTime")]
        public DateTime? CalculatedEndDateTime { get { return this. CalculatedEndDateTimeOption; } set { this.CalculatedEndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CalculatedStartDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CalculatedStartDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the calculated start date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  
        /// </summary>
        /// <value>Gets or sets the calculated start date and time.  &lt;br&gt;  This value should be calculated by a service and not set by the user in most cases.  </value>
        [JsonPropertyName("calculatedStartDateTime")]
        public DateTime? CalculatedStartDateTime { get { return this. CalculatedStartDateTimeOption; } set { this.CalculatedStartDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of EndAddressId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> EndAddressIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the end address id.  &lt;br&gt;  Will be resolved to the end address.  
        /// </summary>
        /// <value>Gets or sets the end address id.  &lt;br&gt;  Will be resolved to the end address.  </value>
        [JsonPropertyName("endAddressId")]
        public Guid? EndAddressId { get { return this. EndAddressIdOption; } set { this.EndAddressIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of EndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.
        /// </summary>
        /// <value>Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.</value>
        [JsonPropertyName("endDateTime")]
        public DateTime? EndDateTime { get { return this. EndDateTimeOption; } set { this.EndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Gets or sets a note.
        /// </summary>
        /// <value>Gets or sets a note.</value>
        [JsonPropertyName("notes")]
        public string? Notes { get { return this. NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the number of the tour.
        /// </summary>
        /// <value>Gets or sets the number of the tour.</value>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Gets or sets the reference number.
        /// </summary>
        /// <value>Gets or sets the reference number.</value>
        [JsonPropertyName("reference")]
        public string? Reference { get { return this. ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ResourceId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ResourceIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the resource id.  &lt;br&gt;  Will be resolved as resouce.  
        /// </summary>
        /// <value>Gets or sets the resource id.  &lt;br&gt;  Will be resolved as resouce.  </value>
        [JsonPropertyName("resourceId")]
        public Guid? ResourceId { get { return this. ResourceIdOption; } set { this.ResourceIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of StartAddressId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> StartAddressIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the start address id.  &lt;br&gt;  Will be resolved to the start address.  
        /// </summary>
        /// <value>Gets or sets the start address id.  &lt;br&gt;  Will be resolved to the start address.  </value>
        [JsonPropertyName("startAddressId")]
        public Guid? StartAddressId { get { return this. StartAddressIdOption; } set { this.StartAddressIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of StartDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.
        /// </summary>
        /// <value>Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.</value>
        [JsonPropertyName("startDateTime")]
        public DateTime? StartDateTime { get { return this. StartDateTimeOption; } set { this.StartDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<Guid>>))]
        public Option<List<Guid>> TagsOption { get; private set; }

        /// <summary>
        /// Sets the tags of the tour.
        /// </summary>
        /// <value>Sets the tags of the tour.</value>
        [JsonPropertyName("tags")]
        public List<Guid>? Tags { get { return this. TagsOption; } set { this.TagsOption = new Option<List<Guid>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchTourRequest {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  ActualEndDateTime: ").Append(ActualEndDateTime).Append("\n");
            sb.Append("  ActualStartDateTime: ").Append(ActualStartDateTime).Append("\n");
            sb.Append("  CalculatedEndDateTime: ").Append(CalculatedEndDateTime).Append("\n");
            sb.Append("  CalculatedStartDateTime: ").Append(CalculatedStartDateTime).Append("\n");
            sb.Append("  EndAddressId: ").Append(EndAddressId).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  StartAddressId: ").Append(StartAddressId).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PatchTourRequest" />
    /// </summary>
    public class PatchTourRequestJsonConverter : JsonConverter<PatchTourRequest>
    {
        /// <summary>
        /// The format to use to serialize ActualEndDateTime
        /// </summary>
        public static string ActualEndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ActualStartDateTime
        /// </summary>
        public static string ActualStartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CalculatedEndDateTime
        /// </summary>
        public static string CalculatedEndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CalculatedStartDateTime
        /// </summary>
        public static string CalculatedStartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDateTime
        /// </summary>
        public static string EndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDateTime
        /// </summary>
        public static string StartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PatchTourRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PatchTourRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<PatchTourActionRequest>> actions = default;
            Option<DateTime> actualEndDateTime = default;
            Option<DateTime> actualStartDateTime = default;
            Option<DateTime> calculatedEndDateTime = default;
            Option<DateTime> calculatedStartDateTime = default;
            Option<Guid> endAddressId = default;
            Option<DateTime> endDateTime = default;
            Option<string> notes = default;
            Option<string> number = default;
            Option<string> reference = default;
            Option<Guid> resourceId = default;
            Option<Guid> startAddressId = default;
            Option<DateTime> startDateTime = default;
            Option<List<Guid>> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actions = new Option<List<PatchTourActionRequest>>(JsonSerializer.Deserialize<List<PatchTourActionRequest>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "actualEndDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actualEndDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "actualStartDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actualStartDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "calculatedEndDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                calculatedEndDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "calculatedStartDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                calculatedStartDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endAddressId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endAddressId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "endDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "resourceId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resourceId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "startAddressId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startAddressId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "startDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tags = new Option<List<Guid>>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new PatchTourRequest(actions, actualEndDateTime, actualStartDateTime, calculatedEndDateTime, calculatedStartDateTime, endAddressId, endDateTime, notes, number, reference, resourceId, startAddressId, startDateTime, tags);
            return new PatchTourRequest(actions, actualEndDateTime, actualStartDateTime, calculatedEndDateTime, calculatedStartDateTime, endAddressId, endDateTime, notes, number, reference, resourceId, startAddressId, startDateTime, tags);
        }

        /// <summary>
        /// Serializes a <see cref="PatchTourRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchTourRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PatchTourRequest patchTourRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, patchTourRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PatchTourRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchTourRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, PatchTourRequest patchTourRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (patchTourRequest.ActionsOption.IsSet)
                if (patchTourRequest.ActionsOption.Value != null)
                {
                    writer.WritePropertyName("actions");
                    JsonSerializer.Serialize(writer, patchTourRequest.Actions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("actions");
            if (patchTourRequest.ActualEndDateTimeOption.IsSet)
                if (patchTourRequest.ActualEndDateTimeOption.Value != null)
                {
                    writer.WriteString("actualEndDateTime", patchTourRequest.ActualEndDateTimeOption!.Value.ToString(ActualEndDateTimeFormat));
                    //var __value = patchTourRequest.ActualEndDateTimeOption.Value;
                    //writer.WriteString("actualEndDateTime", __value);
                }
                else
                    writer.WriteNull("actualEndDateTime");

            if (patchTourRequest.ActualStartDateTimeOption.IsSet)
                if (patchTourRequest.ActualStartDateTimeOption.Value != null)
                {
                    writer.WriteString("actualStartDateTime", patchTourRequest.ActualStartDateTimeOption!.Value.ToString(ActualStartDateTimeFormat));
                    //var __value = patchTourRequest.ActualStartDateTimeOption.Value;
                    //writer.WriteString("actualStartDateTime", __value);
                }
                else
                    writer.WriteNull("actualStartDateTime");

            if (patchTourRequest.CalculatedEndDateTimeOption.IsSet)
                if (patchTourRequest.CalculatedEndDateTimeOption.Value != null)
                {
                    writer.WriteString("calculatedEndDateTime", patchTourRequest.CalculatedEndDateTimeOption!.Value.ToString(CalculatedEndDateTimeFormat));
                    //var __value = patchTourRequest.CalculatedEndDateTimeOption.Value;
                    //writer.WriteString("calculatedEndDateTime", __value);
                }
                else
                    writer.WriteNull("calculatedEndDateTime");

            if (patchTourRequest.CalculatedStartDateTimeOption.IsSet)
                if (patchTourRequest.CalculatedStartDateTimeOption.Value != null)
                {
                    writer.WriteString("calculatedStartDateTime", patchTourRequest.CalculatedStartDateTimeOption!.Value.ToString(CalculatedStartDateTimeFormat));
                    //var __value = patchTourRequest.CalculatedStartDateTimeOption.Value;
                    //writer.WriteString("calculatedStartDateTime", __value);
                }
                else
                    writer.WriteNull("calculatedStartDateTime");

            if (patchTourRequest.EndAddressIdOption.IsSet)
                if (patchTourRequest.EndAddressIdOption.Value != null)
                {
                    writer.WriteString("endAddressId", patchTourRequest.EndAddressIdOption!.Value);
                    //var __value = patchTourRequest.EndAddressIdOption.Value;
                    //writer.WriteString("endAddressId", __value);
                }
                else
                    writer.WriteNull("endAddressId");

            if (patchTourRequest.EndDateTimeOption.IsSet)
                if (patchTourRequest.EndDateTimeOption.Value != null)
                {
                    writer.WriteString("endDateTime", patchTourRequest.EndDateTimeOption!.Value.ToString(EndDateTimeFormat));
                    //var __value = patchTourRequest.EndDateTimeOption.Value;
                    //writer.WriteString("endDateTime", __value);
                }
                else
                    writer.WriteNull("endDateTime");

            if (patchTourRequest.NotesOption.IsSet)
                if (patchTourRequest.NotesOption.Value != null)
                {
                    writer.WriteString("notes", patchTourRequest.Notes);
                    //var __value = patchTourRequest.NotesOption.Value;
                    //writer.WriteString("notes", __value);
                }
                else
                    writer.WriteNull("notes");

            if (patchTourRequest.NumberOption.IsSet)
                if (patchTourRequest.NumberOption.Value != null)
                {
                    writer.WriteString("number", patchTourRequest.Number);
                    //var __value = patchTourRequest.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (patchTourRequest.ReferenceOption.IsSet)
                if (patchTourRequest.ReferenceOption.Value != null)
                {
                    writer.WriteString("reference", patchTourRequest.Reference);
                    //var __value = patchTourRequest.ReferenceOption.Value;
                    //writer.WriteString("reference", __value);
                }
                else
                    writer.WriteNull("reference");

            if (patchTourRequest.ResourceIdOption.IsSet)
                if (patchTourRequest.ResourceIdOption.Value != null)
                {
                    writer.WriteString("resourceId", patchTourRequest.ResourceIdOption!.Value);
                    //var __value = patchTourRequest.ResourceIdOption.Value;
                    //writer.WriteString("resourceId", __value);
                }
                else
                    writer.WriteNull("resourceId");

            if (patchTourRequest.StartAddressIdOption.IsSet)
                if (patchTourRequest.StartAddressIdOption.Value != null)
                {
                    writer.WriteString("startAddressId", patchTourRequest.StartAddressIdOption!.Value);
                    //var __value = patchTourRequest.StartAddressIdOption.Value;
                    //writer.WriteString("startAddressId", __value);
                }
                else
                    writer.WriteNull("startAddressId");

            if (patchTourRequest.StartDateTimeOption.IsSet)
                if (patchTourRequest.StartDateTimeOption.Value != null)
                {
                    writer.WriteString("startDateTime", patchTourRequest.StartDateTimeOption!.Value.ToString(StartDateTimeFormat));
                    //var __value = patchTourRequest.StartDateTimeOption.Value;
                    //writer.WriteString("startDateTime", __value);
                }
                else
                    writer.WriteNull("startDateTime");

            if (patchTourRequest.TagsOption.IsSet)
                if (patchTourRequest.TagsOption.Value != null)
                {
                    writer.WritePropertyName("tags");
                    JsonSerializer.Serialize(writer, patchTourRequest.Tags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tags");
        }
    }
}
