// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of a tour action.
    /// </summary>
    public partial class PatchTourActionRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public PatchTourActionRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PatchTourActionRequest" /> class.
        /// </summary>
        /// <param name="actualDateTime">Gets or sets the actual date time.  &lt;br&gt;  Represents the actual date and time of the action.  </param>
        /// <param name="addressId">Gets or sets the id to resolve the address.</param>
        /// <param name="calculatedDateTime">Gets or sets the calculated date time.  &lt;br&gt;  Represents the calculated date and time of the action.  </param>
        /// <param name="cleaningSlots">Gets or sets a list of used loading slots.</param>
        /// <param name="dateTime">Gets or sets the date time.  &lt;br&gt;  Represents the planned date and time of the action.  </param>
        /// <param name="entityId">Gets or sets the id to resolve the entity.</param>
        /// <param name="id">Gets or sets the id.</param>
        /// <param name="mirroredTourNumber">Gets or sets the tour number of the mirrored tour.  &lt;br&gt;  The tour number will be used to make sure that all generated tours from this action have the same   tour number.  </param>
        /// <param name="mirroredTourStatusId">Gets ors sets the id of the status of the mirrored tour.  &lt;br&gt;  The tour status will make sure that all generated tours from this action have the right status.    The status will currently not be resolved and will only be set manually.</param>
        /// <param name="mirroredTourTags">Gets or sets the mirrored tour tags.   &lt;br&gt;  The mirrored tour tags will be used to add tags to the mirrored tour.  </param>
        /// <param name="orderId">Gets or sets the order id in which the actions are processed.</param>
        /// <param name="remove">Remove flag for the patch helper.</param>
        /// <param name="resourceId">Gets or sets the id to resolve the resource.</param>
        /// <param name="type">Gets or sets the type.</param>
        /// <param name="usedLoadingSlots">Gets or sets a list of used loading slots.</param>
        //[JsonConstructor]
        public PatchTourActionRequest(Option<DateTime> actualDateTime = default, Option<Guid> addressId = default, Option<DateTime> calculatedDateTime = default, Option<List<PatchLoadingSlotRequest>> cleaningSlots = default, Option<DateTime> dateTime = default, Option<Guid> entityId = default, Option<Guid> id = default, Option<string> mirroredTourNumber = default, Option<Guid> mirroredTourStatusId = default, Option<List<Guid>> mirroredTourTags = default, Option<int> orderId = default, Option<bool> remove = default, Option<Guid> resourceId = default, Option<string> type = default, Option<List<PatchLoadingSlotRequest>> usedLoadingSlots = default)
        {
            ActualDateTimeOption = actualDateTime;
            AddressIdOption = addressId;
            CalculatedDateTimeOption = calculatedDateTime;
            CleaningSlotsOption = cleaningSlots;
            DateTimeOption = dateTime;
            EntityIdOption = entityId;
            IdOption = id;
            MirroredTourNumberOption = mirroredTourNumber;
            MirroredTourStatusIdOption = mirroredTourStatusId;
            MirroredTourTagsOption = mirroredTourTags;
            OrderIdOption = orderId;
            RemoveOption = remove;
            ResourceIdOption = resourceId;
            TypeOption = type;
            UsedLoadingSlotsOption = usedLoadingSlots;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ActualDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ActualDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual date time.  &lt;br&gt;  Represents the actual date and time of the action.  
        /// </summary>
        /// <value>Gets or sets the actual date time.  &lt;br&gt;  Represents the actual date and time of the action.  </value>
        [JsonPropertyName("actualDateTime")]
        public DateTime? ActualDateTime { get { return this. ActualDateTimeOption; } set { this.ActualDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of AddressId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> AddressIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id to resolve the address.
        /// </summary>
        /// <value>Gets or sets the id to resolve the address.</value>
        [JsonPropertyName("addressId")]
        public Guid? AddressId { get { return this. AddressIdOption; } set { this.AddressIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of CalculatedDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CalculatedDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the calculated date time.  &lt;br&gt;  Represents the calculated date and time of the action.  
        /// </summary>
        /// <value>Gets or sets the calculated date time.  &lt;br&gt;  Represents the calculated date and time of the action.  </value>
        [JsonPropertyName("calculatedDateTime")]
        public DateTime? CalculatedDateTime { get { return this. CalculatedDateTimeOption; } set { this.CalculatedDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CleaningSlots
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<PatchLoadingSlotRequest>>))]
        public Option<List<PatchLoadingSlotRequest>> CleaningSlotsOption { get; private set; }

        /// <summary>
        /// Gets or sets a list of used loading slots.
        /// </summary>
        /// <value>Gets or sets a list of used loading slots.</value>
        [JsonPropertyName("cleaningSlots")]
        public List<PatchLoadingSlotRequest>? CleaningSlots { get { return this. CleaningSlotsOption; } set { this.CleaningSlotsOption = new Option<List<PatchLoadingSlotRequest>>(value); } }

        /// <summary>
        /// Used to track the state of DateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the date time.  &lt;br&gt;  Represents the planned date and time of the action.  
        /// </summary>
        /// <value>Gets or sets the date time.  &lt;br&gt;  Represents the planned date and time of the action.  </value>
        [JsonPropertyName("dateTime")]
        public DateTime? DateTime { get { return this. DateTimeOption; } set { this.DateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of EntityId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> EntityIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id to resolve the entity.
        /// </summary>
        /// <value>Gets or sets the id to resolve the entity.</value>
        [JsonPropertyName("entityId")]
        public Guid? EntityId { get { return this. EntityIdOption; } set { this.EntityIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of MirroredTourNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> MirroredTourNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the tour number of the mirrored tour.  &lt;br&gt;  The tour number will be used to make sure that all generated tours from this action have the same   tour number.  
        /// </summary>
        /// <value>Gets or sets the tour number of the mirrored tour.  &lt;br&gt;  The tour number will be used to make sure that all generated tours from this action have the same   tour number.  </value>
        [JsonPropertyName("mirroredTourNumber")]
        public string? MirroredTourNumber { get { return this. MirroredTourNumberOption; } set { this.MirroredTourNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MirroredTourStatusId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> MirroredTourStatusIdOption { get; private set; }

        /// <summary>
        /// Gets ors sets the id of the status of the mirrored tour.  &lt;br&gt;  The tour status will make sure that all generated tours from this action have the right status.    The status will currently not be resolved and will only be set manually.
        /// </summary>
        /// <value>Gets ors sets the id of the status of the mirrored tour.  &lt;br&gt;  The tour status will make sure that all generated tours from this action have the right status.    The status will currently not be resolved and will only be set manually.</value>
        [JsonPropertyName("mirroredTourStatusId")]
        public Guid? MirroredTourStatusId { get { return this. MirroredTourStatusIdOption; } set { this.MirroredTourStatusIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of MirroredTourTags
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<Guid>>))]
        public Option<List<Guid>> MirroredTourTagsOption { get; private set; }

        /// <summary>
        /// Gets or sets the mirrored tour tags.   &lt;br&gt;  The mirrored tour tags will be used to add tags to the mirrored tour.  
        /// </summary>
        /// <value>Gets or sets the mirrored tour tags.   &lt;br&gt;  The mirrored tour tags will be used to add tags to the mirrored tour.  </value>
        [JsonPropertyName("mirroredTourTags")]
        public List<Guid>? MirroredTourTags { get { return this. MirroredTourTagsOption; } set { this.MirroredTourTagsOption = new Option<List<Guid>>(value); } }

        /// <summary>
        /// Used to track the state of OrderId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> OrderIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the order id in which the actions are processed.
        /// </summary>
        /// <value>Gets or sets the order id in which the actions are processed.</value>
        [JsonPropertyName("orderId")]
        public int? OrderId { get { return this. OrderIdOption; } set { this.OrderIdOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of Remove
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> RemoveOption { get; private set; }

        /// <summary>
        /// Remove flag for the patch helper.
        /// </summary>
        /// <value>Remove flag for the patch helper.</value>
        [JsonPropertyName("_remove")]
        public bool? Remove { get { return this. RemoveOption; } set { this.RemoveOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of ResourceId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ResourceIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id to resolve the resource.
        /// </summary>
        /// <value>Gets or sets the id to resolve the resource.</value>
        [JsonPropertyName("resourceId")]
        public Guid? ResourceId { get { return this. ResourceIdOption; } set { this.ResourceIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        /// <value>Gets or sets the type.</value>
        [JsonPropertyName("type")]
        public string? Type { get { return this. TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UsedLoadingSlots
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<PatchLoadingSlotRequest>>))]
        public Option<List<PatchLoadingSlotRequest>> UsedLoadingSlotsOption { get; private set; }

        /// <summary>
        /// Gets or sets a list of used loading slots.
        /// </summary>
        /// <value>Gets or sets a list of used loading slots.</value>
        [JsonPropertyName("usedLoadingSlots")]
        public List<PatchLoadingSlotRequest>? UsedLoadingSlots { get { return this. UsedLoadingSlotsOption; } set { this.UsedLoadingSlotsOption = new Option<List<PatchLoadingSlotRequest>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchTourActionRequest {\n");
            sb.Append("  ActualDateTime: ").Append(ActualDateTime).Append("\n");
            sb.Append("  AddressId: ").Append(AddressId).Append("\n");
            sb.Append("  CalculatedDateTime: ").Append(CalculatedDateTime).Append("\n");
            sb.Append("  CleaningSlots: ").Append(CleaningSlots).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MirroredTourNumber: ").Append(MirroredTourNumber).Append("\n");
            sb.Append("  MirroredTourStatusId: ").Append(MirroredTourStatusId).Append("\n");
            sb.Append("  MirroredTourTags: ").Append(MirroredTourTags).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Remove: ").Append(Remove).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UsedLoadingSlots: ").Append(UsedLoadingSlots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PatchTourActionRequest" />
    /// </summary>
    public class PatchTourActionRequestJsonConverter : JsonConverter<PatchTourActionRequest>
    {
        /// <summary>
        /// The format to use to serialize ActualDateTime
        /// </summary>
        public static string ActualDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CalculatedDateTime
        /// </summary>
        public static string CalculatedDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DateTime
        /// </summary>
        public static string DateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PatchTourActionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PatchTourActionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> actualDateTime = default;
            Option<Guid> addressId = default;
            Option<DateTime> calculatedDateTime = default;
            Option<List<PatchLoadingSlotRequest>> cleaningSlots = default;
            Option<DateTime> dateTime = default;
            Option<Guid> entityId = default;
            Option<Guid> id = default;
            Option<string> mirroredTourNumber = default;
            Option<Guid> mirroredTourStatusId = default;
            Option<List<Guid>> mirroredTourTags = default;
            Option<int> orderId = default;
            Option<bool> remove = default;
            Option<Guid> resourceId = default;
            Option<string> type = default;
            Option<List<PatchLoadingSlotRequest>> usedLoadingSlots = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actualDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actualDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "addressId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                addressId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "calculatedDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                calculatedDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cleaningSlots":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cleaningSlots = new Option<List<PatchLoadingSlotRequest>>(JsonSerializer.Deserialize<List<PatchLoadingSlotRequest>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "entityId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                entityId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "mirroredTourNumber":
                            mirroredTourNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mirroredTourStatusId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mirroredTourStatusId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "mirroredTourTags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mirroredTourTags = new Option<List<Guid>>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "orderId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                orderId = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "_remove":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                remove = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "resourceId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resourceId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "usedLoadingSlots":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                usedLoadingSlots = new Option<List<PatchLoadingSlotRequest>>(JsonSerializer.Deserialize<List<PatchLoadingSlotRequest>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PatchTourActionRequest.");

            if (orderId.IsSet && orderId.Value == null)
                throw new ArgumentNullException(nameof(orderId), "Property is not nullable for class PatchTourActionRequest.");

            if (remove.IsSet && remove.Value == null)
                throw new ArgumentNullException(nameof(remove), "Property is not nullable for class PatchTourActionRequest.");

            //2return new PatchTourActionRequest(actualDateTime, addressId, calculatedDateTime, cleaningSlots, dateTime, entityId, id, mirroredTourNumber, mirroredTourStatusId, mirroredTourTags, orderId, remove, resourceId, type, usedLoadingSlots);
            return new PatchTourActionRequest(actualDateTime, addressId, calculatedDateTime, cleaningSlots, dateTime, entityId, id, mirroredTourNumber, mirroredTourStatusId, mirroredTourTags, orderId, remove, resourceId, type, usedLoadingSlots);
        }

        /// <summary>
        /// Serializes a <see cref="PatchTourActionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchTourActionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PatchTourActionRequest patchTourActionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, patchTourActionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PatchTourActionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchTourActionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, PatchTourActionRequest patchTourActionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (patchTourActionRequest.ActualDateTimeOption.IsSet)
                if (patchTourActionRequest.ActualDateTimeOption.Value != null)
                {
                    writer.WriteString("actualDateTime", patchTourActionRequest.ActualDateTimeOption!.Value.ToString(ActualDateTimeFormat));
                    //var __value = patchTourActionRequest.ActualDateTimeOption.Value;
                    //writer.WriteString("actualDateTime", __value);
                }
                else
                    writer.WriteNull("actualDateTime");

            if (patchTourActionRequest.AddressIdOption.IsSet)
                if (patchTourActionRequest.AddressIdOption.Value != null)
                {
                    writer.WriteString("addressId", patchTourActionRequest.AddressIdOption!.Value);
                    //var __value = patchTourActionRequest.AddressIdOption.Value;
                    //writer.WriteString("addressId", __value);
                }
                else
                    writer.WriteNull("addressId");

            if (patchTourActionRequest.CalculatedDateTimeOption.IsSet)
                if (patchTourActionRequest.CalculatedDateTimeOption.Value != null)
                {
                    writer.WriteString("calculatedDateTime", patchTourActionRequest.CalculatedDateTimeOption!.Value.ToString(CalculatedDateTimeFormat));
                    //var __value = patchTourActionRequest.CalculatedDateTimeOption.Value;
                    //writer.WriteString("calculatedDateTime", __value);
                }
                else
                    writer.WriteNull("calculatedDateTime");

            if (patchTourActionRequest.CleaningSlotsOption.IsSet)
                if (patchTourActionRequest.CleaningSlotsOption.Value != null)
                {
                    writer.WritePropertyName("cleaningSlots");
                    JsonSerializer.Serialize(writer, patchTourActionRequest.CleaningSlots, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("cleaningSlots");
            if (patchTourActionRequest.DateTimeOption.IsSet)
                if (patchTourActionRequest.DateTimeOption.Value != null)
                {
                    writer.WriteString("dateTime", patchTourActionRequest.DateTimeOption!.Value.ToString(DateTimeFormat));
                    //var __value = patchTourActionRequest.DateTimeOption.Value;
                    //writer.WriteString("dateTime", __value);
                }
                else
                    writer.WriteNull("dateTime");

            if (patchTourActionRequest.EntityIdOption.IsSet)
                if (patchTourActionRequest.EntityIdOption.Value != null)
                {
                    writer.WriteString("entityId", patchTourActionRequest.EntityIdOption!.Value);
                    //var __value = patchTourActionRequest.EntityIdOption.Value;
                    //writer.WriteString("entityId", __value);
                }
                else
                    writer.WriteNull("entityId");

            if (patchTourActionRequest.IdOption.IsSet)
                writer.WriteString("id", patchTourActionRequest.IdOption!.Value);

            if (patchTourActionRequest.MirroredTourNumberOption.IsSet)
                if (patchTourActionRequest.MirroredTourNumberOption.Value != null)
                {
                    writer.WriteString("mirroredTourNumber", patchTourActionRequest.MirroredTourNumber);
                    //var __value = patchTourActionRequest.MirroredTourNumberOption.Value;
                    //writer.WriteString("mirroredTourNumber", __value);
                }
                else
                    writer.WriteNull("mirroredTourNumber");

            if (patchTourActionRequest.MirroredTourStatusIdOption.IsSet)
                if (patchTourActionRequest.MirroredTourStatusIdOption.Value != null)
                {
                    writer.WriteString("mirroredTourStatusId", patchTourActionRequest.MirroredTourStatusIdOption!.Value);
                    //var __value = patchTourActionRequest.MirroredTourStatusIdOption.Value;
                    //writer.WriteString("mirroredTourStatusId", __value);
                }
                else
                    writer.WriteNull("mirroredTourStatusId");

            if (patchTourActionRequest.MirroredTourTagsOption.IsSet)
                if (patchTourActionRequest.MirroredTourTagsOption.Value != null)
                {
                    writer.WritePropertyName("mirroredTourTags");
                    JsonSerializer.Serialize(writer, patchTourActionRequest.MirroredTourTags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("mirroredTourTags");
            if (patchTourActionRequest.OrderIdOption.IsSet)
                writer.WriteNumber("orderId", patchTourActionRequest.OrderIdOption!.Value);

            if (patchTourActionRequest.RemoveOption.IsSet)
                writer.WriteBoolean("_remove", patchTourActionRequest.RemoveOption!.Value);

            if (patchTourActionRequest.ResourceIdOption.IsSet)
                if (patchTourActionRequest.ResourceIdOption.Value != null)
                {
                    writer.WriteString("resourceId", patchTourActionRequest.ResourceIdOption!.Value);
                    //var __value = patchTourActionRequest.ResourceIdOption.Value;
                    //writer.WriteString("resourceId", __value);
                }
                else
                    writer.WriteNull("resourceId");

            if (patchTourActionRequest.TypeOption.IsSet)
                if (patchTourActionRequest.TypeOption.Value != null)
                {
                    writer.WriteString("type", patchTourActionRequest.Type);
                    //var __value = patchTourActionRequest.TypeOption.Value;
                    //writer.WriteString("type", __value);
                }
                else
                    writer.WriteNull("type");

            if (patchTourActionRequest.UsedLoadingSlotsOption.IsSet)
                if (patchTourActionRequest.UsedLoadingSlotsOption.Value != null)
                {
                    writer.WritePropertyName("usedLoadingSlots");
                    JsonSerializer.Serialize(writer, patchTourActionRequest.UsedLoadingSlots, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("usedLoadingSlots");
        }
    }
}
