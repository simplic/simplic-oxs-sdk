// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of shipment item.
    /// </summary>
    public partial class ShipmentItemModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ShipmentItemModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentItemModel" /> class.
        /// </summary>
        /// <param name="article">article</param>
        /// <param name="billingLines">Gets or sets the billing lines.  &lt;br&gt;  Billing lines determine which persons can be billed which amounts.  </param>
        /// <param name="id">Gets or sets the id.  &lt;br&gt;  Represents the id of a shipment-item, this id must be unique  </param>
        /// <param name="loadingAidType">loadingAidType</param>
        /// <param name="loadingMeters">Gets or sets the loading meters.  &lt;br&gt;  Loading meters define how many space a packed object will use on a trailer.  </param>
        /// <param name="quantity">quantity</param>
        /// <param name="reference">Gets or sets the external reference.</param>
        /// <param name="status">status</param>
        /// <param name="text">Gets or sets the text.  &lt;br&gt;  The text is a field for the user to give more context to the shipment item and the billing.  </param>
        /// <param name="weight">weight</param>
        /// <param name="weightNotes">Gets or sets the weight notes.  &lt;br&gt;  Weight notes are used to get the real amount of the driven freight.  </param>
        //[JsonConstructor]
        public ShipmentItemModel(Option<ShipmentArticleModel> article = default, Option<List<BillingLineModel>> billingLines = default, Option<Guid> id = default, Option<ShipmentLoadingAidTypeModel> loadingAidType = default, Option<double> loadingMeters = default, Option<QuantityModel> quantity = default, Option<string> reference = default, Option<ShipmentItemStatusModel> status = default, Option<string> text = default, Option<QuantityModel> weight = default, Option<List<WeightNoteModel>> weightNotes = default)
        {
            ArticleOption = article;
            BillingLinesOption = billingLines;
            IdOption = id;
            LoadingAidTypeOption = loadingAidType;
            LoadingMetersOption = loadingMeters;
            QuantityOption = quantity;
            ReferenceOption = reference;
            StatusOption = status;
            TextOption = text;
            WeightOption = weight;
            WeightNotesOption = weightNotes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Article
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ShipmentArticleModel>))]
        public Option<ShipmentArticleModel> ArticleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Article
        /// </summary>
        [JsonPropertyName("article")]
        public ShipmentArticleModel? Article { get { return this. ArticleOption; } set { this.ArticleOption = new Option<ShipmentArticleModel>(value); } }

        /// <summary>
        /// Used to track the state of BillingLines
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<BillingLineModel>>))]
        public Option<List<BillingLineModel>> BillingLinesOption { get; private set; }

        /// <summary>
        /// Gets or sets the billing lines.  &lt;br&gt;  Billing lines determine which persons can be billed which amounts.  
        /// </summary>
        /// <value>Gets or sets the billing lines.  &lt;br&gt;  Billing lines determine which persons can be billed which amounts.  </value>
        [JsonPropertyName("billingLines")]
        public List<BillingLineModel>? BillingLines { get { return this. BillingLinesOption; } set { this.BillingLinesOption = new Option<List<BillingLineModel>>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id.  &lt;br&gt;  Represents the id of a shipment-item, this id must be unique  
        /// </summary>
        /// <value>Gets or sets the id.  &lt;br&gt;  Represents the id of a shipment-item, this id must be unique  </value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of LoadingAidType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ShipmentLoadingAidTypeModel>))]
        public Option<ShipmentLoadingAidTypeModel> LoadingAidTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets LoadingAidType
        /// </summary>
        [JsonPropertyName("loadingAidType")]
        public ShipmentLoadingAidTypeModel? LoadingAidType { get { return this. LoadingAidTypeOption; } set { this.LoadingAidTypeOption = new Option<ShipmentLoadingAidTypeModel>(value); } }

        /// <summary>
        /// Used to track the state of LoadingMeters
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> LoadingMetersOption { get; private set; }

        /// <summary>
        /// Gets or sets the loading meters.  &lt;br&gt;  Loading meters define how many space a packed object will use on a trailer.  
        /// </summary>
        /// <value>Gets or sets the loading meters.  &lt;br&gt;  Loading meters define how many space a packed object will use on a trailer.  </value>
        [JsonPropertyName("loadingMeters")]
        public double? LoadingMeters { get { return this. LoadingMetersOption; } set { this.LoadingMetersOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<QuantityModel>))]
        public Option<QuantityModel> QuantityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public QuantityModel? Quantity { get { return this. QuantityOption; } set { this.QuantityOption = new Option<QuantityModel>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Gets or sets the external reference.
        /// </summary>
        /// <value>Gets or sets the external reference.</value>
        [JsonPropertyName("reference")]
        public string? Reference { get { return this. ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ShipmentItemStatusModel>))]
        public Option<ShipmentItemStatusModel> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public ShipmentItemStatusModel? Status { get { return this. StatusOption; } set { this.StatusOption = new Option<ShipmentItemStatusModel>(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TextOption { get; private set; }

        /// <summary>
        /// Gets or sets the text.  &lt;br&gt;  The text is a field for the user to give more context to the shipment item and the billing.  
        /// </summary>
        /// <value>Gets or sets the text.  &lt;br&gt;  The text is a field for the user to give more context to the shipment item and the billing.  </value>
        [JsonPropertyName("text")]
        public string? Text { get { return this. TextOption; } set { this.TextOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Weight
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<QuantityModel>))]
        public Option<QuantityModel> WeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [JsonPropertyName("weight")]
        public QuantityModel? Weight { get { return this. WeightOption; } set { this.WeightOption = new Option<QuantityModel>(value); } }

        /// <summary>
        /// Used to track the state of WeightNotes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<WeightNoteModel>>))]
        public Option<List<WeightNoteModel>> WeightNotesOption { get; private set; }

        /// <summary>
        /// Gets or sets the weight notes.  &lt;br&gt;  Weight notes are used to get the real amount of the driven freight.  
        /// </summary>
        /// <value>Gets or sets the weight notes.  &lt;br&gt;  Weight notes are used to get the real amount of the driven freight.  </value>
        [JsonPropertyName("weightNotes")]
        public List<WeightNoteModel>? WeightNotes { get { return this. WeightNotesOption; } set { this.WeightNotesOption = new Option<List<WeightNoteModel>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentItemModel {\n");
            sb.Append("  Article: ").Append(Article).Append("\n");
            sb.Append("  BillingLines: ").Append(BillingLines).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LoadingAidType: ").Append(LoadingAidType).Append("\n");
            sb.Append("  LoadingMeters: ").Append(LoadingMeters).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  WeightNotes: ").Append(WeightNotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentItemModel" />
    /// </summary>
    public class ShipmentItemModelJsonConverter : JsonConverter<ShipmentItemModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShipmentItemModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentItemModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ShipmentArticleModel> article = default;
            Option<List<BillingLineModel>> billingLines = default;
            Option<Guid> id = default;
            Option<ShipmentLoadingAidTypeModel> loadingAidType = default;
            Option<double> loadingMeters = default;
            Option<QuantityModel> quantity = default;
            Option<string> reference = default;
            Option<ShipmentItemStatusModel> status = default;
            Option<string> text = default;
            Option<QuantityModel> weight = default;
            Option<List<WeightNoteModel>> weightNotes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "article":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                article = new Option<ShipmentArticleModel>(JsonSerializer.Deserialize<ShipmentArticleModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "billingLines":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                billingLines = new Option<List<BillingLineModel>>(JsonSerializer.Deserialize<List<BillingLineModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "loadingAidType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadingAidType = new Option<ShipmentLoadingAidTypeModel>(JsonSerializer.Deserialize<ShipmentLoadingAidTypeModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "loadingMeters":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadingMeters = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<QuantityModel>(JsonSerializer.Deserialize<QuantityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<ShipmentItemStatusModel>(JsonSerializer.Deserialize<ShipmentItemStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "text":
                            text = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "weight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                weight = new Option<QuantityModel>(JsonSerializer.Deserialize<QuantityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "weightNotes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                weightNotes = new Option<List<WeightNoteModel>>(JsonSerializer.Deserialize<List<WeightNoteModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (article.IsSet && article.Value == null)
                throw new ArgumentNullException(nameof(article), "Property is not nullable for class ShipmentItemModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ShipmentItemModel.");

            if (loadingAidType.IsSet && loadingAidType.Value == null)
                throw new ArgumentNullException(nameof(loadingAidType), "Property is not nullable for class ShipmentItemModel.");

            if (loadingMeters.IsSet && loadingMeters.Value == null)
                throw new ArgumentNullException(nameof(loadingMeters), "Property is not nullable for class ShipmentItemModel.");

            if (quantity.IsSet && quantity.Value == null)
                throw new ArgumentNullException(nameof(quantity), "Property is not nullable for class ShipmentItemModel.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ShipmentItemModel.");

            if (weight.IsSet && weight.Value == null)
                throw new ArgumentNullException(nameof(weight), "Property is not nullable for class ShipmentItemModel.");

            //2return new ShipmentItemModel(article, billingLines, id, loadingAidType, loadingMeters, quantity, reference, status, text, weight, weightNotes);
            return new ShipmentItemModel(article, billingLines, id, loadingAidType, loadingMeters, quantity, reference, status, text, weight, weightNotes);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentItemModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentItemModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentItemModel shipmentItemModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, shipmentItemModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentItemModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentItemModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ShipmentItemModel shipmentItemModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentItemModel.ArticleOption.IsSet && shipmentItemModel.Article == null)
                throw new ArgumentNullException(nameof(shipmentItemModel.Article), "Property is required for class ShipmentItemModel.");

            if (shipmentItemModel.LoadingAidTypeOption.IsSet && shipmentItemModel.LoadingAidType == null)
                throw new ArgumentNullException(nameof(shipmentItemModel.LoadingAidType), "Property is required for class ShipmentItemModel.");

            if (shipmentItemModel.QuantityOption.IsSet && shipmentItemModel.Quantity == null)
                throw new ArgumentNullException(nameof(shipmentItemModel.Quantity), "Property is required for class ShipmentItemModel.");

            if (shipmentItemModel.StatusOption.IsSet && shipmentItemModel.Status == null)
                throw new ArgumentNullException(nameof(shipmentItemModel.Status), "Property is required for class ShipmentItemModel.");

            if (shipmentItemModel.WeightOption.IsSet && shipmentItemModel.Weight == null)
                throw new ArgumentNullException(nameof(shipmentItemModel.Weight), "Property is required for class ShipmentItemModel.");

            if (shipmentItemModel.ArticleOption.IsSet)
            {
                writer.WritePropertyName("article");
                JsonSerializer.Serialize(writer, shipmentItemModel.Article, jsonSerializerOptions);
            }
            if (shipmentItemModel.BillingLinesOption.IsSet)
                if (shipmentItemModel.BillingLinesOption.Value != null)
                {
                    writer.WritePropertyName("billingLines");
                    JsonSerializer.Serialize(writer, shipmentItemModel.BillingLines, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("billingLines");
            if (shipmentItemModel.IdOption.IsSet)
                writer.WriteString("id", shipmentItemModel.IdOption!.Value);

            if (shipmentItemModel.LoadingAidTypeOption.IsSet)
            {
                writer.WritePropertyName("loadingAidType");
                JsonSerializer.Serialize(writer, shipmentItemModel.LoadingAidType, jsonSerializerOptions);
            }
            if (shipmentItemModel.LoadingMetersOption.IsSet)
                writer.WriteNumber("loadingMeters", shipmentItemModel.LoadingMetersOption!.Value);

            if (shipmentItemModel.QuantityOption.IsSet)
            {
                writer.WritePropertyName("quantity");
                JsonSerializer.Serialize(writer, shipmentItemModel.Quantity, jsonSerializerOptions);
            }
            if (shipmentItemModel.ReferenceOption.IsSet)
                if (shipmentItemModel.ReferenceOption.Value != null)
                {
                    writer.WriteString("reference", shipmentItemModel.Reference);
                    //var __value = shipmentItemModel.ReferenceOption.Value;
                    //writer.WriteString("reference", __value);
                }
                else
                    writer.WriteNull("reference");

            if (shipmentItemModel.StatusOption.IsSet)
            {
                writer.WritePropertyName("status");
                JsonSerializer.Serialize(writer, shipmentItemModel.Status, jsonSerializerOptions);
            }
            if (shipmentItemModel.TextOption.IsSet)
                if (shipmentItemModel.TextOption.Value != null)
                {
                    writer.WriteString("text", shipmentItemModel.Text);
                    //var __value = shipmentItemModel.TextOption.Value;
                    //writer.WriteString("text", __value);
                }
                else
                    writer.WriteNull("text");

            if (shipmentItemModel.WeightOption.IsSet)
            {
                writer.WritePropertyName("weight");
                JsonSerializer.Serialize(writer, shipmentItemModel.Weight, jsonSerializerOptions);
            }
            if (shipmentItemModel.WeightNotesOption.IsSet)
                if (shipmentItemModel.WeightNotesOption.Value != null)
                {
                    writer.WritePropertyName("weightNotes");
                    JsonSerializer.Serialize(writer, shipmentItemModel.WeightNotes, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("weightNotes");
        }
    }
}
