// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// ManipulateTourRequest
    /// </summary>
    public partial class ManipulateTourRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ManipulateTourRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManipulateTourRequest" /> class.
        /// </summary>
        /// <param name="newEndDate">newEndDate</param>
        /// <param name="newResourceId">newResourceId</param>
        /// <param name="newStartDate">newStartDate</param>
        /// <param name="tourId">tourId</param>
        //[JsonConstructor]
        public ManipulateTourRequest(Option<DateTime> newEndDate = default, Option<Guid> newResourceId = default, Option<DateTime> newStartDate = default, Option<Guid> tourId = default)
        {
            NewEndDateOption = newEndDate;
            NewResourceIdOption = newResourceId;
            NewStartDateOption = newStartDate;
            TourIdOption = tourId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of NewEndDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> NewEndDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets NewEndDate
        /// </summary>
        [JsonPropertyName("newEndDate")]
        public DateTime? NewEndDate { get { return this. NewEndDateOption; } set { this.NewEndDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of NewResourceId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> NewResourceIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets NewResourceId
        /// </summary>
        [JsonPropertyName("newResourceId")]
        public Guid? NewResourceId { get { return this. NewResourceIdOption; } set { this.NewResourceIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of NewStartDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> NewStartDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets NewStartDate
        /// </summary>
        [JsonPropertyName("newStartDate")]
        public DateTime? NewStartDate { get { return this. NewStartDateOption; } set { this.NewStartDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of TourId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TourIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TourId
        /// </summary>
        [JsonPropertyName("tourId")]
        public Guid? TourId { get { return this. TourIdOption; } set { this.TourIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManipulateTourRequest {\n");
            sb.Append("  NewEndDate: ").Append(NewEndDate).Append("\n");
            sb.Append("  NewResourceId: ").Append(NewResourceId).Append("\n");
            sb.Append("  NewStartDate: ").Append(NewStartDate).Append("\n");
            sb.Append("  TourId: ").Append(TourId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManipulateTourRequest" />
    /// </summary>
    public class ManipulateTourRequestJsonConverter : JsonConverter<ManipulateTourRequest>
    {
        /// <summary>
        /// The format to use to serialize NewEndDate
        /// </summary>
        public static string NewEndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize NewStartDate
        /// </summary>
        public static string NewStartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ManipulateTourRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManipulateTourRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> newEndDate = default;
            Option<Guid> newResourceId = default;
            Option<DateTime> newStartDate = default;
            Option<Guid> tourId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "newEndDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                newEndDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "newResourceId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                newResourceId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "newStartDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                newStartDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tourId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tourId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (newEndDate.IsSet && newEndDate.Value == null)
                throw new ArgumentNullException(nameof(newEndDate), "Property is not nullable for class ManipulateTourRequest.");

            if (newStartDate.IsSet && newStartDate.Value == null)
                throw new ArgumentNullException(nameof(newStartDate), "Property is not nullable for class ManipulateTourRequest.");

            if (tourId.IsSet && tourId.Value == null)
                throw new ArgumentNullException(nameof(tourId), "Property is not nullable for class ManipulateTourRequest.");

            //2return new ManipulateTourRequest(newEndDate, newResourceId, newStartDate, tourId);
            return new ManipulateTourRequest(newEndDate, newResourceId, newStartDate, tourId);
        }

        /// <summary>
        /// Serializes a <see cref="ManipulateTourRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manipulateTourRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManipulateTourRequest manipulateTourRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, manipulateTourRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManipulateTourRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manipulateTourRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ManipulateTourRequest manipulateTourRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (manipulateTourRequest.NewEndDateOption.IsSet)
                writer.WriteString("newEndDate", manipulateTourRequest.NewEndDateOption!.Value.ToString(NewEndDateFormat));

            if (manipulateTourRequest.NewResourceIdOption.IsSet)
                if (manipulateTourRequest.NewResourceIdOption.Value != null)
                {
                    writer.WriteString("newResourceId", manipulateTourRequest.NewResourceIdOption!.Value);
                    //var __value = manipulateTourRequest.NewResourceIdOption.Value;
                    //writer.WriteString("newResourceId", __value);
                }
                else
                    writer.WriteNull("newResourceId");

            if (manipulateTourRequest.NewStartDateOption.IsSet)
                writer.WriteString("newStartDate", manipulateTourRequest.NewStartDateOption!.Value.ToString(NewStartDateFormat));

            if (manipulateTourRequest.TourIdOption.IsSet)
                writer.WriteString("tourId", manipulateTourRequest.TourIdOption!.Value);
        }
    }
}
