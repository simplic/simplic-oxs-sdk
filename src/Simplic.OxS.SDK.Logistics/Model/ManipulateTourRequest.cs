/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Logistics.Client.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Logistics.Model
{
    /// <summary>
    /// ManipulateTourRequest
    /// </summary>
    [DataContract(Name = "ManipulateTourRequest")]
    public partial class ManipulateTourRequest : IEquatable<ManipulateTourRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManipulateTourRequest" /> class.
        /// </summary>
        /// <param name="tourId">tourId.</param>
        /// <param name="newStartDate">newStartDate.</param>
        /// <param name="newEndDate">newEndDate.</param>
        /// <param name="newResourceId">newResourceId.</param>
        public ManipulateTourRequest(Guid tourId = default(Guid), DateTime newStartDate = default(DateTime), DateTime newEndDate = default(DateTime), Guid? newResourceId = default(Guid?))
        {
            this.TourId = tourId;
            this.NewStartDate = newStartDate;
            this.NewEndDate = newEndDate;
            this.NewResourceId = newResourceId;
        }

        /// <summary>
        /// Gets or Sets TourId
        /// </summary>
        [DataMember(Name = "tourId", EmitDefaultValue = false)]
        public Guid TourId { get; set; }

        /// <summary>
        /// Gets or Sets NewStartDate
        /// </summary>
        [DataMember(Name = "newStartDate", EmitDefaultValue = false)]
        public DateTime NewStartDate { get; set; }

        /// <summary>
        /// Gets or Sets NewEndDate
        /// </summary>
        [DataMember(Name = "newEndDate", EmitDefaultValue = false)]
        public DateTime NewEndDate { get; set; }

        /// <summary>
        /// Gets or Sets NewResourceId
        /// </summary>
        [DataMember(Name = "newResourceId", EmitDefaultValue = true)]
        public Guid? NewResourceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManipulateTourRequest {\n");
            sb.Append("  TourId: ").Append(TourId).Append("\n");
            sb.Append("  NewStartDate: ").Append(NewStartDate).Append("\n");
            sb.Append("  NewEndDate: ").Append(NewEndDate).Append("\n");
            sb.Append("  NewResourceId: ").Append(NewResourceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManipulateTourRequest);
        }

        /// <summary>
        /// Returns true if ManipulateTourRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ManipulateTourRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManipulateTourRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TourId == input.TourId ||
                    (this.TourId != null &&
                    this.TourId.Equals(input.TourId))
                ) && 
                (
                    this.NewStartDate == input.NewStartDate ||
                    (this.NewStartDate != null &&
                    this.NewStartDate.Equals(input.NewStartDate))
                ) && 
                (
                    this.NewEndDate == input.NewEndDate ||
                    (this.NewEndDate != null &&
                    this.NewEndDate.Equals(input.NewEndDate))
                ) && 
                (
                    this.NewResourceId == input.NewResourceId ||
                    (this.NewResourceId != null &&
                    this.NewResourceId.Equals(input.NewResourceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TourId != null)
                {
                    hashCode = (hashCode * 59) + this.TourId.GetHashCode();
                }
                if (this.NewStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.NewStartDate.GetHashCode();
                }
                if (this.NewEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.NewEndDate.GetHashCode();
                }
                if (this.NewResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.NewResourceId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
