// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of weight note.
    /// </summary>
    public partial class WeightNoteModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public WeightNoteModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WeightNoteModel" /> class.
        /// </summary>
        /// <param name="createDateTime">Gets or sets the create date time.</param>
        /// <param name="documentId">Gets or sets the document id.  &lt;br&gt;  References a document with the weight note.  </param>
        /// <param name="firstDateTime">Gets or sets the first date time.  &lt;br&gt;  Represents the date and time of the first weighing.  </param>
        /// <param name="firstWeight">firstWeight</param>
        /// <param name="id">Gets or sets the id.  &lt;br&gt;  Represents the unique identifier of the weight note.  </param>
        /// <param name="isDeleted">Gets or sets whether the weight note is deleted.</param>
        /// <param name="number">Gets or sets the number.  &lt;br&gt;  The number is usually given by the scale operator/ scale document.  </param>
        /// <param name="quantity">quantity</param>
        /// <param name="reference">Gets or sets the external reference.</param>
        /// <param name="secondDateTime">Gets or sets the second date time.  &lt;br&gt;  Represents the date and time of the second weighing.  </param>
        /// <param name="secondWeight">secondWeight</param>
        /// <param name="type">type</param>
        //[JsonConstructor]
        public WeightNoteModel(Option<DateTime> createDateTime = default, Option<Guid> documentId = default, Option<DateTime> firstDateTime = default, Option<QuantityModel> firstWeight = default, Option<Guid> id = default, Option<bool> isDeleted = default, Option<string> number = default, Option<QuantityModel> quantity = default, Option<string> reference = default, Option<DateTime> secondDateTime = default, Option<QuantityModel> secondWeight = default, Option<WeightNoteType> type = default)
        {
            CreateDateTimeOption = createDateTime;
            DocumentIdOption = documentId;
            FirstDateTimeOption = firstDateTime;
            FirstWeightOption = firstWeight;
            IdOption = id;
            IsDeletedOption = isDeleted;
            NumberOption = number;
            QuantityOption = quantity;
            ReferenceOption = reference;
            SecondDateTimeOption = secondDateTime;
            SecondWeightOption = secondWeight;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<WeightNoteType>))]
        public Option<WeightNoteType> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public WeightNoteType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<WeightNoteType>(value); } }

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the create date time.
        /// </summary>
        /// <value>Gets or sets the create date time.</value>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of DocumentId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> DocumentIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the document id.  &lt;br&gt;  References a document with the weight note.  
        /// </summary>
        /// <value>Gets or sets the document id.  &lt;br&gt;  References a document with the weight note.  </value>
        [JsonPropertyName("documentId")]
        public Guid? DocumentId { get { return this. DocumentIdOption; } set { this.DocumentIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of FirstDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> FirstDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the first date time.  &lt;br&gt;  Represents the date and time of the first weighing.  
        /// </summary>
        /// <value>Gets or sets the first date time.  &lt;br&gt;  Represents the date and time of the first weighing.  </value>
        [JsonPropertyName("firstDateTime")]
        public DateTime? FirstDateTime { get { return this. FirstDateTimeOption; } set { this.FirstDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of FirstWeight
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<QuantityModel>))]
        public Option<QuantityModel> FirstWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstWeight
        /// </summary>
        [JsonPropertyName("firstWeight")]
        public QuantityModel? FirstWeight { get { return this. FirstWeightOption; } set { this.FirstWeightOption = new Option<QuantityModel>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id.  &lt;br&gt;  Represents the unique identifier of the weight note.  
        /// </summary>
        /// <value>Gets or sets the id.  &lt;br&gt;  Represents the unique identifier of the weight note.  </value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or sets whether the weight note is deleted.
        /// </summary>
        /// <value>Gets or sets whether the weight note is deleted.</value>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the number.  &lt;br&gt;  The number is usually given by the scale operator/ scale document.  
        /// </summary>
        /// <value>Gets or sets the number.  &lt;br&gt;  The number is usually given by the scale operator/ scale document.  </value>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<QuantityModel>))]
        public Option<QuantityModel> QuantityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public QuantityModel? Quantity { get { return this. QuantityOption; } set { this.QuantityOption = new Option<QuantityModel>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Gets or sets the external reference.
        /// </summary>
        /// <value>Gets or sets the external reference.</value>
        [JsonPropertyName("reference")]
        public string? Reference { get { return this. ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SecondDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> SecondDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the second date time.  &lt;br&gt;  Represents the date and time of the second weighing.  
        /// </summary>
        /// <value>Gets or sets the second date time.  &lt;br&gt;  Represents the date and time of the second weighing.  </value>
        [JsonPropertyName("secondDateTime")]
        public DateTime? SecondDateTime { get { return this. SecondDateTimeOption; } set { this.SecondDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of SecondWeight
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<QuantityModel>))]
        public Option<QuantityModel> SecondWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets SecondWeight
        /// </summary>
        [JsonPropertyName("secondWeight")]
        public QuantityModel? SecondWeight { get { return this. SecondWeightOption; } set { this.SecondWeightOption = new Option<QuantityModel>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WeightNoteModel {\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  FirstDateTime: ").Append(FirstDateTime).Append("\n");
            sb.Append("  FirstWeight: ").Append(FirstWeight).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  SecondDateTime: ").Append(SecondDateTime).Append("\n");
            sb.Append("  SecondWeight: ").Append(SecondWeight).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WeightNoteModel" />
    /// </summary>
    public class WeightNoteModelJsonConverter : JsonConverter<WeightNoteModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize FirstDateTime
        /// </summary>
        public static string FirstDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize SecondDateTime
        /// </summary>
        public static string SecondDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WeightNoteModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WeightNoteModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> createDateTime = default;
            Option<Guid> documentId = default;
            Option<DateTime> firstDateTime = default;
            Option<QuantityModel> firstWeight = default;
            Option<Guid> id = default;
            Option<bool> isDeleted = default;
            Option<string> number = default;
            Option<QuantityModel> quantity = default;
            Option<string> reference = default;
            Option<DateTime> secondDateTime = default;
            Option<QuantityModel> secondWeight = default;
            Option<WeightNoteType> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "documentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                documentId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "firstDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                firstDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "firstWeight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                firstWeight = new Option<QuantityModel>(JsonSerializer.Deserialize<QuantityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<QuantityModel>(JsonSerializer.Deserialize<QuantityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "secondDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                secondDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "secondWeight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                secondWeight = new Option<QuantityModel>(JsonSerializer.Deserialize<QuantityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<WeightNoteType>(WeightNoteTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class WeightNoteModel.");

            if (firstDateTime.IsSet && firstDateTime.Value == null)
                throw new ArgumentNullException(nameof(firstDateTime), "Property is not nullable for class WeightNoteModel.");

            if (firstWeight.IsSet && firstWeight.Value == null)
                throw new ArgumentNullException(nameof(firstWeight), "Property is not nullable for class WeightNoteModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WeightNoteModel.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class WeightNoteModel.");

            if (quantity.IsSet && quantity.Value == null)
                throw new ArgumentNullException(nameof(quantity), "Property is not nullable for class WeightNoteModel.");

            if (secondDateTime.IsSet && secondDateTime.Value == null)
                throw new ArgumentNullException(nameof(secondDateTime), "Property is not nullable for class WeightNoteModel.");

            if (secondWeight.IsSet && secondWeight.Value == null)
                throw new ArgumentNullException(nameof(secondWeight), "Property is not nullable for class WeightNoteModel.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class WeightNoteModel.");

            //2return new WeightNoteModel(createDateTime, documentId, firstDateTime, firstWeight, id, isDeleted, number, quantity, reference, secondDateTime, secondWeight, type);
            return new WeightNoteModel(createDateTime, documentId, firstDateTime, firstWeight, id, isDeleted, number, quantity, reference, secondDateTime, secondWeight, type);
        }

        /// <summary>
        /// Serializes a <see cref="WeightNoteModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="weightNoteModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WeightNoteModel weightNoteModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, weightNoteModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WeightNoteModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="weightNoteModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, WeightNoteModel weightNoteModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (weightNoteModel.FirstWeightOption.IsSet && weightNoteModel.FirstWeight == null)
                throw new ArgumentNullException(nameof(weightNoteModel.FirstWeight), "Property is required for class WeightNoteModel.");

            if (weightNoteModel.QuantityOption.IsSet && weightNoteModel.Quantity == null)
                throw new ArgumentNullException(nameof(weightNoteModel.Quantity), "Property is required for class WeightNoteModel.");

            if (weightNoteModel.SecondWeightOption.IsSet && weightNoteModel.SecondWeight == null)
                throw new ArgumentNullException(nameof(weightNoteModel.SecondWeight), "Property is required for class WeightNoteModel.");

            if (weightNoteModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", weightNoteModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (weightNoteModel.DocumentIdOption.IsSet)
                if (weightNoteModel.DocumentIdOption.Value != null)
                {
                    writer.WriteString("documentId", weightNoteModel.DocumentIdOption!.Value);
                    //var __value = weightNoteModel.DocumentIdOption.Value;
                    //writer.WriteString("documentId", __value);
                }
                else
                    writer.WriteNull("documentId");

            if (weightNoteModel.FirstDateTimeOption.IsSet)
                writer.WriteString("firstDateTime", weightNoteModel.FirstDateTimeOption!.Value.ToString(FirstDateTimeFormat));

            if (weightNoteModel.FirstWeightOption.IsSet)
            {
                writer.WritePropertyName("firstWeight");
                JsonSerializer.Serialize(writer, weightNoteModel.FirstWeight, jsonSerializerOptions);
            }
            if (weightNoteModel.IdOption.IsSet)
                writer.WriteString("id", weightNoteModel.IdOption!.Value);

            if (weightNoteModel.IsDeletedOption.IsSet)
                writer.WriteBoolean("isDeleted", weightNoteModel.IsDeletedOption!.Value);

            if (weightNoteModel.NumberOption.IsSet)
                if (weightNoteModel.NumberOption.Value != null)
                {
                    writer.WriteString("number", weightNoteModel.Number);
                    //var __value = weightNoteModel.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (weightNoteModel.QuantityOption.IsSet)
            {
                writer.WritePropertyName("quantity");
                JsonSerializer.Serialize(writer, weightNoteModel.Quantity, jsonSerializerOptions);
            }
            if (weightNoteModel.ReferenceOption.IsSet)
                if (weightNoteModel.ReferenceOption.Value != null)
                {
                    writer.WriteString("reference", weightNoteModel.Reference);
                    //var __value = weightNoteModel.ReferenceOption.Value;
                    //writer.WriteString("reference", __value);
                }
                else
                    writer.WriteNull("reference");

            if (weightNoteModel.SecondDateTimeOption.IsSet)
                writer.WriteString("secondDateTime", weightNoteModel.SecondDateTimeOption!.Value.ToString(SecondDateTimeFormat));

            if (weightNoteModel.SecondWeightOption.IsSet)
            {
                writer.WritePropertyName("secondWeight");
                JsonSerializer.Serialize(writer, weightNoteModel.SecondWeight, jsonSerializerOptions);
            }
            if (weightNoteModel.TypeOption.IsSet)
            {
                var typeRawValue = WeightNoteTypeValueConverter.ToJsonValue(weightNoteModel.Type!.Value);
                writer.WriteNumber("type", typeRawValue);
            }
        }
    }
}
