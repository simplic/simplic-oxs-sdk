/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Response when getting composed location information.
    /// </summary>
    [DataContract(Name = "GetComposedLocationResponse")]
    public partial class GetComposedLocationResponse : IEquatable<GetComposedLocationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetComposedLocationResponse" /> class.
        /// </summary>
        /// <param name="latitude">Gets or sets the latitude of the composed resource..</param>
        /// <param name="longitude">Gets or sets the longitude of the composed resource..</param>
        /// <param name="address">address.</param>
        /// <param name="geofenceId">Gets or sets a geofence id if the composed resource is in one..</param>
        /// <param name="geofenceName">Gets or sets the geofence name if the composed resoource is in one..</param>
        public GetComposedLocationResponse(double? latitude = default(double?), double? longitude = default(double?), GetComposedAddressResponse address = default(GetComposedAddressResponse), Guid? geofenceId = default(Guid?), string geofenceName = default(string))
        {
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Address = address;
            this.GeofenceId = geofenceId;
            this.GeofenceName = geofenceName;
        }

        /// <summary>
        /// Gets or sets the latitude of the composed resource.
        /// </summary>
        /// <value>Gets or sets the latitude of the composed resource.</value>
        [DataMember(Name = "latitude", EmitDefaultValue = true)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or sets the longitude of the composed resource.
        /// </summary>
        /// <value>Gets or sets the longitude of the composed resource.</value>
        [DataMember(Name = "longitude", EmitDefaultValue = true)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public GetComposedAddressResponse Address { get; set; }

        /// <summary>
        /// Gets or sets a geofence id if the composed resource is in one.
        /// </summary>
        /// <value>Gets or sets a geofence id if the composed resource is in one.</value>
        [DataMember(Name = "geofenceId", EmitDefaultValue = true)]
        public Guid? GeofenceId { get; set; }

        /// <summary>
        /// Gets or sets the geofence name if the composed resoource is in one.
        /// </summary>
        /// <value>Gets or sets the geofence name if the composed resoource is in one.</value>
        [DataMember(Name = "geofenceName", EmitDefaultValue = true)]
        public string GeofenceName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetComposedLocationResponse {\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  GeofenceId: ").Append(GeofenceId).Append("\n");
            sb.Append("  GeofenceName: ").Append(GeofenceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetComposedLocationResponse);
        }

        /// <summary>
        /// Returns true if GetComposedLocationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetComposedLocationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetComposedLocationResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.GeofenceId == input.GeofenceId ||
                    (this.GeofenceId != null &&
                    this.GeofenceId.Equals(input.GeofenceId))
                ) && 
                (
                    this.GeofenceName == input.GeofenceName ||
                    (this.GeofenceName != null &&
                    this.GeofenceName.Equals(input.GeofenceName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Latitude != null)
                {
                    hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                }
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.GeofenceId != null)
                {
                    hashCode = (hashCode * 59) + this.GeofenceId.GetHashCode();
                }
                if (this.GeofenceName != null)
                {
                    hashCode = (hashCode * 59) + this.GeofenceName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
