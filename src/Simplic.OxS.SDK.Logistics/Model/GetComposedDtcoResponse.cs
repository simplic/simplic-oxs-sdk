/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Response to get composed dtco data.
    /// </summary>
    [DataContract(Name = "GetComposedDtcoResponse")]
    public partial class GetComposedDtcoResponse : IEquatable<GetComposedDtcoResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetComposedDtcoResponse" /> class.
        /// </summary>
        /// <param name="remainingDailyDrivingTime">Gets or sets the remaining driving time for the day..</param>
        /// <param name="remainingWeeklyDrivingTime">Gets or sets the remaining driving time for the week..</param>
        /// <param name="remainingDoubleWeeklyDrivingTime">Gets or sets the remaining driving time for the bi weekly cycle..</param>
        public GetComposedDtcoResponse(string remainingDailyDrivingTime = default(string), string remainingWeeklyDrivingTime = default(string), string remainingDoubleWeeklyDrivingTime = default(string))
        {
            this.RemainingDailyDrivingTime = remainingDailyDrivingTime;
            this.RemainingWeeklyDrivingTime = remainingWeeklyDrivingTime;
            this.RemainingDoubleWeeklyDrivingTime = remainingDoubleWeeklyDrivingTime;
        }

        /// <summary>
        /// Gets or sets the remaining driving time for the day.
        /// </summary>
        /// <value>Gets or sets the remaining driving time for the day.</value>
        [DataMember(Name = "remainingDailyDrivingTime", EmitDefaultValue = false)]
        public string RemainingDailyDrivingTime { get; set; }

        /// <summary>
        /// Gets or sets the remaining driving time for the week.
        /// </summary>
        /// <value>Gets or sets the remaining driving time for the week.</value>
        [DataMember(Name = "remainingWeeklyDrivingTime", EmitDefaultValue = false)]
        public string RemainingWeeklyDrivingTime { get; set; }

        /// <summary>
        /// Gets or sets the remaining driving time for the bi weekly cycle.
        /// </summary>
        /// <value>Gets or sets the remaining driving time for the bi weekly cycle.</value>
        [DataMember(Name = "remainingDoubleWeeklyDrivingTime", EmitDefaultValue = false)]
        public string RemainingDoubleWeeklyDrivingTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetComposedDtcoResponse {\n");
            sb.Append("  RemainingDailyDrivingTime: ").Append(RemainingDailyDrivingTime).Append("\n");
            sb.Append("  RemainingWeeklyDrivingTime: ").Append(RemainingWeeklyDrivingTime).Append("\n");
            sb.Append("  RemainingDoubleWeeklyDrivingTime: ").Append(RemainingDoubleWeeklyDrivingTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetComposedDtcoResponse);
        }

        /// <summary>
        /// Returns true if GetComposedDtcoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetComposedDtcoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetComposedDtcoResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RemainingDailyDrivingTime == input.RemainingDailyDrivingTime ||
                    (this.RemainingDailyDrivingTime != null &&
                    this.RemainingDailyDrivingTime.Equals(input.RemainingDailyDrivingTime))
                ) && 
                (
                    this.RemainingWeeklyDrivingTime == input.RemainingWeeklyDrivingTime ||
                    (this.RemainingWeeklyDrivingTime != null &&
                    this.RemainingWeeklyDrivingTime.Equals(input.RemainingWeeklyDrivingTime))
                ) && 
                (
                    this.RemainingDoubleWeeklyDrivingTime == input.RemainingDoubleWeeklyDrivingTime ||
                    (this.RemainingDoubleWeeklyDrivingTime != null &&
                    this.RemainingDoubleWeeklyDrivingTime.Equals(input.RemainingDoubleWeeklyDrivingTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RemainingDailyDrivingTime != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingDailyDrivingTime.GetHashCode();
                }
                if (this.RemainingWeeklyDrivingTime != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingWeeklyDrivingTime.GetHashCode();
                }
                if (this.RemainingDoubleWeeklyDrivingTime != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingDoubleWeeklyDrivingTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
