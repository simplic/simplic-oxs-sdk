// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// ShipmentsToTourRequest
    /// </summary>
    public partial class ShipmentsToTourRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ShipmentsToTourRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentsToTourRequest" /> class.
        /// </summary>
        /// <param name="endDateTime">endDateTime</param>
        /// <param name="resourceId">resourceId</param>
        /// <param name="shipmentIds">shipmentIds</param>
        /// <param name="startDateTime">startDateTime</param>
        //[JsonConstructor]
        public ShipmentsToTourRequest(Option<DateTime> endDateTime = default, Option<Guid> resourceId = default, Option<List<Guid>> shipmentIds = default, Option<DateTime> startDateTime = default)
        {
            EndDateTimeOption = endDateTime;
            ResourceIdOption = resourceId;
            ShipmentIdsOption = shipmentIds;
            StartDateTimeOption = startDateTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [JsonPropertyName("endDateTime")]
        public DateTime? EndDateTime { get { return this. EndDateTimeOption; } set { this.EndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of ResourceId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ResourceIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResourceId
        /// </summary>
        [JsonPropertyName("resourceId")]
        public Guid? ResourceId { get { return this. ResourceIdOption; } set { this.ResourceIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of ShipmentIds
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<Guid>>))]
        public Option<List<Guid>> ShipmentIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShipmentIds
        /// </summary>
        [JsonPropertyName("shipmentIds")]
        public List<Guid>? ShipmentIds { get { return this. ShipmentIdsOption; } set { this.ShipmentIdsOption = new Option<List<Guid>>(value); } }

        /// <summary>
        /// Used to track the state of StartDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [JsonPropertyName("startDateTime")]
        public DateTime? StartDateTime { get { return this. StartDateTimeOption; } set { this.StartDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentsToTourRequest {\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  ShipmentIds: ").Append(ShipmentIds).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentsToTourRequest" />
    /// </summary>
    public class ShipmentsToTourRequestJsonConverter : JsonConverter<ShipmentsToTourRequest>
    {
        /// <summary>
        /// The format to use to serialize EndDateTime
        /// </summary>
        public static string EndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDateTime
        /// </summary>
        public static string StartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ShipmentsToTourRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentsToTourRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> endDateTime = default;
            Option<Guid> resourceId = default;
            Option<List<Guid>> shipmentIds = default;
            Option<DateTime> startDateTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "endDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "resourceId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resourceId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "shipmentIds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shipmentIds = new Option<List<Guid>>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "startDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (endDateTime.IsSet && endDateTime.Value == null)
                throw new ArgumentNullException(nameof(endDateTime), "Property is not nullable for class ShipmentsToTourRequest.");

            if (startDateTime.IsSet && startDateTime.Value == null)
                throw new ArgumentNullException(nameof(startDateTime), "Property is not nullable for class ShipmentsToTourRequest.");

            //2return new ShipmentsToTourRequest(endDateTime, resourceId, shipmentIds, startDateTime);
            return new ShipmentsToTourRequest(endDateTime, resourceId, shipmentIds, startDateTime);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentsToTourRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentsToTourRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentsToTourRequest shipmentsToTourRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, shipmentsToTourRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentsToTourRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentsToTourRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ShipmentsToTourRequest shipmentsToTourRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentsToTourRequest.EndDateTimeOption.IsSet)
                writer.WriteString("endDateTime", shipmentsToTourRequest.EndDateTimeOption!.Value.ToString(EndDateTimeFormat));

            if (shipmentsToTourRequest.ResourceIdOption.IsSet)
                if (shipmentsToTourRequest.ResourceIdOption.Value != null)
                {
                    writer.WriteString("resourceId", shipmentsToTourRequest.ResourceIdOption!.Value);
                    //var __value = shipmentsToTourRequest.ResourceIdOption.Value;
                    //writer.WriteString("resourceId", __value);
                }
                else
                    writer.WriteNull("resourceId");

            if (shipmentsToTourRequest.ShipmentIdsOption.IsSet)
                if (shipmentsToTourRequest.ShipmentIdsOption.Value != null)
                {
                    writer.WritePropertyName("shipmentIds");
                    JsonSerializer.Serialize(writer, shipmentsToTourRequest.ShipmentIds, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("shipmentIds");
            if (shipmentsToTourRequest.StartDateTimeOption.IsSet)
                writer.WriteString("startDateTime", shipmentsToTourRequest.StartDateTimeOption!.Value.ToString(StartDateTimeFormat));
        }
    }
}
