// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// TimeSpan
    /// </summary>
    public partial class TimeSpan : IEquatable<TimeSpan?>, IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TimeSpan()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSpan" /> class.
        /// </summary>
        /// <param name="days">days</param>
        /// <param name="hours">hours</param>
        /// <param name="microseconds">microseconds</param>
        /// <param name="milliseconds">milliseconds</param>
        /// <param name="minutes">minutes</param>
        /// <param name="nanoseconds">nanoseconds</param>
        /// <param name="seconds">seconds</param>
        /// <param name="ticks">ticks</param>
        /// <param name="totalDays">totalDays</param>
        /// <param name="totalHours">totalHours</param>
        /// <param name="totalMicroseconds">totalMicroseconds</param>
        /// <param name="totalMilliseconds">totalMilliseconds</param>
        /// <param name="totalMinutes">totalMinutes</param>
        /// <param name="totalNanoseconds">totalNanoseconds</param>
        /// <param name="totalSeconds">totalSeconds</param>
        //[JsonConstructor]
        public TimeSpan(Option<int> days = default, Option<int> hours = default, Option<int> microseconds = default, Option<int> milliseconds = default, Option<int> minutes = default, Option<int> nanoseconds = default, Option<int> seconds = default, Option<long> ticks = default, Option<double> totalDays = default, Option<double> totalHours = default, Option<double> totalMicroseconds = default, Option<double> totalMilliseconds = default, Option<double> totalMinutes = default, Option<double> totalNanoseconds = default, Option<double> totalSeconds = default)
        {
            DaysOption = days;
            HoursOption = hours;
            MicrosecondsOption = microseconds;
            MillisecondsOption = milliseconds;
            MinutesOption = minutes;
            NanosecondsOption = nanoseconds;
            SecondsOption = seconds;
            TicksOption = ticks;
            TotalDaysOption = totalDays;
            TotalHoursOption = totalHours;
            TotalMicrosecondsOption = totalMicroseconds;
            TotalMillisecondsOption = totalMilliseconds;
            TotalMinutesOption = totalMinutes;
            TotalNanosecondsOption = totalNanoseconds;
            TotalSecondsOption = totalSeconds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Days
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> DaysOption { get; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [JsonPropertyName("days")]
        public int? Days { get { return this. DaysOption; } }

        /// <summary>
        /// Used to track the state of Hours
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> HoursOption { get; }

        /// <summary>
        /// Gets or Sets Hours
        /// </summary>
        [JsonPropertyName("hours")]
        public int? Hours { get { return this. HoursOption; } }

        /// <summary>
        /// Used to track the state of Microseconds
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> MicrosecondsOption { get; }

        /// <summary>
        /// Gets or Sets Microseconds
        /// </summary>
        [JsonPropertyName("microseconds")]
        public int? Microseconds { get { return this. MicrosecondsOption; } }

        /// <summary>
        /// Used to track the state of Milliseconds
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> MillisecondsOption { get; }

        /// <summary>
        /// Gets or Sets Milliseconds
        /// </summary>
        [JsonPropertyName("milliseconds")]
        public int? Milliseconds { get { return this. MillisecondsOption; } }

        /// <summary>
        /// Used to track the state of Minutes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> MinutesOption { get; }

        /// <summary>
        /// Gets or Sets Minutes
        /// </summary>
        [JsonPropertyName("minutes")]
        public int? Minutes { get { return this. MinutesOption; } }

        /// <summary>
        /// Used to track the state of Nanoseconds
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> NanosecondsOption { get; }

        /// <summary>
        /// Gets or Sets Nanoseconds
        /// </summary>
        [JsonPropertyName("nanoseconds")]
        public int? Nanoseconds { get { return this. NanosecondsOption; } }

        /// <summary>
        /// Used to track the state of Seconds
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> SecondsOption { get; }

        /// <summary>
        /// Gets or Sets Seconds
        /// </summary>
        [JsonPropertyName("seconds")]
        public int? Seconds { get { return this. SecondsOption; } }

        /// <summary>
        /// Used to track the state of Ticks
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<long>))]
        public Option<long> TicksOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ticks
        /// </summary>
        [JsonPropertyName("ticks")]
        public long? Ticks { get { return this. TicksOption; } set { this.TicksOption = new Option<long>(value); } }

        /// <summary>
        /// Used to track the state of TotalDays
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalDaysOption { get; }

        /// <summary>
        /// Gets or Sets TotalDays
        /// </summary>
        [JsonPropertyName("totalDays")]
        public double? TotalDays { get { return this. TotalDaysOption; } }

        /// <summary>
        /// Used to track the state of TotalHours
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalHoursOption { get; }

        /// <summary>
        /// Gets or Sets TotalHours
        /// </summary>
        [JsonPropertyName("totalHours")]
        public double? TotalHours { get { return this. TotalHoursOption; } }

        /// <summary>
        /// Used to track the state of TotalMicroseconds
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalMicrosecondsOption { get; }

        /// <summary>
        /// Gets or Sets TotalMicroseconds
        /// </summary>
        [JsonPropertyName("totalMicroseconds")]
        public double? TotalMicroseconds { get { return this. TotalMicrosecondsOption; } }

        /// <summary>
        /// Used to track the state of TotalMilliseconds
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalMillisecondsOption { get; }

        /// <summary>
        /// Gets or Sets TotalMilliseconds
        /// </summary>
        [JsonPropertyName("totalMilliseconds")]
        public double? TotalMilliseconds { get { return this. TotalMillisecondsOption; } }

        /// <summary>
        /// Used to track the state of TotalMinutes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalMinutesOption { get; }

        /// <summary>
        /// Gets or Sets TotalMinutes
        /// </summary>
        [JsonPropertyName("totalMinutes")]
        public double? TotalMinutes { get { return this. TotalMinutesOption; } }

        /// <summary>
        /// Used to track the state of TotalNanoseconds
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalNanosecondsOption { get; }

        /// <summary>
        /// Gets or Sets TotalNanoseconds
        /// </summary>
        [JsonPropertyName("totalNanoseconds")]
        public double? TotalNanoseconds { get { return this. TotalNanosecondsOption; } }

        /// <summary>
        /// Used to track the state of TotalSeconds
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalSecondsOption { get; }

        /// <summary>
        /// Gets or Sets TotalSeconds
        /// </summary>
        [JsonPropertyName("totalSeconds")]
        public double? TotalSeconds { get { return this. TotalSecondsOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeSpan {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Microseconds: ").Append(Microseconds).Append("\n");
            sb.Append("  Milliseconds: ").Append(Milliseconds).Append("\n");
            sb.Append("  Minutes: ").Append(Minutes).Append("\n");
            sb.Append("  Nanoseconds: ").Append(Nanoseconds).Append("\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("  Ticks: ").Append(Ticks).Append("\n");
            sb.Append("  TotalDays: ").Append(TotalDays).Append("\n");
            sb.Append("  TotalHours: ").Append(TotalHours).Append("\n");
            sb.Append("  TotalMicroseconds: ").Append(TotalMicroseconds).Append("\n");
            sb.Append("  TotalMilliseconds: ").Append(TotalMilliseconds).Append("\n");
            sb.Append("  TotalMinutes: ").Append(TotalMinutes).Append("\n");
            sb.Append("  TotalNanoseconds: ").Append(TotalNanoseconds).Append("\n");
            sb.Append("  TotalSeconds: ").Append(TotalSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as TimeSpan);
        }

        /// <summary>
        /// Returns true if TimeSpan instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeSpan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeSpan? input)
        {
            if (input == null)
                return false;

            return 
                (
                    Days == input.Days ||
                    Days.Equals(input.Days)
                ) && 
                (
                    Hours == input.Hours ||
                    Hours.Equals(input.Hours)
                ) && 
                (
                    Microseconds == input.Microseconds ||
                    Microseconds.Equals(input.Microseconds)
                ) && 
                (
                    Milliseconds == input.Milliseconds ||
                    Milliseconds.Equals(input.Milliseconds)
                ) && 
                (
                    Minutes == input.Minutes ||
                    Minutes.Equals(input.Minutes)
                ) && 
                (
                    Nanoseconds == input.Nanoseconds ||
                    Nanoseconds.Equals(input.Nanoseconds)
                ) && 
                (
                    Seconds == input.Seconds ||
                    Seconds.Equals(input.Seconds)
                ) && 
                (
                    TotalDays == input.TotalDays ||
                    TotalDays.Equals(input.TotalDays)
                ) && 
                (
                    TotalHours == input.TotalHours ||
                    TotalHours.Equals(input.TotalHours)
                ) && 
                (
                    TotalMicroseconds == input.TotalMicroseconds ||
                    TotalMicroseconds.Equals(input.TotalMicroseconds)
                ) && 
                (
                    TotalMilliseconds == input.TotalMilliseconds ||
                    TotalMilliseconds.Equals(input.TotalMilliseconds)
                ) && 
                (
                    TotalMinutes == input.TotalMinutes ||
                    TotalMinutes.Equals(input.TotalMinutes)
                ) && 
                (
                    TotalNanoseconds == input.TotalNanoseconds ||
                    TotalNanoseconds.Equals(input.TotalNanoseconds)
                ) && 
                (
                    TotalSeconds == input.TotalSeconds ||
                    TotalSeconds.Equals(input.TotalSeconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Days != null)
                    hashCode = (hashCode * 59) + Days.GetHashCode();

                if (Hours != null)
                    hashCode = (hashCode * 59) + Hours.GetHashCode();

                if (Microseconds != null)
                    hashCode = (hashCode * 59) + Microseconds.GetHashCode();

                if (Milliseconds != null)
                    hashCode = (hashCode * 59) + Milliseconds.GetHashCode();

                if (Minutes != null)
                    hashCode = (hashCode * 59) + Minutes.GetHashCode();

                if (Nanoseconds != null)
                    hashCode = (hashCode * 59) + Nanoseconds.GetHashCode();

                if (Seconds != null)
                    hashCode = (hashCode * 59) + Seconds.GetHashCode();

                if (TotalDays != null)
                    hashCode = (hashCode * 59) + TotalDays.GetHashCode();

                if (TotalHours != null)
                    hashCode = (hashCode * 59) + TotalHours.GetHashCode();

                if (TotalMicroseconds != null)
                    hashCode = (hashCode * 59) + TotalMicroseconds.GetHashCode();

                if (TotalMilliseconds != null)
                    hashCode = (hashCode * 59) + TotalMilliseconds.GetHashCode();

                if (TotalMinutes != null)
                    hashCode = (hashCode * 59) + TotalMinutes.GetHashCode();

                if (TotalNanoseconds != null)
                    hashCode = (hashCode * 59) + TotalNanoseconds.GetHashCode();

                if (TotalSeconds != null)
                    hashCode = (hashCode * 59) + TotalSeconds.GetHashCode();


                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TimeSpan" />
    /// </summary>
    public class TimeSpanJsonConverter : JsonConverter<TimeSpan>
    {
        /// <summary>
        /// Deserializes json to <see cref="TimeSpan" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TimeSpan Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int> days = default;
            Option<int> hours = default;
            Option<int> microseconds = default;
            Option<int> milliseconds = default;
            Option<int> minutes = default;
            Option<int> nanoseconds = default;
            Option<int> seconds = default;
            Option<long> ticks = default;
            Option<double> totalDays = default;
            Option<double> totalHours = default;
            Option<double> totalMicroseconds = default;
            Option<double> totalMilliseconds = default;
            Option<double> totalMinutes = default;
            Option<double> totalNanoseconds = default;
            Option<double> totalSeconds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "days":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                days = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "hours":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hours = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "microseconds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                microseconds = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "milliseconds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                milliseconds = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "minutes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minutes = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "nanoseconds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nanoseconds = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "seconds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                seconds = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "ticks":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ticks = new Option<long>(utf8JsonReader.GetInt64());
                            break;
                        case "totalDays":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalDays = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalHours":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalHours = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalMicroseconds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalMicroseconds = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalMilliseconds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalMilliseconds = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalMinutes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalMinutes = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalNanoseconds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalNanoseconds = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "totalSeconds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalSeconds = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (days.IsSet && days.Value == null)
                throw new ArgumentNullException(nameof(days), "Property is not nullable for class TimeSpan.");

            if (hours.IsSet && hours.Value == null)
                throw new ArgumentNullException(nameof(hours), "Property is not nullable for class TimeSpan.");

            if (microseconds.IsSet && microseconds.Value == null)
                throw new ArgumentNullException(nameof(microseconds), "Property is not nullable for class TimeSpan.");

            if (milliseconds.IsSet && milliseconds.Value == null)
                throw new ArgumentNullException(nameof(milliseconds), "Property is not nullable for class TimeSpan.");

            if (minutes.IsSet && minutes.Value == null)
                throw new ArgumentNullException(nameof(minutes), "Property is not nullable for class TimeSpan.");

            if (nanoseconds.IsSet && nanoseconds.Value == null)
                throw new ArgumentNullException(nameof(nanoseconds), "Property is not nullable for class TimeSpan.");

            if (seconds.IsSet && seconds.Value == null)
                throw new ArgumentNullException(nameof(seconds), "Property is not nullable for class TimeSpan.");

            if (ticks.IsSet && ticks.Value == null)
                throw new ArgumentNullException(nameof(ticks), "Property is not nullable for class TimeSpan.");

            if (totalDays.IsSet && totalDays.Value == null)
                throw new ArgumentNullException(nameof(totalDays), "Property is not nullable for class TimeSpan.");

            if (totalHours.IsSet && totalHours.Value == null)
                throw new ArgumentNullException(nameof(totalHours), "Property is not nullable for class TimeSpan.");

            if (totalMicroseconds.IsSet && totalMicroseconds.Value == null)
                throw new ArgumentNullException(nameof(totalMicroseconds), "Property is not nullable for class TimeSpan.");

            if (totalMilliseconds.IsSet && totalMilliseconds.Value == null)
                throw new ArgumentNullException(nameof(totalMilliseconds), "Property is not nullable for class TimeSpan.");

            if (totalMinutes.IsSet && totalMinutes.Value == null)
                throw new ArgumentNullException(nameof(totalMinutes), "Property is not nullable for class TimeSpan.");

            if (totalNanoseconds.IsSet && totalNanoseconds.Value == null)
                throw new ArgumentNullException(nameof(totalNanoseconds), "Property is not nullable for class TimeSpan.");

            if (totalSeconds.IsSet && totalSeconds.Value == null)
                throw new ArgumentNullException(nameof(totalSeconds), "Property is not nullable for class TimeSpan.");

            //2return new TimeSpan(days, hours, microseconds, milliseconds, minutes, nanoseconds, seconds, ticks, totalDays, totalHours, totalMicroseconds, totalMilliseconds, totalMinutes, totalNanoseconds, totalSeconds);
            return new TimeSpan(days, hours, microseconds, milliseconds, minutes, nanoseconds, seconds, ticks, totalDays, totalHours, totalMicroseconds, totalMilliseconds, totalMinutes, totalNanoseconds, totalSeconds);
        }

        /// <summary>
        /// Serializes a <see cref="TimeSpan" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="timeSpan"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TimeSpan timeSpan, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, timeSpan, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TimeSpan" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="timeSpan"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TimeSpan timeSpan, JsonSerializerOptions jsonSerializerOptions)
        {
            if (timeSpan.DaysOption.IsSet)
                writer.WriteNumber("days", timeSpan.DaysOption!.Value);

            if (timeSpan.HoursOption.IsSet)
                writer.WriteNumber("hours", timeSpan.HoursOption!.Value);

            if (timeSpan.MicrosecondsOption.IsSet)
                writer.WriteNumber("microseconds", timeSpan.MicrosecondsOption!.Value);

            if (timeSpan.MillisecondsOption.IsSet)
                writer.WriteNumber("milliseconds", timeSpan.MillisecondsOption!.Value);

            if (timeSpan.MinutesOption.IsSet)
                writer.WriteNumber("minutes", timeSpan.MinutesOption!.Value);

            if (timeSpan.NanosecondsOption.IsSet)
                writer.WriteNumber("nanoseconds", timeSpan.NanosecondsOption!.Value);

            if (timeSpan.SecondsOption.IsSet)
                writer.WriteNumber("seconds", timeSpan.SecondsOption!.Value);

            if (timeSpan.TicksOption.IsSet)
                writer.WriteNumber("ticks", timeSpan.TicksOption!.Value);

            if (timeSpan.TotalDaysOption.IsSet)
                writer.WriteNumber("totalDays", timeSpan.TotalDaysOption!.Value);

            if (timeSpan.TotalHoursOption.IsSet)
                writer.WriteNumber("totalHours", timeSpan.TotalHoursOption!.Value);

            if (timeSpan.TotalMicrosecondsOption.IsSet)
                writer.WriteNumber("totalMicroseconds", timeSpan.TotalMicrosecondsOption!.Value);

            if (timeSpan.TotalMillisecondsOption.IsSet)
                writer.WriteNumber("totalMilliseconds", timeSpan.TotalMillisecondsOption!.Value);

            if (timeSpan.TotalMinutesOption.IsSet)
                writer.WriteNumber("totalMinutes", timeSpan.TotalMinutesOption!.Value);

            if (timeSpan.TotalNanosecondsOption.IsSet)
                writer.WriteNumber("totalNanoseconds", timeSpan.TotalNanosecondsOption!.Value);

            if (timeSpan.TotalSecondsOption.IsSet)
                writer.WriteNumber("totalSeconds", timeSpan.TotalSecondsOption!.Value);
        }
    }
}
