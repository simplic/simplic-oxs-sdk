/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of a tour action.
    /// </summary>
    [DataContract(Name = "TourActionModel")]
    public partial class TourActionModel : IEquatable<TourActionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TourActionModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id..</param>
        /// <param name="orderId">Gets or sets the order id in which the actions are processed..</param>
        /// <param name="dateTime">Gets or sets the date time.  &lt;br&gt;  Represents the planned date and time of the action.  .</param>
        /// <param name="actualDateTime">Gets or sets the actual date time.  &lt;br&gt;  Represents the actual date and time of the action.  .</param>
        /// <param name="calculatedDateTime">Gets or sets the calculated date time.  &lt;br&gt;  Represents the calculated date and time of the action.  .</param>
        /// <param name="mirroredTourNumber">Gets or sets the tour number of the mirrored tour.  &lt;br&gt;  The tour number will be used to make sure that all generated tours from this action have the same   tour number.  .</param>
        /// <param name="type">Gets or sets the type..</param>
        /// <param name="globalActionId">Gets or sets the global action id..</param>
        /// <param name="entity">entity.</param>
        /// <param name="resource">resource.</param>
        /// <param name="address">address.</param>
        /// <param name="cleaningSlots">Gets or sets a list of used loading slots..</param>
        /// <param name="usedLoadingSlots">Gets or sets a list of used loading slots..</param>
        /// <param name="mirroredTourTags">Gets or sets the mirrored tour tags.   &lt;br&gt;  The mirrored tour tags will be used to add tags to the mirrored tour.  .</param>
        /// <param name="mirroredTourStatus">mirroredTourStatus.</param>
        public TourActionModel(Guid id = default(Guid), int orderId = default(int), DateTime? dateTime = default(DateTime?), DateTime? actualDateTime = default(DateTime?), DateTime? calculatedDateTime = default(DateTime?), string mirroredTourNumber = default(string), string type = default(string), Guid globalActionId = default(Guid), TourEntityModel entity = default(TourEntityModel), ResourceModel resource = default(ResourceModel), AddressModel address = default(AddressModel), List<LoadingSlotModel> cleaningSlots = default(List<LoadingSlotModel>), List<LoadingSlotModel> usedLoadingSlots = default(List<LoadingSlotModel>), List<TourTagModel> mirroredTourTags = default(List<TourTagModel>), TourStatusModel mirroredTourStatus = default(TourStatusModel))
        {
            this.Id = id;
            this.OrderId = orderId;
            this.DateTime = dateTime;
            this.ActualDateTime = actualDateTime;
            this.CalculatedDateTime = calculatedDateTime;
            this.MirroredTourNumber = mirroredTourNumber;
            this.Type = type;
            this.GlobalActionId = globalActionId;
            this.Entity = entity;
            this.Resource = resource;
            this.Address = address;
            this.CleaningSlots = cleaningSlots;
            this.UsedLoadingSlots = usedLoadingSlots;
            this.MirroredTourTags = mirroredTourTags;
            this.MirroredTourStatus = mirroredTourStatus;
        }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the order id in which the actions are processed.
        /// </summary>
        /// <value>Gets or sets the order id in which the actions are processed.</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public int OrderId { get; set; }

        /// <summary>
        /// Gets or sets the date time.  &lt;br&gt;  Represents the planned date and time of the action.  
        /// </summary>
        /// <value>Gets or sets the date time.  &lt;br&gt;  Represents the planned date and time of the action.  </value>
        [DataMember(Name = "dateTime", EmitDefaultValue = true)]
        public DateTime? DateTime { get; set; }

        /// <summary>
        /// Gets or sets the actual date time.  &lt;br&gt;  Represents the actual date and time of the action.  
        /// </summary>
        /// <value>Gets or sets the actual date time.  &lt;br&gt;  Represents the actual date and time of the action.  </value>
        [DataMember(Name = "actualDateTime", EmitDefaultValue = true)]
        public DateTime? ActualDateTime { get; set; }

        /// <summary>
        /// Gets or sets the calculated date time.  &lt;br&gt;  Represents the calculated date and time of the action.  
        /// </summary>
        /// <value>Gets or sets the calculated date time.  &lt;br&gt;  Represents the calculated date and time of the action.  </value>
        [DataMember(Name = "calculatedDateTime", EmitDefaultValue = true)]
        public DateTime? CalculatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the tour number of the mirrored tour.  &lt;br&gt;  The tour number will be used to make sure that all generated tours from this action have the same   tour number.  
        /// </summary>
        /// <value>Gets or sets the tour number of the mirrored tour.  &lt;br&gt;  The tour number will be used to make sure that all generated tours from this action have the same   tour number.  </value>
        [DataMember(Name = "mirroredTourNumber", EmitDefaultValue = true)]
        public string MirroredTourNumber { get; set; }

        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        /// <value>Gets or sets the type.</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the global action id.
        /// </summary>
        /// <value>Gets or sets the global action id.</value>
        [DataMember(Name = "globalActionId", EmitDefaultValue = false)]
        public Guid GlobalActionId { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public TourEntityModel Entity { get; set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name = "resource", EmitDefaultValue = false)]
        public ResourceModel Resource { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public AddressModel Address { get; set; }

        /// <summary>
        /// Gets or sets a list of used loading slots.
        /// </summary>
        /// <value>Gets or sets a list of used loading slots.</value>
        [DataMember(Name = "cleaningSlots", EmitDefaultValue = true)]
        public List<LoadingSlotModel> CleaningSlots { get; set; }

        /// <summary>
        /// Gets or sets a list of used loading slots.
        /// </summary>
        /// <value>Gets or sets a list of used loading slots.</value>
        [DataMember(Name = "usedLoadingSlots", EmitDefaultValue = true)]
        public List<LoadingSlotModel> UsedLoadingSlots { get; set; }

        /// <summary>
        /// Gets or sets the mirrored tour tags.   &lt;br&gt;  The mirrored tour tags will be used to add tags to the mirrored tour.  
        /// </summary>
        /// <value>Gets or sets the mirrored tour tags.   &lt;br&gt;  The mirrored tour tags will be used to add tags to the mirrored tour.  </value>
        [DataMember(Name = "mirroredTourTags", EmitDefaultValue = true)]
        public List<TourTagModel> MirroredTourTags { get; set; }

        /// <summary>
        /// Gets or Sets MirroredTourStatus
        /// </summary>
        [DataMember(Name = "mirroredTourStatus", EmitDefaultValue = false)]
        public TourStatusModel MirroredTourStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TourActionModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  ActualDateTime: ").Append(ActualDateTime).Append("\n");
            sb.Append("  CalculatedDateTime: ").Append(CalculatedDateTime).Append("\n");
            sb.Append("  MirroredTourNumber: ").Append(MirroredTourNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  GlobalActionId: ").Append(GlobalActionId).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CleaningSlots: ").Append(CleaningSlots).Append("\n");
            sb.Append("  UsedLoadingSlots: ").Append(UsedLoadingSlots).Append("\n");
            sb.Append("  MirroredTourTags: ").Append(MirroredTourTags).Append("\n");
            sb.Append("  MirroredTourStatus: ").Append(MirroredTourStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TourActionModel);
        }

        /// <summary>
        /// Returns true if TourActionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TourActionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TourActionModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    this.OrderId.Equals(input.OrderId)
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.ActualDateTime == input.ActualDateTime ||
                    (this.ActualDateTime != null &&
                    this.ActualDateTime.Equals(input.ActualDateTime))
                ) && 
                (
                    this.CalculatedDateTime == input.CalculatedDateTime ||
                    (this.CalculatedDateTime != null &&
                    this.CalculatedDateTime.Equals(input.CalculatedDateTime))
                ) && 
                (
                    this.MirroredTourNumber == input.MirroredTourNumber ||
                    (this.MirroredTourNumber != null &&
                    this.MirroredTourNumber.Equals(input.MirroredTourNumber))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.GlobalActionId == input.GlobalActionId ||
                    (this.GlobalActionId != null &&
                    this.GlobalActionId.Equals(input.GlobalActionId))
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.Resource == input.Resource ||
                    (this.Resource != null &&
                    this.Resource.Equals(input.Resource))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.CleaningSlots == input.CleaningSlots ||
                    this.CleaningSlots != null &&
                    input.CleaningSlots != null &&
                    this.CleaningSlots.SequenceEqual(input.CleaningSlots)
                ) && 
                (
                    this.UsedLoadingSlots == input.UsedLoadingSlots ||
                    this.UsedLoadingSlots != null &&
                    input.UsedLoadingSlots != null &&
                    this.UsedLoadingSlots.SequenceEqual(input.UsedLoadingSlots)
                ) && 
                (
                    this.MirroredTourTags == input.MirroredTourTags ||
                    this.MirroredTourTags != null &&
                    input.MirroredTourTags != null &&
                    this.MirroredTourTags.SequenceEqual(input.MirroredTourTags)
                ) && 
                (
                    this.MirroredTourStatus == input.MirroredTourStatus ||
                    (this.MirroredTourStatus != null &&
                    this.MirroredTourStatus.Equals(input.MirroredTourStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                if (this.ActualDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ActualDateTime.GetHashCode();
                }
                if (this.CalculatedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedDateTime.GetHashCode();
                }
                if (this.MirroredTourNumber != null)
                {
                    hashCode = (hashCode * 59) + this.MirroredTourNumber.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.GlobalActionId != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalActionId.GetHashCode();
                }
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                if (this.Resource != null)
                {
                    hashCode = (hashCode * 59) + this.Resource.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.CleaningSlots != null)
                {
                    hashCode = (hashCode * 59) + this.CleaningSlots.GetHashCode();
                }
                if (this.UsedLoadingSlots != null)
                {
                    hashCode = (hashCode * 59) + this.UsedLoadingSlots.GetHashCode();
                }
                if (this.MirroredTourTags != null)
                {
                    hashCode = (hashCode * 59) + this.MirroredTourTags.GetHashCode();
                }
                if (this.MirroredTourStatus != null)
                {
                    hashCode = (hashCode * 59) + this.MirroredTourStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
