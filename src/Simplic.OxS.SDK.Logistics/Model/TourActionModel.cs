// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of a tour action.
    /// </summary>
    public partial class TourActionModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TourActionModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TourActionModel" /> class.
        /// </summary>
        /// <param name="actualDateTime">Gets or sets the actual date time.  &lt;br&gt;  Represents the actual date and time of the action.  </param>
        /// <param name="address">address</param>
        /// <param name="calculatedDateTime">Gets or sets the calculated date time.  &lt;br&gt;  Represents the calculated date and time of the action.  </param>
        /// <param name="cleaningSlots">Gets or sets a list of used loading slots.</param>
        /// <param name="dateTime">Gets or sets the date time.  &lt;br&gt;  Represents the planned date and time of the action.  </param>
        /// <param name="entity">entity</param>
        /// <param name="globalActionId">Gets or sets the global action id.</param>
        /// <param name="id">Gets or sets the id.</param>
        /// <param name="mirroredTourNumber">Gets or sets the tour number of the mirrored tour.  &lt;br&gt;  The tour number will be used to make sure that all generated tours from this action have the same   tour number.  </param>
        /// <param name="mirroredTourStatus">mirroredTourStatus</param>
        /// <param name="mirroredTourTags">Gets or sets the mirrored tour tags.   &lt;br&gt;  The mirrored tour tags will be used to add tags to the mirrored tour.  </param>
        /// <param name="orderId">Gets or sets the order id in which the actions are processed.</param>
        /// <param name="resource">resource</param>
        /// <param name="type">Gets or sets the type.</param>
        /// <param name="usedLoadingSlots">Gets or sets a list of used loading slots.</param>
        //[JsonConstructor]
        public TourActionModel(Option<DateTime> actualDateTime = default, Option<AddressModel> address = default, Option<DateTime> calculatedDateTime = default, Option<List<LoadingSlotModel>> cleaningSlots = default, Option<DateTime> dateTime = default, Option<TourEntityModel> entity = default, Option<Guid> globalActionId = default, Option<Guid> id = default, Option<string> mirroredTourNumber = default, Option<TourStatusModel> mirroredTourStatus = default, Option<List<TourTagModel>> mirroredTourTags = default, Option<int> orderId = default, Option<ResourceModel> resource = default, Option<string> type = default, Option<List<LoadingSlotModel>> usedLoadingSlots = default)
        {
            ActualDateTimeOption = actualDateTime;
            AddressOption = address;
            CalculatedDateTimeOption = calculatedDateTime;
            CleaningSlotsOption = cleaningSlots;
            DateTimeOption = dateTime;
            EntityOption = entity;
            GlobalActionIdOption = globalActionId;
            IdOption = id;
            MirroredTourNumberOption = mirroredTourNumber;
            MirroredTourStatusOption = mirroredTourStatus;
            MirroredTourTagsOption = mirroredTourTags;
            OrderIdOption = orderId;
            ResourceOption = resource;
            TypeOption = type;
            UsedLoadingSlotsOption = usedLoadingSlots;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ActualDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ActualDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual date time.  &lt;br&gt;  Represents the actual date and time of the action.  
        /// </summary>
        /// <value>Gets or sets the actual date time.  &lt;br&gt;  Represents the actual date and time of the action.  </value>
        [JsonPropertyName("actualDateTime")]
        public DateTime? ActualDateTime { get { return this. ActualDateTimeOption; } set { this.ActualDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public AddressModel? Address { get { return this. AddressOption; } set { this.AddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of CalculatedDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CalculatedDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the calculated date time.  &lt;br&gt;  Represents the calculated date and time of the action.  
        /// </summary>
        /// <value>Gets or sets the calculated date time.  &lt;br&gt;  Represents the calculated date and time of the action.  </value>
        [JsonPropertyName("calculatedDateTime")]
        public DateTime? CalculatedDateTime { get { return this. CalculatedDateTimeOption; } set { this.CalculatedDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CleaningSlots
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<LoadingSlotModel>>))]
        public Option<List<LoadingSlotModel>> CleaningSlotsOption { get; private set; }

        /// <summary>
        /// Gets or sets a list of used loading slots.
        /// </summary>
        /// <value>Gets or sets a list of used loading slots.</value>
        [JsonPropertyName("cleaningSlots")]
        public List<LoadingSlotModel>? CleaningSlots { get { return this. CleaningSlotsOption; } set { this.CleaningSlotsOption = new Option<List<LoadingSlotModel>>(value); } }

        /// <summary>
        /// Used to track the state of DateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the date time.  &lt;br&gt;  Represents the planned date and time of the action.  
        /// </summary>
        /// <value>Gets or sets the date time.  &lt;br&gt;  Represents the planned date and time of the action.  </value>
        [JsonPropertyName("dateTime")]
        public DateTime? DateTime { get { return this. DateTimeOption; } set { this.DateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Entity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TourEntityModel>))]
        public Option<TourEntityModel> EntityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [JsonPropertyName("entity")]
        public TourEntityModel? Entity { get { return this. EntityOption; } set { this.EntityOption = new Option<TourEntityModel>(value); } }

        /// <summary>
        /// Used to track the state of GlobalActionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> GlobalActionIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the global action id.
        /// </summary>
        /// <value>Gets or sets the global action id.</value>
        [JsonPropertyName("globalActionId")]
        public Guid? GlobalActionId { get { return this. GlobalActionIdOption; } set { this.GlobalActionIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of MirroredTourNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> MirroredTourNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the tour number of the mirrored tour.  &lt;br&gt;  The tour number will be used to make sure that all generated tours from this action have the same   tour number.  
        /// </summary>
        /// <value>Gets or sets the tour number of the mirrored tour.  &lt;br&gt;  The tour number will be used to make sure that all generated tours from this action have the same   tour number.  </value>
        [JsonPropertyName("mirroredTourNumber")]
        public string? MirroredTourNumber { get { return this. MirroredTourNumberOption; } set { this.MirroredTourNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MirroredTourStatus
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TourStatusModel>))]
        public Option<TourStatusModel> MirroredTourStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets MirroredTourStatus
        /// </summary>
        [JsonPropertyName("mirroredTourStatus")]
        public TourStatusModel? MirroredTourStatus { get { return this. MirroredTourStatusOption; } set { this.MirroredTourStatusOption = new Option<TourStatusModel>(value); } }

        /// <summary>
        /// Used to track the state of MirroredTourTags
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<TourTagModel>>))]
        public Option<List<TourTagModel>> MirroredTourTagsOption { get; private set; }

        /// <summary>
        /// Gets or sets the mirrored tour tags.   &lt;br&gt;  The mirrored tour tags will be used to add tags to the mirrored tour.  
        /// </summary>
        /// <value>Gets or sets the mirrored tour tags.   &lt;br&gt;  The mirrored tour tags will be used to add tags to the mirrored tour.  </value>
        [JsonPropertyName("mirroredTourTags")]
        public List<TourTagModel>? MirroredTourTags { get { return this. MirroredTourTagsOption; } set { this.MirroredTourTagsOption = new Option<List<TourTagModel>>(value); } }

        /// <summary>
        /// Used to track the state of OrderId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> OrderIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the order id in which the actions are processed.
        /// </summary>
        /// <value>Gets or sets the order id in which the actions are processed.</value>
        [JsonPropertyName("orderId")]
        public int? OrderId { get { return this. OrderIdOption; } set { this.OrderIdOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of Resource
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> ResourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [JsonPropertyName("resource")]
        public ResourceModel? Resource { get { return this. ResourceOption; } set { this.ResourceOption = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        /// <value>Gets or sets the type.</value>
        [JsonPropertyName("type")]
        public string? Type { get { return this. TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UsedLoadingSlots
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<LoadingSlotModel>>))]
        public Option<List<LoadingSlotModel>> UsedLoadingSlotsOption { get; private set; }

        /// <summary>
        /// Gets or sets a list of used loading slots.
        /// </summary>
        /// <value>Gets or sets a list of used loading slots.</value>
        [JsonPropertyName("usedLoadingSlots")]
        public List<LoadingSlotModel>? UsedLoadingSlots { get { return this. UsedLoadingSlotsOption; } set { this.UsedLoadingSlotsOption = new Option<List<LoadingSlotModel>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TourActionModel {\n");
            sb.Append("  ActualDateTime: ").Append(ActualDateTime).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CalculatedDateTime: ").Append(CalculatedDateTime).Append("\n");
            sb.Append("  CleaningSlots: ").Append(CleaningSlots).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  GlobalActionId: ").Append(GlobalActionId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MirroredTourNumber: ").Append(MirroredTourNumber).Append("\n");
            sb.Append("  MirroredTourStatus: ").Append(MirroredTourStatus).Append("\n");
            sb.Append("  MirroredTourTags: ").Append(MirroredTourTags).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UsedLoadingSlots: ").Append(UsedLoadingSlots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TourActionModel" />
    /// </summary>
    public class TourActionModelJsonConverter : JsonConverter<TourActionModel>
    {
        /// <summary>
        /// The format to use to serialize ActualDateTime
        /// </summary>
        public static string ActualDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CalculatedDateTime
        /// </summary>
        public static string CalculatedDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DateTime
        /// </summary>
        public static string DateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TourActionModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TourActionModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> actualDateTime = default;
            Option<AddressModel> address = default;
            Option<DateTime> calculatedDateTime = default;
            Option<List<LoadingSlotModel>> cleaningSlots = default;
            Option<DateTime> dateTime = default;
            Option<TourEntityModel> entity = default;
            Option<Guid> globalActionId = default;
            Option<Guid> id = default;
            Option<string> mirroredTourNumber = default;
            Option<TourStatusModel> mirroredTourStatus = default;
            Option<List<TourTagModel>> mirroredTourTags = default;
            Option<int> orderId = default;
            Option<ResourceModel> resource = default;
            Option<string> type = default;
            Option<List<LoadingSlotModel>> usedLoadingSlots = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actualDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actualDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "address":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                address = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "calculatedDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                calculatedDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cleaningSlots":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cleaningSlots = new Option<List<LoadingSlotModel>>(JsonSerializer.Deserialize<List<LoadingSlotModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "entity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                entity = new Option<TourEntityModel>(JsonSerializer.Deserialize<TourEntityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "globalActionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                globalActionId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "mirroredTourNumber":
                            mirroredTourNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mirroredTourStatus":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mirroredTourStatus = new Option<TourStatusModel>(JsonSerializer.Deserialize<TourStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "mirroredTourTags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mirroredTourTags = new Option<List<TourTagModel>>(JsonSerializer.Deserialize<List<TourTagModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "orderId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                orderId = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "resource":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resource = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "usedLoadingSlots":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                usedLoadingSlots = new Option<List<LoadingSlotModel>>(JsonSerializer.Deserialize<List<LoadingSlotModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class TourActionModel.");

            if (entity.IsSet && entity.Value == null)
                throw new ArgumentNullException(nameof(entity), "Property is not nullable for class TourActionModel.");

            if (globalActionId.IsSet && globalActionId.Value == null)
                throw new ArgumentNullException(nameof(globalActionId), "Property is not nullable for class TourActionModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TourActionModel.");

            if (mirroredTourStatus.IsSet && mirroredTourStatus.Value == null)
                throw new ArgumentNullException(nameof(mirroredTourStatus), "Property is not nullable for class TourActionModel.");

            if (orderId.IsSet && orderId.Value == null)
                throw new ArgumentNullException(nameof(orderId), "Property is not nullable for class TourActionModel.");

            if (resource.IsSet && resource.Value == null)
                throw new ArgumentNullException(nameof(resource), "Property is not nullable for class TourActionModel.");

            //2return new TourActionModel(actualDateTime, address, calculatedDateTime, cleaningSlots, dateTime, entity, globalActionId, id, mirroredTourNumber, mirroredTourStatus, mirroredTourTags, orderId, resource, type, usedLoadingSlots);
            return new TourActionModel(actualDateTime, address, calculatedDateTime, cleaningSlots, dateTime, entity, globalActionId, id, mirroredTourNumber, mirroredTourStatus, mirroredTourTags, orderId, resource, type, usedLoadingSlots);
        }

        /// <summary>
        /// Serializes a <see cref="TourActionModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tourActionModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TourActionModel tourActionModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, tourActionModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TourActionModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tourActionModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TourActionModel tourActionModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tourActionModel.AddressOption.IsSet && tourActionModel.Address == null)
                throw new ArgumentNullException(nameof(tourActionModel.Address), "Property is required for class TourActionModel.");

            if (tourActionModel.EntityOption.IsSet && tourActionModel.Entity == null)
                throw new ArgumentNullException(nameof(tourActionModel.Entity), "Property is required for class TourActionModel.");

            if (tourActionModel.MirroredTourStatusOption.IsSet && tourActionModel.MirroredTourStatus == null)
                throw new ArgumentNullException(nameof(tourActionModel.MirroredTourStatus), "Property is required for class TourActionModel.");

            if (tourActionModel.ResourceOption.IsSet && tourActionModel.Resource == null)
                throw new ArgumentNullException(nameof(tourActionModel.Resource), "Property is required for class TourActionModel.");

            if (tourActionModel.ActualDateTimeOption.IsSet)
                if (tourActionModel.ActualDateTimeOption.Value != null)
                {
                    writer.WriteString("actualDateTime", tourActionModel.ActualDateTimeOption!.Value.ToString(ActualDateTimeFormat));
                    //var __value = tourActionModel.ActualDateTimeOption.Value;
                    //writer.WriteString("actualDateTime", __value);
                }
                else
                    writer.WriteNull("actualDateTime");

            if (tourActionModel.AddressOption.IsSet)
            {
                writer.WritePropertyName("address");
                JsonSerializer.Serialize(writer, tourActionModel.Address, jsonSerializerOptions);
            }
            if (tourActionModel.CalculatedDateTimeOption.IsSet)
                if (tourActionModel.CalculatedDateTimeOption.Value != null)
                {
                    writer.WriteString("calculatedDateTime", tourActionModel.CalculatedDateTimeOption!.Value.ToString(CalculatedDateTimeFormat));
                    //var __value = tourActionModel.CalculatedDateTimeOption.Value;
                    //writer.WriteString("calculatedDateTime", __value);
                }
                else
                    writer.WriteNull("calculatedDateTime");

            if (tourActionModel.CleaningSlotsOption.IsSet)
                if (tourActionModel.CleaningSlotsOption.Value != null)
                {
                    writer.WritePropertyName("cleaningSlots");
                    JsonSerializer.Serialize(writer, tourActionModel.CleaningSlots, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("cleaningSlots");
            if (tourActionModel.DateTimeOption.IsSet)
                if (tourActionModel.DateTimeOption.Value != null)
                {
                    writer.WriteString("dateTime", tourActionModel.DateTimeOption!.Value.ToString(DateTimeFormat));
                    //var __value = tourActionModel.DateTimeOption.Value;
                    //writer.WriteString("dateTime", __value);
                }
                else
                    writer.WriteNull("dateTime");

            if (tourActionModel.EntityOption.IsSet)
            {
                writer.WritePropertyName("entity");
                JsonSerializer.Serialize(writer, tourActionModel.Entity, jsonSerializerOptions);
            }
            if (tourActionModel.GlobalActionIdOption.IsSet)
                writer.WriteString("globalActionId", tourActionModel.GlobalActionIdOption!.Value);

            if (tourActionModel.IdOption.IsSet)
                writer.WriteString("id", tourActionModel.IdOption!.Value);

            if (tourActionModel.MirroredTourNumberOption.IsSet)
                if (tourActionModel.MirroredTourNumberOption.Value != null)
                {
                    writer.WriteString("mirroredTourNumber", tourActionModel.MirroredTourNumber);
                    //var __value = tourActionModel.MirroredTourNumberOption.Value;
                    //writer.WriteString("mirroredTourNumber", __value);
                }
                else
                    writer.WriteNull("mirroredTourNumber");

            if (tourActionModel.MirroredTourStatusOption.IsSet)
            {
                writer.WritePropertyName("mirroredTourStatus");
                JsonSerializer.Serialize(writer, tourActionModel.MirroredTourStatus, jsonSerializerOptions);
            }
            if (tourActionModel.MirroredTourTagsOption.IsSet)
                if (tourActionModel.MirroredTourTagsOption.Value != null)
                {
                    writer.WritePropertyName("mirroredTourTags");
                    JsonSerializer.Serialize(writer, tourActionModel.MirroredTourTags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("mirroredTourTags");
            if (tourActionModel.OrderIdOption.IsSet)
                writer.WriteNumber("orderId", tourActionModel.OrderIdOption!.Value);

            if (tourActionModel.ResourceOption.IsSet)
            {
                writer.WritePropertyName("resource");
                JsonSerializer.Serialize(writer, tourActionModel.Resource, jsonSerializerOptions);
            }
            if (tourActionModel.TypeOption.IsSet)
                if (tourActionModel.TypeOption.Value != null)
                {
                    writer.WriteString("type", tourActionModel.Type);
                    //var __value = tourActionModel.TypeOption.Value;
                    //writer.WriteString("type", __value);
                }
                else
                    writer.WriteNull("type");

            if (tourActionModel.UsedLoadingSlotsOption.IsSet)
                if (tourActionModel.UsedLoadingSlotsOption.Value != null)
                {
                    writer.WritePropertyName("usedLoadingSlots");
                    JsonSerializer.Serialize(writer, tourActionModel.UsedLoadingSlots, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("usedLoadingSlots");
        }
    }
}
