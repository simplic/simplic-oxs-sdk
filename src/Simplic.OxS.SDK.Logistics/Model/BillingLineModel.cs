// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of billing line.
    /// </summary>
    public partial class BillingLineModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public BillingLineModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingLineModel" /> class.
        /// </summary>
        /// <param name="article">article</param>
        /// <param name="billableContact">billableContact</param>
        /// <param name="id">Gets or sets the id.  &lt;br&gt;  Represents the unique identifier of a billing line.  </param>
        /// <param name="pricing">pricing</param>
        /// <param name="quantity">quantity</param>
        /// <param name="reference">Gets or sets the external reference.</param>
        /// <param name="singlePrice">Gets or sets the single price.  &lt;br&gt;  Represents the price of a single item.  </param>
        /// <param name="status">status</param>
        /// <param name="totalPrice">Gets or sets the total price.  &lt;br&gt;  Represents the price of all items.  </param>
        /// <param name="transactionItems">Gets or sets the transaction items where the billing line is present in.  &lt;br&gt;  The list will be filled during the billing process.  </param>
        /// <param name="type">type</param>
        /// <param name="weightNoteId">Gets or sets the weight note id that will be billed</param>
        //[JsonConstructor]
        public BillingLineModel(Option<ShipmentArticleModel> article = default, Option<BillableContactModel> billableContact = default, Option<Guid> id = default, Option<BillingLinePricingModel> pricing = default, Option<QuantityModel> quantity = default, Option<string> reference = default, Option<double> singlePrice = default, Option<BillingLineStatusModel> status = default, Option<double> totalPrice = default, Option<List<BillingLineTransationItemModel>> transactionItems = default, Option<BillingLineType> type = default, Option<Guid> weightNoteId = default)
        {
            ArticleOption = article;
            BillableContactOption = billableContact;
            IdOption = id;
            PricingOption = pricing;
            QuantityOption = quantity;
            ReferenceOption = reference;
            SinglePriceOption = singlePrice;
            StatusOption = status;
            TotalPriceOption = totalPrice;
            TransactionItemsOption = transactionItems;
            TypeOption = type;
            WeightNoteIdOption = weightNoteId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillingLineType>))]
        public Option<BillingLineType> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public BillingLineType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<BillingLineType>(value); } }

        /// <summary>
        /// Used to track the state of Article
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ShipmentArticleModel>))]
        public Option<ShipmentArticleModel> ArticleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Article
        /// </summary>
        [JsonPropertyName("article")]
        public ShipmentArticleModel? Article { get { return this. ArticleOption; } set { this.ArticleOption = new Option<ShipmentArticleModel>(value); } }

        /// <summary>
        /// Used to track the state of BillableContact
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillableContactModel>))]
        public Option<BillableContactModel> BillableContactOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillableContact
        /// </summary>
        [JsonPropertyName("billableContact")]
        public BillableContactModel? BillableContact { get { return this. BillableContactOption; } set { this.BillableContactOption = new Option<BillableContactModel>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id.  &lt;br&gt;  Represents the unique identifier of a billing line.  
        /// </summary>
        /// <value>Gets or sets the id.  &lt;br&gt;  Represents the unique identifier of a billing line.  </value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Pricing
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillingLinePricingModel>))]
        public Option<BillingLinePricingModel> PricingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pricing
        /// </summary>
        [JsonPropertyName("pricing")]
        public BillingLinePricingModel? Pricing { get { return this. PricingOption; } set { this.PricingOption = new Option<BillingLinePricingModel>(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<QuantityModel>))]
        public Option<QuantityModel> QuantityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public QuantityModel? Quantity { get { return this. QuantityOption; } set { this.QuantityOption = new Option<QuantityModel>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Gets or sets the external reference.
        /// </summary>
        /// <value>Gets or sets the external reference.</value>
        [JsonPropertyName("reference")]
        public string? Reference { get { return this. ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SinglePrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SinglePriceOption { get; private set; }

        /// <summary>
        /// Gets or sets the single price.  &lt;br&gt;  Represents the price of a single item.  
        /// </summary>
        /// <value>Gets or sets the single price.  &lt;br&gt;  Represents the price of a single item.  </value>
        [JsonPropertyName("singlePrice")]
        public double? SinglePrice { get { return this. SinglePriceOption; } set { this.SinglePriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillingLineStatusModel>))]
        public Option<BillingLineStatusModel> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public BillingLineStatusModel? Status { get { return this. StatusOption; } set { this.StatusOption = new Option<BillingLineStatusModel>(value); } }

        /// <summary>
        /// Used to track the state of TotalPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalPriceOption { get; private set; }

        /// <summary>
        /// Gets or sets the total price.  &lt;br&gt;  Represents the price of all items.  
        /// </summary>
        /// <value>Gets or sets the total price.  &lt;br&gt;  Represents the price of all items.  </value>
        [JsonPropertyName("totalPrice")]
        public double? TotalPrice { get { return this. TotalPriceOption; } set { this.TotalPriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TransactionItems
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<BillingLineTransationItemModel>>))]
        public Option<List<BillingLineTransationItemModel>> TransactionItemsOption { get; private set; }

        /// <summary>
        /// Gets or sets the transaction items where the billing line is present in.  &lt;br&gt;  The list will be filled during the billing process.  
        /// </summary>
        /// <value>Gets or sets the transaction items where the billing line is present in.  &lt;br&gt;  The list will be filled during the billing process.  </value>
        [JsonPropertyName("transactionItems")]
        public List<BillingLineTransationItemModel>? TransactionItems { get { return this. TransactionItemsOption; } set { this.TransactionItemsOption = new Option<List<BillingLineTransationItemModel>>(value); } }

        /// <summary>
        /// Used to track the state of WeightNoteId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> WeightNoteIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the weight note id that will be billed
        /// </summary>
        /// <value>Gets or sets the weight note id that will be billed</value>
        [JsonPropertyName("weightNoteId")]
        public Guid? WeightNoteId { get { return this. WeightNoteIdOption; } set { this.WeightNoteIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BillingLineModel {\n");
            sb.Append("  Article: ").Append(Article).Append("\n");
            sb.Append("  BillableContact: ").Append(BillableContact).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Pricing: ").Append(Pricing).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  SinglePrice: ").Append(SinglePrice).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  TransactionItems: ").Append(TransactionItems).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WeightNoteId: ").Append(WeightNoteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BillingLineModel" />
    /// </summary>
    public class BillingLineModelJsonConverter : JsonConverter<BillingLineModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="BillingLineModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BillingLineModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ShipmentArticleModel> article = default;
            Option<BillableContactModel> billableContact = default;
            Option<Guid> id = default;
            Option<BillingLinePricingModel> pricing = default;
            Option<QuantityModel> quantity = default;
            Option<string> reference = default;
            Option<double> singlePrice = default;
            Option<BillingLineStatusModel> status = default;
            Option<double> totalPrice = default;
            Option<List<BillingLineTransationItemModel>> transactionItems = default;
            Option<BillingLineType> type = default;
            Option<Guid> weightNoteId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "article":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                article = new Option<ShipmentArticleModel>(JsonSerializer.Deserialize<ShipmentArticleModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "billableContact":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                billableContact = new Option<BillableContactModel>(JsonSerializer.Deserialize<BillableContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "pricing":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pricing = new Option<BillingLinePricingModel>(JsonSerializer.Deserialize<BillingLinePricingModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<QuantityModel>(JsonSerializer.Deserialize<QuantityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "singlePrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                singlePrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<BillingLineStatusModel>(JsonSerializer.Deserialize<BillingLineStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "totalPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "transactionItems":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transactionItems = new Option<List<BillingLineTransationItemModel>>(JsonSerializer.Deserialize<List<BillingLineTransationItemModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<BillingLineType>(BillingLineTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "weightNoteId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                weightNoteId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (article.IsSet && article.Value == null)
                throw new ArgumentNullException(nameof(article), "Property is not nullable for class BillingLineModel.");

            if (billableContact.IsSet && billableContact.Value == null)
                throw new ArgumentNullException(nameof(billableContact), "Property is not nullable for class BillingLineModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class BillingLineModel.");

            if (pricing.IsSet && pricing.Value == null)
                throw new ArgumentNullException(nameof(pricing), "Property is not nullable for class BillingLineModel.");

            if (quantity.IsSet && quantity.Value == null)
                throw new ArgumentNullException(nameof(quantity), "Property is not nullable for class BillingLineModel.");

            if (singlePrice.IsSet && singlePrice.Value == null)
                throw new ArgumentNullException(nameof(singlePrice), "Property is not nullable for class BillingLineModel.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class BillingLineModel.");

            if (totalPrice.IsSet && totalPrice.Value == null)
                throw new ArgumentNullException(nameof(totalPrice), "Property is not nullable for class BillingLineModel.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class BillingLineModel.");

            //2return new BillingLineModel(article, billableContact, id, pricing, quantity, reference, singlePrice, status, totalPrice, transactionItems, type, weightNoteId);
            return new BillingLineModel(article, billableContact, id, pricing, quantity, reference, singlePrice, status, totalPrice, transactionItems, type, weightNoteId);
        }

        /// <summary>
        /// Serializes a <see cref="BillingLineModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billingLineModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BillingLineModel billingLineModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, billingLineModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BillingLineModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billingLineModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, BillingLineModel billingLineModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (billingLineModel.ArticleOption.IsSet && billingLineModel.Article == null)
                throw new ArgumentNullException(nameof(billingLineModel.Article), "Property is required for class BillingLineModel.");

            if (billingLineModel.BillableContactOption.IsSet && billingLineModel.BillableContact == null)
                throw new ArgumentNullException(nameof(billingLineModel.BillableContact), "Property is required for class BillingLineModel.");

            if (billingLineModel.PricingOption.IsSet && billingLineModel.Pricing == null)
                throw new ArgumentNullException(nameof(billingLineModel.Pricing), "Property is required for class BillingLineModel.");

            if (billingLineModel.QuantityOption.IsSet && billingLineModel.Quantity == null)
                throw new ArgumentNullException(nameof(billingLineModel.Quantity), "Property is required for class BillingLineModel.");

            if (billingLineModel.StatusOption.IsSet && billingLineModel.Status == null)
                throw new ArgumentNullException(nameof(billingLineModel.Status), "Property is required for class BillingLineModel.");

            if (billingLineModel.ArticleOption.IsSet)
            {
                writer.WritePropertyName("article");
                JsonSerializer.Serialize(writer, billingLineModel.Article, jsonSerializerOptions);
            }
            if (billingLineModel.BillableContactOption.IsSet)
            {
                writer.WritePropertyName("billableContact");
                JsonSerializer.Serialize(writer, billingLineModel.BillableContact, jsonSerializerOptions);
            }
            if (billingLineModel.IdOption.IsSet)
                writer.WriteString("id", billingLineModel.IdOption!.Value);

            if (billingLineModel.PricingOption.IsSet)
            {
                writer.WritePropertyName("pricing");
                JsonSerializer.Serialize(writer, billingLineModel.Pricing, jsonSerializerOptions);
            }
            if (billingLineModel.QuantityOption.IsSet)
            {
                writer.WritePropertyName("quantity");
                JsonSerializer.Serialize(writer, billingLineModel.Quantity, jsonSerializerOptions);
            }
            if (billingLineModel.ReferenceOption.IsSet)
                if (billingLineModel.ReferenceOption.Value != null)
                {
                    writer.WriteString("reference", billingLineModel.Reference);
                    //var __value = billingLineModel.ReferenceOption.Value;
                    //writer.WriteString("reference", __value);
                }
                else
                    writer.WriteNull("reference");

            if (billingLineModel.SinglePriceOption.IsSet)
                writer.WriteNumber("singlePrice", billingLineModel.SinglePriceOption!.Value);

            if (billingLineModel.StatusOption.IsSet)
            {
                writer.WritePropertyName("status");
                JsonSerializer.Serialize(writer, billingLineModel.Status, jsonSerializerOptions);
            }
            if (billingLineModel.TotalPriceOption.IsSet)
                writer.WriteNumber("totalPrice", billingLineModel.TotalPriceOption!.Value);

            if (billingLineModel.TransactionItemsOption.IsSet)
                if (billingLineModel.TransactionItemsOption.Value != null)
                {
                    writer.WritePropertyName("transactionItems");
                    JsonSerializer.Serialize(writer, billingLineModel.TransactionItems, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("transactionItems");
            if (billingLineModel.TypeOption.IsSet)
            {
                var typeRawValue = BillingLineTypeValueConverter.ToJsonValue(billingLineModel.Type!.Value);
                writer.WriteNumber("type", typeRawValue);
            }
            if (billingLineModel.WeightNoteIdOption.IsSet)
                if (billingLineModel.WeightNoteIdOption.Value != null)
                {
                    writer.WriteString("weightNoteId", billingLineModel.WeightNoteIdOption!.Value);
                    //var __value = billingLineModel.WeightNoteIdOption.Value;
                    //writer.WriteString("weightNoteId", __value);
                }
                else
                    writer.WriteNull("weightNoteId");
        }
    }
}
