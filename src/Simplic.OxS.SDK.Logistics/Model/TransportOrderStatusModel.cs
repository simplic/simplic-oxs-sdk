/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Logistics.Model
{
    /// <summary>
    /// Shared model of transport order status.
    /// </summary>
    [DataContract(Name = "TransportOrderStatusModel")]
    public partial class TransportOrderStatusModel : IEquatable<TransportOrderStatusModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportOrderStatusModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id of the status as guid.  &lt;br&gt;  This will define the unique identifier of the status.  .</param>
        /// <param name="name">Gets or sets the namme of the status..</param>
        /// <param name="number">Gets or sets the number of the status.  &lt;br&gt;  The number is a human readable short name or number of the status.  .</param>
        /// <param name="roles">Gets or sets roles.  &lt;br&gt;  These roles will decide whether transport orders with the status can or can not to certain things.    A list of available roles at the moment:  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;is_default&lt;/item&gt;&lt;br&gt;Will set the status as default, only one status should be a default status.&lt;item&gt;disable_edit&lt;/item&gt;&lt;br&gt;Will diable editing of the transport order.&lt;item&gt;disable_delete&lt;/item&gt;&lt;br&gt;The user should be unable to delete the billing line if a status with this role is set.&lt;item&gt;billable&lt;/item&gt;&lt;br&gt;Will set the transport order as billable.&lt;item&gt;update_instance_data&lt;/item&gt;&lt;br&gt;If a status is set with this role the instance data, e.g. contact information will be automatically  updated when updated in a contact.&lt;/list&gt;.</param>
        /// <param name="hexColor">Gets or sets the hex color.  &lt;br&gt;  Will define the color of the status as hex code.  .</param>
        /// <param name="orderNr">Gets or sets the order number.  &lt;br&gt;  The order nr will define in which order the statuses are resolved.     The lowest value will always be resolved first..</param>
        /// <param name="resolver">Gets or sets the resolver name.  &lt;br&gt;  The name of the resolver is also the name which the resolver is registererd.     Within the resolving of the status the service will try to find a resolver with the given name..</param>
        /// <param name="isDeleted">Gets or sets whether the status is deleted..</param>
        public TransportOrderStatusModel(Guid id = default(Guid), string name = default(string), string number = default(string), List<string> roles = default(List<string>), string hexColor = default(string), int orderNr = default(int), string resolver = default(string), bool isDeleted = default(bool))
        {
            this.Id = id;
            this.Name = name;
            this.Number = number;
            this.Roles = roles;
            this.HexColor = hexColor;
            this.OrderNr = orderNr;
            this.Resolver = resolver;
            this.IsDeleted = isDeleted;
        }

        /// <summary>
        /// Gets or sets the id of the status as guid.  &lt;br&gt;  This will define the unique identifier of the status.  
        /// </summary>
        /// <value>Gets or sets the id of the status as guid.  &lt;br&gt;  This will define the unique identifier of the status.  </value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the namme of the status.
        /// </summary>
        /// <value>Gets or sets the namme of the status.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the number of the status.  &lt;br&gt;  The number is a human readable short name or number of the status.  
        /// </summary>
        /// <value>Gets or sets the number of the status.  &lt;br&gt;  The number is a human readable short name or number of the status.  </value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets roles.  &lt;br&gt;  These roles will decide whether transport orders with the status can or can not to certain things.    A list of available roles at the moment:  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;is_default&lt;/item&gt;&lt;br&gt;Will set the status as default, only one status should be a default status.&lt;item&gt;disable_edit&lt;/item&gt;&lt;br&gt;Will diable editing of the transport order.&lt;item&gt;disable_delete&lt;/item&gt;&lt;br&gt;The user should be unable to delete the billing line if a status with this role is set.&lt;item&gt;billable&lt;/item&gt;&lt;br&gt;Will set the transport order as billable.&lt;item&gt;update_instance_data&lt;/item&gt;&lt;br&gt;If a status is set with this role the instance data, e.g. contact information will be automatically  updated when updated in a contact.&lt;/list&gt;
        /// </summary>
        /// <value>Gets or sets roles.  &lt;br&gt;  These roles will decide whether transport orders with the status can or can not to certain things.    A list of available roles at the moment:  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;is_default&lt;/item&gt;&lt;br&gt;Will set the status as default, only one status should be a default status.&lt;item&gt;disable_edit&lt;/item&gt;&lt;br&gt;Will diable editing of the transport order.&lt;item&gt;disable_delete&lt;/item&gt;&lt;br&gt;The user should be unable to delete the billing line if a status with this role is set.&lt;item&gt;billable&lt;/item&gt;&lt;br&gt;Will set the transport order as billable.&lt;item&gt;update_instance_data&lt;/item&gt;&lt;br&gt;If a status is set with this role the instance data, e.g. contact information will be automatically  updated when updated in a contact.&lt;/list&gt;</value>
        [DataMember(Name = "roles", EmitDefaultValue = true)]
        public List<string> Roles { get; set; }

        /// <summary>
        /// Gets or sets the hex color.  &lt;br&gt;  Will define the color of the status as hex code.  
        /// </summary>
        /// <value>Gets or sets the hex color.  &lt;br&gt;  Will define the color of the status as hex code.  </value>
        [DataMember(Name = "hexColor", EmitDefaultValue = true)]
        public string HexColor { get; set; }

        /// <summary>
        /// Gets or sets the order number.  &lt;br&gt;  The order nr will define in which order the statuses are resolved.     The lowest value will always be resolved first.
        /// </summary>
        /// <value>Gets or sets the order number.  &lt;br&gt;  The order nr will define in which order the statuses are resolved.     The lowest value will always be resolved first.</value>
        [DataMember(Name = "orderNr", EmitDefaultValue = false)]
        public int OrderNr { get; set; }

        /// <summary>
        /// Gets or sets the resolver name.  &lt;br&gt;  The name of the resolver is also the name which the resolver is registererd.     Within the resolving of the status the service will try to find a resolver with the given name.
        /// </summary>
        /// <value>Gets or sets the resolver name.  &lt;br&gt;  The name of the resolver is also the name which the resolver is registererd.     Within the resolving of the status the service will try to find a resolver with the given name.</value>
        [DataMember(Name = "resolver", EmitDefaultValue = true)]
        public string Resolver { get; set; }

        /// <summary>
        /// Gets or sets whether the status is deleted.
        /// </summary>
        /// <value>Gets or sets whether the status is deleted.</value>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransportOrderStatusModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  HexColor: ").Append(HexColor).Append("\n");
            sb.Append("  OrderNr: ").Append(OrderNr).Append("\n");
            sb.Append("  Resolver: ").Append(Resolver).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransportOrderStatusModel);
        }

        /// <summary>
        /// Returns true if TransportOrderStatusModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TransportOrderStatusModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportOrderStatusModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    input.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                ) && 
                (
                    this.HexColor == input.HexColor ||
                    (this.HexColor != null &&
                    this.HexColor.Equals(input.HexColor))
                ) && 
                (
                    this.OrderNr == input.OrderNr ||
                    this.OrderNr.Equals(input.OrderNr)
                ) && 
                (
                    this.Resolver == input.Resolver ||
                    (this.Resolver != null &&
                    this.Resolver.Equals(input.Resolver))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Roles != null)
                {
                    hashCode = (hashCode * 59) + this.Roles.GetHashCode();
                }
                if (this.HexColor != null)
                {
                    hashCode = (hashCode * 59) + this.HexColor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderNr.GetHashCode();
                if (this.Resolver != null)
                {
                    hashCode = (hashCode * 59) + this.Resolver.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
