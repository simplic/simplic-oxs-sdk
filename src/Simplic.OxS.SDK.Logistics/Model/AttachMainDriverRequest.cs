/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Request to attach a driver as main driver.
    /// </summary>
    [DataContract(Name = "AttachMainDriverRequest")]
    public partial class AttachMainDriverRequest : IEquatable<AttachMainDriverRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachMainDriverRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AttachMainDriverRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachMainDriverRequest" /> class.
        /// </summary>
        /// <param name="composedResourceId">Gets or sets the id of the composed resource the main driver is attached to. (required).</param>
        /// <param name="driverResourceId">Gets or sets the id of the driver to attach as the main driver. (required).</param>
        /// <param name="moveCurrentToCoDriverSeat">Gets or sets whether the current main driver will be moved to the co driver seat.     If set to false the current main driver will be detached from the composed resource and will be attached  to its own composed resource.  .</param>
        public AttachMainDriverRequest(Guid composedResourceId = default(Guid), Guid driverResourceId = default(Guid), bool moveCurrentToCoDriverSeat = default(bool))
        {
            this.ComposedResourceId = composedResourceId;
            this.DriverResourceId = driverResourceId;
            this.MoveCurrentToCoDriverSeat = moveCurrentToCoDriverSeat;
        }

        /// <summary>
        /// Gets or sets the id of the composed resource the main driver is attached to.
        /// </summary>
        /// <value>Gets or sets the id of the composed resource the main driver is attached to.</value>
        [DataMember(Name = "composedResourceId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ComposedResourceId { get; set; }

        /// <summary>
        /// Gets or sets the id of the driver to attach as the main driver.
        /// </summary>
        /// <value>Gets or sets the id of the driver to attach as the main driver.</value>
        [DataMember(Name = "driverResourceId", IsRequired = true, EmitDefaultValue = true)]
        public Guid DriverResourceId { get; set; }

        /// <summary>
        /// Gets or sets whether the current main driver will be moved to the co driver seat.     If set to false the current main driver will be detached from the composed resource and will be attached  to its own composed resource.  
        /// </summary>
        /// <value>Gets or sets whether the current main driver will be moved to the co driver seat.     If set to false the current main driver will be detached from the composed resource and will be attached  to its own composed resource.  </value>
        [DataMember(Name = "moveCurrentToCoDriverSeat", EmitDefaultValue = true)]
        public bool MoveCurrentToCoDriverSeat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachMainDriverRequest {\n");
            sb.Append("  ComposedResourceId: ").Append(ComposedResourceId).Append("\n");
            sb.Append("  DriverResourceId: ").Append(DriverResourceId).Append("\n");
            sb.Append("  MoveCurrentToCoDriverSeat: ").Append(MoveCurrentToCoDriverSeat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttachMainDriverRequest);
        }

        /// <summary>
        /// Returns true if AttachMainDriverRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AttachMainDriverRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachMainDriverRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ComposedResourceId == input.ComposedResourceId ||
                    (this.ComposedResourceId != null &&
                    this.ComposedResourceId.Equals(input.ComposedResourceId))
                ) && 
                (
                    this.DriverResourceId == input.DriverResourceId ||
                    (this.DriverResourceId != null &&
                    this.DriverResourceId.Equals(input.DriverResourceId))
                ) && 
                (
                    this.MoveCurrentToCoDriverSeat == input.MoveCurrentToCoDriverSeat ||
                    this.MoveCurrentToCoDriverSeat.Equals(input.MoveCurrentToCoDriverSeat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComposedResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.ComposedResourceId.GetHashCode();
                }
                if (this.DriverResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.DriverResourceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MoveCurrentToCoDriverSeat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
