/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Logistics.Client.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Logistics.Model
{
    /// <summary>
    /// Shared model of shipment document.
    /// </summary>
    [DataContract(Name = "ShipmentDocumentModel")]
    public partial class ShipmentDocumentModel : IEquatable<ShipmentDocumentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDocumentModel" /> class.
        /// </summary>
        /// <param name="documentId">Gets or sets the document id..</param>
        /// <param name="shipmentId">Gets or sets the shipment id..</param>
        /// <param name="shipmentItemId">Gets or sets the shipment item id..</param>
        /// <param name="weightNoteId">Gets or sets the weight note id..</param>
        /// <param name="invoiceOrderNr">Gets or sets the invoice order number..</param>
        /// <param name="isInvoiceAttachment">Gets or sets whether this document should be attached to an invoice or not..</param>
        public ShipmentDocumentModel(Guid documentId = default(Guid), Guid shipmentId = default(Guid), Guid? shipmentItemId = default(Guid?), Guid? weightNoteId = default(Guid?), int invoiceOrderNr = default(int), bool isInvoiceAttachment = default(bool))
        {
            this.DocumentId = documentId;
            this.ShipmentId = shipmentId;
            this.ShipmentItemId = shipmentItemId;
            this.WeightNoteId = weightNoteId;
            this.InvoiceOrderNr = invoiceOrderNr;
            this.IsInvoiceAttachment = isInvoiceAttachment;
        }

        /// <summary>
        /// Gets or sets the document id.
        /// </summary>
        /// <value>Gets or sets the document id.</value>
        [DataMember(Name = "documentId", EmitDefaultValue = false)]
        public Guid DocumentId { get; set; }

        /// <summary>
        /// Gets or sets the shipment id.
        /// </summary>
        /// <value>Gets or sets the shipment id.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public Guid ShipmentId { get; set; }

        /// <summary>
        /// Gets or sets the shipment item id.
        /// </summary>
        /// <value>Gets or sets the shipment item id.</value>
        [DataMember(Name = "shipmentItemId", EmitDefaultValue = true)]
        public Guid? ShipmentItemId { get; set; }

        /// <summary>
        /// Gets or sets the weight note id.
        /// </summary>
        /// <value>Gets or sets the weight note id.</value>
        [DataMember(Name = "weightNoteId", EmitDefaultValue = true)]
        public Guid? WeightNoteId { get; set; }

        /// <summary>
        /// Gets or sets the invoice order number.
        /// </summary>
        /// <value>Gets or sets the invoice order number.</value>
        [DataMember(Name = "invoiceOrderNr", EmitDefaultValue = false)]
        public int InvoiceOrderNr { get; set; }

        /// <summary>
        /// Gets or sets whether this document should be attached to an invoice or not.
        /// </summary>
        /// <value>Gets or sets whether this document should be attached to an invoice or not.</value>
        [DataMember(Name = "isInvoiceAttachment", EmitDefaultValue = true)]
        public bool IsInvoiceAttachment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentDocumentModel {\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentItemId: ").Append(ShipmentItemId).Append("\n");
            sb.Append("  WeightNoteId: ").Append(WeightNoteId).Append("\n");
            sb.Append("  InvoiceOrderNr: ").Append(InvoiceOrderNr).Append("\n");
            sb.Append("  IsInvoiceAttachment: ").Append(IsInvoiceAttachment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentDocumentModel);
        }

        /// <summary>
        /// Returns true if ShipmentDocumentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentDocumentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentDocumentModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.ShipmentItemId == input.ShipmentItemId ||
                    (this.ShipmentItemId != null &&
                    this.ShipmentItemId.Equals(input.ShipmentItemId))
                ) && 
                (
                    this.WeightNoteId == input.WeightNoteId ||
                    (this.WeightNoteId != null &&
                    this.WeightNoteId.Equals(input.WeightNoteId))
                ) && 
                (
                    this.InvoiceOrderNr == input.InvoiceOrderNr ||
                    this.InvoiceOrderNr.Equals(input.InvoiceOrderNr)
                ) && 
                (
                    this.IsInvoiceAttachment == input.IsInvoiceAttachment ||
                    this.IsInvoiceAttachment.Equals(input.IsInvoiceAttachment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                if (this.ShipmentId != null)
                {
                    hashCode = (hashCode * 59) + this.ShipmentId.GetHashCode();
                }
                if (this.ShipmentItemId != null)
                {
                    hashCode = (hashCode * 59) + this.ShipmentItemId.GetHashCode();
                }
                if (this.WeightNoteId != null)
                {
                    hashCode = (hashCode * 59) + this.WeightNoteId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InvoiceOrderNr.GetHashCode();
                hashCode = (hashCode * 59) + this.IsInvoiceAttachment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
