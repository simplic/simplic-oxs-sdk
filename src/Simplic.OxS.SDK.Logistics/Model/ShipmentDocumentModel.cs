// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of shipment document.
    /// </summary>
    public partial class ShipmentDocumentModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ShipmentDocumentModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDocumentModel" /> class.
        /// </summary>
        /// <param name="documentId">Gets or sets the document id.</param>
        /// <param name="invoiceOrderNr">Gets or sets the invoice order number.</param>
        /// <param name="isInvoiceAttachment">Gets or sets whether this document should be attached to an invoice or not.</param>
        /// <param name="shipmentId">Gets or sets the shipment id.</param>
        /// <param name="shipmentItemId">Gets or sets the shipment item id.</param>
        /// <param name="weightNoteId">Gets or sets the weight note id.</param>
        //[JsonConstructor]
        public ShipmentDocumentModel(Option<Guid> documentId = default, Option<int> invoiceOrderNr = default, Option<bool> isInvoiceAttachment = default, Option<Guid> shipmentId = default, Option<Guid> shipmentItemId = default, Option<Guid> weightNoteId = default)
        {
            DocumentIdOption = documentId;
            InvoiceOrderNrOption = invoiceOrderNr;
            IsInvoiceAttachmentOption = isInvoiceAttachment;
            ShipmentIdOption = shipmentId;
            ShipmentItemIdOption = shipmentItemId;
            WeightNoteIdOption = weightNoteId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DocumentId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> DocumentIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the document id.
        /// </summary>
        /// <value>Gets or sets the document id.</value>
        [JsonPropertyName("documentId")]
        public Guid? DocumentId { get { return this. DocumentIdOption; } set { this.DocumentIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of InvoiceOrderNr
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> InvoiceOrderNrOption { get; private set; }

        /// <summary>
        /// Gets or sets the invoice order number.
        /// </summary>
        /// <value>Gets or sets the invoice order number.</value>
        [JsonPropertyName("invoiceOrderNr")]
        public int? InvoiceOrderNr { get { return this. InvoiceOrderNrOption; } set { this.InvoiceOrderNrOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of IsInvoiceAttachment
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsInvoiceAttachmentOption { get; private set; }

        /// <summary>
        /// Gets or sets whether this document should be attached to an invoice or not.
        /// </summary>
        /// <value>Gets or sets whether this document should be attached to an invoice or not.</value>
        [JsonPropertyName("isInvoiceAttachment")]
        public bool? IsInvoiceAttachment { get { return this. IsInvoiceAttachmentOption; } set { this.IsInvoiceAttachmentOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of ShipmentId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ShipmentIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the shipment id.
        /// </summary>
        /// <value>Gets or sets the shipment id.</value>
        [JsonPropertyName("shipmentId")]
        public Guid? ShipmentId { get { return this. ShipmentIdOption; } set { this.ShipmentIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of ShipmentItemId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> ShipmentItemIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the shipment item id.
        /// </summary>
        /// <value>Gets or sets the shipment item id.</value>
        [JsonPropertyName("shipmentItemId")]
        public Guid? ShipmentItemId { get { return this. ShipmentItemIdOption; } set { this.ShipmentItemIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of WeightNoteId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> WeightNoteIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the weight note id.
        /// </summary>
        /// <value>Gets or sets the weight note id.</value>
        [JsonPropertyName("weightNoteId")]
        public Guid? WeightNoteId { get { return this. WeightNoteIdOption; } set { this.WeightNoteIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentDocumentModel {\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  InvoiceOrderNr: ").Append(InvoiceOrderNr).Append("\n");
            sb.Append("  IsInvoiceAttachment: ").Append(IsInvoiceAttachment).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentItemId: ").Append(ShipmentItemId).Append("\n");
            sb.Append("  WeightNoteId: ").Append(WeightNoteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentDocumentModel" />
    /// </summary>
    public class ShipmentDocumentModelJsonConverter : JsonConverter<ShipmentDocumentModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShipmentDocumentModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentDocumentModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid> documentId = default;
            Option<int> invoiceOrderNr = default;
            Option<bool> isInvoiceAttachment = default;
            Option<Guid> shipmentId = default;
            Option<Guid> shipmentItemId = default;
            Option<Guid> weightNoteId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "documentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                documentId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "invoiceOrderNr":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invoiceOrderNr = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "isInvoiceAttachment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isInvoiceAttachment = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "shipmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shipmentId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "shipmentItemId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shipmentItemId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "weightNoteId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                weightNoteId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (documentId.IsSet && documentId.Value == null)
                throw new ArgumentNullException(nameof(documentId), "Property is not nullable for class ShipmentDocumentModel.");

            if (invoiceOrderNr.IsSet && invoiceOrderNr.Value == null)
                throw new ArgumentNullException(nameof(invoiceOrderNr), "Property is not nullable for class ShipmentDocumentModel.");

            if (isInvoiceAttachment.IsSet && isInvoiceAttachment.Value == null)
                throw new ArgumentNullException(nameof(isInvoiceAttachment), "Property is not nullable for class ShipmentDocumentModel.");

            if (shipmentId.IsSet && shipmentId.Value == null)
                throw new ArgumentNullException(nameof(shipmentId), "Property is not nullable for class ShipmentDocumentModel.");

            //2return new ShipmentDocumentModel(documentId, invoiceOrderNr, isInvoiceAttachment, shipmentId, shipmentItemId, weightNoteId);
            return new ShipmentDocumentModel(documentId, invoiceOrderNr, isInvoiceAttachment, shipmentId, shipmentItemId, weightNoteId);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentDocumentModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDocumentModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentDocumentModel shipmentDocumentModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, shipmentDocumentModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentDocumentModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDocumentModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ShipmentDocumentModel shipmentDocumentModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentDocumentModel.DocumentIdOption.IsSet)
                writer.WriteString("documentId", shipmentDocumentModel.DocumentIdOption!.Value);

            if (shipmentDocumentModel.InvoiceOrderNrOption.IsSet)
                writer.WriteNumber("invoiceOrderNr", shipmentDocumentModel.InvoiceOrderNrOption!.Value);

            if (shipmentDocumentModel.IsInvoiceAttachmentOption.IsSet)
                writer.WriteBoolean("isInvoiceAttachment", shipmentDocumentModel.IsInvoiceAttachmentOption!.Value);

            if (shipmentDocumentModel.ShipmentIdOption.IsSet)
                writer.WriteString("shipmentId", shipmentDocumentModel.ShipmentIdOption!.Value);

            if (shipmentDocumentModel.ShipmentItemIdOption.IsSet)
                if (shipmentDocumentModel.ShipmentItemIdOption.Value != null)
                {
                    writer.WriteString("shipmentItemId", shipmentDocumentModel.ShipmentItemIdOption!.Value);
                    //var __value = shipmentDocumentModel.ShipmentItemIdOption.Value;
                    //writer.WriteString("shipmentItemId", __value);
                }
                else
                    writer.WriteNull("shipmentItemId");

            if (shipmentDocumentModel.WeightNoteIdOption.IsSet)
                if (shipmentDocumentModel.WeightNoteIdOption.Value != null)
                {
                    writer.WriteString("weightNoteId", shipmentDocumentModel.WeightNoteIdOption!.Value);
                    //var __value = shipmentDocumentModel.WeightNoteIdOption.Value;
                    //writer.WriteString("weightNoteId", __value);
                }
                else
                    writer.WriteNull("weightNoteId");
        }
    }
}
