// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Request to patch a planning region.
    /// </summary>
    public partial class PatchPlanningRegionRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public PatchPlanningRegionRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PatchPlanningRegionRequest" /> class.
        /// </summary>
        /// <param name="exclude">Gets or sets a list of country iso / zipcode tuples which are excluded from the planning region.</param>
        /// <param name="functions">Gets or sets a list of functions for the region.  &lt;br&gt;  Currently planned are:  show_loadings,  show_unloading,  show_transits  </param>
        /// <param name="hexColor">Gets or sets the hex color of the planning region.</param>
        /// <param name="include">Gets or sets a list of country iso / zipcode tuples which are included from the plannig region.</param>
        /// <param name="name">Gets or sets the name of the plannig region.</param>
        //[JsonConstructor]
        public PatchPlanningRegionRequest(Option<List<RegionModel>> exclude = default, Option<List<string>> functions = default, Option<string> hexColor = default, Option<List<RegionModel>> include = default, Option<string> name = default)
        {
            ExcludeOption = exclude;
            FunctionsOption = functions;
            HexColorOption = hexColor;
            IncludeOption = include;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Exclude
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<RegionModel>>))]
        public Option<List<RegionModel>> ExcludeOption { get; private set; }

        /// <summary>
        /// Gets or sets a list of country iso / zipcode tuples which are excluded from the planning region.
        /// </summary>
        /// <value>Gets or sets a list of country iso / zipcode tuples which are excluded from the planning region.</value>
        [JsonPropertyName("exclude")]
        public List<RegionModel>? Exclude { get { return this. ExcludeOption; } set { this.ExcludeOption = new Option<List<RegionModel>>(value); } }

        /// <summary>
        /// Used to track the state of Functions
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> FunctionsOption { get; private set; }

        /// <summary>
        /// Gets or sets a list of functions for the region.  &lt;br&gt;  Currently planned are:  show_loadings,  show_unloading,  show_transits  
        /// </summary>
        /// <value>Gets or sets a list of functions for the region.  &lt;br&gt;  Currently planned are:  show_loadings,  show_unloading,  show_transits  </value>
        [JsonPropertyName("functions")]
        public List<string>? Functions { get { return this. FunctionsOption; } set { this.FunctionsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of HexColor
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> HexColorOption { get; private set; }

        /// <summary>
        /// Gets or sets the hex color of the planning region.
        /// </summary>
        /// <value>Gets or sets the hex color of the planning region.</value>
        [JsonPropertyName("hexColor")]
        public string? HexColor { get { return this. HexColorOption; } set { this.HexColorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Include
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<RegionModel>>))]
        public Option<List<RegionModel>> IncludeOption { get; private set; }

        /// <summary>
        /// Gets or sets a list of country iso / zipcode tuples which are included from the plannig region.
        /// </summary>
        /// <value>Gets or sets a list of country iso / zipcode tuples which are included from the plannig region.</value>
        [JsonPropertyName("include")]
        public List<RegionModel>? Include { get { return this. IncludeOption; } set { this.IncludeOption = new Option<List<RegionModel>>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or sets the name of the plannig region.
        /// </summary>
        /// <value>Gets or sets the name of the plannig region.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchPlanningRegionRequest {\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("  Functions: ").Append(Functions).Append("\n");
            sb.Append("  HexColor: ").Append(HexColor).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PatchPlanningRegionRequest" />
    /// </summary>
    public class PatchPlanningRegionRequestJsonConverter : JsonConverter<PatchPlanningRegionRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PatchPlanningRegionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PatchPlanningRegionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<RegionModel>> exclude = default;
            Option<List<string>> functions = default;
            Option<string> hexColor = default;
            Option<List<RegionModel>> include = default;
            Option<string> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "exclude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                exclude = new Option<List<RegionModel>>(JsonSerializer.Deserialize<List<RegionModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "functions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                functions = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "hexColor":
                            hexColor = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "include":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                include = new Option<List<RegionModel>>(JsonSerializer.Deserialize<List<RegionModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new PatchPlanningRegionRequest(exclude, functions, hexColor, include, name);
            return new PatchPlanningRegionRequest(exclude, functions, hexColor, include, name);
        }

        /// <summary>
        /// Serializes a <see cref="PatchPlanningRegionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchPlanningRegionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PatchPlanningRegionRequest patchPlanningRegionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, patchPlanningRegionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PatchPlanningRegionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchPlanningRegionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, PatchPlanningRegionRequest patchPlanningRegionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (patchPlanningRegionRequest.ExcludeOption.IsSet)
                if (patchPlanningRegionRequest.ExcludeOption.Value != null)
                {
                    writer.WritePropertyName("exclude");
                    JsonSerializer.Serialize(writer, patchPlanningRegionRequest.Exclude, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("exclude");
            if (patchPlanningRegionRequest.FunctionsOption.IsSet)
                if (patchPlanningRegionRequest.FunctionsOption.Value != null)
                {
                    writer.WritePropertyName("functions");
                    JsonSerializer.Serialize(writer, patchPlanningRegionRequest.Functions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("functions");
            if (patchPlanningRegionRequest.HexColorOption.IsSet)
                if (patchPlanningRegionRequest.HexColorOption.Value != null)
                {
                    writer.WriteString("hexColor", patchPlanningRegionRequest.HexColor);
                    //var __value = patchPlanningRegionRequest.HexColorOption.Value;
                    //writer.WriteString("hexColor", __value);
                }
                else
                    writer.WriteNull("hexColor");

            if (patchPlanningRegionRequest.IncludeOption.IsSet)
                if (patchPlanningRegionRequest.IncludeOption.Value != null)
                {
                    writer.WritePropertyName("include");
                    JsonSerializer.Serialize(writer, patchPlanningRegionRequest.Include, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("include");
            if (patchPlanningRegionRequest.NameOption.IsSet)
                if (patchPlanningRegionRequest.NameOption.Value != null)
                {
                    writer.WriteString("name", patchPlanningRegionRequest.Name);
                    //var __value = patchPlanningRegionRequest.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");
        }
    }
}
