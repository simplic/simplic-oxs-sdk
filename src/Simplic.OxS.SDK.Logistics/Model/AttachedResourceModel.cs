// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model for attached resources.
    /// </summary>
    public partial class AttachedResourceModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public AttachedResourceModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachedResourceModel" /> class.
        /// </summary>
        /// <param name="attachAction">attachAction</param>
        /// <param name="detachAction">detachAction</param>
        /// <param name="id">id</param>
        /// <param name="resource">resource</param>
        //[JsonConstructor]
        public AttachedResourceModel(Option<TourActionModel> attachAction = default, Option<TourActionModel> detachAction = default, Option<Guid> id = default, Option<ResourceModel> resource = default)
        {
            AttachActionOption = attachAction;
            DetachActionOption = detachAction;
            IdOption = id;
            ResourceOption = resource;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AttachAction
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TourActionModel>))]
        public Option<TourActionModel> AttachActionOption { get; private set; }

        /// <summary>
        /// Gets or Sets AttachAction
        /// </summary>
        [JsonPropertyName("attachAction")]
        public TourActionModel? AttachAction { get { return this. AttachActionOption; } set { this.AttachActionOption = new Option<TourActionModel>(value); } }

        /// <summary>
        /// Used to track the state of DetachAction
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TourActionModel>))]
        public Option<TourActionModel> DetachActionOption { get; private set; }

        /// <summary>
        /// Gets or Sets DetachAction
        /// </summary>
        [JsonPropertyName("detachAction")]
        public TourActionModel? DetachAction { get { return this. DetachActionOption; } set { this.DetachActionOption = new Option<TourActionModel>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Resource
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> ResourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [JsonPropertyName("resource")]
        public ResourceModel? Resource { get { return this. ResourceOption; } set { this.ResourceOption = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachedResourceModel {\n");
            sb.Append("  AttachAction: ").Append(AttachAction).Append("\n");
            sb.Append("  DetachAction: ").Append(DetachAction).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AttachedResourceModel" />
    /// </summary>
    public class AttachedResourceModelJsonConverter : JsonConverter<AttachedResourceModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="AttachedResourceModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AttachedResourceModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TourActionModel> attachAction = default;
            Option<TourActionModel> detachAction = default;
            Option<Guid> id = default;
            Option<ResourceModel> resource = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attachAction":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attachAction = new Option<TourActionModel>(JsonSerializer.Deserialize<TourActionModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "detachAction":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                detachAction = new Option<TourActionModel>(JsonSerializer.Deserialize<TourActionModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "resource":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resource = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (attachAction.IsSet && attachAction.Value == null)
                throw new ArgumentNullException(nameof(attachAction), "Property is not nullable for class AttachedResourceModel.");

            if (detachAction.IsSet && detachAction.Value == null)
                throw new ArgumentNullException(nameof(detachAction), "Property is not nullable for class AttachedResourceModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AttachedResourceModel.");

            if (resource.IsSet && resource.Value == null)
                throw new ArgumentNullException(nameof(resource), "Property is not nullable for class AttachedResourceModel.");

            //2return new AttachedResourceModel(attachAction, detachAction, id, resource);
            return new AttachedResourceModel(attachAction, detachAction, id, resource);
        }

        /// <summary>
        /// Serializes a <see cref="AttachedResourceModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachedResourceModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AttachedResourceModel attachedResourceModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, attachedResourceModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AttachedResourceModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachedResourceModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, AttachedResourceModel attachedResourceModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (attachedResourceModel.AttachActionOption.IsSet && attachedResourceModel.AttachAction == null)
                throw new ArgumentNullException(nameof(attachedResourceModel.AttachAction), "Property is required for class AttachedResourceModel.");

            if (attachedResourceModel.DetachActionOption.IsSet && attachedResourceModel.DetachAction == null)
                throw new ArgumentNullException(nameof(attachedResourceModel.DetachAction), "Property is required for class AttachedResourceModel.");

            if (attachedResourceModel.ResourceOption.IsSet && attachedResourceModel.Resource == null)
                throw new ArgumentNullException(nameof(attachedResourceModel.Resource), "Property is required for class AttachedResourceModel.");

            if (attachedResourceModel.AttachActionOption.IsSet)
            {
                writer.WritePropertyName("attachAction");
                JsonSerializer.Serialize(writer, attachedResourceModel.AttachAction, jsonSerializerOptions);
            }
            if (attachedResourceModel.DetachActionOption.IsSet)
            {
                writer.WritePropertyName("detachAction");
                JsonSerializer.Serialize(writer, attachedResourceModel.DetachAction, jsonSerializerOptions);
            }
            if (attachedResourceModel.IdOption.IsSet)
                writer.WriteString("id", attachedResourceModel.IdOption!.Value);

            if (attachedResourceModel.ResourceOption.IsSet)
            {
                writer.WritePropertyName("resource");
                JsonSerializer.Serialize(writer, attachedResourceModel.Resource, jsonSerializerOptions);
            }
        }
    }
}
