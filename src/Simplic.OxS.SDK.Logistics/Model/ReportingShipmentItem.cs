/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Client.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Logistics.Model
{
    /// <summary>
    /// ReportingShipmentItem
    /// </summary>
    [DataContract(Name = "ReportingShipmentItem")]
    public partial class ReportingShipmentItem : IEquatable<ReportingShipmentItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingShipmentItem" /> class.
        /// </summary>
        /// <param name="text">text.</param>
        /// <param name="loadNumber">loadNumber.</param>
        /// <param name="deliveryNumber">deliveryNumber.</param>
        /// <param name="startAddress">startAddress.</param>
        /// <param name="endAddress">endAddress.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="weight">weight.</param>
        public ReportingShipmentItem(string text = default(string), string loadNumber = default(string), string deliveryNumber = default(string), AddressModel startAddress = default(AddressModel), AddressModel endAddress = default(AddressModel), QuantityModel quantity = default(QuantityModel), QuantityModel weight = default(QuantityModel))
        {
            this.Text = text;
            this.LoadNumber = loadNumber;
            this.DeliveryNumber = deliveryNumber;
            this.StartAddress = startAddress;
            this.EndAddress = endAddress;
            this.Quantity = quantity;
            this.Weight = weight;
        }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets LoadNumber
        /// </summary>
        [DataMember(Name = "loadNumber", EmitDefaultValue = true)]
        public string LoadNumber { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryNumber
        /// </summary>
        [DataMember(Name = "deliveryNumber", EmitDefaultValue = true)]
        public string DeliveryNumber { get; set; }

        /// <summary>
        /// Gets or Sets StartAddress
        /// </summary>
        [DataMember(Name = "startAddress", EmitDefaultValue = false)]
        public AddressModel StartAddress { get; set; }

        /// <summary>
        /// Gets or Sets EndAddress
        /// </summary>
        [DataMember(Name = "endAddress", EmitDefaultValue = false)]
        public AddressModel EndAddress { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public QuantityModel Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public QuantityModel Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportingShipmentItem {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  LoadNumber: ").Append(LoadNumber).Append("\n");
            sb.Append("  DeliveryNumber: ").Append(DeliveryNumber).Append("\n");
            sb.Append("  StartAddress: ").Append(StartAddress).Append("\n");
            sb.Append("  EndAddress: ").Append(EndAddress).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportingShipmentItem);
        }

        /// <summary>
        /// Returns true if ReportingShipmentItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportingShipmentItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingShipmentItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.LoadNumber == input.LoadNumber ||
                    (this.LoadNumber != null &&
                    this.LoadNumber.Equals(input.LoadNumber))
                ) && 
                (
                    this.DeliveryNumber == input.DeliveryNumber ||
                    (this.DeliveryNumber != null &&
                    this.DeliveryNumber.Equals(input.DeliveryNumber))
                ) && 
                (
                    this.StartAddress == input.StartAddress ||
                    (this.StartAddress != null &&
                    this.StartAddress.Equals(input.StartAddress))
                ) && 
                (
                    this.EndAddress == input.EndAddress ||
                    (this.EndAddress != null &&
                    this.EndAddress.Equals(input.EndAddress))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.LoadNumber != null)
                {
                    hashCode = (hashCode * 59) + this.LoadNumber.GetHashCode();
                }
                if (this.DeliveryNumber != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryNumber.GetHashCode();
                }
                if (this.StartAddress != null)
                {
                    hashCode = (hashCode * 59) + this.StartAddress.GetHashCode();
                }
                if (this.EndAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EndAddress.GetHashCode();
                }
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                if (this.Weight != null)
                {
                    hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
