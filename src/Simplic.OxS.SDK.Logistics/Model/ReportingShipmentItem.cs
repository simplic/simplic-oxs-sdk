// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// ReportingShipmentItem
    /// </summary>
    public partial class ReportingShipmentItem : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ReportingShipmentItem()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingShipmentItem" /> class.
        /// </summary>
        /// <param name="deliveryNumber">deliveryNumber</param>
        /// <param name="endAddress">endAddress</param>
        /// <param name="loadNumber">loadNumber</param>
        /// <param name="quantity">quantity</param>
        /// <param name="startAddress">startAddress</param>
        /// <param name="text">text</param>
        /// <param name="weight">weight</param>
        //[JsonConstructor]
        public ReportingShipmentItem(Option<string> deliveryNumber = default, Option<AddressModel> endAddress = default, Option<string> loadNumber = default, Option<QuantityModel> quantity = default, Option<AddressModel> startAddress = default, Option<string> text = default, Option<QuantityModel> weight = default)
        {
            DeliveryNumberOption = deliveryNumber;
            EndAddressOption = endAddress;
            LoadNumberOption = loadNumber;
            QuantityOption = quantity;
            StartAddressOption = startAddress;
            TextOption = text;
            WeightOption = weight;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DeliveryNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DeliveryNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryNumber
        /// </summary>
        [JsonPropertyName("deliveryNumber")]
        public string? DeliveryNumber { get { return this. DeliveryNumberOption; } set { this.DeliveryNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EndAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> EndAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndAddress
        /// </summary>
        [JsonPropertyName("endAddress")]
        public AddressModel? EndAddress { get { return this. EndAddressOption; } set { this.EndAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of LoadNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> LoadNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets LoadNumber
        /// </summary>
        [JsonPropertyName("loadNumber")]
        public string? LoadNumber { get { return this. LoadNumberOption; } set { this.LoadNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<QuantityModel>))]
        public Option<QuantityModel> QuantityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public QuantityModel? Quantity { get { return this. QuantityOption; } set { this.QuantityOption = new Option<QuantityModel>(value); } }

        /// <summary>
        /// Used to track the state of StartAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> StartAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartAddress
        /// </summary>
        [JsonPropertyName("startAddress")]
        public AddressModel? StartAddress { get { return this. StartAddressOption; } set { this.StartAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [JsonPropertyName("text")]
        public string? Text { get { return this. TextOption; } set { this.TextOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Weight
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<QuantityModel>))]
        public Option<QuantityModel> WeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [JsonPropertyName("weight")]
        public QuantityModel? Weight { get { return this. WeightOption; } set { this.WeightOption = new Option<QuantityModel>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportingShipmentItem {\n");
            sb.Append("  DeliveryNumber: ").Append(DeliveryNumber).Append("\n");
            sb.Append("  EndAddress: ").Append(EndAddress).Append("\n");
            sb.Append("  LoadNumber: ").Append(LoadNumber).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  StartAddress: ").Append(StartAddress).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReportingShipmentItem" />
    /// </summary>
    public class ReportingShipmentItemJsonConverter : JsonConverter<ReportingShipmentItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReportingShipmentItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReportingShipmentItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> deliveryNumber = default;
            Option<AddressModel> endAddress = default;
            Option<string> loadNumber = default;
            Option<QuantityModel> quantity = default;
            Option<AddressModel> startAddress = default;
            Option<string> text = default;
            Option<QuantityModel> weight = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "deliveryNumber":
                            deliveryNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "endAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "loadNumber":
                            loadNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<QuantityModel>(JsonSerializer.Deserialize<QuantityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "startAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "text":
                            text = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "weight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                weight = new Option<QuantityModel>(JsonSerializer.Deserialize<QuantityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (endAddress.IsSet && endAddress.Value == null)
                throw new ArgumentNullException(nameof(endAddress), "Property is not nullable for class ReportingShipmentItem.");

            if (quantity.IsSet && quantity.Value == null)
                throw new ArgumentNullException(nameof(quantity), "Property is not nullable for class ReportingShipmentItem.");

            if (startAddress.IsSet && startAddress.Value == null)
                throw new ArgumentNullException(nameof(startAddress), "Property is not nullable for class ReportingShipmentItem.");

            if (weight.IsSet && weight.Value == null)
                throw new ArgumentNullException(nameof(weight), "Property is not nullable for class ReportingShipmentItem.");

            //2return new ReportingShipmentItem(deliveryNumber, endAddress, loadNumber, quantity, startAddress, text, weight);
            return new ReportingShipmentItem(deliveryNumber, endAddress, loadNumber, quantity, startAddress, text, weight);
        }

        /// <summary>
        /// Serializes a <see cref="ReportingShipmentItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reportingShipmentItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReportingShipmentItem reportingShipmentItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, reportingShipmentItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReportingShipmentItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reportingShipmentItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ReportingShipmentItem reportingShipmentItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (reportingShipmentItem.EndAddressOption.IsSet && reportingShipmentItem.EndAddress == null)
                throw new ArgumentNullException(nameof(reportingShipmentItem.EndAddress), "Property is required for class ReportingShipmentItem.");

            if (reportingShipmentItem.QuantityOption.IsSet && reportingShipmentItem.Quantity == null)
                throw new ArgumentNullException(nameof(reportingShipmentItem.Quantity), "Property is required for class ReportingShipmentItem.");

            if (reportingShipmentItem.StartAddressOption.IsSet && reportingShipmentItem.StartAddress == null)
                throw new ArgumentNullException(nameof(reportingShipmentItem.StartAddress), "Property is required for class ReportingShipmentItem.");

            if (reportingShipmentItem.WeightOption.IsSet && reportingShipmentItem.Weight == null)
                throw new ArgumentNullException(nameof(reportingShipmentItem.Weight), "Property is required for class ReportingShipmentItem.");

            if (reportingShipmentItem.DeliveryNumberOption.IsSet)
                if (reportingShipmentItem.DeliveryNumberOption.Value != null)
                {
                    writer.WriteString("deliveryNumber", reportingShipmentItem.DeliveryNumber);
                    //var __value = reportingShipmentItem.DeliveryNumberOption.Value;
                    //writer.WriteString("deliveryNumber", __value);
                }
                else
                    writer.WriteNull("deliveryNumber");

            if (reportingShipmentItem.EndAddressOption.IsSet)
            {
                writer.WritePropertyName("endAddress");
                JsonSerializer.Serialize(writer, reportingShipmentItem.EndAddress, jsonSerializerOptions);
            }
            if (reportingShipmentItem.LoadNumberOption.IsSet)
                if (reportingShipmentItem.LoadNumberOption.Value != null)
                {
                    writer.WriteString("loadNumber", reportingShipmentItem.LoadNumber);
                    //var __value = reportingShipmentItem.LoadNumberOption.Value;
                    //writer.WriteString("loadNumber", __value);
                }
                else
                    writer.WriteNull("loadNumber");

            if (reportingShipmentItem.QuantityOption.IsSet)
            {
                writer.WritePropertyName("quantity");
                JsonSerializer.Serialize(writer, reportingShipmentItem.Quantity, jsonSerializerOptions);
            }
            if (reportingShipmentItem.StartAddressOption.IsSet)
            {
                writer.WritePropertyName("startAddress");
                JsonSerializer.Serialize(writer, reportingShipmentItem.StartAddress, jsonSerializerOptions);
            }
            if (reportingShipmentItem.TextOption.IsSet)
                if (reportingShipmentItem.TextOption.Value != null)
                {
                    writer.WriteString("text", reportingShipmentItem.Text);
                    //var __value = reportingShipmentItem.TextOption.Value;
                    //writer.WriteString("text", __value);
                }
                else
                    writer.WriteNull("text");

            if (reportingShipmentItem.WeightOption.IsSet)
            {
                writer.WritePropertyName("weight");
                JsonSerializer.Serialize(writer, reportingShipmentItem.Weight, jsonSerializerOptions);
            }
        }
    }
}
