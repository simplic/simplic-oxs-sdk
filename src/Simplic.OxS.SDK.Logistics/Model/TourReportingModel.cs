// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// TourReportingModel
    /// </summary>
    public partial class TourReportingModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public TourReportingModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TourReportingModel" /> class.
        /// </summary>
        /// <param name="carrier1">carrier1</param>
        /// <param name="carrier2">carrier2</param>
        /// <param name="container1">container1</param>
        /// <param name="container2">container2</param>
        /// <param name="driver1">driver1</param>
        /// <param name="driver2">driver2</param>
        /// <param name="endAddress">endAddress</param>
        /// <param name="endDateTime">Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.</param>
        /// <param name="firstShipment">firstShipment</param>
        /// <param name="globalTourId">Gets or sets the global tour id.  &lt;br&gt;  The global tour id is used to group tours that were generated from the same tour.  </param>
        /// <param name="id">Gets or sets the id.  &lt;br&gt;  Represents a unique identifier for a tour.  </param>
        /// <param name="lastShipment">lastShipment</param>
        /// <param name="number">Gets or sets the number of the tour.</param>
        /// <param name="reference">Gets or sets the reference number.</param>
        /// <param name="shipmentItems">shipmentItems</param>
        /// <param name="shipments">shipments</param>
        /// <param name="startAddress">startAddress</param>
        /// <param name="startDateTime">Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.</param>
        /// <param name="tractorUnit1">tractorUnit1</param>
        /// <param name="tractorUnit2">tractorUnit2</param>
        /// <param name="tractorUnit3">tractorUnit3</param>
        /// <param name="trailer1">trailer1</param>
        /// <param name="trailer2">trailer2</param>
        //[JsonConstructor]
        public TourReportingModel(Option<ResourceModel> carrier1 = default, Option<ResourceModel> carrier2 = default, Option<ResourceModel> container1 = default, Option<ResourceModel> container2 = default, Option<ResourceModel> driver1 = default, Option<ResourceModel> driver2 = default, Option<AddressModel> endAddress = default, Option<DateTime> endDateTime = default, Option<ShipmentModel> firstShipment = default, Option<Guid> globalTourId = default, Option<Guid> id = default, Option<ShipmentModel> lastShipment = default, Option<string> number = default, Option<string> reference = default, Option<List<ReportingShipmentItem>> shipmentItems = default, Option<List<ShipmentModel>> shipments = default, Option<AddressModel> startAddress = default, Option<DateTime> startDateTime = default, Option<ResourceModel> tractorUnit1 = default, Option<ResourceModel> tractorUnit2 = default, Option<ResourceModel> tractorUnit3 = default, Option<ResourceModel> trailer1 = default, Option<ResourceModel> trailer2 = default)
        {
            Carrier1Option = carrier1;
            Carrier2Option = carrier2;
            Container1Option = container1;
            Container2Option = container2;
            Driver1Option = driver1;
            Driver2Option = driver2;
            EndAddressOption = endAddress;
            EndDateTimeOption = endDateTime;
            FirstShipmentOption = firstShipment;
            GlobalTourIdOption = globalTourId;
            IdOption = id;
            LastShipmentOption = lastShipment;
            NumberOption = number;
            ReferenceOption = reference;
            ShipmentItemsOption = shipmentItems;
            ShipmentsOption = shipments;
            StartAddressOption = startAddress;
            StartDateTimeOption = startDateTime;
            TractorUnit1Option = tractorUnit1;
            TractorUnit2Option = tractorUnit2;
            TractorUnit3Option = tractorUnit3;
            Trailer1Option = trailer1;
            Trailer2Option = trailer2;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Carrier1
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> Carrier1Option { get; private set; }

        /// <summary>
        /// Gets or Sets Carrier1
        /// </summary>
        [JsonPropertyName("carrier1")]
        public ResourceModel? Carrier1 { get { return this. Carrier1Option; } set { this.Carrier1Option = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Used to track the state of Carrier2
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> Carrier2Option { get; private set; }

        /// <summary>
        /// Gets or Sets Carrier2
        /// </summary>
        [JsonPropertyName("carrier2")]
        public ResourceModel? Carrier2 { get { return this. Carrier2Option; } set { this.Carrier2Option = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Used to track the state of Container1
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> Container1Option { get; private set; }

        /// <summary>
        /// Gets or Sets Container1
        /// </summary>
        [JsonPropertyName("container1")]
        public ResourceModel? Container1 { get { return this. Container1Option; } set { this.Container1Option = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Used to track the state of Container2
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> Container2Option { get; private set; }

        /// <summary>
        /// Gets or Sets Container2
        /// </summary>
        [JsonPropertyName("container2")]
        public ResourceModel? Container2 { get { return this. Container2Option; } set { this.Container2Option = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Used to track the state of Driver1
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> Driver1Option { get; private set; }

        /// <summary>
        /// Gets or Sets Driver1
        /// </summary>
        [JsonPropertyName("driver1")]
        public ResourceModel? Driver1 { get { return this. Driver1Option; } set { this.Driver1Option = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Used to track the state of Driver2
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> Driver2Option { get; private set; }

        /// <summary>
        /// Gets or Sets Driver2
        /// </summary>
        [JsonPropertyName("driver2")]
        public ResourceModel? Driver2 { get { return this. Driver2Option; } set { this.Driver2Option = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Used to track the state of EndAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> EndAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndAddress
        /// </summary>
        [JsonPropertyName("endAddress")]
        public AddressModel? EndAddress { get { return this. EndAddressOption; } set { this.EndAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of EndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.
        /// </summary>
        /// <value>Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.</value>
        [JsonPropertyName("endDateTime")]
        public DateTime? EndDateTime { get { return this. EndDateTimeOption; } set { this.EndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of FirstShipment
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ShipmentModel>))]
        public Option<ShipmentModel> FirstShipmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstShipment
        /// </summary>
        [JsonPropertyName("firstShipment")]
        public ShipmentModel? FirstShipment { get { return this. FirstShipmentOption; } set { this.FirstShipmentOption = new Option<ShipmentModel>(value); } }

        /// <summary>
        /// Used to track the state of GlobalTourId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> GlobalTourIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the global tour id.  &lt;br&gt;  The global tour id is used to group tours that were generated from the same tour.  
        /// </summary>
        /// <value>Gets or sets the global tour id.  &lt;br&gt;  The global tour id is used to group tours that were generated from the same tour.  </value>
        [JsonPropertyName("globalTourId")]
        public Guid? GlobalTourId { get { return this. GlobalTourIdOption; } set { this.GlobalTourIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id.  &lt;br&gt;  Represents a unique identifier for a tour.  
        /// </summary>
        /// <value>Gets or sets the id.  &lt;br&gt;  Represents a unique identifier for a tour.  </value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of LastShipment
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ShipmentModel>))]
        public Option<ShipmentModel> LastShipmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastShipment
        /// </summary>
        [JsonPropertyName("lastShipment")]
        public ShipmentModel? LastShipment { get { return this. LastShipmentOption; } set { this.LastShipmentOption = new Option<ShipmentModel>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the number of the tour.
        /// </summary>
        /// <value>Gets or sets the number of the tour.</value>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// Gets or sets the reference number.
        /// </summary>
        /// <value>Gets or sets the reference number.</value>
        [JsonPropertyName("reference")]
        public string? Reference { get { return this. ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShipmentItems
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<ReportingShipmentItem>>))]
        public Option<List<ReportingShipmentItem>> ShipmentItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShipmentItems
        /// </summary>
        [JsonPropertyName("shipmentItems")]
        public List<ReportingShipmentItem>? ShipmentItems { get { return this. ShipmentItemsOption; } set { this.ShipmentItemsOption = new Option<List<ReportingShipmentItem>>(value); } }

        /// <summary>
        /// Used to track the state of Shipments
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<ShipmentModel>>))]
        public Option<List<ShipmentModel>> ShipmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Shipments
        /// </summary>
        [JsonPropertyName("shipments")]
        public List<ShipmentModel>? Shipments { get { return this. ShipmentsOption; } set { this.ShipmentsOption = new Option<List<ShipmentModel>>(value); } }

        /// <summary>
        /// Used to track the state of StartAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> StartAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartAddress
        /// </summary>
        [JsonPropertyName("startAddress")]
        public AddressModel? StartAddress { get { return this. StartAddressOption; } set { this.StartAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of StartDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.
        /// </summary>
        /// <value>Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.</value>
        [JsonPropertyName("startDateTime")]
        public DateTime? StartDateTime { get { return this. StartDateTimeOption; } set { this.StartDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of TractorUnit1
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> TractorUnit1Option { get; private set; }

        /// <summary>
        /// Gets or Sets TractorUnit1
        /// </summary>
        [JsonPropertyName("tractorUnit1")]
        public ResourceModel? TractorUnit1 { get { return this. TractorUnit1Option; } set { this.TractorUnit1Option = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Used to track the state of TractorUnit2
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> TractorUnit2Option { get; private set; }

        /// <summary>
        /// Gets or Sets TractorUnit2
        /// </summary>
        [JsonPropertyName("tractorUnit2")]
        public ResourceModel? TractorUnit2 { get { return this. TractorUnit2Option; } set { this.TractorUnit2Option = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Used to track the state of TractorUnit3
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> TractorUnit3Option { get; private set; }

        /// <summary>
        /// Gets or Sets TractorUnit3
        /// </summary>
        [JsonPropertyName("tractorUnit3")]
        public ResourceModel? TractorUnit3 { get { return this. TractorUnit3Option; } set { this.TractorUnit3Option = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Used to track the state of Trailer1
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> Trailer1Option { get; private set; }

        /// <summary>
        /// Gets or Sets Trailer1
        /// </summary>
        [JsonPropertyName("trailer1")]
        public ResourceModel? Trailer1 { get { return this. Trailer1Option; } set { this.Trailer1Option = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Used to track the state of Trailer2
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ResourceModel>))]
        public Option<ResourceModel> Trailer2Option { get; private set; }

        /// <summary>
        /// Gets or Sets Trailer2
        /// </summary>
        [JsonPropertyName("trailer2")]
        public ResourceModel? Trailer2 { get { return this. Trailer2Option; } set { this.Trailer2Option = new Option<ResourceModel>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TourReportingModel {\n");
            sb.Append("  Carrier1: ").Append(Carrier1).Append("\n");
            sb.Append("  Carrier2: ").Append(Carrier2).Append("\n");
            sb.Append("  Container1: ").Append(Container1).Append("\n");
            sb.Append("  Container2: ").Append(Container2).Append("\n");
            sb.Append("  Driver1: ").Append(Driver1).Append("\n");
            sb.Append("  Driver2: ").Append(Driver2).Append("\n");
            sb.Append("  EndAddress: ").Append(EndAddress).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  FirstShipment: ").Append(FirstShipment).Append("\n");
            sb.Append("  GlobalTourId: ").Append(GlobalTourId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastShipment: ").Append(LastShipment).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ShipmentItems: ").Append(ShipmentItems).Append("\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("  StartAddress: ").Append(StartAddress).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  TractorUnit1: ").Append(TractorUnit1).Append("\n");
            sb.Append("  TractorUnit2: ").Append(TractorUnit2).Append("\n");
            sb.Append("  TractorUnit3: ").Append(TractorUnit3).Append("\n");
            sb.Append("  Trailer1: ").Append(Trailer1).Append("\n");
            sb.Append("  Trailer2: ").Append(Trailer2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TourReportingModel" />
    /// </summary>
    public class TourReportingModelJsonConverter : JsonConverter<TourReportingModel>
    {
        /// <summary>
        /// The format to use to serialize EndDateTime
        /// </summary>
        public static string EndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDateTime
        /// </summary>
        public static string StartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TourReportingModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TourReportingModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ResourceModel> carrier1 = default;
            Option<ResourceModel> carrier2 = default;
            Option<ResourceModel> container1 = default;
            Option<ResourceModel> container2 = default;
            Option<ResourceModel> driver1 = default;
            Option<ResourceModel> driver2 = default;
            Option<AddressModel> endAddress = default;
            Option<DateTime> endDateTime = default;
            Option<ShipmentModel> firstShipment = default;
            Option<Guid> globalTourId = default;
            Option<Guid> id = default;
            Option<ShipmentModel> lastShipment = default;
            Option<string> number = default;
            Option<string> reference = default;
            Option<List<ReportingShipmentItem>> shipmentItems = default;
            Option<List<ShipmentModel>> shipments = default;
            Option<AddressModel> startAddress = default;
            Option<DateTime> startDateTime = default;
            Option<ResourceModel> tractorUnit1 = default;
            Option<ResourceModel> tractorUnit2 = default;
            Option<ResourceModel> tractorUnit3 = default;
            Option<ResourceModel> trailer1 = default;
            Option<ResourceModel> trailer2 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "carrier1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                carrier1 = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "carrier2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                carrier2 = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "container1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                container1 = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "container2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                container2 = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "driver1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                driver1 = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "driver2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                driver2 = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "firstShipment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                firstShipment = new Option<ShipmentModel>(JsonSerializer.Deserialize<ShipmentModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "globalTourId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                globalTourId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "lastShipment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastShipment = new Option<ShipmentModel>(JsonSerializer.Deserialize<ShipmentModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shipmentItems":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shipmentItems = new Option<List<ReportingShipmentItem>>(JsonSerializer.Deserialize<List<ReportingShipmentItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shipments":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shipments = new Option<List<ShipmentModel>>(JsonSerializer.Deserialize<List<ShipmentModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "startAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "startDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tractorUnit1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tractorUnit1 = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tractorUnit2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tractorUnit2 = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tractorUnit3":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tractorUnit3 = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "trailer1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                trailer1 = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "trailer2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                trailer2 = new Option<ResourceModel>(JsonSerializer.Deserialize<ResourceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (carrier1.IsSet && carrier1.Value == null)
                throw new ArgumentNullException(nameof(carrier1), "Property is not nullable for class TourReportingModel.");

            if (carrier2.IsSet && carrier2.Value == null)
                throw new ArgumentNullException(nameof(carrier2), "Property is not nullable for class TourReportingModel.");

            if (container1.IsSet && container1.Value == null)
                throw new ArgumentNullException(nameof(container1), "Property is not nullable for class TourReportingModel.");

            if (container2.IsSet && container2.Value == null)
                throw new ArgumentNullException(nameof(container2), "Property is not nullable for class TourReportingModel.");

            if (driver1.IsSet && driver1.Value == null)
                throw new ArgumentNullException(nameof(driver1), "Property is not nullable for class TourReportingModel.");

            if (driver2.IsSet && driver2.Value == null)
                throw new ArgumentNullException(nameof(driver2), "Property is not nullable for class TourReportingModel.");

            if (endAddress.IsSet && endAddress.Value == null)
                throw new ArgumentNullException(nameof(endAddress), "Property is not nullable for class TourReportingModel.");

            if (endDateTime.IsSet && endDateTime.Value == null)
                throw new ArgumentNullException(nameof(endDateTime), "Property is not nullable for class TourReportingModel.");

            if (firstShipment.IsSet && firstShipment.Value == null)
                throw new ArgumentNullException(nameof(firstShipment), "Property is not nullable for class TourReportingModel.");

            if (globalTourId.IsSet && globalTourId.Value == null)
                throw new ArgumentNullException(nameof(globalTourId), "Property is not nullable for class TourReportingModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TourReportingModel.");

            if (lastShipment.IsSet && lastShipment.Value == null)
                throw new ArgumentNullException(nameof(lastShipment), "Property is not nullable for class TourReportingModel.");

            if (startAddress.IsSet && startAddress.Value == null)
                throw new ArgumentNullException(nameof(startAddress), "Property is not nullable for class TourReportingModel.");

            if (startDateTime.IsSet && startDateTime.Value == null)
                throw new ArgumentNullException(nameof(startDateTime), "Property is not nullable for class TourReportingModel.");

            if (tractorUnit1.IsSet && tractorUnit1.Value == null)
                throw new ArgumentNullException(nameof(tractorUnit1), "Property is not nullable for class TourReportingModel.");

            if (tractorUnit2.IsSet && tractorUnit2.Value == null)
                throw new ArgumentNullException(nameof(tractorUnit2), "Property is not nullable for class TourReportingModel.");

            if (tractorUnit3.IsSet && tractorUnit3.Value == null)
                throw new ArgumentNullException(nameof(tractorUnit3), "Property is not nullable for class TourReportingModel.");

            if (trailer1.IsSet && trailer1.Value == null)
                throw new ArgumentNullException(nameof(trailer1), "Property is not nullable for class TourReportingModel.");

            if (trailer2.IsSet && trailer2.Value == null)
                throw new ArgumentNullException(nameof(trailer2), "Property is not nullable for class TourReportingModel.");

            //2return new TourReportingModel(carrier1, carrier2, container1, container2, driver1, driver2, endAddress, endDateTime, firstShipment, globalTourId, id, lastShipment, number, reference, shipmentItems, shipments, startAddress, startDateTime, tractorUnit1, tractorUnit2, tractorUnit3, trailer1, trailer2);
            return new TourReportingModel(carrier1, carrier2, container1, container2, driver1, driver2, endAddress, endDateTime, firstShipment, globalTourId, id, lastShipment, number, reference, shipmentItems, shipments, startAddress, startDateTime, tractorUnit1, tractorUnit2, tractorUnit3, trailer1, trailer2);
        }

        /// <summary>
        /// Serializes a <see cref="TourReportingModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tourReportingModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TourReportingModel tourReportingModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, tourReportingModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TourReportingModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tourReportingModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TourReportingModel tourReportingModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tourReportingModel.Carrier1Option.IsSet && tourReportingModel.Carrier1 == null)
                throw new ArgumentNullException(nameof(tourReportingModel.Carrier1), "Property is required for class TourReportingModel.");

            if (tourReportingModel.Carrier2Option.IsSet && tourReportingModel.Carrier2 == null)
                throw new ArgumentNullException(nameof(tourReportingModel.Carrier2), "Property is required for class TourReportingModel.");

            if (tourReportingModel.Container1Option.IsSet && tourReportingModel.Container1 == null)
                throw new ArgumentNullException(nameof(tourReportingModel.Container1), "Property is required for class TourReportingModel.");

            if (tourReportingModel.Container2Option.IsSet && tourReportingModel.Container2 == null)
                throw new ArgumentNullException(nameof(tourReportingModel.Container2), "Property is required for class TourReportingModel.");

            if (tourReportingModel.Driver1Option.IsSet && tourReportingModel.Driver1 == null)
                throw new ArgumentNullException(nameof(tourReportingModel.Driver1), "Property is required for class TourReportingModel.");

            if (tourReportingModel.Driver2Option.IsSet && tourReportingModel.Driver2 == null)
                throw new ArgumentNullException(nameof(tourReportingModel.Driver2), "Property is required for class TourReportingModel.");

            if (tourReportingModel.EndAddressOption.IsSet && tourReportingModel.EndAddress == null)
                throw new ArgumentNullException(nameof(tourReportingModel.EndAddress), "Property is required for class TourReportingModel.");

            if (tourReportingModel.FirstShipmentOption.IsSet && tourReportingModel.FirstShipment == null)
                throw new ArgumentNullException(nameof(tourReportingModel.FirstShipment), "Property is required for class TourReportingModel.");

            if (tourReportingModel.LastShipmentOption.IsSet && tourReportingModel.LastShipment == null)
                throw new ArgumentNullException(nameof(tourReportingModel.LastShipment), "Property is required for class TourReportingModel.");

            if (tourReportingModel.StartAddressOption.IsSet && tourReportingModel.StartAddress == null)
                throw new ArgumentNullException(nameof(tourReportingModel.StartAddress), "Property is required for class TourReportingModel.");

            if (tourReportingModel.TractorUnit1Option.IsSet && tourReportingModel.TractorUnit1 == null)
                throw new ArgumentNullException(nameof(tourReportingModel.TractorUnit1), "Property is required for class TourReportingModel.");

            if (tourReportingModel.TractorUnit2Option.IsSet && tourReportingModel.TractorUnit2 == null)
                throw new ArgumentNullException(nameof(tourReportingModel.TractorUnit2), "Property is required for class TourReportingModel.");

            if (tourReportingModel.TractorUnit3Option.IsSet && tourReportingModel.TractorUnit3 == null)
                throw new ArgumentNullException(nameof(tourReportingModel.TractorUnit3), "Property is required for class TourReportingModel.");

            if (tourReportingModel.Trailer1Option.IsSet && tourReportingModel.Trailer1 == null)
                throw new ArgumentNullException(nameof(tourReportingModel.Trailer1), "Property is required for class TourReportingModel.");

            if (tourReportingModel.Trailer2Option.IsSet && tourReportingModel.Trailer2 == null)
                throw new ArgumentNullException(nameof(tourReportingModel.Trailer2), "Property is required for class TourReportingModel.");

            if (tourReportingModel.Carrier1Option.IsSet)
            {
                writer.WritePropertyName("carrier1");
                JsonSerializer.Serialize(writer, tourReportingModel.Carrier1, jsonSerializerOptions);
            }
            if (tourReportingModel.Carrier2Option.IsSet)
            {
                writer.WritePropertyName("carrier2");
                JsonSerializer.Serialize(writer, tourReportingModel.Carrier2, jsonSerializerOptions);
            }
            if (tourReportingModel.Container1Option.IsSet)
            {
                writer.WritePropertyName("container1");
                JsonSerializer.Serialize(writer, tourReportingModel.Container1, jsonSerializerOptions);
            }
            if (tourReportingModel.Container2Option.IsSet)
            {
                writer.WritePropertyName("container2");
                JsonSerializer.Serialize(writer, tourReportingModel.Container2, jsonSerializerOptions);
            }
            if (tourReportingModel.Driver1Option.IsSet)
            {
                writer.WritePropertyName("driver1");
                JsonSerializer.Serialize(writer, tourReportingModel.Driver1, jsonSerializerOptions);
            }
            if (tourReportingModel.Driver2Option.IsSet)
            {
                writer.WritePropertyName("driver2");
                JsonSerializer.Serialize(writer, tourReportingModel.Driver2, jsonSerializerOptions);
            }
            if (tourReportingModel.EndAddressOption.IsSet)
            {
                writer.WritePropertyName("endAddress");
                JsonSerializer.Serialize(writer, tourReportingModel.EndAddress, jsonSerializerOptions);
            }
            if (tourReportingModel.EndDateTimeOption.IsSet)
                writer.WriteString("endDateTime", tourReportingModel.EndDateTimeOption!.Value.ToString(EndDateTimeFormat));

            if (tourReportingModel.FirstShipmentOption.IsSet)
            {
                writer.WritePropertyName("firstShipment");
                JsonSerializer.Serialize(writer, tourReportingModel.FirstShipment, jsonSerializerOptions);
            }
            if (tourReportingModel.GlobalTourIdOption.IsSet)
                writer.WriteString("globalTourId", tourReportingModel.GlobalTourIdOption!.Value);

            if (tourReportingModel.IdOption.IsSet)
                writer.WriteString("id", tourReportingModel.IdOption!.Value);

            if (tourReportingModel.LastShipmentOption.IsSet)
            {
                writer.WritePropertyName("lastShipment");
                JsonSerializer.Serialize(writer, tourReportingModel.LastShipment, jsonSerializerOptions);
            }
            if (tourReportingModel.NumberOption.IsSet)
                if (tourReportingModel.NumberOption.Value != null)
                {
                    writer.WriteString("number", tourReportingModel.Number);
                    //var __value = tourReportingModel.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (tourReportingModel.ReferenceOption.IsSet)
                if (tourReportingModel.ReferenceOption.Value != null)
                {
                    writer.WriteString("reference", tourReportingModel.Reference);
                    //var __value = tourReportingModel.ReferenceOption.Value;
                    //writer.WriteString("reference", __value);
                }
                else
                    writer.WriteNull("reference");

            if (tourReportingModel.ShipmentItemsOption.IsSet)
                if (tourReportingModel.ShipmentItemsOption.Value != null)
                {
                    writer.WritePropertyName("shipmentItems");
                    JsonSerializer.Serialize(writer, tourReportingModel.ShipmentItems, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("shipmentItems");
            if (tourReportingModel.ShipmentsOption.IsSet)
                if (tourReportingModel.ShipmentsOption.Value != null)
                {
                    writer.WritePropertyName("shipments");
                    JsonSerializer.Serialize(writer, tourReportingModel.Shipments, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("shipments");
            if (tourReportingModel.StartAddressOption.IsSet)
            {
                writer.WritePropertyName("startAddress");
                JsonSerializer.Serialize(writer, tourReportingModel.StartAddress, jsonSerializerOptions);
            }
            if (tourReportingModel.StartDateTimeOption.IsSet)
                writer.WriteString("startDateTime", tourReportingModel.StartDateTimeOption!.Value.ToString(StartDateTimeFormat));

            if (tourReportingModel.TractorUnit1Option.IsSet)
            {
                writer.WritePropertyName("tractorUnit1");
                JsonSerializer.Serialize(writer, tourReportingModel.TractorUnit1, jsonSerializerOptions);
            }
            if (tourReportingModel.TractorUnit2Option.IsSet)
            {
                writer.WritePropertyName("tractorUnit2");
                JsonSerializer.Serialize(writer, tourReportingModel.TractorUnit2, jsonSerializerOptions);
            }
            if (tourReportingModel.TractorUnit3Option.IsSet)
            {
                writer.WritePropertyName("tractorUnit3");
                JsonSerializer.Serialize(writer, tourReportingModel.TractorUnit3, jsonSerializerOptions);
            }
            if (tourReportingModel.Trailer1Option.IsSet)
            {
                writer.WritePropertyName("trailer1");
                JsonSerializer.Serialize(writer, tourReportingModel.Trailer1, jsonSerializerOptions);
            }
            if (tourReportingModel.Trailer2Option.IsSet)
            {
                writer.WritePropertyName("trailer2");
                JsonSerializer.Serialize(writer, tourReportingModel.Trailer2, jsonSerializerOptions);
            }
        }
    }
}
