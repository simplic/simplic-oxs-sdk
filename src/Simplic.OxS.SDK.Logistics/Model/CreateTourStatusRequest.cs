// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Represents a request to create a shipment status.
    /// </summary>
    public partial class CreateTourStatusRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public CreateTourStatusRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTourStatusRequest" /> class.
        /// </summary>
        /// <param name="hexColor">Gets or sets the hex color.  &lt;br&gt;  Will define the color of the status as hex code.  </param>
        /// <param name="name">Gets or sets the namme of the status.</param>
        /// <param name="number">Gets or sets the number of the status.  &lt;br&gt;  The number is a human readable short name or number of the status.  </param>
        /// <param name="orderNr">Gets or sets the order number.  &lt;br&gt;  The order nr will define in which order the statuses are resolved.     The lowest value will always be resolved first.</param>
        /// <param name="resolver">Gets or sets the resolver name.  &lt;br&gt;  The name of the resolver is also the name which the resolver is registererd.     Within the resolving of the status the service will try to find a resolver with the given name.</param>
        /// <param name="roles">Gets or sets roles.  &lt;br&gt;  These roles will decide whether shipments with the status can or can not to certain things.    A list of available roles at the moment:  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;is_default&lt;/item&gt;&lt;item&gt;disable_edit&lt;/item&gt;&lt;item&gt;disable_delete&lt;/item&gt;&lt;/list&gt;</param>
        //[JsonConstructor]
        public CreateTourStatusRequest(Option<string> hexColor = default, Option<string> name = default, Option<string> number = default, Option<int> orderNr = default, Option<string> resolver = default, Option<List<string>> roles = default)
        {
            HexColorOption = hexColor;
            NameOption = name;
            NumberOption = number;
            OrderNrOption = orderNr;
            ResolverOption = resolver;
            RolesOption = roles;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of HexColor
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> HexColorOption { get; private set; }

        /// <summary>
        /// Gets or sets the hex color.  &lt;br&gt;  Will define the color of the status as hex code.  
        /// </summary>
        /// <value>Gets or sets the hex color.  &lt;br&gt;  Will define the color of the status as hex code.  </value>
        [JsonPropertyName("hexColor")]
        public string? HexColor { get { return this. HexColorOption; } set { this.HexColorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or sets the namme of the status.
        /// </summary>
        /// <value>Gets or sets the namme of the status.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the number of the status.  &lt;br&gt;  The number is a human readable short name or number of the status.  
        /// </summary>
        /// <value>Gets or sets the number of the status.  &lt;br&gt;  The number is a human readable short name or number of the status.  </value>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OrderNr
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> OrderNrOption { get; private set; }

        /// <summary>
        /// Gets or sets the order number.  &lt;br&gt;  The order nr will define in which order the statuses are resolved.     The lowest value will always be resolved first.
        /// </summary>
        /// <value>Gets or sets the order number.  &lt;br&gt;  The order nr will define in which order the statuses are resolved.     The lowest value will always be resolved first.</value>
        [JsonPropertyName("orderNr")]
        public int? OrderNr { get { return this. OrderNrOption; } set { this.OrderNrOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of Resolver
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ResolverOption { get; private set; }

        /// <summary>
        /// Gets or sets the resolver name.  &lt;br&gt;  The name of the resolver is also the name which the resolver is registererd.     Within the resolving of the status the service will try to find a resolver with the given name.
        /// </summary>
        /// <value>Gets or sets the resolver name.  &lt;br&gt;  The name of the resolver is also the name which the resolver is registererd.     Within the resolving of the status the service will try to find a resolver with the given name.</value>
        [JsonPropertyName("resolver")]
        public string? Resolver { get { return this. ResolverOption; } set { this.ResolverOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Roles
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> RolesOption { get; private set; }

        /// <summary>
        /// Gets or sets roles.  &lt;br&gt;  These roles will decide whether shipments with the status can or can not to certain things.    A list of available roles at the moment:  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;is_default&lt;/item&gt;&lt;item&gt;disable_edit&lt;/item&gt;&lt;item&gt;disable_delete&lt;/item&gt;&lt;/list&gt;
        /// </summary>
        /// <value>Gets or sets roles.  &lt;br&gt;  These roles will decide whether shipments with the status can or can not to certain things.    A list of available roles at the moment:  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;is_default&lt;/item&gt;&lt;item&gt;disable_edit&lt;/item&gt;&lt;item&gt;disable_delete&lt;/item&gt;&lt;/list&gt;</value>
        [JsonPropertyName("roles")]
        public List<string>? Roles { get { return this. RolesOption; } set { this.RolesOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTourStatusRequest {\n");
            sb.Append("  HexColor: ").Append(HexColor).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OrderNr: ").Append(OrderNr).Append("\n");
            sb.Append("  Resolver: ").Append(Resolver).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateTourStatusRequest" />
    /// </summary>
    public class CreateTourStatusRequestJsonConverter : JsonConverter<CreateTourStatusRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateTourStatusRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateTourStatusRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> hexColor = default;
            Option<string> name = default;
            Option<string> number = default;
            Option<int> orderNr = default;
            Option<string> resolver = default;
            Option<List<string>> roles = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "hexColor":
                            hexColor = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "orderNr":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                orderNr = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "resolver":
                            resolver = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "roles":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                roles = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (orderNr.IsSet && orderNr.Value == null)
                throw new ArgumentNullException(nameof(orderNr), "Property is not nullable for class CreateTourStatusRequest.");

            //2return new CreateTourStatusRequest(hexColor, name, number, orderNr, resolver, roles);
            return new CreateTourStatusRequest(hexColor, name, number, orderNr, resolver, roles);
        }

        /// <summary>
        /// Serializes a <see cref="CreateTourStatusRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTourStatusRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateTourStatusRequest createTourStatusRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createTourStatusRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateTourStatusRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTourStatusRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateTourStatusRequest createTourStatusRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createTourStatusRequest.HexColorOption.IsSet)
                if (createTourStatusRequest.HexColorOption.Value != null)
                {
                    writer.WriteString("hexColor", createTourStatusRequest.HexColor);
                    //var __value = createTourStatusRequest.HexColorOption.Value;
                    //writer.WriteString("hexColor", __value);
                }
                else
                    writer.WriteNull("hexColor");

            if (createTourStatusRequest.NameOption.IsSet)
                if (createTourStatusRequest.NameOption.Value != null)
                {
                    writer.WriteString("name", createTourStatusRequest.Name);
                    //var __value = createTourStatusRequest.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (createTourStatusRequest.NumberOption.IsSet)
                if (createTourStatusRequest.NumberOption.Value != null)
                {
                    writer.WriteString("number", createTourStatusRequest.Number);
                    //var __value = createTourStatusRequest.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (createTourStatusRequest.OrderNrOption.IsSet)
                writer.WriteNumber("orderNr", createTourStatusRequest.OrderNrOption!.Value);

            if (createTourStatusRequest.ResolverOption.IsSet)
                if (createTourStatusRequest.ResolverOption.Value != null)
                {
                    writer.WriteString("resolver", createTourStatusRequest.Resolver);
                    //var __value = createTourStatusRequest.ResolverOption.Value;
                    //writer.WriteString("resolver", __value);
                }
                else
                    writer.WriteNull("resolver");

            if (createTourStatusRequest.RolesOption.IsSet)
                if (createTourStatusRequest.RolesOption.Value != null)
                {
                    writer.WritePropertyName("roles");
                    JsonSerializer.Serialize(writer, createTourStatusRequest.Roles, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("roles");
        }
    }
}
