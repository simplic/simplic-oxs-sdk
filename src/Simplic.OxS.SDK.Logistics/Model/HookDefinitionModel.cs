// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// HookDefinitionModel
    /// </summary>
    public partial class HookDefinitionModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public HookDefinitionModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HookDefinitionModel" /> class.
        /// </summary>
        /// <param name="dataType">dataType</param>
        /// <param name="description">description</param>
        /// <param name="name">name</param>
        /// <param name="operation">operation</param>
        /// <param name="payload">payload</param>
        //[JsonConstructor]
        public HookDefinitionModel(Option<string> dataType = default, Option<string> description = default, Option<string> name = default, Option<string> operation = default, Option<string> payload = default)
        {
            DataTypeOption = dataType;
            DescriptionOption = description;
            NameOption = name;
            OperationOption = operation;
            PayloadOption = payload;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DataType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DataTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [JsonPropertyName("dataType")]
        public string? DataType { get { return this. DataTypeOption; } set { this.DataTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this. DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Operation
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> OperationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [JsonPropertyName("operation")]
        public string? Operation { get { return this. OperationOption; } set { this.OperationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Payload
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> PayloadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [JsonPropertyName("payload")]
        public string? Payload { get { return this. PayloadOption; } set { this.PayloadOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HookDefinitionModel {\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HookDefinitionModel" />
    /// </summary>
    public class HookDefinitionModelJsonConverter : JsonConverter<HookDefinitionModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="HookDefinitionModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HookDefinitionModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> dataType = default;
            Option<string> description = default;
            Option<string> name = default;
            Option<string> operation = default;
            Option<string> payload = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dataType":
                            dataType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "operation":
                            operation = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "payload":
                            payload = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new HookDefinitionModel(dataType, description, name, operation, payload);
            return new HookDefinitionModel(dataType, description, name, operation, payload);
        }

        /// <summary>
        /// Serializes a <see cref="HookDefinitionModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hookDefinitionModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HookDefinitionModel hookDefinitionModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, hookDefinitionModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HookDefinitionModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hookDefinitionModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, HookDefinitionModel hookDefinitionModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (hookDefinitionModel.DataTypeOption.IsSet)
                if (hookDefinitionModel.DataTypeOption.Value != null)
                {
                    writer.WriteString("dataType", hookDefinitionModel.DataType);
                    //var __value = hookDefinitionModel.DataTypeOption.Value;
                    //writer.WriteString("dataType", __value);
                }
                else
                    writer.WriteNull("dataType");

            if (hookDefinitionModel.DescriptionOption.IsSet)
                if (hookDefinitionModel.DescriptionOption.Value != null)
                {
                    writer.WriteString("description", hookDefinitionModel.Description);
                    //var __value = hookDefinitionModel.DescriptionOption.Value;
                    //writer.WriteString("description", __value);
                }
                else
                    writer.WriteNull("description");

            if (hookDefinitionModel.NameOption.IsSet)
                if (hookDefinitionModel.NameOption.Value != null)
                {
                    writer.WriteString("name", hookDefinitionModel.Name);
                    //var __value = hookDefinitionModel.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (hookDefinitionModel.OperationOption.IsSet)
                if (hookDefinitionModel.OperationOption.Value != null)
                {
                    writer.WriteString("operation", hookDefinitionModel.Operation);
                    //var __value = hookDefinitionModel.OperationOption.Value;
                    //writer.WriteString("operation", __value);
                }
                else
                    writer.WriteNull("operation");

            if (hookDefinitionModel.PayloadOption.IsSet)
                if (hookDefinitionModel.PayloadOption.Value != null)
                {
                    writer.WriteString("payload", hookDefinitionModel.Payload);
                    //var __value = hookDefinitionModel.PayloadOption.Value;
                    //writer.WriteString("payload", __value);
                }
                else
                    writer.WriteNull("payload");
        }
    }
}
