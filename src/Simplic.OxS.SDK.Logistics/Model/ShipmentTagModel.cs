// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of shipment tag.
    /// </summary>
    public partial class ShipmentTagModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ShipmentTagModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentTagModel" /> class.
        /// </summary>
        /// <param name="groupName">Gets or sets the group name.  &lt;br&gt;  Group names are a possibillity to group tags.   E.g. when just a single tag from a certain pool should be used.  </param>
        /// <param name="hexColor">Gets or sets the hex color of the string.</param>
        /// <param name="id">Gets or sets the guid.  &lt;br&gt;  This represents a unique identifier for the tag.  </param>
        /// <param name="isDeleted">Gets or sets whether the shipment tag is deleted.</param>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="organizationId">Gets or sets the organization id.</param>
        //[JsonConstructor]
        public ShipmentTagModel(Option<string> groupName = default, Option<string> hexColor = default, Option<Guid> id = default, Option<bool> isDeleted = default, Option<string> name = default, Option<Guid> organizationId = default)
        {
            GroupNameOption = groupName;
            HexColorOption = hexColor;
            IdOption = id;
            IsDeletedOption = isDeleted;
            NameOption = name;
            OrganizationIdOption = organizationId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of GroupName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> GroupNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the group name.  &lt;br&gt;  Group names are a possibillity to group tags.   E.g. when just a single tag from a certain pool should be used.  
        /// </summary>
        /// <value>Gets or sets the group name.  &lt;br&gt;  Group names are a possibillity to group tags.   E.g. when just a single tag from a certain pool should be used.  </value>
        [JsonPropertyName("groupName")]
        public string? GroupName { get { return this. GroupNameOption; } set { this.GroupNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of HexColor
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> HexColorOption { get; private set; }

        /// <summary>
        /// Gets or sets the hex color of the string.
        /// </summary>
        /// <value>Gets or sets the hex color of the string.</value>
        [JsonPropertyName("hexColor")]
        public string? HexColor { get { return this. HexColorOption; } set { this.HexColorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the guid.  &lt;br&gt;  This represents a unique identifier for the tag.  
        /// </summary>
        /// <value>Gets or sets the guid.  &lt;br&gt;  This represents a unique identifier for the tag.  </value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or sets whether the shipment tag is deleted.
        /// </summary>
        /// <value>Gets or sets whether the shipment tag is deleted.</value>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the organization id.
        /// </summary>
        /// <value>Gets or sets the organization id.</value>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentTagModel {\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  HexColor: ").Append(HexColor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentTagModel" />
    /// </summary>
    public class ShipmentTagModelJsonConverter : JsonConverter<ShipmentTagModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShipmentTagModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentTagModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> groupName = default;
            Option<string> hexColor = default;
            Option<Guid> id = default;
            Option<bool> isDeleted = default;
            Option<string> name = default;
            Option<Guid> organizationId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "groupName":
                            groupName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "hexColor":
                            hexColor = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ShipmentTagModel.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class ShipmentTagModel.");

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class ShipmentTagModel.");

            //2return new ShipmentTagModel(groupName, hexColor, id, isDeleted, name, organizationId);
            return new ShipmentTagModel(groupName, hexColor, id, isDeleted, name, organizationId);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentTagModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentTagModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentTagModel shipmentTagModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, shipmentTagModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentTagModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentTagModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ShipmentTagModel shipmentTagModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentTagModel.GroupNameOption.IsSet)
                if (shipmentTagModel.GroupNameOption.Value != null)
                {
                    writer.WriteString("groupName", shipmentTagModel.GroupName);
                    //var __value = shipmentTagModel.GroupNameOption.Value;
                    //writer.WriteString("groupName", __value);
                }
                else
                    writer.WriteNull("groupName");

            if (shipmentTagModel.HexColorOption.IsSet)
                if (shipmentTagModel.HexColorOption.Value != null)
                {
                    writer.WriteString("hexColor", shipmentTagModel.HexColor);
                    //var __value = shipmentTagModel.HexColorOption.Value;
                    //writer.WriteString("hexColor", __value);
                }
                else
                    writer.WriteNull("hexColor");

            if (shipmentTagModel.IdOption.IsSet)
                writer.WriteString("id", shipmentTagModel.IdOption!.Value);

            if (shipmentTagModel.IsDeletedOption.IsSet)
                writer.WriteBoolean("isDeleted", shipmentTagModel.IsDeletedOption!.Value);

            if (shipmentTagModel.NameOption.IsSet)
                if (shipmentTagModel.NameOption.Value != null)
                {
                    writer.WriteString("name", shipmentTagModel.Name);
                    //var __value = shipmentTagModel.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (shipmentTagModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", shipmentTagModel.OrganizationIdOption!.Value);
        }
    }
}
