// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Request to create an appointment.
    /// </summary>
    public partial class CreateAppointmentRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public CreateAppointmentRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAppointmentRequest" /> class.
        /// </summary>
        /// <param name="endAddressId">Gets or sets the id of the end address.</param>
        /// <param name="endDateTime">Gets or sets the end date and time of the appointment.</param>
        /// <param name="functions">Gets or sets a list of functinos for an appointment.  &lt;br&gt;  A function can change the behaviour of some methdos with the function added as string.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;\&quot;blocking\&quot; : Will determine whether the appointment block other appointments or tours to be   scheduled at the same time for the contained resources.&lt;/item&gt;&lt;/list&gt;</param>
        /// <param name="hexColor">Gets or sets the hex color for the appointment.  &lt;br&gt;  Default color is light red.  </param>
        /// <param name="resources">Gets or sets the resources for the appointment.</param>
        /// <param name="startAddressId">Gets or sets the id of the start address.</param>
        /// <param name="startDateTime">Gets or sets the start date and time of the appointment.</param>
        /// <param name="title">Gets or sets the title of the appointment.</param>
        //[JsonConstructor]
        public CreateAppointmentRequest(Option<Guid> endAddressId = default, Option<DateTime> endDateTime = default, Option<List<string>> functions = default, Option<string> hexColor = default, Option<List<Guid>> resources = default, Option<Guid> startAddressId = default, Option<DateTime> startDateTime = default, Option<string> title = default)
        {
            EndAddressIdOption = endAddressId;
            EndDateTimeOption = endDateTime;
            FunctionsOption = functions;
            HexColorOption = hexColor;
            ResourcesOption = resources;
            StartAddressIdOption = startAddressId;
            StartDateTimeOption = startDateTime;
            TitleOption = title;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EndAddressId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> EndAddressIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the end address.
        /// </summary>
        /// <value>Gets or sets the id of the end address.</value>
        [JsonPropertyName("endAddressId")]
        public Guid? EndAddressId { get { return this. EndAddressIdOption; } set { this.EndAddressIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of EndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the end date and time of the appointment.
        /// </summary>
        /// <value>Gets or sets the end date and time of the appointment.</value>
        [JsonPropertyName("endDateTime")]
        public DateTime? EndDateTime { get { return this. EndDateTimeOption; } set { this.EndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Functions
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> FunctionsOption { get; private set; }

        /// <summary>
        /// Gets or sets a list of functinos for an appointment.  &lt;br&gt;  A function can change the behaviour of some methdos with the function added as string.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;\&quot;blocking\&quot; : Will determine whether the appointment block other appointments or tours to be   scheduled at the same time for the contained resources.&lt;/item&gt;&lt;/list&gt;
        /// </summary>
        /// <value>Gets or sets a list of functinos for an appointment.  &lt;br&gt;  A function can change the behaviour of some methdos with the function added as string.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;\&quot;blocking\&quot; : Will determine whether the appointment block other appointments or tours to be   scheduled at the same time for the contained resources.&lt;/item&gt;&lt;/list&gt;</value>
        [JsonPropertyName("functions")]
        public List<string>? Functions { get { return this. FunctionsOption; } set { this.FunctionsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of HexColor
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> HexColorOption { get; private set; }

        /// <summary>
        /// Gets or sets the hex color for the appointment.  &lt;br&gt;  Default color is light red.  
        /// </summary>
        /// <value>Gets or sets the hex color for the appointment.  &lt;br&gt;  Default color is light red.  </value>
        [JsonPropertyName("hexColor")]
        public string? HexColor { get { return this. HexColorOption; } set { this.HexColorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Resources
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<Guid>>))]
        public Option<List<Guid>> ResourcesOption { get; private set; }

        /// <summary>
        /// Gets or sets the resources for the appointment.
        /// </summary>
        /// <value>Gets or sets the resources for the appointment.</value>
        [JsonPropertyName("resources")]
        public List<Guid>? Resources { get { return this. ResourcesOption; } set { this.ResourcesOption = new Option<List<Guid>>(value); } }

        /// <summary>
        /// Used to track the state of StartAddressId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> StartAddressIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the start address.
        /// </summary>
        /// <value>Gets or sets the id of the start address.</value>
        [JsonPropertyName("startAddressId")]
        public Guid? StartAddressId { get { return this. StartAddressIdOption; } set { this.StartAddressIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of StartDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the start date and time of the appointment.
        /// </summary>
        /// <value>Gets or sets the start date and time of the appointment.</value>
        [JsonPropertyName("startDateTime")]
        public DateTime? StartDateTime { get { return this. StartDateTimeOption; } set { this.StartDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TitleOption { get; private set; }

        /// <summary>
        /// Gets or sets the title of the appointment.
        /// </summary>
        /// <value>Gets or sets the title of the appointment.</value>
        [JsonPropertyName("title")]
        public string? Title { get { return this. TitleOption; } set { this.TitleOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAppointmentRequest {\n");
            sb.Append("  EndAddressId: ").Append(EndAddressId).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  Functions: ").Append(Functions).Append("\n");
            sb.Append("  HexColor: ").Append(HexColor).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  StartAddressId: ").Append(StartAddressId).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateAppointmentRequest" />
    /// </summary>
    public class CreateAppointmentRequestJsonConverter : JsonConverter<CreateAppointmentRequest>
    {
        /// <summary>
        /// The format to use to serialize EndDateTime
        /// </summary>
        public static string EndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDateTime
        /// </summary>
        public static string StartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CreateAppointmentRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateAppointmentRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid> endAddressId = default;
            Option<DateTime> endDateTime = default;
            Option<List<string>> functions = default;
            Option<string> hexColor = default;
            Option<List<Guid>> resources = default;
            Option<Guid> startAddressId = default;
            Option<DateTime> startDateTime = default;
            Option<string> title = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "endAddressId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endAddressId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "endDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "functions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                functions = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "hexColor":
                            hexColor = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "resources":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resources = new Option<List<Guid>>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "startAddressId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startAddressId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "startDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "title":
                            title = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (endDateTime.IsSet && endDateTime.Value == null)
                throw new ArgumentNullException(nameof(endDateTime), "Property is not nullable for class CreateAppointmentRequest.");

            if (startDateTime.IsSet && startDateTime.Value == null)
                throw new ArgumentNullException(nameof(startDateTime), "Property is not nullable for class CreateAppointmentRequest.");

            //2return new CreateAppointmentRequest(endAddressId, endDateTime, functions, hexColor, resources, startAddressId, startDateTime, title);
            return new CreateAppointmentRequest(endAddressId, endDateTime, functions, hexColor, resources, startAddressId, startDateTime, title);
        }

        /// <summary>
        /// Serializes a <see cref="CreateAppointmentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createAppointmentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateAppointmentRequest createAppointmentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createAppointmentRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateAppointmentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createAppointmentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateAppointmentRequest createAppointmentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createAppointmentRequest.EndAddressIdOption.IsSet)
                if (createAppointmentRequest.EndAddressIdOption.Value != null)
                {
                    writer.WriteString("endAddressId", createAppointmentRequest.EndAddressIdOption!.Value);
                    //var __value = createAppointmentRequest.EndAddressIdOption.Value;
                    //writer.WriteString("endAddressId", __value);
                }
                else
                    writer.WriteNull("endAddressId");

            if (createAppointmentRequest.EndDateTimeOption.IsSet)
                writer.WriteString("endDateTime", createAppointmentRequest.EndDateTimeOption!.Value.ToString(EndDateTimeFormat));

            if (createAppointmentRequest.FunctionsOption.IsSet)
                if (createAppointmentRequest.FunctionsOption.Value != null)
                {
                    writer.WritePropertyName("functions");
                    JsonSerializer.Serialize(writer, createAppointmentRequest.Functions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("functions");
            if (createAppointmentRequest.HexColorOption.IsSet)
                if (createAppointmentRequest.HexColorOption.Value != null)
                {
                    writer.WriteString("hexColor", createAppointmentRequest.HexColor);
                    //var __value = createAppointmentRequest.HexColorOption.Value;
                    //writer.WriteString("hexColor", __value);
                }
                else
                    writer.WriteNull("hexColor");

            if (createAppointmentRequest.ResourcesOption.IsSet)
                if (createAppointmentRequest.ResourcesOption.Value != null)
                {
                    writer.WritePropertyName("resources");
                    JsonSerializer.Serialize(writer, createAppointmentRequest.Resources, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("resources");
            if (createAppointmentRequest.StartAddressIdOption.IsSet)
                if (createAppointmentRequest.StartAddressIdOption.Value != null)
                {
                    writer.WriteString("startAddressId", createAppointmentRequest.StartAddressIdOption!.Value);
                    //var __value = createAppointmentRequest.StartAddressIdOption.Value;
                    //writer.WriteString("startAddressId", __value);
                }
                else
                    writer.WriteNull("startAddressId");

            if (createAppointmentRequest.StartDateTimeOption.IsSet)
                writer.WriteString("startDateTime", createAppointmentRequest.StartDateTimeOption!.Value.ToString(StartDateTimeFormat));

            if (createAppointmentRequest.TitleOption.IsSet)
                if (createAppointmentRequest.TitleOption.Value != null)
                {
                    writer.WriteString("title", createAppointmentRequest.Title);
                    //var __value = createAppointmentRequest.TitleOption.Value;
                    //writer.WriteString("title", __value);
                }
                else
                    writer.WriteNull("title");
        }
    }
}
