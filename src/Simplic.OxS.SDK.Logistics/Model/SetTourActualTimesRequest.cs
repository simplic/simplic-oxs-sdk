// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Request to set the actual times of a tour and a possible new status.
    /// </summary>
    public partial class SetTourActualTimesRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public SetTourActualTimesRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SetTourActualTimesRequest" /> class.
        /// </summary>
        /// <param name="actualEnd">Gets or sets the actual end of the tour.</param>
        /// <param name="actualStart">Gets or sets the actual start of the tour.</param>
        /// <param name="newStatusId">Gets or sets the id of the new tour status that will be set during the request.</param>
        /// <param name="tourId">Gets or sets the tour id.</param>
        //[JsonConstructor]
        public SetTourActualTimesRequest(Option<DateTime> actualEnd = default, Option<DateTime> actualStart = default, Option<Guid> newStatusId = default, Option<Guid> tourId = default)
        {
            ActualEndOption = actualEnd;
            ActualStartOption = actualStart;
            NewStatusIdOption = newStatusId;
            TourIdOption = tourId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ActualEnd
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ActualEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual end of the tour.
        /// </summary>
        /// <value>Gets or sets the actual end of the tour.</value>
        [JsonPropertyName("actualEnd")]
        public DateTime? ActualEnd { get { return this. ActualEndOption; } set { this.ActualEndOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of ActualStart
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ActualStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual start of the tour.
        /// </summary>
        /// <value>Gets or sets the actual start of the tour.</value>
        [JsonPropertyName("actualStart")]
        public DateTime? ActualStart { get { return this. ActualStartOption; } set { this.ActualStartOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of NewStatusId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> NewStatusIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the new tour status that will be set during the request.
        /// </summary>
        /// <value>Gets or sets the id of the new tour status that will be set during the request.</value>
        [JsonPropertyName("newStatusId")]
        public Guid? NewStatusId { get { return this. NewStatusIdOption; } set { this.NewStatusIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of TourId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TourIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the tour id.
        /// </summary>
        /// <value>Gets or sets the tour id.</value>
        [JsonPropertyName("tourId")]
        public Guid? TourId { get { return this. TourIdOption; } set { this.TourIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetTourActualTimesRequest {\n");
            sb.Append("  ActualEnd: ").Append(ActualEnd).Append("\n");
            sb.Append("  ActualStart: ").Append(ActualStart).Append("\n");
            sb.Append("  NewStatusId: ").Append(NewStatusId).Append("\n");
            sb.Append("  TourId: ").Append(TourId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SetTourActualTimesRequest" />
    /// </summary>
    public class SetTourActualTimesRequestJsonConverter : JsonConverter<SetTourActualTimesRequest>
    {
        /// <summary>
        /// The format to use to serialize ActualEnd
        /// </summary>
        public static string ActualEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ActualStart
        /// </summary>
        public static string ActualStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SetTourActualTimesRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SetTourActualTimesRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> actualEnd = default;
            Option<DateTime> actualStart = default;
            Option<Guid> newStatusId = default;
            Option<Guid> tourId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actualEnd":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actualEnd = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "actualStart":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actualStart = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "newStatusId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                newStatusId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "tourId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tourId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (tourId.IsSet && tourId.Value == null)
                throw new ArgumentNullException(nameof(tourId), "Property is not nullable for class SetTourActualTimesRequest.");

            //2return new SetTourActualTimesRequest(actualEnd, actualStart, newStatusId, tourId);
            return new SetTourActualTimesRequest(actualEnd, actualStart, newStatusId, tourId);
        }

        /// <summary>
        /// Serializes a <see cref="SetTourActualTimesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="setTourActualTimesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SetTourActualTimesRequest setTourActualTimesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, setTourActualTimesRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SetTourActualTimesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="setTourActualTimesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, SetTourActualTimesRequest setTourActualTimesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (setTourActualTimesRequest.ActualEndOption.IsSet)
                if (setTourActualTimesRequest.ActualEndOption.Value != null)
                {
                    writer.WriteString("actualEnd", setTourActualTimesRequest.ActualEndOption!.Value.ToString(ActualEndFormat));
                    //var __value = setTourActualTimesRequest.ActualEndOption.Value;
                    //writer.WriteString("actualEnd", __value);
                }
                else
                    writer.WriteNull("actualEnd");

            if (setTourActualTimesRequest.ActualStartOption.IsSet)
                if (setTourActualTimesRequest.ActualStartOption.Value != null)
                {
                    writer.WriteString("actualStart", setTourActualTimesRequest.ActualStartOption!.Value.ToString(ActualStartFormat));
                    //var __value = setTourActualTimesRequest.ActualStartOption.Value;
                    //writer.WriteString("actualStart", __value);
                }
                else
                    writer.WriteNull("actualStart");

            if (setTourActualTimesRequest.NewStatusIdOption.IsSet)
                if (setTourActualTimesRequest.NewStatusIdOption.Value != null)
                {
                    writer.WriteString("newStatusId", setTourActualTimesRequest.NewStatusIdOption!.Value);
                    //var __value = setTourActualTimesRequest.NewStatusIdOption.Value;
                    //writer.WriteString("newStatusId", __value);
                }
                else
                    writer.WriteNull("newStatusId");

            if (setTourActualTimesRequest.TourIdOption.IsSet)
                writer.WriteString("tourId", setTourActualTimesRequest.TourIdOption!.Value);
        }
    }
}
