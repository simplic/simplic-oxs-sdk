/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Logistics.Model
{
    /// <summary>
    /// Request to set the actual times of a tour and a possible new status.
    /// </summary>
    [DataContract(Name = "SetTourActualTimesRequest")]
    public partial class SetTourActualTimesRequest : IEquatable<SetTourActualTimesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetTourActualTimesRequest" /> class.
        /// </summary>
        /// <param name="tourId">Gets or sets the tour id..</param>
        /// <param name="actualStart">Gets or sets the actual start of the tour..</param>
        /// <param name="actualEnd">Gets or sets the actual end of the tour..</param>
        /// <param name="newStatusId">Gets or sets the id of the new tour status that will be set during the request..</param>
        public SetTourActualTimesRequest(Guid tourId = default(Guid), DateTime? actualStart = default(DateTime?), DateTime? actualEnd = default(DateTime?), Guid? newStatusId = default(Guid?))
        {
            this.TourId = tourId;
            this.ActualStart = actualStart;
            this.ActualEnd = actualEnd;
            this.NewStatusId = newStatusId;
        }

        /// <summary>
        /// Gets or sets the tour id.
        /// </summary>
        /// <value>Gets or sets the tour id.</value>
        [DataMember(Name = "tourId", EmitDefaultValue = false)]
        public Guid TourId { get; set; }

        /// <summary>
        /// Gets or sets the actual start of the tour.
        /// </summary>
        /// <value>Gets or sets the actual start of the tour.</value>
        [DataMember(Name = "actualStart", EmitDefaultValue = true)]
        public DateTime? ActualStart { get; set; }

        /// <summary>
        /// Gets or sets the actual end of the tour.
        /// </summary>
        /// <value>Gets or sets the actual end of the tour.</value>
        [DataMember(Name = "actualEnd", EmitDefaultValue = true)]
        public DateTime? ActualEnd { get; set; }

        /// <summary>
        /// Gets or sets the id of the new tour status that will be set during the request.
        /// </summary>
        /// <value>Gets or sets the id of the new tour status that will be set during the request.</value>
        [DataMember(Name = "newStatusId", EmitDefaultValue = true)]
        public Guid? NewStatusId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetTourActualTimesRequest {\n");
            sb.Append("  TourId: ").Append(TourId).Append("\n");
            sb.Append("  ActualStart: ").Append(ActualStart).Append("\n");
            sb.Append("  ActualEnd: ").Append(ActualEnd).Append("\n");
            sb.Append("  NewStatusId: ").Append(NewStatusId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetTourActualTimesRequest);
        }

        /// <summary>
        /// Returns true if SetTourActualTimesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SetTourActualTimesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetTourActualTimesRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TourId == input.TourId ||
                    (this.TourId != null &&
                    this.TourId.Equals(input.TourId))
                ) && 
                (
                    this.ActualStart == input.ActualStart ||
                    (this.ActualStart != null &&
                    this.ActualStart.Equals(input.ActualStart))
                ) && 
                (
                    this.ActualEnd == input.ActualEnd ||
                    (this.ActualEnd != null &&
                    this.ActualEnd.Equals(input.ActualEnd))
                ) && 
                (
                    this.NewStatusId == input.NewStatusId ||
                    (this.NewStatusId != null &&
                    this.NewStatusId.Equals(input.NewStatusId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TourId != null)
                {
                    hashCode = (hashCode * 59) + this.TourId.GetHashCode();
                }
                if (this.ActualStart != null)
                {
                    hashCode = (hashCode * 59) + this.ActualStart.GetHashCode();
                }
                if (this.ActualEnd != null)
                {
                    hashCode = (hashCode * 59) + this.ActualEnd.GetHashCode();
                }
                if (this.NewStatusId != null)
                {
                    hashCode = (hashCode * 59) + this.NewStatusId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
