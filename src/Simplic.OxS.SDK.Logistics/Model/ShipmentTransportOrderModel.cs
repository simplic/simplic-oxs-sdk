// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of shipment transport order.
    /// </summary>
    public partial class ShipmentTransportOrderModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ShipmentTransportOrderModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentTransportOrderModel" /> class.
        /// </summary>
        /// <param name="beginDate">Gets or sets the begin date.  &lt;br&gt;  Represents the date the transport order will begin.  </param>
        /// <param name="calculatedCustomerPrice">Gets or sets the calculated customet price.  &lt;br&gt;  This field is for a calculated price for the customer.  </param>
        /// <param name="carrierAddress">carrierAddress</param>
        /// <param name="customCustomerPrice">Gets or sets the custom customer price.  &lt;br&gt;  This field is to hold a custom price for the customer.   E.g. when he has to pay a specific amount which will not be calculted from the shipments.  </param>
        /// <param name="customerAddress">customerAddress</param>
        /// <param name="endDate">Gets or sets the end date.  &lt;br&gt;  Represents the date the transport order should end.  </param>
        /// <param name="freightPayerAddress">freightPayerAddress</param>
        /// <param name="id">Gets or sets the id.  &lt;br&gt;  Represents the primary identifier of a transport order.  </param>
        /// <param name="internalNumber">Gets or sets the number.</param>
        /// <param name="isDeleted">Gets or sets whether the transport order is deleted.</param>
        /// <param name="number">Gets or sets the number.  &lt;br&gt;  The number is a human readable identifier for this transport order.    A number should be  unique within a tenant and is usually set by the sequence manager.</param>
        /// <param name="orderDate">Gets or sets the order date.  &lt;br&gt;  This represents the date on which the order is ordered.  </param>
        /// <param name="overriceCustomerAddress">Gets or sets whether the customer address will be overwritten.  &lt;br&gt;  If this one is set to true the customer address of all contained shipments will be set to the same  cusomer address as the one in this transport order.  </param>
        /// <param name="overrideCarrierAddress">Gets or sets whether the carrier address will be overwritten.  &lt;br&gt;  If this is set to true the carrier address of all contained shipments will be set to the same carrier  address as the one in this transport order.  </param>
        /// <param name="overrideFreightPayerAddress">Gets or sets whether the freight payer address will be overwritten.  &lt;br&gt;  If ths is set to true the freight payer address of all contained shipments will be set to the same   freight payer address as the one in this transport order.  </param>
        /// <param name="referenceNumber">Gets or sets the reference number.  &lt;br&gt;  Usually represents the number of another programm or the customer number for this object.  </param>
        /// <param name="status">status</param>
        //[JsonConstructor]
        public ShipmentTransportOrderModel(Option<DateTime> beginDate = default, Option<double> calculatedCustomerPrice = default, Option<AddressModel> carrierAddress = default, Option<double> customCustomerPrice = default, Option<AddressModel> customerAddress = default, Option<DateTime> endDate = default, Option<AddressModel> freightPayerAddress = default, Option<Guid> id = default, Option<string> internalNumber = default, Option<bool> isDeleted = default, Option<string> number = default, Option<DateTime> orderDate = default, Option<bool> overriceCustomerAddress = default, Option<bool> overrideCarrierAddress = default, Option<bool> overrideFreightPayerAddress = default, Option<string> referenceNumber = default, Option<TransportOrderStatusModel> status = default)
        {
            BeginDateOption = beginDate;
            CalculatedCustomerPriceOption = calculatedCustomerPrice;
            CarrierAddressOption = carrierAddress;
            CustomCustomerPriceOption = customCustomerPrice;
            CustomerAddressOption = customerAddress;
            EndDateOption = endDate;
            FreightPayerAddressOption = freightPayerAddress;
            IdOption = id;
            InternalNumberOption = internalNumber;
            IsDeletedOption = isDeleted;
            NumberOption = number;
            OrderDateOption = orderDate;
            OverriceCustomerAddressOption = overriceCustomerAddress;
            OverrideCarrierAddressOption = overrideCarrierAddress;
            OverrideFreightPayerAddressOption = overrideFreightPayerAddress;
            ReferenceNumberOption = referenceNumber;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BeginDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> BeginDateOption { get; private set; }

        /// <summary>
        /// Gets or sets the begin date.  &lt;br&gt;  Represents the date the transport order will begin.  
        /// </summary>
        /// <value>Gets or sets the begin date.  &lt;br&gt;  Represents the date the transport order will begin.  </value>
        [JsonPropertyName("beginDate")]
        public DateTime? BeginDate { get { return this. BeginDateOption; } set { this.BeginDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CalculatedCustomerPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> CalculatedCustomerPriceOption { get; private set; }

        /// <summary>
        /// Gets or sets the calculated customet price.  &lt;br&gt;  This field is for a calculated price for the customer.  
        /// </summary>
        /// <value>Gets or sets the calculated customet price.  &lt;br&gt;  This field is for a calculated price for the customer.  </value>
        [JsonPropertyName("calculatedCustomerPrice")]
        public double? CalculatedCustomerPrice { get { return this. CalculatedCustomerPriceOption; } set { this.CalculatedCustomerPriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of CarrierAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> CarrierAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets CarrierAddress
        /// </summary>
        [JsonPropertyName("carrierAddress")]
        public AddressModel? CarrierAddress { get { return this. CarrierAddressOption; } set { this.CarrierAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of CustomCustomerPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> CustomCustomerPriceOption { get; private set; }

        /// <summary>
        /// Gets or sets the custom customer price.  &lt;br&gt;  This field is to hold a custom price for the customer.   E.g. when he has to pay a specific amount which will not be calculted from the shipments.  
        /// </summary>
        /// <value>Gets or sets the custom customer price.  &lt;br&gt;  This field is to hold a custom price for the customer.   E.g. when he has to pay a specific amount which will not be calculted from the shipments.  </value>
        [JsonPropertyName("customCustomerPrice")]
        public double? CustomCustomerPrice { get { return this. CustomCustomerPriceOption; } set { this.CustomCustomerPriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of CustomerAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> CustomerAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomerAddress
        /// </summary>
        [JsonPropertyName("customerAddress")]
        public AddressModel? CustomerAddress { get { return this. CustomerAddressOption; } set { this.CustomerAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateOption { get; private set; }

        /// <summary>
        /// Gets or sets the end date.  &lt;br&gt;  Represents the date the transport order should end.  
        /// </summary>
        /// <value>Gets or sets the end date.  &lt;br&gt;  Represents the date the transport order should end.  </value>
        [JsonPropertyName("endDate")]
        public DateTime? EndDate { get { return this. EndDateOption; } set { this.EndDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of FreightPayerAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> FreightPayerAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets FreightPayerAddress
        /// </summary>
        [JsonPropertyName("freightPayerAddress")]
        public AddressModel? FreightPayerAddress { get { return this. FreightPayerAddressOption; } set { this.FreightPayerAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id.  &lt;br&gt;  Represents the primary identifier of a transport order.  
        /// </summary>
        /// <value>Gets or sets the id.  &lt;br&gt;  Represents the primary identifier of a transport order.  </value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of InternalNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> InternalNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the number.
        /// </summary>
        /// <value>Gets or sets the number.</value>
        [JsonPropertyName("internalNumber")]
        public string? InternalNumber { get { return this. InternalNumberOption; } set { this.InternalNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or sets whether the transport order is deleted.
        /// </summary>
        /// <value>Gets or sets whether the transport order is deleted.</value>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the number.  &lt;br&gt;  The number is a human readable identifier for this transport order.    A number should be  unique within a tenant and is usually set by the sequence manager.
        /// </summary>
        /// <value>Gets or sets the number.  &lt;br&gt;  The number is a human readable identifier for this transport order.    A number should be  unique within a tenant and is usually set by the sequence manager.</value>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OrderDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> OrderDateOption { get; private set; }

        /// <summary>
        /// Gets or sets the order date.  &lt;br&gt;  This represents the date on which the order is ordered.  
        /// </summary>
        /// <value>Gets or sets the order date.  &lt;br&gt;  This represents the date on which the order is ordered.  </value>
        [JsonPropertyName("orderDate")]
        public DateTime? OrderDate { get { return this. OrderDateOption; } set { this.OrderDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of OverriceCustomerAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> OverriceCustomerAddressOption { get; private set; }

        /// <summary>
        /// Gets or sets whether the customer address will be overwritten.  &lt;br&gt;  If this one is set to true the customer address of all contained shipments will be set to the same  cusomer address as the one in this transport order.  
        /// </summary>
        /// <value>Gets or sets whether the customer address will be overwritten.  &lt;br&gt;  If this one is set to true the customer address of all contained shipments will be set to the same  cusomer address as the one in this transport order.  </value>
        [JsonPropertyName("overriceCustomerAddress")]
        public bool? OverriceCustomerAddress { get { return this. OverriceCustomerAddressOption; } set { this.OverriceCustomerAddressOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of OverrideCarrierAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> OverrideCarrierAddressOption { get; private set; }

        /// <summary>
        /// Gets or sets whether the carrier address will be overwritten.  &lt;br&gt;  If this is set to true the carrier address of all contained shipments will be set to the same carrier  address as the one in this transport order.  
        /// </summary>
        /// <value>Gets or sets whether the carrier address will be overwritten.  &lt;br&gt;  If this is set to true the carrier address of all contained shipments will be set to the same carrier  address as the one in this transport order.  </value>
        [JsonPropertyName("overrideCarrierAddress")]
        public bool? OverrideCarrierAddress { get { return this. OverrideCarrierAddressOption; } set { this.OverrideCarrierAddressOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of OverrideFreightPayerAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> OverrideFreightPayerAddressOption { get; private set; }

        /// <summary>
        /// Gets or sets whether the freight payer address will be overwritten.  &lt;br&gt;  If ths is set to true the freight payer address of all contained shipments will be set to the same   freight payer address as the one in this transport order.  
        /// </summary>
        /// <value>Gets or sets whether the freight payer address will be overwritten.  &lt;br&gt;  If ths is set to true the freight payer address of all contained shipments will be set to the same   freight payer address as the one in this transport order.  </value>
        [JsonPropertyName("overrideFreightPayerAddress")]
        public bool? OverrideFreightPayerAddress { get { return this. OverrideFreightPayerAddressOption; } set { this.OverrideFreightPayerAddressOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of ReferenceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the reference number.  &lt;br&gt;  Usually represents the number of another programm or the customer number for this object.  
        /// </summary>
        /// <value>Gets or sets the reference number.  &lt;br&gt;  Usually represents the number of another programm or the customer number for this object.  </value>
        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get { return this. ReferenceNumberOption; } set { this.ReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<TransportOrderStatusModel>))]
        public Option<TransportOrderStatusModel> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public TransportOrderStatusModel? Status { get { return this. StatusOption; } set { this.StatusOption = new Option<TransportOrderStatusModel>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentTransportOrderModel {\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  CalculatedCustomerPrice: ").Append(CalculatedCustomerPrice).Append("\n");
            sb.Append("  CarrierAddress: ").Append(CarrierAddress).Append("\n");
            sb.Append("  CustomCustomerPrice: ").Append(CustomCustomerPrice).Append("\n");
            sb.Append("  CustomerAddress: ").Append(CustomerAddress).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FreightPayerAddress: ").Append(FreightPayerAddress).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InternalNumber: ").Append(InternalNumber).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  OverriceCustomerAddress: ").Append(OverriceCustomerAddress).Append("\n");
            sb.Append("  OverrideCarrierAddress: ").Append(OverrideCarrierAddress).Append("\n");
            sb.Append("  OverrideFreightPayerAddress: ").Append(OverrideFreightPayerAddress).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentTransportOrderModel" />
    /// </summary>
    public class ShipmentTransportOrderModelJsonConverter : JsonConverter<ShipmentTransportOrderModel>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize OrderDate
        /// </summary>
        public static string OrderDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ShipmentTransportOrderModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentTransportOrderModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> beginDate = default;
            Option<double> calculatedCustomerPrice = default;
            Option<AddressModel> carrierAddress = default;
            Option<double> customCustomerPrice = default;
            Option<AddressModel> customerAddress = default;
            Option<DateTime> endDate = default;
            Option<AddressModel> freightPayerAddress = default;
            Option<Guid> id = default;
            Option<string> internalNumber = default;
            Option<bool> isDeleted = default;
            Option<string> number = default;
            Option<DateTime> orderDate = default;
            Option<bool> overriceCustomerAddress = default;
            Option<bool> overrideCarrierAddress = default;
            Option<bool> overrideFreightPayerAddress = default;
            Option<string> referenceNumber = default;
            Option<TransportOrderStatusModel> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "beginDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                beginDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "calculatedCustomerPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                calculatedCustomerPrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "carrierAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                carrierAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "customCustomerPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customCustomerPrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "customerAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "freightPayerAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                freightPayerAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "internalNumber":
                            internalNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "orderDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                orderDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "overriceCustomerAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                overriceCustomerAddress = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "overrideCarrierAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                overrideCarrierAddress = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "overrideFreightPayerAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                overrideFreightPayerAddress = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "referenceNumber":
                            referenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<TransportOrderStatusModel>(JsonSerializer.Deserialize<TransportOrderStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (calculatedCustomerPrice.IsSet && calculatedCustomerPrice.Value == null)
                throw new ArgumentNullException(nameof(calculatedCustomerPrice), "Property is not nullable for class ShipmentTransportOrderModel.");

            if (carrierAddress.IsSet && carrierAddress.Value == null)
                throw new ArgumentNullException(nameof(carrierAddress), "Property is not nullable for class ShipmentTransportOrderModel.");

            if (customCustomerPrice.IsSet && customCustomerPrice.Value == null)
                throw new ArgumentNullException(nameof(customCustomerPrice), "Property is not nullable for class ShipmentTransportOrderModel.");

            if (customerAddress.IsSet && customerAddress.Value == null)
                throw new ArgumentNullException(nameof(customerAddress), "Property is not nullable for class ShipmentTransportOrderModel.");

            if (freightPayerAddress.IsSet && freightPayerAddress.Value == null)
                throw new ArgumentNullException(nameof(freightPayerAddress), "Property is not nullable for class ShipmentTransportOrderModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ShipmentTransportOrderModel.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class ShipmentTransportOrderModel.");

            if (overriceCustomerAddress.IsSet && overriceCustomerAddress.Value == null)
                throw new ArgumentNullException(nameof(overriceCustomerAddress), "Property is not nullable for class ShipmentTransportOrderModel.");

            if (overrideCarrierAddress.IsSet && overrideCarrierAddress.Value == null)
                throw new ArgumentNullException(nameof(overrideCarrierAddress), "Property is not nullable for class ShipmentTransportOrderModel.");

            if (overrideFreightPayerAddress.IsSet && overrideFreightPayerAddress.Value == null)
                throw new ArgumentNullException(nameof(overrideFreightPayerAddress), "Property is not nullable for class ShipmentTransportOrderModel.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ShipmentTransportOrderModel.");

            //2return new ShipmentTransportOrderModel(beginDate, calculatedCustomerPrice, carrierAddress, customCustomerPrice, customerAddress, endDate, freightPayerAddress, id, internalNumber, isDeleted, number, orderDate, overriceCustomerAddress, overrideCarrierAddress, overrideFreightPayerAddress, referenceNumber, status);
            return new ShipmentTransportOrderModel(beginDate, calculatedCustomerPrice, carrierAddress, customCustomerPrice, customerAddress, endDate, freightPayerAddress, id, internalNumber, isDeleted, number, orderDate, overriceCustomerAddress, overrideCarrierAddress, overrideFreightPayerAddress, referenceNumber, status);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentTransportOrderModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentTransportOrderModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentTransportOrderModel shipmentTransportOrderModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, shipmentTransportOrderModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentTransportOrderModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentTransportOrderModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ShipmentTransportOrderModel shipmentTransportOrderModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentTransportOrderModel.CarrierAddressOption.IsSet && shipmentTransportOrderModel.CarrierAddress == null)
                throw new ArgumentNullException(nameof(shipmentTransportOrderModel.CarrierAddress), "Property is required for class ShipmentTransportOrderModel.");

            if (shipmentTransportOrderModel.CustomerAddressOption.IsSet && shipmentTransportOrderModel.CustomerAddress == null)
                throw new ArgumentNullException(nameof(shipmentTransportOrderModel.CustomerAddress), "Property is required for class ShipmentTransportOrderModel.");

            if (shipmentTransportOrderModel.FreightPayerAddressOption.IsSet && shipmentTransportOrderModel.FreightPayerAddress == null)
                throw new ArgumentNullException(nameof(shipmentTransportOrderModel.FreightPayerAddress), "Property is required for class ShipmentTransportOrderModel.");

            if (shipmentTransportOrderModel.StatusOption.IsSet && shipmentTransportOrderModel.Status == null)
                throw new ArgumentNullException(nameof(shipmentTransportOrderModel.Status), "Property is required for class ShipmentTransportOrderModel.");

            if (shipmentTransportOrderModel.BeginDateOption.IsSet)
                if (shipmentTransportOrderModel.BeginDateOption.Value != null)
                {
                    writer.WriteString("beginDate", shipmentTransportOrderModel.BeginDateOption!.Value.ToString(BeginDateFormat));
                    //var __value = shipmentTransportOrderModel.BeginDateOption.Value;
                    //writer.WriteString("beginDate", __value);
                }
                else
                    writer.WriteNull("beginDate");

            if (shipmentTransportOrderModel.CalculatedCustomerPriceOption.IsSet)
                writer.WriteNumber("calculatedCustomerPrice", shipmentTransportOrderModel.CalculatedCustomerPriceOption!.Value);

            if (shipmentTransportOrderModel.CarrierAddressOption.IsSet)
            {
                writer.WritePropertyName("carrierAddress");
                JsonSerializer.Serialize(writer, shipmentTransportOrderModel.CarrierAddress, jsonSerializerOptions);
            }
            if (shipmentTransportOrderModel.CustomCustomerPriceOption.IsSet)
                writer.WriteNumber("customCustomerPrice", shipmentTransportOrderModel.CustomCustomerPriceOption!.Value);

            if (shipmentTransportOrderModel.CustomerAddressOption.IsSet)
            {
                writer.WritePropertyName("customerAddress");
                JsonSerializer.Serialize(writer, shipmentTransportOrderModel.CustomerAddress, jsonSerializerOptions);
            }
            if (shipmentTransportOrderModel.EndDateOption.IsSet)
                if (shipmentTransportOrderModel.EndDateOption.Value != null)
                {
                    writer.WriteString("endDate", shipmentTransportOrderModel.EndDateOption!.Value.ToString(EndDateFormat));
                    //var __value = shipmentTransportOrderModel.EndDateOption.Value;
                    //writer.WriteString("endDate", __value);
                }
                else
                    writer.WriteNull("endDate");

            if (shipmentTransportOrderModel.FreightPayerAddressOption.IsSet)
            {
                writer.WritePropertyName("freightPayerAddress");
                JsonSerializer.Serialize(writer, shipmentTransportOrderModel.FreightPayerAddress, jsonSerializerOptions);
            }
            if (shipmentTransportOrderModel.IdOption.IsSet)
                writer.WriteString("id", shipmentTransportOrderModel.IdOption!.Value);

            if (shipmentTransportOrderModel.InternalNumberOption.IsSet)
                if (shipmentTransportOrderModel.InternalNumberOption.Value != null)
                {
                    writer.WriteString("internalNumber", shipmentTransportOrderModel.InternalNumber);
                    //var __value = shipmentTransportOrderModel.InternalNumberOption.Value;
                    //writer.WriteString("internalNumber", __value);
                }
                else
                    writer.WriteNull("internalNumber");

            if (shipmentTransportOrderModel.IsDeletedOption.IsSet)
                writer.WriteBoolean("isDeleted", shipmentTransportOrderModel.IsDeletedOption!.Value);

            if (shipmentTransportOrderModel.NumberOption.IsSet)
                if (shipmentTransportOrderModel.NumberOption.Value != null)
                {
                    writer.WriteString("number", shipmentTransportOrderModel.Number);
                    //var __value = shipmentTransportOrderModel.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (shipmentTransportOrderModel.OrderDateOption.IsSet)
                if (shipmentTransportOrderModel.OrderDateOption.Value != null)
                {
                    writer.WriteString("orderDate", shipmentTransportOrderModel.OrderDateOption!.Value.ToString(OrderDateFormat));
                    //var __value = shipmentTransportOrderModel.OrderDateOption.Value;
                    //writer.WriteString("orderDate", __value);
                }
                else
                    writer.WriteNull("orderDate");

            if (shipmentTransportOrderModel.OverriceCustomerAddressOption.IsSet)
                writer.WriteBoolean("overriceCustomerAddress", shipmentTransportOrderModel.OverriceCustomerAddressOption!.Value);

            if (shipmentTransportOrderModel.OverrideCarrierAddressOption.IsSet)
                writer.WriteBoolean("overrideCarrierAddress", shipmentTransportOrderModel.OverrideCarrierAddressOption!.Value);

            if (shipmentTransportOrderModel.OverrideFreightPayerAddressOption.IsSet)
                writer.WriteBoolean("overrideFreightPayerAddress", shipmentTransportOrderModel.OverrideFreightPayerAddressOption!.Value);

            if (shipmentTransportOrderModel.ReferenceNumberOption.IsSet)
                if (shipmentTransportOrderModel.ReferenceNumberOption.Value != null)
                {
                    writer.WriteString("referenceNumber", shipmentTransportOrderModel.ReferenceNumber);
                    //var __value = shipmentTransportOrderModel.ReferenceNumberOption.Value;
                    //writer.WriteString("referenceNumber", __value);
                }
                else
                    writer.WriteNull("referenceNumber");

            if (shipmentTransportOrderModel.StatusOption.IsSet)
            {
                writer.WritePropertyName("status");
                JsonSerializer.Serialize(writer, shipmentTransportOrderModel.Status, jsonSerializerOptions);
            }
        }
    }
}
