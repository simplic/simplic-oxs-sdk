/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of shipment transport order.
    /// </summary>
    [DataContract(Name = "ShipmentTransportOrderModel")]
    public partial class ShipmentTransportOrderModel : IEquatable<ShipmentTransportOrderModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentTransportOrderModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id.  &lt;br&gt;  Represents the primary identifier of a transport order.  .</param>
        /// <param name="customerAddress">customerAddress.</param>
        /// <param name="overriceCustomerAddress">Gets or sets whether the customer address will be overwritten.  &lt;br&gt;  If this one is set to true the customer address of all contained shipments will be set to the same  cusomer address as the one in this transport order.  .</param>
        /// <param name="carrierAddress">carrierAddress.</param>
        /// <param name="overrideCarrierAddress">Gets or sets whether the carrier address will be overwritten.  &lt;br&gt;  If this is set to true the carrier address of all contained shipments will be set to the same carrier  address as the one in this transport order.  .</param>
        /// <param name="freightPayerAddress">freightPayerAddress.</param>
        /// <param name="overrideFreightPayerAddress">Gets or sets whether the freight payer address will be overwritten.  &lt;br&gt;  If ths is set to true the freight payer address of all contained shipments will be set to the same   freight payer address as the one in this transport order.  .</param>
        /// <param name="number">Gets or sets the number.  &lt;br&gt;  The number is a human readable identifier for this transport order.    A number should be  unique within a tenant and is usually set by the sequence manager..</param>
        /// <param name="referenceNumber">Gets or sets the reference number.  &lt;br&gt;  Usually represents the number of another programm or the customer number for this object.  .</param>
        /// <param name="internalNumber">Gets or sets the number..</param>
        /// <param name="orderDate">Gets or sets the order date.  &lt;br&gt;  This represents the date on which the order is ordered.  .</param>
        /// <param name="isDeleted">Gets or sets whether the transport order is deleted..</param>
        /// <param name="beginDate">Gets or sets the begin date.  &lt;br&gt;  Represents the date the transport order will begin.  .</param>
        /// <param name="endDate">Gets or sets the end date.  &lt;br&gt;  Represents the date the transport order should end.  .</param>
        /// <param name="customCustomerPrice">Gets or sets the custom customer price.  &lt;br&gt;  This field is to hold a custom price for the customer.   E.g. when he has to pay a specific amount which will not be calculted from the shipments.  .</param>
        /// <param name="calculatedCustomerPrice">Gets or sets the calculated customet price.  &lt;br&gt;  This field is for a calculated price for the customer.  .</param>
        /// <param name="status">status.</param>
        public ShipmentTransportOrderModel(Guid id = default(Guid), AddressModel customerAddress = default(AddressModel), bool overriceCustomerAddress = default(bool), AddressModel carrierAddress = default(AddressModel), bool overrideCarrierAddress = default(bool), AddressModel freightPayerAddress = default(AddressModel), bool overrideFreightPayerAddress = default(bool), string number = default(string), string referenceNumber = default(string), string internalNumber = default(string), DateTime? orderDate = default(DateTime?), bool isDeleted = default(bool), DateTime? beginDate = default(DateTime?), DateTime? endDate = default(DateTime?), double customCustomerPrice = default(double), double calculatedCustomerPrice = default(double), TransportOrderStatusModel status = default(TransportOrderStatusModel))
        {
            this.Id = id;
            this.CustomerAddress = customerAddress;
            this.OverriceCustomerAddress = overriceCustomerAddress;
            this.CarrierAddress = carrierAddress;
            this.OverrideCarrierAddress = overrideCarrierAddress;
            this.FreightPayerAddress = freightPayerAddress;
            this.OverrideFreightPayerAddress = overrideFreightPayerAddress;
            this.Number = number;
            this.ReferenceNumber = referenceNumber;
            this.InternalNumber = internalNumber;
            this.OrderDate = orderDate;
            this.IsDeleted = isDeleted;
            this.BeginDate = beginDate;
            this.EndDate = endDate;
            this.CustomCustomerPrice = customCustomerPrice;
            this.CalculatedCustomerPrice = calculatedCustomerPrice;
            this.Status = status;
        }

        /// <summary>
        /// Gets or sets the id.  &lt;br&gt;  Represents the primary identifier of a transport order.  
        /// </summary>
        /// <value>Gets or sets the id.  &lt;br&gt;  Represents the primary identifier of a transport order.  </value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets CustomerAddress
        /// </summary>
        [DataMember(Name = "customerAddress", EmitDefaultValue = false)]
        public AddressModel CustomerAddress { get; set; }

        /// <summary>
        /// Gets or sets whether the customer address will be overwritten.  &lt;br&gt;  If this one is set to true the customer address of all contained shipments will be set to the same  cusomer address as the one in this transport order.  
        /// </summary>
        /// <value>Gets or sets whether the customer address will be overwritten.  &lt;br&gt;  If this one is set to true the customer address of all contained shipments will be set to the same  cusomer address as the one in this transport order.  </value>
        [DataMember(Name = "overriceCustomerAddress", EmitDefaultValue = true)]
        public bool OverriceCustomerAddress { get; set; }

        /// <summary>
        /// Gets or Sets CarrierAddress
        /// </summary>
        [DataMember(Name = "carrierAddress", EmitDefaultValue = false)]
        public AddressModel CarrierAddress { get; set; }

        /// <summary>
        /// Gets or sets whether the carrier address will be overwritten.  &lt;br&gt;  If this is set to true the carrier address of all contained shipments will be set to the same carrier  address as the one in this transport order.  
        /// </summary>
        /// <value>Gets or sets whether the carrier address will be overwritten.  &lt;br&gt;  If this is set to true the carrier address of all contained shipments will be set to the same carrier  address as the one in this transport order.  </value>
        [DataMember(Name = "overrideCarrierAddress", EmitDefaultValue = true)]
        public bool OverrideCarrierAddress { get; set; }

        /// <summary>
        /// Gets or Sets FreightPayerAddress
        /// </summary>
        [DataMember(Name = "freightPayerAddress", EmitDefaultValue = false)]
        public AddressModel FreightPayerAddress { get; set; }

        /// <summary>
        /// Gets or sets whether the freight payer address will be overwritten.  &lt;br&gt;  If ths is set to true the freight payer address of all contained shipments will be set to the same   freight payer address as the one in this transport order.  
        /// </summary>
        /// <value>Gets or sets whether the freight payer address will be overwritten.  &lt;br&gt;  If ths is set to true the freight payer address of all contained shipments will be set to the same   freight payer address as the one in this transport order.  </value>
        [DataMember(Name = "overrideFreightPayerAddress", EmitDefaultValue = true)]
        public bool OverrideFreightPayerAddress { get; set; }

        /// <summary>
        /// Gets or sets the number.  &lt;br&gt;  The number is a human readable identifier for this transport order.    A number should be  unique within a tenant and is usually set by the sequence manager.
        /// </summary>
        /// <value>Gets or sets the number.  &lt;br&gt;  The number is a human readable identifier for this transport order.    A number should be  unique within a tenant and is usually set by the sequence manager.</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets the reference number.  &lt;br&gt;  Usually represents the number of another programm or the customer number for this object.  
        /// </summary>
        /// <value>Gets or sets the reference number.  &lt;br&gt;  Usually represents the number of another programm or the customer number for this object.  </value>
        [DataMember(Name = "referenceNumber", EmitDefaultValue = true)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or sets the number.
        /// </summary>
        /// <value>Gets or sets the number.</value>
        [DataMember(Name = "internalNumber", EmitDefaultValue = true)]
        public string InternalNumber { get; set; }

        /// <summary>
        /// Gets or sets the order date.  &lt;br&gt;  This represents the date on which the order is ordered.  
        /// </summary>
        /// <value>Gets or sets the order date.  &lt;br&gt;  This represents the date on which the order is ordered.  </value>
        [DataMember(Name = "orderDate", EmitDefaultValue = true)]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// Gets or sets whether the transport order is deleted.
        /// </summary>
        /// <value>Gets or sets whether the transport order is deleted.</value>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or sets the begin date.  &lt;br&gt;  Represents the date the transport order will begin.  
        /// </summary>
        /// <value>Gets or sets the begin date.  &lt;br&gt;  Represents the date the transport order will begin.  </value>
        [DataMember(Name = "beginDate", EmitDefaultValue = true)]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// Gets or sets the end date.  &lt;br&gt;  Represents the date the transport order should end.  
        /// </summary>
        /// <value>Gets or sets the end date.  &lt;br&gt;  Represents the date the transport order should end.  </value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or sets the custom customer price.  &lt;br&gt;  This field is to hold a custom price for the customer.   E.g. when he has to pay a specific amount which will not be calculted from the shipments.  
        /// </summary>
        /// <value>Gets or sets the custom customer price.  &lt;br&gt;  This field is to hold a custom price for the customer.   E.g. when he has to pay a specific amount which will not be calculted from the shipments.  </value>
        [DataMember(Name = "customCustomerPrice", EmitDefaultValue = false)]
        public double CustomCustomerPrice { get; set; }

        /// <summary>
        /// Gets or sets the calculated customet price.  &lt;br&gt;  This field is for a calculated price for the customer.  
        /// </summary>
        /// <value>Gets or sets the calculated customet price.  &lt;br&gt;  This field is for a calculated price for the customer.  </value>
        [DataMember(Name = "calculatedCustomerPrice", EmitDefaultValue = false)]
        public double CalculatedCustomerPrice { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public TransportOrderStatusModel Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentTransportOrderModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CustomerAddress: ").Append(CustomerAddress).Append("\n");
            sb.Append("  OverriceCustomerAddress: ").Append(OverriceCustomerAddress).Append("\n");
            sb.Append("  CarrierAddress: ").Append(CarrierAddress).Append("\n");
            sb.Append("  OverrideCarrierAddress: ").Append(OverrideCarrierAddress).Append("\n");
            sb.Append("  FreightPayerAddress: ").Append(FreightPayerAddress).Append("\n");
            sb.Append("  OverrideFreightPayerAddress: ").Append(OverrideFreightPayerAddress).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  InternalNumber: ").Append(InternalNumber).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  CustomCustomerPrice: ").Append(CustomCustomerPrice).Append("\n");
            sb.Append("  CalculatedCustomerPrice: ").Append(CalculatedCustomerPrice).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentTransportOrderModel);
        }

        /// <summary>
        /// Returns true if ShipmentTransportOrderModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentTransportOrderModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentTransportOrderModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CustomerAddress == input.CustomerAddress ||
                    (this.CustomerAddress != null &&
                    this.CustomerAddress.Equals(input.CustomerAddress))
                ) && 
                (
                    this.OverriceCustomerAddress == input.OverriceCustomerAddress ||
                    this.OverriceCustomerAddress.Equals(input.OverriceCustomerAddress)
                ) && 
                (
                    this.CarrierAddress == input.CarrierAddress ||
                    (this.CarrierAddress != null &&
                    this.CarrierAddress.Equals(input.CarrierAddress))
                ) && 
                (
                    this.OverrideCarrierAddress == input.OverrideCarrierAddress ||
                    this.OverrideCarrierAddress.Equals(input.OverrideCarrierAddress)
                ) && 
                (
                    this.FreightPayerAddress == input.FreightPayerAddress ||
                    (this.FreightPayerAddress != null &&
                    this.FreightPayerAddress.Equals(input.FreightPayerAddress))
                ) && 
                (
                    this.OverrideFreightPayerAddress == input.OverrideFreightPayerAddress ||
                    this.OverrideFreightPayerAddress.Equals(input.OverrideFreightPayerAddress)
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) && 
                (
                    this.InternalNumber == input.InternalNumber ||
                    (this.InternalNumber != null &&
                    this.InternalNumber.Equals(input.InternalNumber))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.CustomCustomerPrice == input.CustomCustomerPrice ||
                    this.CustomCustomerPrice.Equals(input.CustomCustomerPrice)
                ) && 
                (
                    this.CalculatedCustomerPrice == input.CalculatedCustomerPrice ||
                    this.CalculatedCustomerPrice.Equals(input.CalculatedCustomerPrice)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CustomerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OverriceCustomerAddress.GetHashCode();
                if (this.CarrierAddress != null)
                {
                    hashCode = (hashCode * 59) + this.CarrierAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OverrideCarrierAddress.GetHashCode();
                if (this.FreightPayerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.FreightPayerAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OverrideFreightPayerAddress.GetHashCode();
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.ReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceNumber.GetHashCode();
                }
                if (this.InternalNumber != null)
                {
                    hashCode = (hashCode * 59) + this.InternalNumber.GetHashCode();
                }
                if (this.OrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                if (this.BeginDate != null)
                {
                    hashCode = (hashCode * 59) + this.BeginDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CustomCustomerPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.CalculatedCustomerPrice.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
