/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Reqeust to attach a co driver.
    /// </summary>
    [DataContract(Name = "AttachCoDriverRequest")]
    public partial class AttachCoDriverRequest : IEquatable<AttachCoDriverRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachCoDriverRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AttachCoDriverRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachCoDriverRequest" /> class.
        /// </summary>
        /// <param name="composedResourceId">Gets or sets the id of the composed resource the driver is attached to. (required).</param>
        /// <param name="driverResourceId">Gets or sets the id of the driver resource to attach to the composed resource. (required).</param>
        /// <param name="moveCurrentToMainDriverSeat">Gets or sets whether the current co driver should be moved to the main driver seat.     If set to false the current co driver will be detached from the given composed resource   and be attached to its own.  .</param>
        public AttachCoDriverRequest(Guid composedResourceId = default(Guid), Guid driverResourceId = default(Guid), bool moveCurrentToMainDriverSeat = default(bool))
        {
            this.ComposedResourceId = composedResourceId;
            this.DriverResourceId = driverResourceId;
            this.MoveCurrentToMainDriverSeat = moveCurrentToMainDriverSeat;
        }

        /// <summary>
        /// Gets or sets the id of the composed resource the driver is attached to.
        /// </summary>
        /// <value>Gets or sets the id of the composed resource the driver is attached to.</value>
        [DataMember(Name = "composedResourceId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ComposedResourceId { get; set; }

        /// <summary>
        /// Gets or sets the id of the driver resource to attach to the composed resource.
        /// </summary>
        /// <value>Gets or sets the id of the driver resource to attach to the composed resource.</value>
        [DataMember(Name = "driverResourceId", IsRequired = true, EmitDefaultValue = true)]
        public Guid DriverResourceId { get; set; }

        /// <summary>
        /// Gets or sets whether the current co driver should be moved to the main driver seat.     If set to false the current co driver will be detached from the given composed resource   and be attached to its own.  
        /// </summary>
        /// <value>Gets or sets whether the current co driver should be moved to the main driver seat.     If set to false the current co driver will be detached from the given composed resource   and be attached to its own.  </value>
        [DataMember(Name = "moveCurrentToMainDriverSeat", EmitDefaultValue = true)]
        public bool MoveCurrentToMainDriverSeat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachCoDriverRequest {\n");
            sb.Append("  ComposedResourceId: ").Append(ComposedResourceId).Append("\n");
            sb.Append("  DriverResourceId: ").Append(DriverResourceId).Append("\n");
            sb.Append("  MoveCurrentToMainDriverSeat: ").Append(MoveCurrentToMainDriverSeat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttachCoDriverRequest);
        }

        /// <summary>
        /// Returns true if AttachCoDriverRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AttachCoDriverRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachCoDriverRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ComposedResourceId == input.ComposedResourceId ||
                    (this.ComposedResourceId != null &&
                    this.ComposedResourceId.Equals(input.ComposedResourceId))
                ) && 
                (
                    this.DriverResourceId == input.DriverResourceId ||
                    (this.DriverResourceId != null &&
                    this.DriverResourceId.Equals(input.DriverResourceId))
                ) && 
                (
                    this.MoveCurrentToMainDriverSeat == input.MoveCurrentToMainDriverSeat ||
                    this.MoveCurrentToMainDriverSeat.Equals(input.MoveCurrentToMainDriverSeat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComposedResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.ComposedResourceId.GetHashCode();
                }
                if (this.DriverResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.DriverResourceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MoveCurrentToMainDriverSeat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
