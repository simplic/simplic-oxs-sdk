/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Response when getting composed message information.
    /// </summary>
    [DataContract(Name = "GetComposedMessageResponse")]
    public partial class GetComposedMessageResponse : IEquatable<GetComposedMessageResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetComposedMessageResponse" /> class.
        /// </summary>
        /// <param name="dateTime">Gets or sets the date and time the message is received..</param>
        /// <param name="message">Gets or sets the message..</param>
        /// <param name="unrecognized">Gets or sets whether the message is not \&quot;recognized\&quot;.</param>
        /// <param name="notificationId">Gets or sets the notification id, which created the message.</param>
        public GetComposedMessageResponse(DateTime dateTime = default(DateTime), string message = default(string), bool unrecognized = default(bool), Guid? notificationId = default(Guid?))
        {
            this.DateTime = dateTime;
            this.Message = message;
            this.Unrecognized = unrecognized;
            this.NotificationId = notificationId;
        }

        /// <summary>
        /// Gets or sets the date and time the message is received.
        /// </summary>
        /// <value>Gets or sets the date and time the message is received.</value>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Gets or sets the message.
        /// </summary>
        /// <value>Gets or sets the message.</value>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets whether the message is not \&quot;recognized\&quot;
        /// </summary>
        /// <value>Gets or sets whether the message is not \&quot;recognized\&quot;</value>
        [DataMember(Name = "unrecognized", EmitDefaultValue = true)]
        public bool Unrecognized { get; set; }

        /// <summary>
        /// Gets or sets the notification id, which created the message
        /// </summary>
        /// <value>Gets or sets the notification id, which created the message</value>
        [DataMember(Name = "notificationId", EmitDefaultValue = true)]
        public Guid? NotificationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetComposedMessageResponse {\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Unrecognized: ").Append(Unrecognized).Append("\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetComposedMessageResponse);
        }

        /// <summary>
        /// Returns true if GetComposedMessageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetComposedMessageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetComposedMessageResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Unrecognized == input.Unrecognized ||
                    this.Unrecognized.Equals(input.Unrecognized)
                ) && 
                (
                    this.NotificationId == input.NotificationId ||
                    (this.NotificationId != null &&
                    this.NotificationId.Equals(input.NotificationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Unrecognized.GetHashCode();
                if (this.NotificationId != null)
                {
                    hashCode = (hashCode * 59) + this.NotificationId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
