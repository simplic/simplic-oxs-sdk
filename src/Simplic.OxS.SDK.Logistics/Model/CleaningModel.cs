/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Logistics.Model
{
    /// <summary>
    /// Represents a cleaning.
    /// </summary>
    [DataContract(Name = "CleaningModel")]
    public partial class CleaningModel : IEquatable<CleaningModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CleaningModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id..</param>
        /// <param name="cleaningStation">cleaningStation.</param>
        /// <param name="customer">customer.</param>
        /// <param name="dateTime">Gets or sets the date and time of the cleaning..</param>
        /// <param name="number">Gets or sets the cleaning numbner..</param>
        public CleaningModel(Guid id = default(Guid), AddressModel cleaningStation = default(AddressModel), BillableContactModel customer = default(BillableContactModel), DateTime dateTime = default(DateTime), string number = default(string))
        {
            this.Id = id;
            this.CleaningStation = cleaningStation;
            this.Customer = customer;
            this.DateTime = dateTime;
            this.Number = number;
        }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets CleaningStation
        /// </summary>
        [DataMember(Name = "cleaningStation", EmitDefaultValue = false)]
        public AddressModel CleaningStation { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public BillableContactModel Customer { get; set; }

        /// <summary>
        /// Gets or sets the date and time of the cleaning.
        /// </summary>
        /// <value>Gets or sets the date and time of the cleaning.</value>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Gets or sets the cleaning numbner.
        /// </summary>
        /// <value>Gets or sets the cleaning numbner.</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CleaningModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CleaningStation: ").Append(CleaningStation).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CleaningModel);
        }

        /// <summary>
        /// Returns true if CleaningModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CleaningModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CleaningModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CleaningStation == input.CleaningStation ||
                    (this.CleaningStation != null &&
                    this.CleaningStation.Equals(input.CleaningStation))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CleaningStation != null)
                {
                    hashCode = (hashCode * 59) + this.CleaningStation.GetHashCode();
                }
                if (this.Customer != null)
                {
                    hashCode = (hashCode * 59) + this.Customer.GetHashCode();
                }
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
