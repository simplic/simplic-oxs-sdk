/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// TourMetricsResponse
    /// </summary>
    [DataContract(Name = "TourMetricsResponse")]
    public partial class TourMetricsResponse : IEquatable<TourMetricsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TourMetricsResponse" /> class.
        /// </summary>
        /// <param name="totalDistance">Represents the total distance the resource has to travel on the tour..</param>
        /// <param name="totalTollDistance">Represents the distance where toll has to be payed for the tour..</param>
        /// <param name="tollCost">Represents the estimated toll cost for the tour..</param>
        /// <param name="drivingTime">Represents the estimated driving time for the tour..</param>
        /// <param name="totalTime">Represents the total time for the tour..</param>
        /// <param name="emptyDistance">Represents the distance without a shipment for the tour..</param>
        /// <param name="cost">Represents the esitmated cost of the tour.  !!! CURRENTLY ALWAYS NULL !!!.</param>
        /// <param name="revenue">Represents the esitmated revenue of the tour.  !!! CURRENTLY ALWAYS NULL !!!.</param>
        public TourMetricsResponse(double? totalDistance = default(double?), double? totalTollDistance = default(double?), double? tollCost = default(double?), string drivingTime = default(string), string totalTime = default(string), double? emptyDistance = default(double?), double? cost = default(double?), double? revenue = default(double?))
        {
            this.TotalDistance = totalDistance;
            this.TotalTollDistance = totalTollDistance;
            this.TollCost = tollCost;
            this.DrivingTime = drivingTime;
            this.TotalTime = totalTime;
            this.EmptyDistance = emptyDistance;
            this.Cost = cost;
            this.Revenue = revenue;
        }

        /// <summary>
        /// Represents the total distance the resource has to travel on the tour.
        /// </summary>
        /// <value>Represents the total distance the resource has to travel on the tour.</value>
        [DataMember(Name = "totalDistance", EmitDefaultValue = true)]
        public double? TotalDistance { get; set; }

        /// <summary>
        /// Represents the distance where toll has to be payed for the tour.
        /// </summary>
        /// <value>Represents the distance where toll has to be payed for the tour.</value>
        [DataMember(Name = "totalTollDistance", EmitDefaultValue = true)]
        public double? TotalTollDistance { get; set; }

        /// <summary>
        /// Represents the estimated toll cost for the tour.
        /// </summary>
        /// <value>Represents the estimated toll cost for the tour.</value>
        [DataMember(Name = "tollCost", EmitDefaultValue = true)]
        public double? TollCost { get; set; }

        /// <summary>
        /// Represents the estimated driving time for the tour.
        /// </summary>
        /// <value>Represents the estimated driving time for the tour.</value>
        [DataMember(Name = "drivingTime", EmitDefaultValue = true)]
        public string DrivingTime { get; set; }

        /// <summary>
        /// Represents the total time for the tour.
        /// </summary>
        /// <value>Represents the total time for the tour.</value>
        [DataMember(Name = "totalTime", EmitDefaultValue = true)]
        public string TotalTime { get; set; }

        /// <summary>
        /// Represents the distance without a shipment for the tour.
        /// </summary>
        /// <value>Represents the distance without a shipment for the tour.</value>
        [DataMember(Name = "emptyDistance", EmitDefaultValue = true)]
        public double? EmptyDistance { get; set; }

        /// <summary>
        /// Represents the esitmated cost of the tour.  !!! CURRENTLY ALWAYS NULL !!!
        /// </summary>
        /// <value>Represents the esitmated cost of the tour.  !!! CURRENTLY ALWAYS NULL !!!</value>
        [DataMember(Name = "cost", EmitDefaultValue = true)]
        public double? Cost { get; set; }

        /// <summary>
        /// Represents the esitmated revenue of the tour.  !!! CURRENTLY ALWAYS NULL !!!
        /// </summary>
        /// <value>Represents the esitmated revenue of the tour.  !!! CURRENTLY ALWAYS NULL !!!</value>
        [DataMember(Name = "revenue", EmitDefaultValue = true)]
        public double? Revenue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TourMetricsResponse {\n");
            sb.Append("  TotalDistance: ").Append(TotalDistance).Append("\n");
            sb.Append("  TotalTollDistance: ").Append(TotalTollDistance).Append("\n");
            sb.Append("  TollCost: ").Append(TollCost).Append("\n");
            sb.Append("  DrivingTime: ").Append(DrivingTime).Append("\n");
            sb.Append("  TotalTime: ").Append(TotalTime).Append("\n");
            sb.Append("  EmptyDistance: ").Append(EmptyDistance).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TourMetricsResponse);
        }

        /// <summary>
        /// Returns true if TourMetricsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TourMetricsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TourMetricsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalDistance == input.TotalDistance ||
                    (this.TotalDistance != null &&
                    this.TotalDistance.Equals(input.TotalDistance))
                ) && 
                (
                    this.TotalTollDistance == input.TotalTollDistance ||
                    (this.TotalTollDistance != null &&
                    this.TotalTollDistance.Equals(input.TotalTollDistance))
                ) && 
                (
                    this.TollCost == input.TollCost ||
                    (this.TollCost != null &&
                    this.TollCost.Equals(input.TollCost))
                ) && 
                (
                    this.DrivingTime == input.DrivingTime ||
                    (this.DrivingTime != null &&
                    this.DrivingTime.Equals(input.DrivingTime))
                ) && 
                (
                    this.TotalTime == input.TotalTime ||
                    (this.TotalTime != null &&
                    this.TotalTime.Equals(input.TotalTime))
                ) && 
                (
                    this.EmptyDistance == input.EmptyDistance ||
                    (this.EmptyDistance != null &&
                    this.EmptyDistance.Equals(input.EmptyDistance))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.Revenue == input.Revenue ||
                    (this.Revenue != null &&
                    this.Revenue.Equals(input.Revenue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalDistance != null)
                {
                    hashCode = (hashCode * 59) + this.TotalDistance.GetHashCode();
                }
                if (this.TotalTollDistance != null)
                {
                    hashCode = (hashCode * 59) + this.TotalTollDistance.GetHashCode();
                }
                if (this.TollCost != null)
                {
                    hashCode = (hashCode * 59) + this.TollCost.GetHashCode();
                }
                if (this.DrivingTime != null)
                {
                    hashCode = (hashCode * 59) + this.DrivingTime.GetHashCode();
                }
                if (this.TotalTime != null)
                {
                    hashCode = (hashCode * 59) + this.TotalTime.GetHashCode();
                }
                if (this.EmptyDistance != null)
                {
                    hashCode = (hashCode * 59) + this.EmptyDistance.GetHashCode();
                }
                if (this.Cost != null)
                {
                    hashCode = (hashCode * 59) + this.Cost.GetHashCode();
                }
                if (this.Revenue != null)
                {
                    hashCode = (hashCode * 59) + this.Revenue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
