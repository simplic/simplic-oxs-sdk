/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Logistics.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// UpdateResourceRequest
    /// </summary>
    [DataContract(Name = "UpdateResourceRequest")]
    public partial class UpdateResourceRequest : IEquatable<UpdateResourceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateResourceRequest" /> class.
        /// </summary>
        /// <param name="type">Gets the type of the resource.  &lt;br&gt;  E.g. \&quot;Driver\&quot; or \&quot;Tractor Unit\&quot;  .</param>
        /// <param name="matchCode">Gets or sets the match code.  &lt;br&gt;  This will be a non unique human readable number for the resource.  .</param>
        /// <param name="displayName">Gets or sets the user-friendly display name  &lt;br&gt;  This will be the display-name of the resource. E.g. for drivers  this might be the first- and lastname. For vehicles this might be   the registration plate.  .</param>
        /// <param name="loadingSlots">Gets or sets the loading slots of the resource..</param>
        /// <param name="location">location.</param>
        /// <param name="isLoadable">Gets or sets whether the resource is loadable.</param>
        /// <param name="planningOrderKey">Gets or sets an order key for the disposition.</param>
        /// <param name="usableUntil">Gets or sets a date, until.</param>
        /// <param name="notes">Gets or sets resource notes.</param>
        public UpdateResourceRequest(string type = default(string), string matchCode = default(string), string displayName = default(string), List<LoadingSlotModel> loadingSlots = default(List<LoadingSlotModel>), AddressModel location = default(AddressModel), bool isLoadable = default(bool), string planningOrderKey = default(string), DateTime? usableUntil = default(DateTime?), string notes = default(string))
        {
            this.Type = type;
            this.MatchCode = matchCode;
            this.DisplayName = displayName;
            this.LoadingSlots = loadingSlots;
            this.Location = location;
            this.IsLoadable = isLoadable;
            this.PlanningOrderKey = planningOrderKey;
            this.UsableUntil = usableUntil;
            this.Notes = notes;
        }

        /// <summary>
        /// Gets the type of the resource.  &lt;br&gt;  E.g. \&quot;Driver\&quot; or \&quot;Tractor Unit\&quot;  
        /// </summary>
        /// <value>Gets the type of the resource.  &lt;br&gt;  E.g. \&quot;Driver\&quot; or \&quot;Tractor Unit\&quot;  </value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the match code.  &lt;br&gt;  This will be a non unique human readable number for the resource.  
        /// </summary>
        /// <value>Gets or sets the match code.  &lt;br&gt;  This will be a non unique human readable number for the resource.  </value>
        [DataMember(Name = "matchCode", EmitDefaultValue = true)]
        public string MatchCode { get; set; }

        /// <summary>
        /// Gets or sets the user-friendly display name  &lt;br&gt;  This will be the display-name of the resource. E.g. for drivers  this might be the first- and lastname. For vehicles this might be   the registration plate.  
        /// </summary>
        /// <value>Gets or sets the user-friendly display name  &lt;br&gt;  This will be the display-name of the resource. E.g. for drivers  this might be the first- and lastname. For vehicles this might be   the registration plate.  </value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the loading slots of the resource.
        /// </summary>
        /// <value>Gets or sets the loading slots of the resource.</value>
        [DataMember(Name = "loadingSlots", EmitDefaultValue = true)]
        public List<LoadingSlotModel> LoadingSlots { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public AddressModel Location { get; set; }

        /// <summary>
        /// Gets or sets whether the resource is loadable
        /// </summary>
        /// <value>Gets or sets whether the resource is loadable</value>
        [DataMember(Name = "isLoadable", EmitDefaultValue = true)]
        public bool IsLoadable { get; set; }

        /// <summary>
        /// Gets or sets an order key for the disposition
        /// </summary>
        /// <value>Gets or sets an order key for the disposition</value>
        [DataMember(Name = "planningOrderKey", EmitDefaultValue = true)]
        public string PlanningOrderKey { get; set; }

        /// <summary>
        /// Gets or sets a date, until
        /// </summary>
        /// <value>Gets or sets a date, until</value>
        [DataMember(Name = "usableUntil", EmitDefaultValue = true)]
        public DateTime? UsableUntil { get; set; }

        /// <summary>
        /// Gets or sets resource notes
        /// </summary>
        /// <value>Gets or sets resource notes</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateResourceRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MatchCode: ").Append(MatchCode).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  LoadingSlots: ").Append(LoadingSlots).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  IsLoadable: ").Append(IsLoadable).Append("\n");
            sb.Append("  PlanningOrderKey: ").Append(PlanningOrderKey).Append("\n");
            sb.Append("  UsableUntil: ").Append(UsableUntil).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateResourceRequest);
        }

        /// <summary>
        /// Returns true if UpdateResourceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateResourceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateResourceRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MatchCode == input.MatchCode ||
                    (this.MatchCode != null &&
                    this.MatchCode.Equals(input.MatchCode))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.LoadingSlots == input.LoadingSlots ||
                    this.LoadingSlots != null &&
                    input.LoadingSlots != null &&
                    this.LoadingSlots.SequenceEqual(input.LoadingSlots)
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.IsLoadable == input.IsLoadable ||
                    this.IsLoadable.Equals(input.IsLoadable)
                ) && 
                (
                    this.PlanningOrderKey == input.PlanningOrderKey ||
                    (this.PlanningOrderKey != null &&
                    this.PlanningOrderKey.Equals(input.PlanningOrderKey))
                ) && 
                (
                    this.UsableUntil == input.UsableUntil ||
                    (this.UsableUntil != null &&
                    this.UsableUntil.Equals(input.UsableUntil))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.MatchCode != null)
                {
                    hashCode = (hashCode * 59) + this.MatchCode.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.LoadingSlots != null)
                {
                    hashCode = (hashCode * 59) + this.LoadingSlots.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsLoadable.GetHashCode();
                if (this.PlanningOrderKey != null)
                {
                    hashCode = (hashCode * 59) + this.PlanningOrderKey.GetHashCode();
                }
                if (this.UsableUntil != null)
                {
                    hashCode = (hashCode * 59) + this.UsableUntil.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
