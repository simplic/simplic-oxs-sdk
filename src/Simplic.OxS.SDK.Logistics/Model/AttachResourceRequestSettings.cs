/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Settings for a attach resources request to change some behaviour when attaching two resources.
    /// </summary>
    [DataContract(Name = "AttachResourceRequestSettings")]
    public partial class AttachResourceRequestSettings : IEquatable<AttachResourceRequestSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachResourceRequestSettings" /> class.
        /// </summary>
        /// <param name="attachDriverAsCoDriver">Gets or sets whether the driver should be attached as co driver during the attachment process. (default to false).</param>
        /// <param name="moveCurrentDriverToCoDriver">Gets or sets whether the current driver should be moved to the co driver seat during attachment of a new driver. (default to false).</param>
        /// <param name="moveCoDriverToMainDriver">Gets or sets whether the co driver should be moved to the main driver seat during attachment of a new co driver.     Only relevant when Simplic.OxS.Logistics.Server.Model.AttachResourceRequestSettings.AttachDriverAsCoDriver is set to true.   (default to false).</param>
        /// <param name="addTrailerAsAdditionalTrailer">Gets or sets whether the attached trailer should be added as additional trailer.   If false or null the new trailer will replace all current trailer. (default to false).</param>
        public AttachResourceRequestSettings(bool attachDriverAsCoDriver = false, bool moveCurrentDriverToCoDriver = false, bool moveCoDriverToMainDriver = false, bool addTrailerAsAdditionalTrailer = false)
        {
            this.AttachDriverAsCoDriver = attachDriverAsCoDriver;
            this.MoveCurrentDriverToCoDriver = moveCurrentDriverToCoDriver;
            this.MoveCoDriverToMainDriver = moveCoDriverToMainDriver;
            this.AddTrailerAsAdditionalTrailer = addTrailerAsAdditionalTrailer;
        }

        /// <summary>
        /// Gets or sets whether the driver should be attached as co driver during the attachment process.
        /// </summary>
        /// <value>Gets or sets whether the driver should be attached as co driver during the attachment process.</value>
        [DataMember(Name = "attachDriverAsCoDriver", EmitDefaultValue = true)]
        public bool AttachDriverAsCoDriver { get; set; }

        /// <summary>
        /// Gets or sets whether the current driver should be moved to the co driver seat during attachment of a new driver.
        /// </summary>
        /// <value>Gets or sets whether the current driver should be moved to the co driver seat during attachment of a new driver.</value>
        [DataMember(Name = "moveCurrentDriverToCoDriver", EmitDefaultValue = true)]
        public bool MoveCurrentDriverToCoDriver { get; set; }

        /// <summary>
        /// Gets or sets whether the co driver should be moved to the main driver seat during attachment of a new co driver.     Only relevant when Simplic.OxS.Logistics.Server.Model.AttachResourceRequestSettings.AttachDriverAsCoDriver is set to true.  
        /// </summary>
        /// <value>Gets or sets whether the co driver should be moved to the main driver seat during attachment of a new co driver.     Only relevant when Simplic.OxS.Logistics.Server.Model.AttachResourceRequestSettings.AttachDriverAsCoDriver is set to true.  </value>
        [DataMember(Name = "moveCoDriverToMainDriver", EmitDefaultValue = true)]
        public bool MoveCoDriverToMainDriver { get; set; }

        /// <summary>
        /// Gets or sets whether the attached trailer should be added as additional trailer.   If false or null the new trailer will replace all current trailer.
        /// </summary>
        /// <value>Gets or sets whether the attached trailer should be added as additional trailer.   If false or null the new trailer will replace all current trailer.</value>
        [DataMember(Name = "addTrailerAsAdditionalTrailer", EmitDefaultValue = true)]
        public bool AddTrailerAsAdditionalTrailer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachResourceRequestSettings {\n");
            sb.Append("  AttachDriverAsCoDriver: ").Append(AttachDriverAsCoDriver).Append("\n");
            sb.Append("  MoveCurrentDriverToCoDriver: ").Append(MoveCurrentDriverToCoDriver).Append("\n");
            sb.Append("  MoveCoDriverToMainDriver: ").Append(MoveCoDriverToMainDriver).Append("\n");
            sb.Append("  AddTrailerAsAdditionalTrailer: ").Append(AddTrailerAsAdditionalTrailer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttachResourceRequestSettings);
        }

        /// <summary>
        /// Returns true if AttachResourceRequestSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AttachResourceRequestSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachResourceRequestSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AttachDriverAsCoDriver == input.AttachDriverAsCoDriver ||
                    this.AttachDriverAsCoDriver.Equals(input.AttachDriverAsCoDriver)
                ) && 
                (
                    this.MoveCurrentDriverToCoDriver == input.MoveCurrentDriverToCoDriver ||
                    this.MoveCurrentDriverToCoDriver.Equals(input.MoveCurrentDriverToCoDriver)
                ) && 
                (
                    this.MoveCoDriverToMainDriver == input.MoveCoDriverToMainDriver ||
                    this.MoveCoDriverToMainDriver.Equals(input.MoveCoDriverToMainDriver)
                ) && 
                (
                    this.AddTrailerAsAdditionalTrailer == input.AddTrailerAsAdditionalTrailer ||
                    this.AddTrailerAsAdditionalTrailer.Equals(input.AddTrailerAsAdditionalTrailer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AttachDriverAsCoDriver.GetHashCode();
                hashCode = (hashCode * 59) + this.MoveCurrentDriverToCoDriver.GetHashCode();
                hashCode = (hashCode * 59) + this.MoveCoDriverToMainDriver.GetHashCode();
                hashCode = (hashCode * 59) + this.AddTrailerAsAdditionalTrailer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
