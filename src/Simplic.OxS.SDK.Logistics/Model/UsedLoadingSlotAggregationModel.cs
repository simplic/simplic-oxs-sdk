/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Logistics.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Represents an aggregated search result for loading slots and shipments
    /// </summary>
    [DataContract(Name = "UsedLoadingSlotAggregationModel")]
    public partial class UsedLoadingSlotAggregationModel : IEquatable<UsedLoadingSlotAggregationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsedLoadingSlotAggregationModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the tour id.</param>
        /// <param name="shipment">shipment.</param>
        /// <param name="loadingSlot">loadingSlot.</param>
        public UsedLoadingSlotAggregationModel(Guid id = default(Guid), ShipmentModel shipment = default(ShipmentModel), LoadingSlotModel loadingSlot = default(LoadingSlotModel))
        {
            this.Id = id;
            this.Shipment = shipment;
            this.LoadingSlot = loadingSlot;
        }

        /// <summary>
        /// Gets or sets the tour id
        /// </summary>
        /// <value>Gets or sets the tour id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Shipment
        /// </summary>
        [DataMember(Name = "shipment", EmitDefaultValue = false)]
        public ShipmentModel Shipment { get; set; }

        /// <summary>
        /// Gets or Sets LoadingSlot
        /// </summary>
        [DataMember(Name = "loadingSlot", EmitDefaultValue = false)]
        public LoadingSlotModel LoadingSlot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsedLoadingSlotAggregationModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Shipment: ").Append(Shipment).Append("\n");
            sb.Append("  LoadingSlot: ").Append(LoadingSlot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsedLoadingSlotAggregationModel);
        }

        /// <summary>
        /// Returns true if UsedLoadingSlotAggregationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of UsedLoadingSlotAggregationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsedLoadingSlotAggregationModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Shipment == input.Shipment ||
                    (this.Shipment != null &&
                    this.Shipment.Equals(input.Shipment))
                ) && 
                (
                    this.LoadingSlot == input.LoadingSlot ||
                    (this.LoadingSlot != null &&
                    this.LoadingSlot.Equals(input.LoadingSlot))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Shipment != null)
                {
                    hashCode = (hashCode * 59) + this.Shipment.GetHashCode();
                }
                if (this.LoadingSlot != null)
                {
                    hashCode = (hashCode * 59) + this.LoadingSlot.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
