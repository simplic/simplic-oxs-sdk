// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Represents an aggregated search result for loading slots and shipments
    /// </summary>
    public partial class UsedLoadingSlotAggregationModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public UsedLoadingSlotAggregationModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsedLoadingSlotAggregationModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the tour id</param>
        /// <param name="loadingSlot">loadingSlot</param>
        /// <param name="shipment">shipment</param>
        //[JsonConstructor]
        public UsedLoadingSlotAggregationModel(Option<Guid> id = default, Option<LoadingSlotModel> loadingSlot = default, Option<ShipmentModel> shipment = default)
        {
            IdOption = id;
            LoadingSlotOption = loadingSlot;
            ShipmentOption = shipment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the tour id
        /// </summary>
        /// <value>Gets or sets the tour id</value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of LoadingSlot
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<LoadingSlotModel>))]
        public Option<LoadingSlotModel> LoadingSlotOption { get; private set; }

        /// <summary>
        /// Gets or Sets LoadingSlot
        /// </summary>
        [JsonPropertyName("loadingSlot")]
        public LoadingSlotModel? LoadingSlot { get { return this. LoadingSlotOption; } set { this.LoadingSlotOption = new Option<LoadingSlotModel>(value); } }

        /// <summary>
        /// Used to track the state of Shipment
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ShipmentModel>))]
        public Option<ShipmentModel> ShipmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Shipment
        /// </summary>
        [JsonPropertyName("shipment")]
        public ShipmentModel? Shipment { get { return this. ShipmentOption; } set { this.ShipmentOption = new Option<ShipmentModel>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsedLoadingSlotAggregationModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LoadingSlot: ").Append(LoadingSlot).Append("\n");
            sb.Append("  Shipment: ").Append(Shipment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UsedLoadingSlotAggregationModel" />
    /// </summary>
    public class UsedLoadingSlotAggregationModelJsonConverter : JsonConverter<UsedLoadingSlotAggregationModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="UsedLoadingSlotAggregationModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UsedLoadingSlotAggregationModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid> id = default;
            Option<LoadingSlotModel> loadingSlot = default;
            Option<ShipmentModel> shipment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "loadingSlot":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadingSlot = new Option<LoadingSlotModel>(JsonSerializer.Deserialize<LoadingSlotModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "shipment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shipment = new Option<ShipmentModel>(JsonSerializer.Deserialize<ShipmentModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UsedLoadingSlotAggregationModel.");

            if (loadingSlot.IsSet && loadingSlot.Value == null)
                throw new ArgumentNullException(nameof(loadingSlot), "Property is not nullable for class UsedLoadingSlotAggregationModel.");

            if (shipment.IsSet && shipment.Value == null)
                throw new ArgumentNullException(nameof(shipment), "Property is not nullable for class UsedLoadingSlotAggregationModel.");

            //2return new UsedLoadingSlotAggregationModel(id, loadingSlot, shipment);
            return new UsedLoadingSlotAggregationModel(id, loadingSlot, shipment);
        }

        /// <summary>
        /// Serializes a <see cref="UsedLoadingSlotAggregationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="usedLoadingSlotAggregationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UsedLoadingSlotAggregationModel usedLoadingSlotAggregationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, usedLoadingSlotAggregationModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UsedLoadingSlotAggregationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="usedLoadingSlotAggregationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, UsedLoadingSlotAggregationModel usedLoadingSlotAggregationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (usedLoadingSlotAggregationModel.LoadingSlotOption.IsSet && usedLoadingSlotAggregationModel.LoadingSlot == null)
                throw new ArgumentNullException(nameof(usedLoadingSlotAggregationModel.LoadingSlot), "Property is required for class UsedLoadingSlotAggregationModel.");

            if (usedLoadingSlotAggregationModel.ShipmentOption.IsSet && usedLoadingSlotAggregationModel.Shipment == null)
                throw new ArgumentNullException(nameof(usedLoadingSlotAggregationModel.Shipment), "Property is required for class UsedLoadingSlotAggregationModel.");

            if (usedLoadingSlotAggregationModel.IdOption.IsSet)
                writer.WriteString("id", usedLoadingSlotAggregationModel.IdOption!.Value);

            if (usedLoadingSlotAggregationModel.LoadingSlotOption.IsSet)
            {
                writer.WritePropertyName("loadingSlot");
                JsonSerializer.Serialize(writer, usedLoadingSlotAggregationModel.LoadingSlot, jsonSerializerOptions);
            }
            if (usedLoadingSlotAggregationModel.ShipmentOption.IsSet)
            {
                writer.WritePropertyName("shipment");
                JsonSerializer.Serialize(writer, usedLoadingSlotAggregationModel.Shipment, jsonSerializerOptions);
            }
        }
    }
}
