/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Logistics.Client.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Logistics.Model
{
    /// <summary>
    /// Server model to represent a construction site from the constructin site api.
    /// </summary>
    [DataContract(Name = "ConstructionSiteModel")]
    public partial class ConstructionSiteModel : IEquatable<ConstructionSiteModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructionSiteModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id of the construction site..</param>
        /// <param name="number">Gest or sets the number..</param>
        /// <param name="name">Gets or sets the name..</param>
        /// <param name="referenceNumber">Gets or sets the reference number..</param>
        /// <param name="startDate">Gets or sets the start data..</param>
        /// <param name="endDate">Gets or sets the end date..</param>
        /// <param name="address">address.</param>
        /// <param name="contactPerson">contactPerson.</param>
        /// <param name="constructionSiteType">constructionSiteType.</param>
        /// <param name="additionalInformation">Gets or sets additional information..</param>
        /// <param name="constructionTime">Gets or sets the construction time..</param>
        public ConstructionSiteModel(Guid id = default(Guid), string number = default(string), string name = default(string), string referenceNumber = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), Address address = default(Address), Address contactPerson = default(Address), ConstructionSiteTypeModel constructionSiteType = default(ConstructionSiteTypeModel), string additionalInformation = default(string), string constructionTime = default(string))
        {
            this.Id = id;
            this.Number = number;
            this.Name = name;
            this.ReferenceNumber = referenceNumber;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Address = address;
            this.ContactPerson = contactPerson;
            this.ConstructionSiteType = constructionSiteType;
            this.AdditionalInformation = additionalInformation;
            this.ConstructionTime = constructionTime;
        }

        /// <summary>
        /// Gets or sets the id of the construction site.
        /// </summary>
        /// <value>Gets or sets the id of the construction site.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gest or sets the number.
        /// </summary>
        /// <value>Gest or sets the number.</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the reference number.
        /// </summary>
        /// <value>Gets or sets the reference number.</value>
        [DataMember(Name = "referenceNumber", EmitDefaultValue = true)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or sets the start data.
        /// </summary>
        /// <value>Gets or sets the start data.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or sets the end date.
        /// </summary>
        /// <value>Gets or sets the end date.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets ContactPerson
        /// </summary>
        [DataMember(Name = "contactPerson", EmitDefaultValue = false)]
        public Address ContactPerson { get; set; }

        /// <summary>
        /// Gets or Sets ConstructionSiteType
        /// </summary>
        [DataMember(Name = "constructionSiteType", EmitDefaultValue = false)]
        public ConstructionSiteTypeModel ConstructionSiteType { get; set; }

        /// <summary>
        /// Gets or sets additional information.
        /// </summary>
        /// <value>Gets or sets additional information.</value>
        [DataMember(Name = "additionalInformation", EmitDefaultValue = true)]
        public string AdditionalInformation { get; set; }

        /// <summary>
        /// Gets or sets the construction time.
        /// </summary>
        /// <value>Gets or sets the construction time.</value>
        [DataMember(Name = "constructionTime", EmitDefaultValue = true)]
        public string ConstructionTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConstructionSiteModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  ConstructionSiteType: ").Append(ConstructionSiteType).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  ConstructionTime: ").Append(ConstructionTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstructionSiteModel);
        }

        /// <summary>
        /// Returns true if ConstructionSiteModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstructionSiteModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstructionSiteModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && 
                (
                    this.ConstructionSiteType == input.ConstructionSiteType ||
                    (this.ConstructionSiteType != null &&
                    this.ConstructionSiteType.Equals(input.ConstructionSiteType))
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    (this.AdditionalInformation != null &&
                    this.AdditionalInformation.Equals(input.AdditionalInformation))
                ) && 
                (
                    this.ConstructionTime == input.ConstructionTime ||
                    (this.ConstructionTime != null &&
                    this.ConstructionTime.Equals(input.ConstructionTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceNumber.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.ContactPerson != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPerson.GetHashCode();
                }
                if (this.ConstructionSiteType != null)
                {
                    hashCode = (hashCode * 59) + this.ConstructionSiteType.GetHashCode();
                }
                if (this.AdditionalInformation != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalInformation.GetHashCode();
                }
                if (this.ConstructionTime != null)
                {
                    hashCode = (hashCode * 59) + this.ConstructionTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
