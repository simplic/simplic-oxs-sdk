// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Server model to represent a construction site from the constructin site api.
    /// </summary>
    public partial class ConstructionSiteModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ConstructionSiteModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructionSiteModel" /> class.
        /// </summary>
        /// <param name="additionalInformation">Gets or sets additional information.</param>
        /// <param name="address">address</param>
        /// <param name="constructionSiteType">constructionSiteType</param>
        /// <param name="constructionTime">Gets or sets the construction time.</param>
        /// <param name="contactPerson">contactPerson</param>
        /// <param name="endDate">Gets or sets the end date.</param>
        /// <param name="id">Gets or sets the id of the construction site.</param>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="number">Gest or sets the number.</param>
        /// <param name="referenceNumber">Gets or sets the reference number.</param>
        /// <param name="startDate">Gets or sets the start data.</param>
        //[JsonConstructor]
        public ConstructionSiteModel(Option<string> additionalInformation = default, Option<Address> address = default, Option<ConstructionSiteTypeModel> constructionSiteType = default, Option<string> constructionTime = default, Option<Address> contactPerson = default, Option<DateTime> endDate = default, Option<Guid> id = default, Option<string> name = default, Option<string> number = default, Option<string> referenceNumber = default, Option<DateTime> startDate = default)
        {
            AdditionalInformationOption = additionalInformation;
            AddressOption = address;
            ConstructionSiteTypeOption = constructionSiteType;
            ConstructionTimeOption = constructionTime;
            ContactPersonOption = contactPerson;
            EndDateOption = endDate;
            IdOption = id;
            NameOption = name;
            NumberOption = number;
            ReferenceNumberOption = referenceNumber;
            StartDateOption = startDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AdditionalInformation
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> AdditionalInformationOption { get; private set; }

        /// <summary>
        /// Gets or sets additional information.
        /// </summary>
        /// <value>Gets or sets additional information.</value>
        [JsonPropertyName("additionalInformation")]
        public string? AdditionalInformation { get { return this. AdditionalInformationOption; } set { this.AdditionalInformationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Address>))]
        public Option<Address> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public Address? Address { get { return this. AddressOption; } set { this.AddressOption = new Option<Address>(value); } }

        /// <summary>
        /// Used to track the state of ConstructionSiteType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ConstructionSiteTypeModel>))]
        public Option<ConstructionSiteTypeModel> ConstructionSiteTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ConstructionSiteType
        /// </summary>
        [JsonPropertyName("constructionSiteType")]
        public ConstructionSiteTypeModel? ConstructionSiteType { get { return this. ConstructionSiteTypeOption; } set { this.ConstructionSiteTypeOption = new Option<ConstructionSiteTypeModel>(value); } }

        /// <summary>
        /// Used to track the state of ConstructionTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ConstructionTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the construction time.
        /// </summary>
        /// <value>Gets or sets the construction time.</value>
        [JsonPropertyName("constructionTime")]
        public string? ConstructionTime { get { return this. ConstructionTimeOption; } set { this.ConstructionTimeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ContactPerson
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Address>))]
        public Option<Address> ContactPersonOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContactPerson
        /// </summary>
        [JsonPropertyName("contactPerson")]
        public Address? ContactPerson { get { return this. ContactPersonOption; } set { this.ContactPersonOption = new Option<Address>(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateOption { get; private set; }

        /// <summary>
        /// Gets or sets the end date.
        /// </summary>
        /// <value>Gets or sets the end date.</value>
        [JsonPropertyName("endDate")]
        public DateTime? EndDate { get { return this. EndDateOption; } set { this.EndDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id of the construction site.
        /// </summary>
        /// <value>Gets or sets the id of the construction site.</value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gest or sets the number.
        /// </summary>
        /// <value>Gest or sets the number.</value>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReferenceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the reference number.
        /// </summary>
        /// <value>Gets or sets the reference number.</value>
        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get { return this. ReferenceNumberOption; } set { this.ReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateOption { get; private set; }

        /// <summary>
        /// Gets or sets the start data.
        /// </summary>
        /// <value>Gets or sets the start data.</value>
        [JsonPropertyName("startDate")]
        public DateTime? StartDate { get { return this. StartDateOption; } set { this.StartDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConstructionSiteModel {\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ConstructionSiteType: ").Append(ConstructionSiteType).Append("\n");
            sb.Append("  ConstructionTime: ").Append(ConstructionTime).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConstructionSiteModel" />
    /// </summary>
    public class ConstructionSiteModelJsonConverter : JsonConverter<ConstructionSiteModel>
    {
        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ConstructionSiteModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ConstructionSiteModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> additionalInformation = default;
            Option<Address> address = default;
            Option<ConstructionSiteTypeModel> constructionSiteType = default;
            Option<string> constructionTime = default;
            Option<Address> contactPerson = default;
            Option<DateTime> endDate = default;
            Option<Guid> id = default;
            Option<string> name = default;
            Option<string> number = default;
            Option<string> referenceNumber = default;
            Option<DateTime> startDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "additionalInformation":
                            additionalInformation = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                address = new Option<Address>(JsonSerializer.Deserialize<Address>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "constructionSiteType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                constructionSiteType = new Option<ConstructionSiteTypeModel>(JsonSerializer.Deserialize<ConstructionSiteTypeModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "constructionTime":
                            constructionTime = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contactPerson":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactPerson = new Option<Address>(JsonSerializer.Deserialize<Address>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "referenceNumber":
                            referenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "startDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class ConstructionSiteModel.");

            if (constructionSiteType.IsSet && constructionSiteType.Value == null)
                throw new ArgumentNullException(nameof(constructionSiteType), "Property is not nullable for class ConstructionSiteModel.");

            if (contactPerson.IsSet && contactPerson.Value == null)
                throw new ArgumentNullException(nameof(contactPerson), "Property is not nullable for class ConstructionSiteModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ConstructionSiteModel.");

            //2return new ConstructionSiteModel(additionalInformation, address, constructionSiteType, constructionTime, contactPerson, endDate, id, name, number, referenceNumber, startDate);
            return new ConstructionSiteModel(additionalInformation, address, constructionSiteType, constructionTime, contactPerson, endDate, id, name, number, referenceNumber, startDate);
        }

        /// <summary>
        /// Serializes a <see cref="ConstructionSiteModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constructionSiteModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ConstructionSiteModel constructionSiteModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, constructionSiteModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ConstructionSiteModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="constructionSiteModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ConstructionSiteModel constructionSiteModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (constructionSiteModel.AddressOption.IsSet && constructionSiteModel.Address == null)
                throw new ArgumentNullException(nameof(constructionSiteModel.Address), "Property is required for class ConstructionSiteModel.");

            if (constructionSiteModel.ConstructionSiteTypeOption.IsSet && constructionSiteModel.ConstructionSiteType == null)
                throw new ArgumentNullException(nameof(constructionSiteModel.ConstructionSiteType), "Property is required for class ConstructionSiteModel.");

            if (constructionSiteModel.ContactPersonOption.IsSet && constructionSiteModel.ContactPerson == null)
                throw new ArgumentNullException(nameof(constructionSiteModel.ContactPerson), "Property is required for class ConstructionSiteModel.");

            if (constructionSiteModel.AdditionalInformationOption.IsSet)
                if (constructionSiteModel.AdditionalInformationOption.Value != null)
                {
                    writer.WriteString("additionalInformation", constructionSiteModel.AdditionalInformation);
                    //var __value = constructionSiteModel.AdditionalInformationOption.Value;
                    //writer.WriteString("additionalInformation", __value);
                }
                else
                    writer.WriteNull("additionalInformation");

            if (constructionSiteModel.AddressOption.IsSet)
            {
                writer.WritePropertyName("address");
                JsonSerializer.Serialize(writer, constructionSiteModel.Address, jsonSerializerOptions);
            }
            if (constructionSiteModel.ConstructionSiteTypeOption.IsSet)
            {
                writer.WritePropertyName("constructionSiteType");
                JsonSerializer.Serialize(writer, constructionSiteModel.ConstructionSiteType, jsonSerializerOptions);
            }
            if (constructionSiteModel.ConstructionTimeOption.IsSet)
                if (constructionSiteModel.ConstructionTimeOption.Value != null)
                {
                    writer.WriteString("constructionTime", constructionSiteModel.ConstructionTime);
                    //var __value = constructionSiteModel.ConstructionTimeOption.Value;
                    //writer.WriteString("constructionTime", __value);
                }
                else
                    writer.WriteNull("constructionTime");

            if (constructionSiteModel.ContactPersonOption.IsSet)
            {
                writer.WritePropertyName("contactPerson");
                JsonSerializer.Serialize(writer, constructionSiteModel.ContactPerson, jsonSerializerOptions);
            }
            if (constructionSiteModel.EndDateOption.IsSet)
                if (constructionSiteModel.EndDateOption.Value != null)
                {
                    writer.WriteString("endDate", constructionSiteModel.EndDateOption!.Value.ToString(EndDateFormat));
                    //var __value = constructionSiteModel.EndDateOption.Value;
                    //writer.WriteString("endDate", __value);
                }
                else
                    writer.WriteNull("endDate");

            if (constructionSiteModel.IdOption.IsSet)
                writer.WriteString("id", constructionSiteModel.IdOption!.Value);

            if (constructionSiteModel.NameOption.IsSet)
                if (constructionSiteModel.NameOption.Value != null)
                {
                    writer.WriteString("name", constructionSiteModel.Name);
                    //var __value = constructionSiteModel.NameOption.Value;
                    //writer.WriteString("name", __value);
                }
                else
                    writer.WriteNull("name");

            if (constructionSiteModel.NumberOption.IsSet)
                if (constructionSiteModel.NumberOption.Value != null)
                {
                    writer.WriteString("number", constructionSiteModel.Number);
                    //var __value = constructionSiteModel.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (constructionSiteModel.ReferenceNumberOption.IsSet)
                if (constructionSiteModel.ReferenceNumberOption.Value != null)
                {
                    writer.WriteString("referenceNumber", constructionSiteModel.ReferenceNumber);
                    //var __value = constructionSiteModel.ReferenceNumberOption.Value;
                    //writer.WriteString("referenceNumber", __value);
                }
                else
                    writer.WriteNull("referenceNumber");

            if (constructionSiteModel.StartDateOption.IsSet)
                if (constructionSiteModel.StartDateOption.Value != null)
                {
                    writer.WriteString("startDate", constructionSiteModel.StartDateOption!.Value.ToString(StartDateFormat));
                    //var __value = constructionSiteModel.StartDateOption.Value;
                    //writer.WriteString("startDate", __value);
                }
                else
                    writer.WriteNull("startDate");
        }
    }
}
