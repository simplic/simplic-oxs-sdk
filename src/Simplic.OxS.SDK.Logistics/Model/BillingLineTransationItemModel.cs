// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of billing line transaction.
    /// </summary>
    public partial class BillingLineTransationItemModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public BillingLineTransationItemModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingLineTransationItemModel" /> class.
        /// </summary>
        /// <param name="createDateTime">Gets or sets the create date time.  &lt;br&gt;  Represents the create date and time of the transaction.  </param>
        /// <param name="number">Gets or sets the transaction number.  &lt;br&gt;  This represents the number of a transaction, which is a human readable number to represent the transaction.  </param>
        /// <param name="quantity">quantity</param>
        /// <param name="singlePrice">Gets or sets the single price.  &lt;br&gt;  Represents the single price of the transaction item.  </param>
        /// <param name="subtypeName">Gets or sets the subtype name.  &lt;br&gt;  Represents the name of the subtype of the transaction.  </param>
        /// <param name="totalPrice">Gets or sets the total price.  &lt;br&gt;  Represents the total price of a transaction item.  </param>
        /// <param name="transactionId">Gets or sets the transaction id.  &lt;br&gt;  This represents the unique identifier of a Simplic.Erp.Transaction.  </param>
        /// <param name="transactionItemId">Gets or sets the transaction item id.  &lt;br&gt;  This represents the unique identifier fo a Simplic.Erp.TransactionItem.  </param>
        /// <param name="typeName">Gets or sets the type name.  &lt;br&gt;  Represents the name of the type of the transaction.  </param>
        //[JsonConstructor]
        public BillingLineTransationItemModel(Option<DateTime> createDateTime = default, Option<string> number = default, Option<QuantityModel> quantity = default, Option<double> singlePrice = default, Option<string> subtypeName = default, Option<double> totalPrice = default, Option<Guid> transactionId = default, Option<Guid> transactionItemId = default, Option<string> typeName = default)
        {
            CreateDateTimeOption = createDateTime;
            NumberOption = number;
            QuantityOption = quantity;
            SinglePriceOption = singlePrice;
            SubtypeNameOption = subtypeName;
            TotalPriceOption = totalPrice;
            TransactionIdOption = transactionId;
            TransactionItemIdOption = transactionItemId;
            TypeNameOption = typeName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the create date time.  &lt;br&gt;  Represents the create date and time of the transaction.  
        /// </summary>
        /// <value>Gets or sets the create date time.  &lt;br&gt;  Represents the create date and time of the transaction.  </value>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the transaction number.  &lt;br&gt;  This represents the number of a transaction, which is a human readable number to represent the transaction.  
        /// </summary>
        /// <value>Gets or sets the transaction number.  &lt;br&gt;  This represents the number of a transaction, which is a human readable number to represent the transaction.  </value>
        [JsonPropertyName("number")]
        public string? Number { get { return this. NumberOption; } set { this.NumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<QuantityModel>))]
        public Option<QuantityModel> QuantityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public QuantityModel? Quantity { get { return this. QuantityOption; } set { this.QuantityOption = new Option<QuantityModel>(value); } }

        /// <summary>
        /// Used to track the state of SinglePrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> SinglePriceOption { get; private set; }

        /// <summary>
        /// Gets or sets the single price.  &lt;br&gt;  Represents the single price of the transaction item.  
        /// </summary>
        /// <value>Gets or sets the single price.  &lt;br&gt;  Represents the single price of the transaction item.  </value>
        [JsonPropertyName("singlePrice")]
        public double? SinglePrice { get { return this. SinglePriceOption; } set { this.SinglePriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of SubtypeName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> SubtypeNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the subtype name.  &lt;br&gt;  Represents the name of the subtype of the transaction.  
        /// </summary>
        /// <value>Gets or sets the subtype name.  &lt;br&gt;  Represents the name of the subtype of the transaction.  </value>
        [JsonPropertyName("subtypeName")]
        public string? SubtypeName { get { return this. SubtypeNameOption; } set { this.SubtypeNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TotalPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<double>))]
        public Option<double> TotalPriceOption { get; private set; }

        /// <summary>
        /// Gets or sets the total price.  &lt;br&gt;  Represents the total price of a transaction item.  
        /// </summary>
        /// <value>Gets or sets the total price.  &lt;br&gt;  Represents the total price of a transaction item.  </value>
        [JsonPropertyName("totalPrice")]
        public double? TotalPrice { get { return this. TotalPriceOption; } set { this.TotalPriceOption = new Option<double>(value); } }

        /// <summary>
        /// Used to track the state of TransactionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TransactionIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the transaction id.  &lt;br&gt;  This represents the unique identifier of a Simplic.Erp.Transaction.  
        /// </summary>
        /// <value>Gets or sets the transaction id.  &lt;br&gt;  This represents the unique identifier of a Simplic.Erp.Transaction.  </value>
        [JsonPropertyName("transactionId")]
        public Guid? TransactionId { get { return this. TransactionIdOption; } set { this.TransactionIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of TransactionItemId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> TransactionItemIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the transaction item id.  &lt;br&gt;  This represents the unique identifier fo a Simplic.Erp.TransactionItem.  
        /// </summary>
        /// <value>Gets or sets the transaction item id.  &lt;br&gt;  This represents the unique identifier fo a Simplic.Erp.TransactionItem.  </value>
        [JsonPropertyName("transactionItemId")]
        public Guid? TransactionItemId { get { return this. TransactionItemIdOption; } set { this.TransactionItemIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of TypeName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TypeNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the type name.  &lt;br&gt;  Represents the name of the type of the transaction.  
        /// </summary>
        /// <value>Gets or sets the type name.  &lt;br&gt;  Represents the name of the type of the transaction.  </value>
        [JsonPropertyName("typeName")]
        public string? TypeName { get { return this. TypeNameOption; } set { this.TypeNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BillingLineTransationItemModel {\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SinglePrice: ").Append(SinglePrice).Append("\n");
            sb.Append("  SubtypeName: ").Append(SubtypeName).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  TransactionItemId: ").Append(TransactionItemId).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BillingLineTransationItemModel" />
    /// </summary>
    public class BillingLineTransationItemModelJsonConverter : JsonConverter<BillingLineTransationItemModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BillingLineTransationItemModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BillingLineTransationItemModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> createDateTime = default;
            Option<string> number = default;
            Option<QuantityModel> quantity = default;
            Option<double> singlePrice = default;
            Option<string> subtypeName = default;
            Option<double> totalPrice = default;
            Option<Guid> transactionId = default;
            Option<Guid> transactionItemId = default;
            Option<string> typeName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "number":
                            number = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<QuantityModel>(JsonSerializer.Deserialize<QuantityModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "singlePrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                singlePrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "subtypeName":
                            subtypeName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "totalPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPrice = new Option<double>(utf8JsonReader.GetDouble());
                            break;
                        case "transactionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transactionId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "transactionItemId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transactionItemId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "typeName":
                            typeName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class BillingLineTransationItemModel.");

            if (quantity.IsSet && quantity.Value == null)
                throw new ArgumentNullException(nameof(quantity), "Property is not nullable for class BillingLineTransationItemModel.");

            if (singlePrice.IsSet && singlePrice.Value == null)
                throw new ArgumentNullException(nameof(singlePrice), "Property is not nullable for class BillingLineTransationItemModel.");

            if (totalPrice.IsSet && totalPrice.Value == null)
                throw new ArgumentNullException(nameof(totalPrice), "Property is not nullable for class BillingLineTransationItemModel.");

            if (transactionId.IsSet && transactionId.Value == null)
                throw new ArgumentNullException(nameof(transactionId), "Property is not nullable for class BillingLineTransationItemModel.");

            if (transactionItemId.IsSet && transactionItemId.Value == null)
                throw new ArgumentNullException(nameof(transactionItemId), "Property is not nullable for class BillingLineTransationItemModel.");

            //2return new BillingLineTransationItemModel(createDateTime, number, quantity, singlePrice, subtypeName, totalPrice, transactionId, transactionItemId, typeName);
            return new BillingLineTransationItemModel(createDateTime, number, quantity, singlePrice, subtypeName, totalPrice, transactionId, transactionItemId, typeName);
        }

        /// <summary>
        /// Serializes a <see cref="BillingLineTransationItemModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billingLineTransationItemModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BillingLineTransationItemModel billingLineTransationItemModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, billingLineTransationItemModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BillingLineTransationItemModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billingLineTransationItemModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, BillingLineTransationItemModel billingLineTransationItemModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (billingLineTransationItemModel.QuantityOption.IsSet && billingLineTransationItemModel.Quantity == null)
                throw new ArgumentNullException(nameof(billingLineTransationItemModel.Quantity), "Property is required for class BillingLineTransationItemModel.");

            if (billingLineTransationItemModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", billingLineTransationItemModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (billingLineTransationItemModel.NumberOption.IsSet)
                if (billingLineTransationItemModel.NumberOption.Value != null)
                {
                    writer.WriteString("number", billingLineTransationItemModel.Number);
                    //var __value = billingLineTransationItemModel.NumberOption.Value;
                    //writer.WriteString("number", __value);
                }
                else
                    writer.WriteNull("number");

            if (billingLineTransationItemModel.QuantityOption.IsSet)
            {
                writer.WritePropertyName("quantity");
                JsonSerializer.Serialize(writer, billingLineTransationItemModel.Quantity, jsonSerializerOptions);
            }
            if (billingLineTransationItemModel.SinglePriceOption.IsSet)
                writer.WriteNumber("singlePrice", billingLineTransationItemModel.SinglePriceOption!.Value);

            if (billingLineTransationItemModel.SubtypeNameOption.IsSet)
                if (billingLineTransationItemModel.SubtypeNameOption.Value != null)
                {
                    writer.WriteString("subtypeName", billingLineTransationItemModel.SubtypeName);
                    //var __value = billingLineTransationItemModel.SubtypeNameOption.Value;
                    //writer.WriteString("subtypeName", __value);
                }
                else
                    writer.WriteNull("subtypeName");

            if (billingLineTransationItemModel.TotalPriceOption.IsSet)
                writer.WriteNumber("totalPrice", billingLineTransationItemModel.TotalPriceOption!.Value);

            if (billingLineTransationItemModel.TransactionIdOption.IsSet)
                writer.WriteString("transactionId", billingLineTransationItemModel.TransactionIdOption!.Value);

            if (billingLineTransationItemModel.TransactionItemIdOption.IsSet)
                writer.WriteString("transactionItemId", billingLineTransationItemModel.TransactionItemIdOption!.Value);

            if (billingLineTransationItemModel.TypeNameOption.IsSet)
                if (billingLineTransationItemModel.TypeNameOption.Value != null)
                {
                    writer.WriteString("typeName", billingLineTransationItemModel.TypeName);
                    //var __value = billingLineTransationItemModel.TypeNameOption.Value;
                    //writer.WriteString("typeName", __value);
                }
                else
                    writer.WriteNull("typeName");
        }
    }
}
