/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Response for a request that returns a composed resource.
    /// </summary>
    [DataContract(Name = "GetComposedResourceResponse")]
    public partial class GetComposedResourceResponse : IEquatable<GetComposedResourceResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetComposedResourceResponse" /> class.
        /// </summary>
        /// <param name="id">Gets or setsthe id of the composed resource..</param>
        /// <param name="tractorUnit">tractorUnit.</param>
        /// <param name="trailer">Gets or sets the trailer of a composed resource.     Usually only a single trailer will be added, but when attaching a trailer it should have an option to add   another one.  .</param>
        /// <param name="mainDriver">mainDriver.</param>
        /// <param name="coDriver">coDriver.</param>
        /// <param name="location">location.</param>
        /// <param name="latestMessage">latestMessage.</param>
        public GetComposedResourceResponse(Guid id = default(Guid), GetComposedTractorUnitResponse tractorUnit = default(GetComposedTractorUnitResponse), List<GetComposedTrailerResponse> trailer = default(List<GetComposedTrailerResponse>), GetComposedDriverResponse mainDriver = default(GetComposedDriverResponse), GetComposedDriverResponse coDriver = default(GetComposedDriverResponse), GetComposedLocationResponse location = default(GetComposedLocationResponse), GetComposedMessageResponse latestMessage = default(GetComposedMessageResponse))
        {
            this.Id = id;
            this.TractorUnit = tractorUnit;
            this.Trailer = trailer;
            this.MainDriver = mainDriver;
            this.CoDriver = coDriver;
            this.Location = location;
            this.LatestMessage = latestMessage;
        }

        /// <summary>
        /// Gets or setsthe id of the composed resource.
        /// </summary>
        /// <value>Gets or setsthe id of the composed resource.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets TractorUnit
        /// </summary>
        [DataMember(Name = "tractorUnit", EmitDefaultValue = false)]
        public GetComposedTractorUnitResponse TractorUnit { get; set; }

        /// <summary>
        /// Gets or sets the trailer of a composed resource.     Usually only a single trailer will be added, but when attaching a trailer it should have an option to add   another one.  
        /// </summary>
        /// <value>Gets or sets the trailer of a composed resource.     Usually only a single trailer will be added, but when attaching a trailer it should have an option to add   another one.  </value>
        [DataMember(Name = "trailer", EmitDefaultValue = true)]
        public List<GetComposedTrailerResponse> Trailer { get; set; }

        /// <summary>
        /// Gets or Sets MainDriver
        /// </summary>
        [DataMember(Name = "mainDriver", EmitDefaultValue = false)]
        public GetComposedDriverResponse MainDriver { get; set; }

        /// <summary>
        /// Gets or Sets CoDriver
        /// </summary>
        [DataMember(Name = "coDriver", EmitDefaultValue = false)]
        public GetComposedDriverResponse CoDriver { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public GetComposedLocationResponse Location { get; set; }

        /// <summary>
        /// Gets or Sets LatestMessage
        /// </summary>
        [DataMember(Name = "latestMessage", EmitDefaultValue = false)]
        public GetComposedMessageResponse LatestMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetComposedResourceResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TractorUnit: ").Append(TractorUnit).Append("\n");
            sb.Append("  Trailer: ").Append(Trailer).Append("\n");
            sb.Append("  MainDriver: ").Append(MainDriver).Append("\n");
            sb.Append("  CoDriver: ").Append(CoDriver).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LatestMessage: ").Append(LatestMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetComposedResourceResponse);
        }

        /// <summary>
        /// Returns true if GetComposedResourceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetComposedResourceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetComposedResourceResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TractorUnit == input.TractorUnit ||
                    (this.TractorUnit != null &&
                    this.TractorUnit.Equals(input.TractorUnit))
                ) && 
                (
                    this.Trailer == input.Trailer ||
                    this.Trailer != null &&
                    input.Trailer != null &&
                    this.Trailer.SequenceEqual(input.Trailer)
                ) && 
                (
                    this.MainDriver == input.MainDriver ||
                    (this.MainDriver != null &&
                    this.MainDriver.Equals(input.MainDriver))
                ) && 
                (
                    this.CoDriver == input.CoDriver ||
                    (this.CoDriver != null &&
                    this.CoDriver.Equals(input.CoDriver))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.LatestMessage == input.LatestMessage ||
                    (this.LatestMessage != null &&
                    this.LatestMessage.Equals(input.LatestMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TractorUnit != null)
                {
                    hashCode = (hashCode * 59) + this.TractorUnit.GetHashCode();
                }
                if (this.Trailer != null)
                {
                    hashCode = (hashCode * 59) + this.Trailer.GetHashCode();
                }
                if (this.MainDriver != null)
                {
                    hashCode = (hashCode * 59) + this.MainDriver.GetHashCode();
                }
                if (this.CoDriver != null)
                {
                    hashCode = (hashCode * 59) + this.CoDriver.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.LatestMessage != null)
                {
                    hashCode = (hashCode * 59) + this.LatestMessage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
