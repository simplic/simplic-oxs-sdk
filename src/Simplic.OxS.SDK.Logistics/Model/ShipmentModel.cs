// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Shared model of shipment.
    /// </summary>
    public partial class ShipmentModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ShipmentModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentModel" /> class.
        /// </summary>
        /// <param name="actualDeliveryEnd">Gets or sets the actual delivery end with date and time.  &lt;br&gt;  This defines the actual end of the delivery / unlaoding process.    This will usually be set by an api based on telematics data.</param>
        /// <param name="actualDeliveryStart">Gets or sets the actual delivery start with date and time.  &lt;br&gt;  This defines the actual start of the delivery / unlaoding process.    This will usually be set by an api based on telematics data.</param>
        /// <param name="actualLoadEnd">Gets or sets the actual load end with date and time.  &lt;br&gt;  This will define the actual end of the loading process.    This will usually be set by an api based on the data given by the telematics</param>
        /// <param name="actualLoadStart">Gets or sets the actual laod start with date and time.  &lt;br&gt;  This will define the actual start of the loading process.    This will usually be set by an api based on the data given by the telematics.</param>
        /// <param name="addon">Gets or sets a dictionary of addon properties.  &lt;br&gt;  Can be used to set customer exclusive properties for a shipment.  </param>
        /// <param name="calculatedDeliveryEnd">Gets or sets the calculated delivery end with date and time.  &lt;br&gt;  This defines the calculated end of the delivery / unlaoding process.    This will usually be set by an api based on telematics data.</param>
        /// <param name="calculatedDeliveryStart">Gets or sets the calculated delivery start with date and time.  &lt;br&gt;  This defines the calculated start of the delivery / unlaoding process.    This will usually be set by an api based on telematics data.</param>
        /// <param name="calculatedLoadEnd">Gets or sets the calculated load end with date and time.  &lt;br&gt;  This will define the calculated / theoretical end of the laoding process.    This will usually be set by an api based on data given by the telematics.</param>
        /// <param name="calculatedLoadStart">Gets or sets the calculated load start with date and time.  &lt;br&gt;  This will define the calculated / theoretical start of the loading process.    This will usually be set by an api based on data given by the telematics.</param>
        /// <param name="carrier">carrier</param>
        /// <param name="constructionSite">constructionSite</param>
        /// <param name="createDateTime">Gets or sets the create date time  &lt;br&gt;  This defines the point of time the shipment is created.  </param>
        /// <param name="createUserId">Gets or sets the create user id.  &lt;br&gt;  This is the user that created the shipment.  </param>
        /// <param name="customer">customer</param>
        /// <param name="deliveryAddress">deliveryAddress</param>
        /// <param name="deliveryEnd">Gets or sets the delivery time slot end with date and time.  &lt;br&gt;  This will define the end of the time range when the driver could deliver the shipment.    This will usually be set by the user or an api based on the values he gets from the customer.</param>
        /// <param name="deliveryNumber">Gets or sets the delivery number.  &lt;br&gt;  This defines a number that the driber might need to deliver / unload this shipment.  </param>
        /// <param name="deliveryStart">Gets or sets the delivery time slot start with date and time.  &lt;br&gt;  This will define the start of the time range when the driver could deliver the shipment.    This will usually be set by the user or an api based on the values he gets from the customer.</param>
        /// <param name="deliveryTimeType">deliveryTimeType</param>
        /// <param name="deliveryWorkflow">deliveryWorkflow</param>
        /// <param name="documents">Gets or sets the documments.  &lt;br&gt;  These documents contain more information that just the shipment.   E.g. the shipment item id or weight note id.    Furthermore documents might be marked for invoices and ordered for them.</param>
        /// <param name="freightPayer">freightPayer</param>
        /// <param name="id">Gets or sets the id.</param>
        /// <param name="invoiceRecipient">invoiceRecipient</param>
        /// <param name="isDeleted">Gets or sets whether the shipment is deleted.</param>
        /// <param name="isTemplate">Gets or sets werther the shipment is a template.  &lt;br&gt;  Template shipments are used to create shipments with certain values preset.  </param>
        /// <param name="items">Gets or sets shipment items.  &lt;br&gt;  Represents a list of items of a shipment which will contain further information about the freight.  </param>
        /// <param name="loadAddress">loadAddress</param>
        /// <param name="loadEnd">Gets or sets the load time slot end with date and time.  &lt;br&gt;  This will define the end of the time range the driver could end the loading process.    This will usually be set by the user or an api based on the values he gets from the customer.</param>
        /// <param name="loadNumber">Gets or sets the load number.  &lt;br&gt;  This defines a number that the driver might need to load this shipment  </param>
        /// <param name="loadStart">Gets or sets the load time slot start with date and time  &lt;br&gt;  This will define the start of the time range the driver could start the loading process.    This will usually be set by the user or an api based on the values he gets from customer.</param>
        /// <param name="loadWorkflow">loadWorkflow</param>
        /// <param name="loadingTimeType">loadingTimeType</param>
        /// <param name="notes">Gets or sets the nots.  &lt;br&gt;  This gives the user the possibillity to add some more sentences about this shipment.  </param>
        /// <param name="orderDate">Gets or sets the order date.  &lt;br&gt;  This defines the date the shipment is ordered at.  This is a relevant information for the billing process and needs to be set.  </param>
        /// <param name="plannedDeliveryEnd">Gets or sets the planned delivery end with date and time.  &lt;br&gt;  This defines the planned end off the delivery / unlaoding process.    This will usually be set by the user based on his dayplan of the resource.</param>
        /// <param name="plannedDeliveryStart">Gets or sets the planned delivery start with date and time.  &lt;br&gt;  This defines the planned start of the delivery / unloading process.    This will usually be set by the user based on his dayplan of the resource.</param>
        /// <param name="plannedLoadEnd">Gets or sets the planned load end with date and time.  &lt;br&gt;  This will define the planned end of the loading process.    This will usually be set by the user based on his dayplan for the resource.</param>
        /// <param name="plannedLoadStart">Gets or sets the planned laod start with date and time.  &lt;br&gt;  This will define the planned start of the loading process.    This will usually be set by the user based on his dayplan for the resource.</param>
        /// <param name="recipientAddress">recipientAddress</param>
        /// <param name="referenceNumber">Gets or sets the reference number  &lt;br&gt;  This defines a number that references the same shipment in another programm or context.  </param>
        /// <param name="senderAddress">senderAddress</param>
        /// <param name="shipmentNumber">Gets or sets the shipment number.  &lt;br&gt;  This defines a number to identify the shipment as the user.  </param>
        /// <param name="status">status</param>
        /// <param name="supplier">supplier</param>
        /// <param name="tags">Gets or sets the tags.  &lt;br&gt;  Tags are short texts to add information to a shipment without the need to add new properties.    These are e.g. used in the pricing module to add some additional conditions.</param>
        /// <param name="templateName">Gets or sets the template name.  &lt;br&gt;  A name for the template to give the user the option to find it easier  </param>
        /// <param name="tours">Gets or sets a list of tour shipments.  &lt;br&gt;  This collection will be filled when creating or updating tour objects.  </param>
        /// <param name="transportOrder">transportOrder</param>
        /// <param name="updateDateTime">Get or sets the update date time.  &lt;br&gt;  This defines the last point of time the shipment was updated.  </param>
        /// <param name="updateUserId">Gets or sets the update user id.  &lt;br&gt;  This defines the user which made the last changes to the shipment.  </param>
        //[JsonConstructor]
        public ShipmentModel(Option<DateTime> actualDeliveryEnd = default, Option<DateTime> actualDeliveryStart = default, Option<DateTime> actualLoadEnd = default, Option<DateTime> actualLoadStart = default, Option<Dictionary<string, Object>> addon = default, Option<DateTime> calculatedDeliveryEnd = default, Option<DateTime> calculatedDeliveryStart = default, Option<DateTime> calculatedLoadEnd = default, Option<DateTime> calculatedLoadStart = default, Option<BillableContactModel> carrier = default, Option<ConstructionSiteModel> constructionSite = default, Option<DateTime> createDateTime = default, Option<Guid> createUserId = default, Option<BillableContactModel> customer = default, Option<AddressModel> deliveryAddress = default, Option<DateTime> deliveryEnd = default, Option<string> deliveryNumber = default, Option<DateTime> deliveryStart = default, Option<LoadingDateTimeType> deliveryTimeType = default, Option<ShipmentTelematicWorkflowModel> deliveryWorkflow = default, Option<List<ShipmentDocumentModel>> documents = default, Option<BillableContactModel> freightPayer = default, Option<Guid> id = default, Option<BillableContactModel> invoiceRecipient = default, Option<bool> isDeleted = default, Option<bool> isTemplate = default, Option<List<ShipmentItemModel>> items = default, Option<AddressModel> loadAddress = default, Option<DateTime> loadEnd = default, Option<string> loadNumber = default, Option<DateTime> loadStart = default, Option<ShipmentTelematicWorkflowModel> loadWorkflow = default, Option<LoadingDateTimeType> loadingTimeType = default, Option<string> notes = default, Option<DateTime> orderDate = default, Option<DateTime> plannedDeliveryEnd = default, Option<DateTime> plannedDeliveryStart = default, Option<DateTime> plannedLoadEnd = default, Option<DateTime> plannedLoadStart = default, Option<AddressModel> recipientAddress = default, Option<string> referenceNumber = default, Option<AddressModel> senderAddress = default, Option<string> shipmentNumber = default, Option<ShipmentStatusModel> status = default, Option<BillableContactModel> supplier = default, Option<List<ShipmentTagModel>> tags = default, Option<string> templateName = default, Option<List<ShipmentTourModel>> tours = default, Option<ShipmentTransportOrderModel> transportOrder = default, Option<DateTime> updateDateTime = default, Option<Guid> updateUserId = default)
        {
            ActualDeliveryEndOption = actualDeliveryEnd;
            ActualDeliveryStartOption = actualDeliveryStart;
            ActualLoadEndOption = actualLoadEnd;
            ActualLoadStartOption = actualLoadStart;
            AddonOption = addon;
            CalculatedDeliveryEndOption = calculatedDeliveryEnd;
            CalculatedDeliveryStartOption = calculatedDeliveryStart;
            CalculatedLoadEndOption = calculatedLoadEnd;
            CalculatedLoadStartOption = calculatedLoadStart;
            CarrierOption = carrier;
            ConstructionSiteOption = constructionSite;
            CreateDateTimeOption = createDateTime;
            CreateUserIdOption = createUserId;
            CustomerOption = customer;
            DeliveryAddressOption = deliveryAddress;
            DeliveryEndOption = deliveryEnd;
            DeliveryNumberOption = deliveryNumber;
            DeliveryStartOption = deliveryStart;
            DeliveryTimeTypeOption = deliveryTimeType;
            DeliveryWorkflowOption = deliveryWorkflow;
            DocumentsOption = documents;
            FreightPayerOption = freightPayer;
            IdOption = id;
            InvoiceRecipientOption = invoiceRecipient;
            IsDeletedOption = isDeleted;
            IsTemplateOption = isTemplate;
            ItemsOption = items;
            LoadAddressOption = loadAddress;
            LoadEndOption = loadEnd;
            LoadNumberOption = loadNumber;
            LoadStartOption = loadStart;
            LoadWorkflowOption = loadWorkflow;
            LoadingTimeTypeOption = loadingTimeType;
            NotesOption = notes;
            OrderDateOption = orderDate;
            PlannedDeliveryEndOption = plannedDeliveryEnd;
            PlannedDeliveryStartOption = plannedDeliveryStart;
            PlannedLoadEndOption = plannedLoadEnd;
            PlannedLoadStartOption = plannedLoadStart;
            RecipientAddressOption = recipientAddress;
            ReferenceNumberOption = referenceNumber;
            SenderAddressOption = senderAddress;
            ShipmentNumberOption = shipmentNumber;
            StatusOption = status;
            SupplierOption = supplier;
            TagsOption = tags;
            TemplateNameOption = templateName;
            ToursOption = tours;
            TransportOrderOption = transportOrder;
            UpdateDateTimeOption = updateDateTime;
            UpdateUserIdOption = updateUserId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DeliveryTimeType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<LoadingDateTimeType>))]
        public Option<LoadingDateTimeType> DeliveryTimeTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryTimeType
        /// </summary>
        [JsonPropertyName("deliveryTimeType")]
        public LoadingDateTimeType? DeliveryTimeType { get { return this.DeliveryTimeTypeOption; } set { this.DeliveryTimeTypeOption = new Option<LoadingDateTimeType>(value); } }

        /// <summary>
        /// Used to track the state of LoadingTimeType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<LoadingDateTimeType>))]
        public Option<LoadingDateTimeType> LoadingTimeTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets LoadingTimeType
        /// </summary>
        [JsonPropertyName("loadingTimeType")]
        public LoadingDateTimeType? LoadingTimeType { get { return this.LoadingTimeTypeOption; } set { this.LoadingTimeTypeOption = new Option<LoadingDateTimeType>(value); } }

        /// <summary>
        /// Used to track the state of ActualDeliveryEnd
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ActualDeliveryEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual delivery end with date and time.  &lt;br&gt;  This defines the actual end of the delivery / unlaoding process.    This will usually be set by an api based on telematics data.
        /// </summary>
        /// <value>Gets or sets the actual delivery end with date and time.  &lt;br&gt;  This defines the actual end of the delivery / unlaoding process.    This will usually be set by an api based on telematics data.</value>
        [JsonPropertyName("actualDeliveryEnd")]
        public DateTime? ActualDeliveryEnd { get { return this. ActualDeliveryEndOption; } set { this.ActualDeliveryEndOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of ActualDeliveryStart
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ActualDeliveryStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual delivery start with date and time.  &lt;br&gt;  This defines the actual start of the delivery / unlaoding process.    This will usually be set by an api based on telematics data.
        /// </summary>
        /// <value>Gets or sets the actual delivery start with date and time.  &lt;br&gt;  This defines the actual start of the delivery / unlaoding process.    This will usually be set by an api based on telematics data.</value>
        [JsonPropertyName("actualDeliveryStart")]
        public DateTime? ActualDeliveryStart { get { return this. ActualDeliveryStartOption; } set { this.ActualDeliveryStartOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of ActualLoadEnd
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ActualLoadEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual load end with date and time.  &lt;br&gt;  This will define the actual end of the loading process.    This will usually be set by an api based on the data given by the telematics
        /// </summary>
        /// <value>Gets or sets the actual load end with date and time.  &lt;br&gt;  This will define the actual end of the loading process.    This will usually be set by an api based on the data given by the telematics</value>
        [JsonPropertyName("actualLoadEnd")]
        public DateTime? ActualLoadEnd { get { return this. ActualLoadEndOption; } set { this.ActualLoadEndOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of ActualLoadStart
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ActualLoadStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the actual laod start with date and time.  &lt;br&gt;  This will define the actual start of the loading process.    This will usually be set by an api based on the data given by the telematics.
        /// </summary>
        /// <value>Gets or sets the actual laod start with date and time.  &lt;br&gt;  This will define the actual start of the loading process.    This will usually be set by an api based on the data given by the telematics.</value>
        [JsonPropertyName("actualLoadStart")]
        public DateTime? ActualLoadStart { get { return this. ActualLoadStartOption; } set { this.ActualLoadStartOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Addon
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Dictionary<string, Object>>))]
        public Option<Dictionary<string, Object>> AddonOption { get; private set; }

        /// <summary>
        /// Gets or sets a dictionary of addon properties.  &lt;br&gt;  Can be used to set customer exclusive properties for a shipment.  
        /// </summary>
        /// <value>Gets or sets a dictionary of addon properties.  &lt;br&gt;  Can be used to set customer exclusive properties for a shipment.  </value>
        [JsonPropertyName("addon")]
        public Dictionary<string, Object>? Addon { get { return this. AddonOption; } set { this.AddonOption = new Option<Dictionary<string, Object>>(value); } }

        /// <summary>
        /// Used to track the state of CalculatedDeliveryEnd
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CalculatedDeliveryEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the calculated delivery end with date and time.  &lt;br&gt;  This defines the calculated end of the delivery / unlaoding process.    This will usually be set by an api based on telematics data.
        /// </summary>
        /// <value>Gets or sets the calculated delivery end with date and time.  &lt;br&gt;  This defines the calculated end of the delivery / unlaoding process.    This will usually be set by an api based on telematics data.</value>
        [JsonPropertyName("calculatedDeliveryEnd")]
        public DateTime? CalculatedDeliveryEnd { get { return this. CalculatedDeliveryEndOption; } set { this.CalculatedDeliveryEndOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CalculatedDeliveryStart
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CalculatedDeliveryStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the calculated delivery start with date and time.  &lt;br&gt;  This defines the calculated start of the delivery / unlaoding process.    This will usually be set by an api based on telematics data.
        /// </summary>
        /// <value>Gets or sets the calculated delivery start with date and time.  &lt;br&gt;  This defines the calculated start of the delivery / unlaoding process.    This will usually be set by an api based on telematics data.</value>
        [JsonPropertyName("calculatedDeliveryStart")]
        public DateTime? CalculatedDeliveryStart { get { return this. CalculatedDeliveryStartOption; } set { this.CalculatedDeliveryStartOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CalculatedLoadEnd
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CalculatedLoadEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the calculated load end with date and time.  &lt;br&gt;  This will define the calculated / theoretical end of the laoding process.    This will usually be set by an api based on data given by the telematics.
        /// </summary>
        /// <value>Gets or sets the calculated load end with date and time.  &lt;br&gt;  This will define the calculated / theoretical end of the laoding process.    This will usually be set by an api based on data given by the telematics.</value>
        [JsonPropertyName("calculatedLoadEnd")]
        public DateTime? CalculatedLoadEnd { get { return this. CalculatedLoadEndOption; } set { this.CalculatedLoadEndOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CalculatedLoadStart
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CalculatedLoadStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the calculated load start with date and time.  &lt;br&gt;  This will define the calculated / theoretical start of the loading process.    This will usually be set by an api based on data given by the telematics.
        /// </summary>
        /// <value>Gets or sets the calculated load start with date and time.  &lt;br&gt;  This will define the calculated / theoretical start of the loading process.    This will usually be set by an api based on data given by the telematics.</value>
        [JsonPropertyName("calculatedLoadStart")]
        public DateTime? CalculatedLoadStart { get { return this. CalculatedLoadStartOption; } set { this.CalculatedLoadStartOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Carrier
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillableContactModel>))]
        public Option<BillableContactModel> CarrierOption { get; private set; }

        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [JsonPropertyName("carrier")]
        public BillableContactModel? Carrier { get { return this. CarrierOption; } set { this.CarrierOption = new Option<BillableContactModel>(value); } }

        /// <summary>
        /// Used to track the state of ConstructionSite
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ConstructionSiteModel>))]
        public Option<ConstructionSiteModel> ConstructionSiteOption { get; private set; }

        /// <summary>
        /// Gets or Sets ConstructionSite
        /// </summary>
        [JsonPropertyName("constructionSite")]
        public ConstructionSiteModel? ConstructionSite { get { return this. ConstructionSiteOption; } set { this.ConstructionSiteOption = new Option<ConstructionSiteModel>(value); } }

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the create date time  &lt;br&gt;  This defines the point of time the shipment is created.  
        /// </summary>
        /// <value>Gets or sets the create date time  &lt;br&gt;  This defines the point of time the shipment is created.  </value>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CreateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the create user id.  &lt;br&gt;  This is the user that created the shipment.  
        /// </summary>
        /// <value>Gets or sets the create user id.  &lt;br&gt;  This is the user that created the shipment.  </value>
        [JsonPropertyName("createUserId")]
        public Guid? CreateUserId { get { return this. CreateUserIdOption; } set { this.CreateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Customer
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillableContactModel>))]
        public Option<BillableContactModel> CustomerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [JsonPropertyName("customer")]
        public BillableContactModel? Customer { get { return this. CustomerOption; } set { this.CustomerOption = new Option<BillableContactModel>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> DeliveryAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [JsonPropertyName("deliveryAddress")]
        public AddressModel? DeliveryAddress { get { return this. DeliveryAddressOption; } set { this.DeliveryAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryEnd
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DeliveryEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the delivery time slot end with date and time.  &lt;br&gt;  This will define the end of the time range when the driver could deliver the shipment.    This will usually be set by the user or an api based on the values he gets from the customer.
        /// </summary>
        /// <value>Gets or sets the delivery time slot end with date and time.  &lt;br&gt;  This will define the end of the time range when the driver could deliver the shipment.    This will usually be set by the user or an api based on the values he gets from the customer.</value>
        [JsonPropertyName("deliveryEnd")]
        public DateTime? DeliveryEnd { get { return this. DeliveryEndOption; } set { this.DeliveryEndOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> DeliveryNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the delivery number.  &lt;br&gt;  This defines a number that the driber might need to deliver / unload this shipment.  
        /// </summary>
        /// <value>Gets or sets the delivery number.  &lt;br&gt;  This defines a number that the driber might need to deliver / unload this shipment.  </value>
        [JsonPropertyName("deliveryNumber")]
        public string? DeliveryNumber { get { return this. DeliveryNumberOption; } set { this.DeliveryNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryStart
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> DeliveryStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the delivery time slot start with date and time.  &lt;br&gt;  This will define the start of the time range when the driver could deliver the shipment.    This will usually be set by the user or an api based on the values he gets from the customer.
        /// </summary>
        /// <value>Gets or sets the delivery time slot start with date and time.  &lt;br&gt;  This will define the start of the time range when the driver could deliver the shipment.    This will usually be set by the user or an api based on the values he gets from the customer.</value>
        [JsonPropertyName("deliveryStart")]
        public DateTime? DeliveryStart { get { return this. DeliveryStartOption; } set { this.DeliveryStartOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryWorkflow
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ShipmentTelematicWorkflowModel>))]
        public Option<ShipmentTelematicWorkflowModel> DeliveryWorkflowOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryWorkflow
        /// </summary>
        [JsonPropertyName("deliveryWorkflow")]
        public ShipmentTelematicWorkflowModel? DeliveryWorkflow { get { return this. DeliveryWorkflowOption; } set { this.DeliveryWorkflowOption = new Option<ShipmentTelematicWorkflowModel>(value); } }

        /// <summary>
        /// Used to track the state of Documents
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<ShipmentDocumentModel>>))]
        public Option<List<ShipmentDocumentModel>> DocumentsOption { get; private set; }

        /// <summary>
        /// Gets or sets the documments.  &lt;br&gt;  These documents contain more information that just the shipment.   E.g. the shipment item id or weight note id.    Furthermore documents might be marked for invoices and ordered for them.
        /// </summary>
        /// <value>Gets or sets the documments.  &lt;br&gt;  These documents contain more information that just the shipment.   E.g. the shipment item id or weight note id.    Furthermore documents might be marked for invoices and ordered for them.</value>
        [JsonPropertyName("documents")]
        public List<ShipmentDocumentModel>? Documents { get { return this. DocumentsOption; } set { this.DocumentsOption = new Option<List<ShipmentDocumentModel>>(value); } }

        /// <summary>
        /// Used to track the state of FreightPayer
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillableContactModel>))]
        public Option<BillableContactModel> FreightPayerOption { get; private set; }

        /// <summary>
        /// Gets or Sets FreightPayer
        /// </summary>
        [JsonPropertyName("freightPayer")]
        public BillableContactModel? FreightPayer { get { return this. FreightPayerOption; } set { this.FreightPayerOption = new Option<BillableContactModel>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of InvoiceRecipient
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillableContactModel>))]
        public Option<BillableContactModel> InvoiceRecipientOption { get; private set; }

        /// <summary>
        /// Gets or Sets InvoiceRecipient
        /// </summary>
        [JsonPropertyName("invoiceRecipient")]
        public BillableContactModel? InvoiceRecipient { get { return this. InvoiceRecipientOption; } set { this.InvoiceRecipientOption = new Option<BillableContactModel>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or sets whether the shipment is deleted.
        /// </summary>
        /// <value>Gets or sets whether the shipment is deleted.</value>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of IsTemplate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsTemplateOption { get; private set; }

        /// <summary>
        /// Gets or sets werther the shipment is a template.  &lt;br&gt;  Template shipments are used to create shipments with certain values preset.  
        /// </summary>
        /// <value>Gets or sets werther the shipment is a template.  &lt;br&gt;  Template shipments are used to create shipments with certain values preset.  </value>
        [JsonPropertyName("isTemplate")]
        public bool? IsTemplate { get { return this. IsTemplateOption; } set { this.IsTemplateOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of Items
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<ShipmentItemModel>>))]
        public Option<List<ShipmentItemModel>> ItemsOption { get; private set; }

        /// <summary>
        /// Gets or sets shipment items.  &lt;br&gt;  Represents a list of items of a shipment which will contain further information about the freight.  
        /// </summary>
        /// <value>Gets or sets shipment items.  &lt;br&gt;  Represents a list of items of a shipment which will contain further information about the freight.  </value>
        [JsonPropertyName("items")]
        public List<ShipmentItemModel>? Items { get { return this. ItemsOption; } set { this.ItemsOption = new Option<List<ShipmentItemModel>>(value); } }

        /// <summary>
        /// Used to track the state of LoadAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> LoadAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets LoadAddress
        /// </summary>
        [JsonPropertyName("loadAddress")]
        public AddressModel? LoadAddress { get { return this. LoadAddressOption; } set { this.LoadAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of LoadEnd
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> LoadEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the load time slot end with date and time.  &lt;br&gt;  This will define the end of the time range the driver could end the loading process.    This will usually be set by the user or an api based on the values he gets from the customer.
        /// </summary>
        /// <value>Gets or sets the load time slot end with date and time.  &lt;br&gt;  This will define the end of the time range the driver could end the loading process.    This will usually be set by the user or an api based on the values he gets from the customer.</value>
        [JsonPropertyName("loadEnd")]
        public DateTime? LoadEnd { get { return this. LoadEndOption; } set { this.LoadEndOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of LoadNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> LoadNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the load number.  &lt;br&gt;  This defines a number that the driver might need to load this shipment  
        /// </summary>
        /// <value>Gets or sets the load number.  &lt;br&gt;  This defines a number that the driver might need to load this shipment  </value>
        [JsonPropertyName("loadNumber")]
        public string? LoadNumber { get { return this. LoadNumberOption; } set { this.LoadNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LoadStart
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> LoadStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the load time slot start with date and time  &lt;br&gt;  This will define the start of the time range the driver could start the loading process.    This will usually be set by the user or an api based on the values he gets from customer.
        /// </summary>
        /// <value>Gets or sets the load time slot start with date and time  &lt;br&gt;  This will define the start of the time range the driver could start the loading process.    This will usually be set by the user or an api based on the values he gets from customer.</value>
        [JsonPropertyName("loadStart")]
        public DateTime? LoadStart { get { return this. LoadStartOption; } set { this.LoadStartOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of LoadWorkflow
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ShipmentTelematicWorkflowModel>))]
        public Option<ShipmentTelematicWorkflowModel> LoadWorkflowOption { get; private set; }

        /// <summary>
        /// Gets or Sets LoadWorkflow
        /// </summary>
        [JsonPropertyName("loadWorkflow")]
        public ShipmentTelematicWorkflowModel? LoadWorkflow { get { return this. LoadWorkflowOption; } set { this.LoadWorkflowOption = new Option<ShipmentTelematicWorkflowModel>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Gets or sets the nots.  &lt;br&gt;  This gives the user the possibillity to add some more sentences about this shipment.  
        /// </summary>
        /// <value>Gets or sets the nots.  &lt;br&gt;  This gives the user the possibillity to add some more sentences about this shipment.  </value>
        [JsonPropertyName("notes")]
        public string? Notes { get { return this. NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OrderDate
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> OrderDateOption { get; private set; }

        /// <summary>
        /// Gets or sets the order date.  &lt;br&gt;  This defines the date the shipment is ordered at.  This is a relevant information for the billing process and needs to be set.  
        /// </summary>
        /// <value>Gets or sets the order date.  &lt;br&gt;  This defines the date the shipment is ordered at.  This is a relevant information for the billing process and needs to be set.  </value>
        [JsonPropertyName("orderDate")]
        public DateTime? OrderDate { get { return this. OrderDateOption; } set { this.OrderDateOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of PlannedDeliveryEnd
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> PlannedDeliveryEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the planned delivery end with date and time.  &lt;br&gt;  This defines the planned end off the delivery / unlaoding process.    This will usually be set by the user based on his dayplan of the resource.
        /// </summary>
        /// <value>Gets or sets the planned delivery end with date and time.  &lt;br&gt;  This defines the planned end off the delivery / unlaoding process.    This will usually be set by the user based on his dayplan of the resource.</value>
        [JsonPropertyName("plannedDeliveryEnd")]
        public DateTime? PlannedDeliveryEnd { get { return this. PlannedDeliveryEndOption; } set { this.PlannedDeliveryEndOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of PlannedDeliveryStart
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> PlannedDeliveryStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the planned delivery start with date and time.  &lt;br&gt;  This defines the planned start of the delivery / unloading process.    This will usually be set by the user based on his dayplan of the resource.
        /// </summary>
        /// <value>Gets or sets the planned delivery start with date and time.  &lt;br&gt;  This defines the planned start of the delivery / unloading process.    This will usually be set by the user based on his dayplan of the resource.</value>
        [JsonPropertyName("plannedDeliveryStart")]
        public DateTime? PlannedDeliveryStart { get { return this. PlannedDeliveryStartOption; } set { this.PlannedDeliveryStartOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of PlannedLoadEnd
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> PlannedLoadEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the planned load end with date and time.  &lt;br&gt;  This will define the planned end of the loading process.    This will usually be set by the user based on his dayplan for the resource.
        /// </summary>
        /// <value>Gets or sets the planned load end with date and time.  &lt;br&gt;  This will define the planned end of the loading process.    This will usually be set by the user based on his dayplan for the resource.</value>
        [JsonPropertyName("plannedLoadEnd")]
        public DateTime? PlannedLoadEnd { get { return this. PlannedLoadEndOption; } set { this.PlannedLoadEndOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of PlannedLoadStart
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> PlannedLoadStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the planned laod start with date and time.  &lt;br&gt;  This will define the planned start of the loading process.    This will usually be set by the user based on his dayplan for the resource.
        /// </summary>
        /// <value>Gets or sets the planned laod start with date and time.  &lt;br&gt;  This will define the planned start of the loading process.    This will usually be set by the user based on his dayplan for the resource.</value>
        [JsonPropertyName("plannedLoadStart")]
        public DateTime? PlannedLoadStart { get { return this. PlannedLoadStartOption; } set { this.PlannedLoadStartOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of RecipientAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> RecipientAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets RecipientAddress
        /// </summary>
        [JsonPropertyName("recipientAddress")]
        public AddressModel? RecipientAddress { get { return this. RecipientAddressOption; } set { this.RecipientAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of ReferenceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ReferenceNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the reference number  &lt;br&gt;  This defines a number that references the same shipment in another programm or context.  
        /// </summary>
        /// <value>Gets or sets the reference number  &lt;br&gt;  This defines a number that references the same shipment in another programm or context.  </value>
        [JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get { return this. ReferenceNumberOption; } set { this.ReferenceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SenderAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> SenderAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets SenderAddress
        /// </summary>
        [JsonPropertyName("senderAddress")]
        public AddressModel? SenderAddress { get { return this. SenderAddressOption; } set { this.SenderAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of ShipmentNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ShipmentNumberOption { get; private set; }

        /// <summary>
        /// Gets or sets the shipment number.  &lt;br&gt;  This defines a number to identify the shipment as the user.  
        /// </summary>
        /// <value>Gets or sets the shipment number.  &lt;br&gt;  This defines a number to identify the shipment as the user.  </value>
        [JsonPropertyName("shipmentNumber")]
        public string? ShipmentNumber { get { return this. ShipmentNumberOption; } set { this.ShipmentNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ShipmentStatusModel>))]
        public Option<ShipmentStatusModel> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public ShipmentStatusModel? Status { get { return this. StatusOption; } set { this.StatusOption = new Option<ShipmentStatusModel>(value); } }

        /// <summary>
        /// Used to track the state of Supplier
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<BillableContactModel>))]
        public Option<BillableContactModel> SupplierOption { get; private set; }

        /// <summary>
        /// Gets or Sets Supplier
        /// </summary>
        [JsonPropertyName("supplier")]
        public BillableContactModel? Supplier { get { return this. SupplierOption; } set { this.SupplierOption = new Option<BillableContactModel>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<ShipmentTagModel>>))]
        public Option<List<ShipmentTagModel>> TagsOption { get; private set; }

        /// <summary>
        /// Gets or sets the tags.  &lt;br&gt;  Tags are short texts to add information to a shipment without the need to add new properties.    These are e.g. used in the pricing module to add some additional conditions.
        /// </summary>
        /// <value>Gets or sets the tags.  &lt;br&gt;  Tags are short texts to add information to a shipment without the need to add new properties.    These are e.g. used in the pricing module to add some additional conditions.</value>
        [JsonPropertyName("tags")]
        public List<ShipmentTagModel>? Tags { get { return this. TagsOption; } set { this.TagsOption = new Option<List<ShipmentTagModel>>(value); } }

        /// <summary>
        /// Used to track the state of TemplateName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TemplateNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the template name.  &lt;br&gt;  A name for the template to give the user the option to find it easier  
        /// </summary>
        /// <value>Gets or sets the template name.  &lt;br&gt;  A name for the template to give the user the option to find it easier  </value>
        [JsonPropertyName("templateName")]
        public string? TemplateName { get { return this. TemplateNameOption; } set { this.TemplateNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Tours
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<ShipmentTourModel>>))]
        public Option<List<ShipmentTourModel>> ToursOption { get; private set; }

        /// <summary>
        /// Gets or sets a list of tour shipments.  &lt;br&gt;  This collection will be filled when creating or updating tour objects.  
        /// </summary>
        /// <value>Gets or sets a list of tour shipments.  &lt;br&gt;  This collection will be filled when creating or updating tour objects.  </value>
        [JsonPropertyName("tours")]
        public List<ShipmentTourModel>? Tours { get { return this. ToursOption; } set { this.ToursOption = new Option<List<ShipmentTourModel>>(value); } }

        /// <summary>
        /// Used to track the state of TransportOrder
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ShipmentTransportOrderModel>))]
        public Option<ShipmentTransportOrderModel> TransportOrderOption { get; private set; }

        /// <summary>
        /// Gets or Sets TransportOrder
        /// </summary>
        [JsonPropertyName("transportOrder")]
        public ShipmentTransportOrderModel? TransportOrder { get { return this. TransportOrderOption; } set { this.TransportOrderOption = new Option<ShipmentTransportOrderModel>(value); } }

        /// <summary>
        /// Used to track the state of UpdateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UpdateDateTimeOption { get; private set; }

        /// <summary>
        /// Get or sets the update date time.  &lt;br&gt;  This defines the last point of time the shipment was updated.  
        /// </summary>
        /// <value>Get or sets the update date time.  &lt;br&gt;  This defines the last point of time the shipment was updated.  </value>
        [JsonPropertyName("updateDateTime")]
        public DateTime? UpdateDateTime { get { return this. UpdateDateTimeOption; } set { this.UpdateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UpdateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the update user id.  &lt;br&gt;  This defines the user which made the last changes to the shipment.  
        /// </summary>
        /// <value>Gets or sets the update user id.  &lt;br&gt;  This defines the user which made the last changes to the shipment.  </value>
        [JsonPropertyName("updateUserId")]
        public Guid? UpdateUserId { get { return this. UpdateUserIdOption; } set { this.UpdateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentModel {\n");
            sb.Append("  ActualDeliveryEnd: ").Append(ActualDeliveryEnd).Append("\n");
            sb.Append("  ActualDeliveryStart: ").Append(ActualDeliveryStart).Append("\n");
            sb.Append("  ActualLoadEnd: ").Append(ActualLoadEnd).Append("\n");
            sb.Append("  ActualLoadStart: ").Append(ActualLoadStart).Append("\n");
            sb.Append("  Addon: ").Append(Addon).Append("\n");
            sb.Append("  CalculatedDeliveryEnd: ").Append(CalculatedDeliveryEnd).Append("\n");
            sb.Append("  CalculatedDeliveryStart: ").Append(CalculatedDeliveryStart).Append("\n");
            sb.Append("  CalculatedLoadEnd: ").Append(CalculatedLoadEnd).Append("\n");
            sb.Append("  CalculatedLoadStart: ").Append(CalculatedLoadStart).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  ConstructionSite: ").Append(ConstructionSite).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  DeliveryEnd: ").Append(DeliveryEnd).Append("\n");
            sb.Append("  DeliveryNumber: ").Append(DeliveryNumber).Append("\n");
            sb.Append("  DeliveryStart: ").Append(DeliveryStart).Append("\n");
            sb.Append("  DeliveryTimeType: ").Append(DeliveryTimeType).Append("\n");
            sb.Append("  DeliveryWorkflow: ").Append(DeliveryWorkflow).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  FreightPayer: ").Append(FreightPayer).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceRecipient: ").Append(InvoiceRecipient).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  IsTemplate: ").Append(IsTemplate).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  LoadAddress: ").Append(LoadAddress).Append("\n");
            sb.Append("  LoadEnd: ").Append(LoadEnd).Append("\n");
            sb.Append("  LoadNumber: ").Append(LoadNumber).Append("\n");
            sb.Append("  LoadStart: ").Append(LoadStart).Append("\n");
            sb.Append("  LoadWorkflow: ").Append(LoadWorkflow).Append("\n");
            sb.Append("  LoadingTimeType: ").Append(LoadingTimeType).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  PlannedDeliveryEnd: ").Append(PlannedDeliveryEnd).Append("\n");
            sb.Append("  PlannedDeliveryStart: ").Append(PlannedDeliveryStart).Append("\n");
            sb.Append("  PlannedLoadEnd: ").Append(PlannedLoadEnd).Append("\n");
            sb.Append("  PlannedLoadStart: ").Append(PlannedLoadStart).Append("\n");
            sb.Append("  RecipientAddress: ").Append(RecipientAddress).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  SenderAddress: ").Append(SenderAddress).Append("\n");
            sb.Append("  ShipmentNumber: ").Append(ShipmentNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  Tours: ").Append(Tours).Append("\n");
            sb.Append("  TransportOrder: ").Append(TransportOrder).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentModel" />
    /// </summary>
    public class ShipmentModelJsonConverter : JsonConverter<ShipmentModel>
    {
        /// <summary>
        /// The format to use to serialize ActualDeliveryEnd
        /// </summary>
        public static string ActualDeliveryEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ActualDeliveryStart
        /// </summary>
        public static string ActualDeliveryStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ActualLoadEnd
        /// </summary>
        public static string ActualLoadEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ActualLoadStart
        /// </summary>
        public static string ActualLoadStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CalculatedDeliveryEnd
        /// </summary>
        public static string CalculatedDeliveryEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CalculatedDeliveryStart
        /// </summary>
        public static string CalculatedDeliveryStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CalculatedLoadEnd
        /// </summary>
        public static string CalculatedLoadEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CalculatedLoadStart
        /// </summary>
        public static string CalculatedLoadStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeliveryEnd
        /// </summary>
        public static string DeliveryEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeliveryStart
        /// </summary>
        public static string DeliveryStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LoadEnd
        /// </summary>
        public static string LoadEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LoadStart
        /// </summary>
        public static string LoadStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize OrderDate
        /// </summary>
        public static string OrderDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PlannedDeliveryEnd
        /// </summary>
        public static string PlannedDeliveryEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PlannedDeliveryStart
        /// </summary>
        public static string PlannedDeliveryStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PlannedLoadEnd
        /// </summary>
        public static string PlannedLoadEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PlannedLoadStart
        /// </summary>
        public static string PlannedLoadStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateDateTime
        /// </summary>
        public static string UpdateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ShipmentModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> actualDeliveryEnd = default;
            Option<DateTime> actualDeliveryStart = default;
            Option<DateTime> actualLoadEnd = default;
            Option<DateTime> actualLoadStart = default;
            Option<Dictionary<string, Object>> addon = default;
            Option<DateTime> calculatedDeliveryEnd = default;
            Option<DateTime> calculatedDeliveryStart = default;
            Option<DateTime> calculatedLoadEnd = default;
            Option<DateTime> calculatedLoadStart = default;
            Option<BillableContactModel> carrier = default;
            Option<ConstructionSiteModel> constructionSite = default;
            Option<DateTime> createDateTime = default;
            Option<Guid> createUserId = default;
            Option<BillableContactModel> customer = default;
            Option<AddressModel> deliveryAddress = default;
            Option<DateTime> deliveryEnd = default;
            Option<string> deliveryNumber = default;
            Option<DateTime> deliveryStart = default;
            Option<LoadingDateTimeType> deliveryTimeType = default;
            Option<ShipmentTelematicWorkflowModel> deliveryWorkflow = default;
            Option<List<ShipmentDocumentModel>> documents = default;
            Option<BillableContactModel> freightPayer = default;
            Option<Guid> id = default;
            Option<BillableContactModel> invoiceRecipient = default;
            Option<bool> isDeleted = default;
            Option<bool> isTemplate = default;
            Option<List<ShipmentItemModel>> items = default;
            Option<AddressModel> loadAddress = default;
            Option<DateTime> loadEnd = default;
            Option<string> loadNumber = default;
            Option<DateTime> loadStart = default;
            Option<ShipmentTelematicWorkflowModel> loadWorkflow = default;
            Option<LoadingDateTimeType> loadingTimeType = default;
            Option<string> notes = default;
            Option<DateTime> orderDate = default;
            Option<DateTime> plannedDeliveryEnd = default;
            Option<DateTime> plannedDeliveryStart = default;
            Option<DateTime> plannedLoadEnd = default;
            Option<DateTime> plannedLoadStart = default;
            Option<AddressModel> recipientAddress = default;
            Option<string> referenceNumber = default;
            Option<AddressModel> senderAddress = default;
            Option<string> shipmentNumber = default;
            Option<ShipmentStatusModel> status = default;
            Option<BillableContactModel> supplier = default;
            Option<List<ShipmentTagModel>> tags = default;
            Option<string> templateName = default;
            Option<List<ShipmentTourModel>> tours = default;
            Option<ShipmentTransportOrderModel> transportOrder = default;
            Option<DateTime> updateDateTime = default;
            Option<Guid> updateUserId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actualDeliveryEnd":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actualDeliveryEnd = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "actualDeliveryStart":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actualDeliveryStart = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "actualLoadEnd":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actualLoadEnd = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "actualLoadStart":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actualLoadStart = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "addon":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                addon = new Option<Dictionary<string, Object>>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "calculatedDeliveryEnd":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                calculatedDeliveryEnd = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "calculatedDeliveryStart":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                calculatedDeliveryStart = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "calculatedLoadEnd":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                calculatedLoadEnd = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "calculatedLoadStart":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                calculatedLoadStart = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "carrier":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                carrier = new Option<BillableContactModel>(JsonSerializer.Deserialize<BillableContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "constructionSite":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                constructionSite = new Option<ConstructionSiteModel>(JsonSerializer.Deserialize<ConstructionSiteModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "customer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customer = new Option<BillableContactModel>(JsonSerializer.Deserialize<BillableContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "deliveryAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "deliveryEnd":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryEnd = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryNumber":
                            deliveryNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "deliveryStart":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryStart = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryTimeType":
                            string? deliveryTimeTypeRawValue = utf8JsonReader.GetString();
                            if (deliveryTimeTypeRawValue != null)
                                deliveryTimeType = new Option<LoadingDateTimeType>(LoadingDateTimeTypeValueConverter.FromStringOrDefault(deliveryTimeTypeRawValue));
                            break;
                        case "deliveryWorkflow":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryWorkflow = new Option<ShipmentTelematicWorkflowModel>(JsonSerializer.Deserialize<ShipmentTelematicWorkflowModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "documents":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                documents = new Option<List<ShipmentDocumentModel>>(JsonSerializer.Deserialize<List<ShipmentDocumentModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "freightPayer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                freightPayer = new Option<BillableContactModel>(JsonSerializer.Deserialize<BillableContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "invoiceRecipient":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invoiceRecipient = new Option<BillableContactModel>(JsonSerializer.Deserialize<BillableContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "isTemplate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isTemplate = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "items":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                items = new Option<List<ShipmentItemModel>>(JsonSerializer.Deserialize<List<ShipmentItemModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "loadAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "loadEnd":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadEnd = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "loadNumber":
                            loadNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "loadStart":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadStart = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "loadWorkflow":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadWorkflow = new Option<ShipmentTelematicWorkflowModel>(JsonSerializer.Deserialize<ShipmentTelematicWorkflowModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "loadingTimeType":
                            string? loadingTimeTypeRawValue = utf8JsonReader.GetString();
                            if (loadingTimeTypeRawValue != null)
                                loadingTimeType = new Option<LoadingDateTimeType>(LoadingDateTimeTypeValueConverter.FromStringOrDefault(loadingTimeTypeRawValue));
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "orderDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                orderDate = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "plannedDeliveryEnd":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                plannedDeliveryEnd = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "plannedDeliveryStart":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                plannedDeliveryStart = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "plannedLoadEnd":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                plannedLoadEnd = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "plannedLoadStart":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                plannedLoadStart = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recipientAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                recipientAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "referenceNumber":
                            referenceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "senderAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                senderAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "shipmentNumber":
                            shipmentNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<ShipmentStatusModel>(JsonSerializer.Deserialize<ShipmentStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "supplier":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplier = new Option<BillableContactModel>(JsonSerializer.Deserialize<BillableContactModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tags = new Option<List<ShipmentTagModel>>(JsonSerializer.Deserialize<List<ShipmentTagModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "templateName":
                            templateName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tours":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tours = new Option<List<ShipmentTourModel>>(JsonSerializer.Deserialize<List<ShipmentTourModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "transportOrder":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transportOrder = new Option<ShipmentTransportOrderModel>(JsonSerializer.Deserialize<ShipmentTransportOrderModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "updateDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (carrier.IsSet && carrier.Value == null)
                throw new ArgumentNullException(nameof(carrier), "Property is not nullable for class ShipmentModel.");

            if (constructionSite.IsSet && constructionSite.Value == null)
                throw new ArgumentNullException(nameof(constructionSite), "Property is not nullable for class ShipmentModel.");

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class ShipmentModel.");

            if (createUserId.IsSet && createUserId.Value == null)
                throw new ArgumentNullException(nameof(createUserId), "Property is not nullable for class ShipmentModel.");

            if (customer.IsSet && customer.Value == null)
                throw new ArgumentNullException(nameof(customer), "Property is not nullable for class ShipmentModel.");

            if (deliveryAddress.IsSet && deliveryAddress.Value == null)
                throw new ArgumentNullException(nameof(deliveryAddress), "Property is not nullable for class ShipmentModel.");

            if (deliveryEnd.IsSet && deliveryEnd.Value == null)
                throw new ArgumentNullException(nameof(deliveryEnd), "Property is not nullable for class ShipmentModel.");

            if (deliveryStart.IsSet && deliveryStart.Value == null)
                throw new ArgumentNullException(nameof(deliveryStart), "Property is not nullable for class ShipmentModel.");

            if (deliveryTimeType.IsSet && deliveryTimeType.Value == null)
                throw new ArgumentNullException(nameof(deliveryTimeType), "Property is not nullable for class ShipmentModel.");

            if (deliveryWorkflow.IsSet && deliveryWorkflow.Value == null)
                throw new ArgumentNullException(nameof(deliveryWorkflow), "Property is not nullable for class ShipmentModel.");

            if (freightPayer.IsSet && freightPayer.Value == null)
                throw new ArgumentNullException(nameof(freightPayer), "Property is not nullable for class ShipmentModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ShipmentModel.");

            if (invoiceRecipient.IsSet && invoiceRecipient.Value == null)
                throw new ArgumentNullException(nameof(invoiceRecipient), "Property is not nullable for class ShipmentModel.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class ShipmentModel.");

            if (isTemplate.IsSet && isTemplate.Value == null)
                throw new ArgumentNullException(nameof(isTemplate), "Property is not nullable for class ShipmentModel.");

            if (loadAddress.IsSet && loadAddress.Value == null)
                throw new ArgumentNullException(nameof(loadAddress), "Property is not nullable for class ShipmentModel.");

            if (loadEnd.IsSet && loadEnd.Value == null)
                throw new ArgumentNullException(nameof(loadEnd), "Property is not nullable for class ShipmentModel.");

            if (loadStart.IsSet && loadStart.Value == null)
                throw new ArgumentNullException(nameof(loadStart), "Property is not nullable for class ShipmentModel.");

            if (loadWorkflow.IsSet && loadWorkflow.Value == null)
                throw new ArgumentNullException(nameof(loadWorkflow), "Property is not nullable for class ShipmentModel.");

            if (loadingTimeType.IsSet && loadingTimeType.Value == null)
                throw new ArgumentNullException(nameof(loadingTimeType), "Property is not nullable for class ShipmentModel.");

            if (orderDate.IsSet && orderDate.Value == null)
                throw new ArgumentNullException(nameof(orderDate), "Property is not nullable for class ShipmentModel.");

            if (recipientAddress.IsSet && recipientAddress.Value == null)
                throw new ArgumentNullException(nameof(recipientAddress), "Property is not nullable for class ShipmentModel.");

            if (senderAddress.IsSet && senderAddress.Value == null)
                throw new ArgumentNullException(nameof(senderAddress), "Property is not nullable for class ShipmentModel.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ShipmentModel.");

            if (supplier.IsSet && supplier.Value == null)
                throw new ArgumentNullException(nameof(supplier), "Property is not nullable for class ShipmentModel.");

            if (transportOrder.IsSet && transportOrder.Value == null)
                throw new ArgumentNullException(nameof(transportOrder), "Property is not nullable for class ShipmentModel.");

            if (updateDateTime.IsSet && updateDateTime.Value == null)
                throw new ArgumentNullException(nameof(updateDateTime), "Property is not nullable for class ShipmentModel.");

            if (updateUserId.IsSet && updateUserId.Value == null)
                throw new ArgumentNullException(nameof(updateUserId), "Property is not nullable for class ShipmentModel.");

            //2return new ShipmentModel(actualDeliveryEnd, actualDeliveryStart, actualLoadEnd, actualLoadStart, addon, calculatedDeliveryEnd, calculatedDeliveryStart, calculatedLoadEnd, calculatedLoadStart, carrier, constructionSite, createDateTime, createUserId, customer, deliveryAddress, deliveryEnd, deliveryNumber, deliveryStart, deliveryTimeType, deliveryWorkflow, documents, freightPayer, id, invoiceRecipient, isDeleted, isTemplate, items, loadAddress, loadEnd, loadNumber, loadStart, loadWorkflow, loadingTimeType, notes, orderDate, plannedDeliveryEnd, plannedDeliveryStart, plannedLoadEnd, plannedLoadStart, recipientAddress, referenceNumber, senderAddress, shipmentNumber, status, supplier, tags, templateName, tours, transportOrder, updateDateTime, updateUserId);
            return new ShipmentModel(actualDeliveryEnd, actualDeliveryStart, actualLoadEnd, actualLoadStart, addon, calculatedDeliveryEnd, calculatedDeliveryStart, calculatedLoadEnd, calculatedLoadStart, carrier, constructionSite, createDateTime, createUserId, customer, deliveryAddress, deliveryEnd, deliveryNumber, deliveryStart, deliveryTimeType, deliveryWorkflow, documents, freightPayer, id, invoiceRecipient, isDeleted, isTemplate, items, loadAddress, loadEnd, loadNumber, loadStart, loadWorkflow, loadingTimeType, notes, orderDate, plannedDeliveryEnd, plannedDeliveryStart, plannedLoadEnd, plannedLoadStart, recipientAddress, referenceNumber, senderAddress, shipmentNumber, status, supplier, tags, templateName, tours, transportOrder, updateDateTime, updateUserId);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentModel shipmentModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, shipmentModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ShipmentModel shipmentModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentModel.CarrierOption.IsSet && shipmentModel.Carrier == null)
                throw new ArgumentNullException(nameof(shipmentModel.Carrier), "Property is required for class ShipmentModel.");

            if (shipmentModel.ConstructionSiteOption.IsSet && shipmentModel.ConstructionSite == null)
                throw new ArgumentNullException(nameof(shipmentModel.ConstructionSite), "Property is required for class ShipmentModel.");

            if (shipmentModel.CustomerOption.IsSet && shipmentModel.Customer == null)
                throw new ArgumentNullException(nameof(shipmentModel.Customer), "Property is required for class ShipmentModel.");

            if (shipmentModel.DeliveryAddressOption.IsSet && shipmentModel.DeliveryAddress == null)
                throw new ArgumentNullException(nameof(shipmentModel.DeliveryAddress), "Property is required for class ShipmentModel.");

            if (shipmentModel.DeliveryWorkflowOption.IsSet && shipmentModel.DeliveryWorkflow == null)
                throw new ArgumentNullException(nameof(shipmentModel.DeliveryWorkflow), "Property is required for class ShipmentModel.");

            if (shipmentModel.FreightPayerOption.IsSet && shipmentModel.FreightPayer == null)
                throw new ArgumentNullException(nameof(shipmentModel.FreightPayer), "Property is required for class ShipmentModel.");

            if (shipmentModel.InvoiceRecipientOption.IsSet && shipmentModel.InvoiceRecipient == null)
                throw new ArgumentNullException(nameof(shipmentModel.InvoiceRecipient), "Property is required for class ShipmentModel.");

            if (shipmentModel.LoadAddressOption.IsSet && shipmentModel.LoadAddress == null)
                throw new ArgumentNullException(nameof(shipmentModel.LoadAddress), "Property is required for class ShipmentModel.");

            if (shipmentModel.LoadWorkflowOption.IsSet && shipmentModel.LoadWorkflow == null)
                throw new ArgumentNullException(nameof(shipmentModel.LoadWorkflow), "Property is required for class ShipmentModel.");

            if (shipmentModel.RecipientAddressOption.IsSet && shipmentModel.RecipientAddress == null)
                throw new ArgumentNullException(nameof(shipmentModel.RecipientAddress), "Property is required for class ShipmentModel.");

            if (shipmentModel.SenderAddressOption.IsSet && shipmentModel.SenderAddress == null)
                throw new ArgumentNullException(nameof(shipmentModel.SenderAddress), "Property is required for class ShipmentModel.");

            if (shipmentModel.StatusOption.IsSet && shipmentModel.Status == null)
                throw new ArgumentNullException(nameof(shipmentModel.Status), "Property is required for class ShipmentModel.");

            if (shipmentModel.SupplierOption.IsSet && shipmentModel.Supplier == null)
                throw new ArgumentNullException(nameof(shipmentModel.Supplier), "Property is required for class ShipmentModel.");

            if (shipmentModel.TransportOrderOption.IsSet && shipmentModel.TransportOrder == null)
                throw new ArgumentNullException(nameof(shipmentModel.TransportOrder), "Property is required for class ShipmentModel.");

            if (shipmentModel.ActualDeliveryEndOption.IsSet)
                if (shipmentModel.ActualDeliveryEndOption.Value != null)
                {
                    writer.WriteString("actualDeliveryEnd", shipmentModel.ActualDeliveryEndOption!.Value.ToString(ActualDeliveryEndFormat));
                    //var __value = shipmentModel.ActualDeliveryEndOption.Value;
                    //writer.WriteString("actualDeliveryEnd", __value);
                }
                else
                    writer.WriteNull("actualDeliveryEnd");

            if (shipmentModel.ActualDeliveryStartOption.IsSet)
                if (shipmentModel.ActualDeliveryStartOption.Value != null)
                {
                    writer.WriteString("actualDeliveryStart", shipmentModel.ActualDeliveryStartOption!.Value.ToString(ActualDeliveryStartFormat));
                    //var __value = shipmentModel.ActualDeliveryStartOption.Value;
                    //writer.WriteString("actualDeliveryStart", __value);
                }
                else
                    writer.WriteNull("actualDeliveryStart");

            if (shipmentModel.ActualLoadEndOption.IsSet)
                if (shipmentModel.ActualLoadEndOption.Value != null)
                {
                    writer.WriteString("actualLoadEnd", shipmentModel.ActualLoadEndOption!.Value.ToString(ActualLoadEndFormat));
                    //var __value = shipmentModel.ActualLoadEndOption.Value;
                    //writer.WriteString("actualLoadEnd", __value);
                }
                else
                    writer.WriteNull("actualLoadEnd");

            if (shipmentModel.ActualLoadStartOption.IsSet)
                if (shipmentModel.ActualLoadStartOption.Value != null)
                {
                    writer.WriteString("actualLoadStart", shipmentModel.ActualLoadStartOption!.Value.ToString(ActualLoadStartFormat));
                    //var __value = shipmentModel.ActualLoadStartOption.Value;
                    //writer.WriteString("actualLoadStart", __value);
                }
                else
                    writer.WriteNull("actualLoadStart");

            if (shipmentModel.AddonOption.IsSet)
                if (shipmentModel.AddonOption.Value != null)
                {
                    writer.WritePropertyName("addon");
                    JsonSerializer.Serialize(writer, shipmentModel.Addon, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("addon");
            if (shipmentModel.CalculatedDeliveryEndOption.IsSet)
                if (shipmentModel.CalculatedDeliveryEndOption.Value != null)
                {
                    writer.WriteString("calculatedDeliveryEnd", shipmentModel.CalculatedDeliveryEndOption!.Value.ToString(CalculatedDeliveryEndFormat));
                    //var __value = shipmentModel.CalculatedDeliveryEndOption.Value;
                    //writer.WriteString("calculatedDeliveryEnd", __value);
                }
                else
                    writer.WriteNull("calculatedDeliveryEnd");

            if (shipmentModel.CalculatedDeliveryStartOption.IsSet)
                if (shipmentModel.CalculatedDeliveryStartOption.Value != null)
                {
                    writer.WriteString("calculatedDeliveryStart", shipmentModel.CalculatedDeliveryStartOption!.Value.ToString(CalculatedDeliveryStartFormat));
                    //var __value = shipmentModel.CalculatedDeliveryStartOption.Value;
                    //writer.WriteString("calculatedDeliveryStart", __value);
                }
                else
                    writer.WriteNull("calculatedDeliveryStart");

            if (shipmentModel.CalculatedLoadEndOption.IsSet)
                if (shipmentModel.CalculatedLoadEndOption.Value != null)
                {
                    writer.WriteString("calculatedLoadEnd", shipmentModel.CalculatedLoadEndOption!.Value.ToString(CalculatedLoadEndFormat));
                    //var __value = shipmentModel.CalculatedLoadEndOption.Value;
                    //writer.WriteString("calculatedLoadEnd", __value);
                }
                else
                    writer.WriteNull("calculatedLoadEnd");

            if (shipmentModel.CalculatedLoadStartOption.IsSet)
                if (shipmentModel.CalculatedLoadStartOption.Value != null)
                {
                    writer.WriteString("calculatedLoadStart", shipmentModel.CalculatedLoadStartOption!.Value.ToString(CalculatedLoadStartFormat));
                    //var __value = shipmentModel.CalculatedLoadStartOption.Value;
                    //writer.WriteString("calculatedLoadStart", __value);
                }
                else
                    writer.WriteNull("calculatedLoadStart");

            if (shipmentModel.CarrierOption.IsSet)
            {
                writer.WritePropertyName("carrier");
                JsonSerializer.Serialize(writer, shipmentModel.Carrier, jsonSerializerOptions);
            }
            if (shipmentModel.ConstructionSiteOption.IsSet)
            {
                writer.WritePropertyName("constructionSite");
                JsonSerializer.Serialize(writer, shipmentModel.ConstructionSite, jsonSerializerOptions);
            }
            if (shipmentModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", shipmentModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (shipmentModel.CreateUserIdOption.IsSet)
                writer.WriteString("createUserId", shipmentModel.CreateUserIdOption!.Value);

            if (shipmentModel.CustomerOption.IsSet)
            {
                writer.WritePropertyName("customer");
                JsonSerializer.Serialize(writer, shipmentModel.Customer, jsonSerializerOptions);
            }
            if (shipmentModel.DeliveryAddressOption.IsSet)
            {
                writer.WritePropertyName("deliveryAddress");
                JsonSerializer.Serialize(writer, shipmentModel.DeliveryAddress, jsonSerializerOptions);
            }
            if (shipmentModel.DeliveryEndOption.IsSet)
                writer.WriteString("deliveryEnd", shipmentModel.DeliveryEndOption!.Value.ToString(DeliveryEndFormat));

            if (shipmentModel.DeliveryNumberOption.IsSet)
                if (shipmentModel.DeliveryNumberOption.Value != null)
                {
                    writer.WriteString("deliveryNumber", shipmentModel.DeliveryNumber);
                    //var __value = shipmentModel.DeliveryNumberOption.Value;
                    //writer.WriteString("deliveryNumber", __value);
                }
                else
                    writer.WriteNull("deliveryNumber");

            if (shipmentModel.DeliveryStartOption.IsSet)
                writer.WriteString("deliveryStart", shipmentModel.DeliveryStartOption!.Value.ToString(DeliveryStartFormat));

            if (shipmentModel.DeliveryTimeTypeOption.IsSet)
            {
                var deliveryTimeTypeRawValue = LoadingDateTimeTypeValueConverter.ToJsonValue(shipmentModel.DeliveryTimeType!.Value);
                writer.WriteNumber("deliveryTimeType", deliveryTimeTypeRawValue);
            }
            if (shipmentModel.DeliveryWorkflowOption.IsSet)
            {
                writer.WritePropertyName("deliveryWorkflow");
                JsonSerializer.Serialize(writer, shipmentModel.DeliveryWorkflow, jsonSerializerOptions);
            }
            if (shipmentModel.DocumentsOption.IsSet)
                if (shipmentModel.DocumentsOption.Value != null)
                {
                    writer.WritePropertyName("documents");
                    JsonSerializer.Serialize(writer, shipmentModel.Documents, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("documents");
            if (shipmentModel.FreightPayerOption.IsSet)
            {
                writer.WritePropertyName("freightPayer");
                JsonSerializer.Serialize(writer, shipmentModel.FreightPayer, jsonSerializerOptions);
            }
            if (shipmentModel.IdOption.IsSet)
                writer.WriteString("id", shipmentModel.IdOption!.Value);

            if (shipmentModel.InvoiceRecipientOption.IsSet)
            {
                writer.WritePropertyName("invoiceRecipient");
                JsonSerializer.Serialize(writer, shipmentModel.InvoiceRecipient, jsonSerializerOptions);
            }
            if (shipmentModel.IsDeletedOption.IsSet)
                writer.WriteBoolean("isDeleted", shipmentModel.IsDeletedOption!.Value);

            if (shipmentModel.IsTemplateOption.IsSet)
                writer.WriteBoolean("isTemplate", shipmentModel.IsTemplateOption!.Value);

            if (shipmentModel.ItemsOption.IsSet)
                if (shipmentModel.ItemsOption.Value != null)
                {
                    writer.WritePropertyName("items");
                    JsonSerializer.Serialize(writer, shipmentModel.Items, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items");
            if (shipmentModel.LoadAddressOption.IsSet)
            {
                writer.WritePropertyName("loadAddress");
                JsonSerializer.Serialize(writer, shipmentModel.LoadAddress, jsonSerializerOptions);
            }
            if (shipmentModel.LoadEndOption.IsSet)
                writer.WriteString("loadEnd", shipmentModel.LoadEndOption!.Value.ToString(LoadEndFormat));

            if (shipmentModel.LoadNumberOption.IsSet)
                if (shipmentModel.LoadNumberOption.Value != null)
                {
                    writer.WriteString("loadNumber", shipmentModel.LoadNumber);
                    //var __value = shipmentModel.LoadNumberOption.Value;
                    //writer.WriteString("loadNumber", __value);
                }
                else
                    writer.WriteNull("loadNumber");

            if (shipmentModel.LoadStartOption.IsSet)
                writer.WriteString("loadStart", shipmentModel.LoadStartOption!.Value.ToString(LoadStartFormat));

            if (shipmentModel.LoadWorkflowOption.IsSet)
            {
                writer.WritePropertyName("loadWorkflow");
                JsonSerializer.Serialize(writer, shipmentModel.LoadWorkflow, jsonSerializerOptions);
            }
            if (shipmentModel.LoadingTimeTypeOption.IsSet)
            {
                var loadingTimeTypeRawValue = LoadingDateTimeTypeValueConverter.ToJsonValue(shipmentModel.LoadingTimeType!.Value);
                writer.WriteNumber("loadingTimeType", loadingTimeTypeRawValue);
            }
            if (shipmentModel.NotesOption.IsSet)
                if (shipmentModel.NotesOption.Value != null)
                {
                    writer.WriteString("notes", shipmentModel.Notes);
                    //var __value = shipmentModel.NotesOption.Value;
                    //writer.WriteString("notes", __value);
                }
                else
                    writer.WriteNull("notes");

            if (shipmentModel.OrderDateOption.IsSet)
                writer.WriteString("orderDate", shipmentModel.OrderDateOption!.Value.ToString(OrderDateFormat));

            if (shipmentModel.PlannedDeliveryEndOption.IsSet)
                if (shipmentModel.PlannedDeliveryEndOption.Value != null)
                {
                    writer.WriteString("plannedDeliveryEnd", shipmentModel.PlannedDeliveryEndOption!.Value.ToString(PlannedDeliveryEndFormat));
                    //var __value = shipmentModel.PlannedDeliveryEndOption.Value;
                    //writer.WriteString("plannedDeliveryEnd", __value);
                }
                else
                    writer.WriteNull("plannedDeliveryEnd");

            if (shipmentModel.PlannedDeliveryStartOption.IsSet)
                if (shipmentModel.PlannedDeliveryStartOption.Value != null)
                {
                    writer.WriteString("plannedDeliveryStart", shipmentModel.PlannedDeliveryStartOption!.Value.ToString(PlannedDeliveryStartFormat));
                    //var __value = shipmentModel.PlannedDeliveryStartOption.Value;
                    //writer.WriteString("plannedDeliveryStart", __value);
                }
                else
                    writer.WriteNull("plannedDeliveryStart");

            if (shipmentModel.PlannedLoadEndOption.IsSet)
                if (shipmentModel.PlannedLoadEndOption.Value != null)
                {
                    writer.WriteString("plannedLoadEnd", shipmentModel.PlannedLoadEndOption!.Value.ToString(PlannedLoadEndFormat));
                    //var __value = shipmentModel.PlannedLoadEndOption.Value;
                    //writer.WriteString("plannedLoadEnd", __value);
                }
                else
                    writer.WriteNull("plannedLoadEnd");

            if (shipmentModel.PlannedLoadStartOption.IsSet)
                if (shipmentModel.PlannedLoadStartOption.Value != null)
                {
                    writer.WriteString("plannedLoadStart", shipmentModel.PlannedLoadStartOption!.Value.ToString(PlannedLoadStartFormat));
                    //var __value = shipmentModel.PlannedLoadStartOption.Value;
                    //writer.WriteString("plannedLoadStart", __value);
                }
                else
                    writer.WriteNull("plannedLoadStart");

            if (shipmentModel.RecipientAddressOption.IsSet)
            {
                writer.WritePropertyName("recipientAddress");
                JsonSerializer.Serialize(writer, shipmentModel.RecipientAddress, jsonSerializerOptions);
            }
            if (shipmentModel.ReferenceNumberOption.IsSet)
                if (shipmentModel.ReferenceNumberOption.Value != null)
                {
                    writer.WriteString("referenceNumber", shipmentModel.ReferenceNumber);
                    //var __value = shipmentModel.ReferenceNumberOption.Value;
                    //writer.WriteString("referenceNumber", __value);
                }
                else
                    writer.WriteNull("referenceNumber");

            if (shipmentModel.SenderAddressOption.IsSet)
            {
                writer.WritePropertyName("senderAddress");
                JsonSerializer.Serialize(writer, shipmentModel.SenderAddress, jsonSerializerOptions);
            }
            if (shipmentModel.ShipmentNumberOption.IsSet)
                if (shipmentModel.ShipmentNumberOption.Value != null)
                {
                    writer.WriteString("shipmentNumber", shipmentModel.ShipmentNumber);
                    //var __value = shipmentModel.ShipmentNumberOption.Value;
                    //writer.WriteString("shipmentNumber", __value);
                }
                else
                    writer.WriteNull("shipmentNumber");

            if (shipmentModel.StatusOption.IsSet)
            {
                writer.WritePropertyName("status");
                JsonSerializer.Serialize(writer, shipmentModel.Status, jsonSerializerOptions);
            }
            if (shipmentModel.SupplierOption.IsSet)
            {
                writer.WritePropertyName("supplier");
                JsonSerializer.Serialize(writer, shipmentModel.Supplier, jsonSerializerOptions);
            }
            if (shipmentModel.TagsOption.IsSet)
                if (shipmentModel.TagsOption.Value != null)
                {
                    writer.WritePropertyName("tags");
                    JsonSerializer.Serialize(writer, shipmentModel.Tags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tags");
            if (shipmentModel.TemplateNameOption.IsSet)
                if (shipmentModel.TemplateNameOption.Value != null)
                {
                    writer.WriteString("templateName", shipmentModel.TemplateName);
                    //var __value = shipmentModel.TemplateNameOption.Value;
                    //writer.WriteString("templateName", __value);
                }
                else
                    writer.WriteNull("templateName");

            if (shipmentModel.ToursOption.IsSet)
                if (shipmentModel.ToursOption.Value != null)
                {
                    writer.WritePropertyName("tours");
                    JsonSerializer.Serialize(writer, shipmentModel.Tours, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tours");
            if (shipmentModel.TransportOrderOption.IsSet)
            {
                writer.WritePropertyName("transportOrder");
                JsonSerializer.Serialize(writer, shipmentModel.TransportOrder, jsonSerializerOptions);
            }
            if (shipmentModel.UpdateDateTimeOption.IsSet)
                writer.WriteString("updateDateTime", shipmentModel.UpdateDateTimeOption!.Value.ToString(UpdateDateTimeFormat));

            if (shipmentModel.UpdateUserIdOption.IsSet)
                writer.WriteString("updateUserId", shipmentModel.UpdateUserIdOption!.Value);
        }
    }
}
