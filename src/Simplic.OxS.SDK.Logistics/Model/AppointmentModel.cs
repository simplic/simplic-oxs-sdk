// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    /// <summary>
    /// Represents the model of a Appointment.
    /// </summary>
    public partial class AppointmentModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public AppointmentModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentModel" /> class.
        /// </summary>
        /// <param name="createDateTime">Gets or sets the create date time.</param>
        /// <param name="createUserId">Gets or sets the create user id.</param>
        /// <param name="endAddress">endAddress</param>
        /// <param name="endDateTime">Gets or sets the end date and time of the appointment.</param>
        /// <param name="functions">Gets or sets a list of functinos for an appointment.  &lt;br&gt;  A function can change the behaviour of some methdos with the function added as string.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;\&quot;blocking\&quot; : Will determine whether the appointment block other appointments or tours to be   scheduled at the same time for the contained resources.&lt;/item&gt;&lt;/list&gt;</param>
        /// <param name="hexColor">Gets or sets the hex color for the appointment.  &lt;br&gt;  Default color is light red.  </param>
        /// <param name="id">Gets or sets the id.</param>
        /// <param name="isDeleted">Gets or sets whether the Appointment is deleted.</param>
        /// <param name="organizationId">Gets or sets the organization id for the Appointment.</param>
        /// <param name="resources">Gets or sets the resources of the appointment.  &lt;br&gt;  Each resource will have the same time and address for the whole appointment. Splitting these should be done  in other appointments.  </param>
        /// <param name="startAddress">startAddress</param>
        /// <param name="startDateTime">Gets or sets the start date and time of the appointment.</param>
        /// <param name="title">Gets or sets the title of the appointment.</param>
        /// <param name="updateDateTime">Gets or sets the update date time.</param>
        /// <param name="updateUserId">Gets or sets the update user id.</param>
        //[JsonConstructor]
        public AppointmentModel(Option<DateTime> createDateTime = default, Option<Guid> createUserId = default, Option<AddressModel> endAddress = default, Option<DateTime> endDateTime = default, Option<List<string>> functions = default, Option<string> hexColor = default, Option<Guid> id = default, Option<bool> isDeleted = default, Option<Guid> organizationId = default, Option<List<ResourceModel>> resources = default, Option<AddressModel> startAddress = default, Option<DateTime> startDateTime = default, Option<string> title = default, Option<DateTime> updateDateTime = default, Option<Guid> updateUserId = default)
        {
            CreateDateTimeOption = createDateTime;
            CreateUserIdOption = createUserId;
            EndAddressOption = endAddress;
            EndDateTimeOption = endDateTime;
            FunctionsOption = functions;
            HexColorOption = hexColor;
            IdOption = id;
            IsDeletedOption = isDeleted;
            OrganizationIdOption = organizationId;
            ResourcesOption = resources;
            StartAddressOption = startAddress;
            StartDateTimeOption = startDateTime;
            TitleOption = title;
            UpdateDateTimeOption = updateDateTime;
            UpdateUserIdOption = updateUserId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> CreateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the create date time.
        /// </summary>
        /// <value>Gets or sets the create date time.</value>
        [JsonPropertyName("createDateTime")]
        public DateTime? CreateDateTime { get { return this. CreateDateTimeOption; } set { this.CreateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of CreateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> CreateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the create user id.
        /// </summary>
        /// <value>Gets or sets the create user id.</value>
        [JsonPropertyName("createUserId")]
        public Guid? CreateUserId { get { return this. CreateUserIdOption; } set { this.CreateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of EndAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> EndAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndAddress
        /// </summary>
        [JsonPropertyName("endAddress")]
        public AddressModel? EndAddress { get { return this. EndAddressOption; } set { this.EndAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of EndDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> EndDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the end date and time of the appointment.
        /// </summary>
        /// <value>Gets or sets the end date and time of the appointment.</value>
        [JsonPropertyName("endDateTime")]
        public DateTime? EndDateTime { get { return this. EndDateTimeOption; } set { this.EndDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Functions
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> FunctionsOption { get; private set; }

        /// <summary>
        /// Gets or sets a list of functinos for an appointment.  &lt;br&gt;  A function can change the behaviour of some methdos with the function added as string.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;\&quot;blocking\&quot; : Will determine whether the appointment block other appointments or tours to be   scheduled at the same time for the contained resources.&lt;/item&gt;&lt;/list&gt;
        /// </summary>
        /// <value>Gets or sets a list of functinos for an appointment.  &lt;br&gt;  A function can change the behaviour of some methdos with the function added as string.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;\&quot;blocking\&quot; : Will determine whether the appointment block other appointments or tours to be   scheduled at the same time for the contained resources.&lt;/item&gt;&lt;/list&gt;</value>
        [JsonPropertyName("functions")]
        public List<string>? Functions { get { return this. FunctionsOption; } set { this.FunctionsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of HexColor
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> HexColorOption { get; private set; }

        /// <summary>
        /// Gets or sets the hex color for the appointment.  &lt;br&gt;  Default color is light red.  
        /// </summary>
        /// <value>Gets or sets the hex color for the appointment.  &lt;br&gt;  Default color is light red.  </value>
        [JsonPropertyName("hexColor")]
        public string? HexColor { get { return this. HexColorOption; } set { this.HexColorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of IsDeleted
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<bool>))]
        public Option<bool> IsDeletedOption { get; private set; }

        /// <summary>
        /// Gets or sets whether the Appointment is deleted.
        /// </summary>
        /// <value>Gets or sets whether the Appointment is deleted.</value>
        [JsonPropertyName("isDeleted")]
        public bool? IsDeleted { get { return this. IsDeletedOption; } set { this.IsDeletedOption = new Option<bool>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the organization id for the Appointment.
        /// </summary>
        /// <value>Gets or sets the organization id for the Appointment.</value>
        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get { return this. OrganizationIdOption; } set { this.OrganizationIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of Resources
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<ResourceModel>>))]
        public Option<List<ResourceModel>> ResourcesOption { get; private set; }

        /// <summary>
        /// Gets or sets the resources of the appointment.  &lt;br&gt;  Each resource will have the same time and address for the whole appointment. Splitting these should be done  in other appointments.  
        /// </summary>
        /// <value>Gets or sets the resources of the appointment.  &lt;br&gt;  Each resource will have the same time and address for the whole appointment. Splitting these should be done  in other appointments.  </value>
        [JsonPropertyName("resources")]
        public List<ResourceModel>? Resources { get { return this. ResourcesOption; } set { this.ResourcesOption = new Option<List<ResourceModel>>(value); } }

        /// <summary>
        /// Used to track the state of StartAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<AddressModel>))]
        public Option<AddressModel> StartAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartAddress
        /// </summary>
        [JsonPropertyName("startAddress")]
        public AddressModel? StartAddress { get { return this. StartAddressOption; } set { this.StartAddressOption = new Option<AddressModel>(value); } }

        /// <summary>
        /// Used to track the state of StartDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> StartDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the start date and time of the appointment.
        /// </summary>
        /// <value>Gets or sets the start date and time of the appointment.</value>
        [JsonPropertyName("startDateTime")]
        public DateTime? StartDateTime { get { return this. StartDateTimeOption; } set { this.StartDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> TitleOption { get; private set; }

        /// <summary>
        /// Gets or sets the title of the appointment.
        /// </summary>
        /// <value>Gets or sets the title of the appointment.</value>
        [JsonPropertyName("title")]
        public string? Title { get { return this. TitleOption; } set { this.TitleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UpdateDateTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> UpdateDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the update date time.
        /// </summary>
        /// <value>Gets or sets the update date time.</value>
        [JsonPropertyName("updateDateTime")]
        public DateTime? UpdateDateTime { get { return this. UpdateDateTimeOption; } set { this.UpdateDateTimeOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of UpdateUserId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> UpdateUserIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the update user id.
        /// </summary>
        /// <value>Gets or sets the update user id.</value>
        [JsonPropertyName("updateUserId")]
        public Guid? UpdateUserId { get { return this. UpdateUserIdOption; } set { this.UpdateUserIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppointmentModel {\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  EndAddress: ").Append(EndAddress).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  Functions: ").Append(Functions).Append("\n");
            sb.Append("  HexColor: ").Append(HexColor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  StartAddress: ").Append(StartAddress).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AppointmentModel" />
    /// </summary>
    public class AppointmentModelJsonConverter : JsonConverter<AppointmentModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDateTime
        /// </summary>
        public static string CreateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDateTime
        /// </summary>
        public static string EndDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDateTime
        /// </summary>
        public static string StartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateDateTime
        /// </summary>
        public static string UpdateDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AppointmentModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AppointmentModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime> createDateTime = default;
            Option<Guid> createUserId = default;
            Option<AddressModel> endAddress = default;
            Option<DateTime> endDateTime = default;
            Option<List<string>> functions = default;
            Option<string> hexColor = default;
            Option<Guid> id = default;
            Option<bool> isDeleted = default;
            Option<Guid> organizationId = default;
            Option<List<ResourceModel>> resources = default;
            Option<AddressModel> startAddress = default;
            Option<DateTime> startDateTime = default;
            Option<string> title = default;
            Option<DateTime> updateDateTime = default;
            Option<Guid> updateUserId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "endAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "functions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                functions = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "hexColor":
                            hexColor = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "isDeleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeleted = new Option<bool>(utf8JsonReader.GetBoolean());
                            break;
                        case "organizationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organizationId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "resources":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resources = new Option<List<ResourceModel>>(JsonSerializer.Deserialize<List<ResourceModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "startAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startAddress = new Option<AddressModel>(JsonSerializer.Deserialize<AddressModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "startDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "title":
                            title = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updateDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateDateTime = new Option<DateTime>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updateUserId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createDateTime.IsSet && createDateTime.Value == null)
                throw new ArgumentNullException(nameof(createDateTime), "Property is not nullable for class AppointmentModel.");

            if (endAddress.IsSet && endAddress.Value == null)
                throw new ArgumentNullException(nameof(endAddress), "Property is not nullable for class AppointmentModel.");

            if (endDateTime.IsSet && endDateTime.Value == null)
                throw new ArgumentNullException(nameof(endDateTime), "Property is not nullable for class AppointmentModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AppointmentModel.");

            if (isDeleted.IsSet && isDeleted.Value == null)
                throw new ArgumentNullException(nameof(isDeleted), "Property is not nullable for class AppointmentModel.");

            if (organizationId.IsSet && organizationId.Value == null)
                throw new ArgumentNullException(nameof(organizationId), "Property is not nullable for class AppointmentModel.");

            if (startAddress.IsSet && startAddress.Value == null)
                throw new ArgumentNullException(nameof(startAddress), "Property is not nullable for class AppointmentModel.");

            if (startDateTime.IsSet && startDateTime.Value == null)
                throw new ArgumentNullException(nameof(startDateTime), "Property is not nullable for class AppointmentModel.");

            if (updateDateTime.IsSet && updateDateTime.Value == null)
                throw new ArgumentNullException(nameof(updateDateTime), "Property is not nullable for class AppointmentModel.");

            //2return new AppointmentModel(createDateTime, createUserId, endAddress, endDateTime, functions, hexColor, id, isDeleted, organizationId, resources, startAddress, startDateTime, title, updateDateTime, updateUserId);
            return new AppointmentModel(createDateTime, createUserId, endAddress, endDateTime, functions, hexColor, id, isDeleted, organizationId, resources, startAddress, startDateTime, title, updateDateTime, updateUserId);
        }

        /// <summary>
        /// Serializes a <see cref="AppointmentModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="appointmentModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AppointmentModel appointmentModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, appointmentModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AppointmentModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="appointmentModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, AppointmentModel appointmentModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (appointmentModel.EndAddressOption.IsSet && appointmentModel.EndAddress == null)
                throw new ArgumentNullException(nameof(appointmentModel.EndAddress), "Property is required for class AppointmentModel.");

            if (appointmentModel.StartAddressOption.IsSet && appointmentModel.StartAddress == null)
                throw new ArgumentNullException(nameof(appointmentModel.StartAddress), "Property is required for class AppointmentModel.");

            if (appointmentModel.CreateDateTimeOption.IsSet)
                writer.WriteString("createDateTime", appointmentModel.CreateDateTimeOption!.Value.ToString(CreateDateTimeFormat));

            if (appointmentModel.CreateUserIdOption.IsSet)
                if (appointmentModel.CreateUserIdOption.Value != null)
                {
                    writer.WriteString("createUserId", appointmentModel.CreateUserIdOption!.Value);
                    //var __value = appointmentModel.CreateUserIdOption.Value;
                    //writer.WriteString("createUserId", __value);
                }
                else
                    writer.WriteNull("createUserId");

            if (appointmentModel.EndAddressOption.IsSet)
            {
                writer.WritePropertyName("endAddress");
                JsonSerializer.Serialize(writer, appointmentModel.EndAddress, jsonSerializerOptions);
            }
            if (appointmentModel.EndDateTimeOption.IsSet)
                writer.WriteString("endDateTime", appointmentModel.EndDateTimeOption!.Value.ToString(EndDateTimeFormat));

            if (appointmentModel.FunctionsOption.IsSet)
                if (appointmentModel.FunctionsOption.Value != null)
                {
                    writer.WritePropertyName("functions");
                    JsonSerializer.Serialize(writer, appointmentModel.Functions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("functions");
            if (appointmentModel.HexColorOption.IsSet)
                if (appointmentModel.HexColorOption.Value != null)
                {
                    writer.WriteString("hexColor", appointmentModel.HexColor);
                    //var __value = appointmentModel.HexColorOption.Value;
                    //writer.WriteString("hexColor", __value);
                }
                else
                    writer.WriteNull("hexColor");

            if (appointmentModel.IdOption.IsSet)
                writer.WriteString("id", appointmentModel.IdOption!.Value);

            if (appointmentModel.IsDeletedOption.IsSet)
                writer.WriteBoolean("isDeleted", appointmentModel.IsDeletedOption!.Value);

            if (appointmentModel.OrganizationIdOption.IsSet)
                writer.WriteString("organizationId", appointmentModel.OrganizationIdOption!.Value);

            if (appointmentModel.ResourcesOption.IsSet)
                if (appointmentModel.ResourcesOption.Value != null)
                {
                    writer.WritePropertyName("resources");
                    JsonSerializer.Serialize(writer, appointmentModel.Resources, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("resources");
            if (appointmentModel.StartAddressOption.IsSet)
            {
                writer.WritePropertyName("startAddress");
                JsonSerializer.Serialize(writer, appointmentModel.StartAddress, jsonSerializerOptions);
            }
            if (appointmentModel.StartDateTimeOption.IsSet)
                writer.WriteString("startDateTime", appointmentModel.StartDateTimeOption!.Value.ToString(StartDateTimeFormat));

            if (appointmentModel.TitleOption.IsSet)
                if (appointmentModel.TitleOption.Value != null)
                {
                    writer.WriteString("title", appointmentModel.Title);
                    //var __value = appointmentModel.TitleOption.Value;
                    //writer.WriteString("title", __value);
                }
                else
                    writer.WriteNull("title");

            if (appointmentModel.UpdateDateTimeOption.IsSet)
                writer.WriteString("updateDateTime", appointmentModel.UpdateDateTimeOption!.Value.ToString(UpdateDateTimeFormat));

            if (appointmentModel.UpdateUserIdOption.IsSet)
                if (appointmentModel.UpdateUserIdOption.Value != null)
                {
                    writer.WriteString("updateUserId", appointmentModel.UpdateUserIdOption!.Value);
                    //var __value = appointmentModel.UpdateUserIdOption.Value;
                    //writer.WriteString("updateUserId", __value);
                }
                else
                    writer.WriteNull("updateUserId");
        }
    }
}
