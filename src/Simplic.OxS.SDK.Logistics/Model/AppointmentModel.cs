/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Logistics.Client.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Logistics.Model
{
    /// <summary>
    /// Represents the model of a Appointment.
    /// </summary>
    [DataContract(Name = "AppointmentModel")]
    public partial class AppointmentModel : IEquatable<AppointmentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id..</param>
        /// <param name="startAddress">startAddress.</param>
        /// <param name="endAddress">endAddress.</param>
        /// <param name="resources">Gets or sets the resources of the appointment.  &lt;br&gt;  Each resource will have the same time and address for the whole appointment. Splitting these should be done  in other appointments.  .</param>
        /// <param name="functions">Gets or sets a list of functinos for an appointment.  &lt;br&gt;  A function can change the behaviour of some methdos with the function added as string.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;\&quot;blocking\&quot; : Will determine whether the appointment block other appointments or tours to be   scheduled at the same time for the contained resources.&lt;/item&gt;&lt;/list&gt;.</param>
        /// <param name="title">Gets or sets the title of the appointment..</param>
        /// <param name="startDateTime">Gets or sets the start date and time of the appointment..</param>
        /// <param name="endDateTime">Gets or sets the end date and time of the appointment..</param>
        /// <param name="hexColor">Gets or sets the hex color for the appointment.  &lt;br&gt;  Default color is light red.  .</param>
        /// <param name="isDeleted">Gets or sets whether the Appointment is deleted..</param>
        /// <param name="createDateTime">Gets or sets the create date time..</param>
        /// <param name="createUserId">Gets or sets the create user id..</param>
        /// <param name="updateDateTime">Gets or sets the update date time..</param>
        /// <param name="updateUserId">Gets or sets the update user id..</param>
        /// <param name="organizationId">Gets or sets the organization id for the Appointment..</param>
        public AppointmentModel(Guid id = default(Guid), AddressModel startAddress = default(AddressModel), AddressModel endAddress = default(AddressModel), List<ResourceModel> resources = default(List<ResourceModel>), List<string> functions = default(List<string>), string title = default(string), DateTime startDateTime = default(DateTime), DateTime endDateTime = default(DateTime), string hexColor = default(string), bool isDeleted = default(bool), DateTime createDateTime = default(DateTime), Guid? createUserId = default(Guid?), DateTime updateDateTime = default(DateTime), Guid? updateUserId = default(Guid?), Guid organizationId = default(Guid))
        {
            this.Id = id;
            this.StartAddress = startAddress;
            this.EndAddress = endAddress;
            this.Resources = resources;
            this.Functions = functions;
            this.Title = title;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.HexColor = hexColor;
            this.IsDeleted = isDeleted;
            this.CreateDateTime = createDateTime;
            this.CreateUserId = createUserId;
            this.UpdateDateTime = updateDateTime;
            this.UpdateUserId = updateUserId;
            this.OrganizationId = organizationId;
        }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets StartAddress
        /// </summary>
        [DataMember(Name = "startAddress", EmitDefaultValue = false)]
        public AddressModel StartAddress { get; set; }

        /// <summary>
        /// Gets or Sets EndAddress
        /// </summary>
        [DataMember(Name = "endAddress", EmitDefaultValue = false)]
        public AddressModel EndAddress { get; set; }

        /// <summary>
        /// Gets or sets the resources of the appointment.  &lt;br&gt;  Each resource will have the same time and address for the whole appointment. Splitting these should be done  in other appointments.  
        /// </summary>
        /// <value>Gets or sets the resources of the appointment.  &lt;br&gt;  Each resource will have the same time and address for the whole appointment. Splitting these should be done  in other appointments.  </value>
        [DataMember(Name = "resources", EmitDefaultValue = true)]
        public List<ResourceModel> Resources { get; set; }

        /// <summary>
        /// Gets or sets a list of functinos for an appointment.  &lt;br&gt;  A function can change the behaviour of some methdos with the function added as string.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;\&quot;blocking\&quot; : Will determine whether the appointment block other appointments or tours to be   scheduled at the same time for the contained resources.&lt;/item&gt;&lt;/list&gt;
        /// </summary>
        /// <value>Gets or sets a list of functinos for an appointment.  &lt;br&gt;  A function can change the behaviour of some methdos with the function added as string.  &lt;list type&#x3D;\&quot;bullet\&quot;&gt;&lt;item&gt;\&quot;blocking\&quot; : Will determine whether the appointment block other appointments or tours to be   scheduled at the same time for the contained resources.&lt;/item&gt;&lt;/list&gt;</value>
        [DataMember(Name = "functions", EmitDefaultValue = true)]
        public List<string> Functions { get; set; }

        /// <summary>
        /// Gets or sets the title of the appointment.
        /// </summary>
        /// <value>Gets or sets the title of the appointment.</value>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the start date and time of the appointment.
        /// </summary>
        /// <value>Gets or sets the start date and time of the appointment.</value>
        [DataMember(Name = "startDateTime", EmitDefaultValue = false)]
        public DateTime StartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the end date and time of the appointment.
        /// </summary>
        /// <value>Gets or sets the end date and time of the appointment.</value>
        [DataMember(Name = "endDateTime", EmitDefaultValue = false)]
        public DateTime EndDateTime { get; set; }

        /// <summary>
        /// Gets or sets the hex color for the appointment.  &lt;br&gt;  Default color is light red.  
        /// </summary>
        /// <value>Gets or sets the hex color for the appointment.  &lt;br&gt;  Default color is light red.  </value>
        [DataMember(Name = "hexColor", EmitDefaultValue = true)]
        public string HexColor { get; set; }

        /// <summary>
        /// Gets or sets whether the Appointment is deleted.
        /// </summary>
        /// <value>Gets or sets whether the Appointment is deleted.</value>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or sets the create date time.
        /// </summary>
        /// <value>Gets or sets the create date time.</value>
        [DataMember(Name = "createDateTime", EmitDefaultValue = false)]
        public DateTime CreateDateTime { get; set; }

        /// <summary>
        /// Gets or sets the create user id.
        /// </summary>
        /// <value>Gets or sets the create user id.</value>
        [DataMember(Name = "createUserId", EmitDefaultValue = true)]
        public Guid? CreateUserId { get; set; }

        /// <summary>
        /// Gets or sets the update date time.
        /// </summary>
        /// <value>Gets or sets the update date time.</value>
        [DataMember(Name = "updateDateTime", EmitDefaultValue = false)]
        public DateTime UpdateDateTime { get; set; }

        /// <summary>
        /// Gets or sets the update user id.
        /// </summary>
        /// <value>Gets or sets the update user id.</value>
        [DataMember(Name = "updateUserId", EmitDefaultValue = true)]
        public Guid? UpdateUserId { get; set; }

        /// <summary>
        /// Gets or sets the organization id for the Appointment.
        /// </summary>
        /// <value>Gets or sets the organization id for the Appointment.</value>
        [DataMember(Name = "organizationId", EmitDefaultValue = false)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppointmentModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartAddress: ").Append(StartAddress).Append("\n");
            sb.Append("  EndAddress: ").Append(EndAddress).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Functions: ").Append(Functions).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  HexColor: ").Append(HexColor).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  UpdateDateTime: ").Append(UpdateDateTime).Append("\n");
            sb.Append("  UpdateUserId: ").Append(UpdateUserId).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppointmentModel);
        }

        /// <summary>
        /// Returns true if AppointmentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AppointmentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppointmentModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StartAddress == input.StartAddress ||
                    (this.StartAddress != null &&
                    this.StartAddress.Equals(input.StartAddress))
                ) && 
                (
                    this.EndAddress == input.EndAddress ||
                    (this.EndAddress != null &&
                    this.EndAddress.Equals(input.EndAddress))
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.Functions == input.Functions ||
                    this.Functions != null &&
                    input.Functions != null &&
                    this.Functions.SequenceEqual(input.Functions)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.HexColor == input.HexColor ||
                    (this.HexColor != null &&
                    this.HexColor.Equals(input.HexColor))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.CreateDateTime == input.CreateDateTime ||
                    (this.CreateDateTime != null &&
                    this.CreateDateTime.Equals(input.CreateDateTime))
                ) && 
                (
                    this.CreateUserId == input.CreateUserId ||
                    (this.CreateUserId != null &&
                    this.CreateUserId.Equals(input.CreateUserId))
                ) && 
                (
                    this.UpdateDateTime == input.UpdateDateTime ||
                    (this.UpdateDateTime != null &&
                    this.UpdateDateTime.Equals(input.UpdateDateTime))
                ) && 
                (
                    this.UpdateUserId == input.UpdateUserId ||
                    (this.UpdateUserId != null &&
                    this.UpdateUserId.Equals(input.UpdateUserId))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.StartAddress != null)
                {
                    hashCode = (hashCode * 59) + this.StartAddress.GetHashCode();
                }
                if (this.EndAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EndAddress.GetHashCode();
                }
                if (this.Resources != null)
                {
                    hashCode = (hashCode * 59) + this.Resources.GetHashCode();
                }
                if (this.Functions != null)
                {
                    hashCode = (hashCode * 59) + this.Functions.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.StartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartDateTime.GetHashCode();
                }
                if (this.EndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndDateTime.GetHashCode();
                }
                if (this.HexColor != null)
                {
                    hashCode = (hashCode * 59) + this.HexColor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                if (this.CreateDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreateDateTime.GetHashCode();
                }
                if (this.CreateUserId != null)
                {
                    hashCode = (hashCode * 59) + this.CreateUserId.GetHashCode();
                }
                if (this.UpdateDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateDateTime.GetHashCode();
                }
                if (this.UpdateUserId != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateUserId.GetHashCode();
                }
                if (this.OrganizationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
