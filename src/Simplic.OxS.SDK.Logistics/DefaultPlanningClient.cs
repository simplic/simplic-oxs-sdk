// <auto-generated>
/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Logistics
{
    //--Custom wrapper start
    /// <summary>
    /// Client to interact with the API endpoints of the logistics service.
    /// </summary>
    public interface IDefaultPlanningClient
    {
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        string GetBasePath();

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        //IReadableConfiguration Configuration;

        /// <summary>
        /// Gets plan for resource matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DefaultPlanningAssignmentResponse</returns>
        DefaultPlanningAssignmentResponse GetByResource(Guid resourceId, Guid shiftId = default(Guid));

        /// <summary>
        /// Gets plan for resource matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
/// <param name="shiftId"> (optional)</param>
        /// <returns>ApiResponse of DefaultPlanningAssignmentResponse</returns>
        ApiResponse<DefaultPlanningAssignmentResponse> GetByResourceWithHttpInfo(Guid resourceId, Guid shiftId = default(Guid));
         
        /// <summary>
        /// Gets plan for resource matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DefaultPlanningAssignmentResponse</returns>
        Task<DefaultPlanningAssignmentResponse> GetByResourceAsync(Guid resourceId, Guid shiftId = default(Guid), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets plan for resource matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DefaultPlanningAssignmentResponse)</returns>
        Task<ApiResponse<DefaultPlanningAssignmentResponse>> GetByResourceWithHttpInfoAsync(Guid resourceId, Guid shiftId = default(Guid), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the plan with given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DefaultPlanningAssignmentResponse</returns>
        DefaultPlanningAssignmentResponse GetByShift(Guid shiftId);

        /// <summary>
        /// Gets the plan with given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <returns>ApiResponse of DefaultPlanningAssignmentResponse</returns>
        ApiResponse<DefaultPlanningAssignmentResponse> GetByShiftWithHttpInfo(Guid shiftId);
         
        /// <summary>
        /// Gets the plan with given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DefaultPlanningAssignmentResponse</returns>
        Task<DefaultPlanningAssignmentResponse> GetByShiftAsync(Guid shiftId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the plan with given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DefaultPlanningAssignmentResponse)</returns>
        Task<ApiResponse<DefaultPlanningAssignmentResponse>> GetByShiftWithHttpInfoAsync(Guid shiftId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDefaultPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DefaultPlanningAssignmentResponse</returns>
        DefaultPlanningAssignmentResponse Post(PostDefaultPlanningRequest postDefaultPlanningRequest = default(PostDefaultPlanningRequest));

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDefaultPlanningRequest"> (optional)</param>
        /// <returns>ApiResponse of DefaultPlanningAssignmentResponse</returns>
        ApiResponse<DefaultPlanningAssignmentResponse> PostWithHttpInfo(PostDefaultPlanningRequest postDefaultPlanningRequest = default(PostDefaultPlanningRequest));
         
        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDefaultPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DefaultPlanningAssignmentResponse</returns>
        Task<DefaultPlanningAssignmentResponse> PostAsync(PostDefaultPlanningRequest postDefaultPlanningRequest = default(PostDefaultPlanningRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDefaultPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DefaultPlanningAssignmentResponse)</returns>
        Task<ApiResponse<DefaultPlanningAssignmentResponse>> PostWithHttpInfoAsync(PostDefaultPlanningRequest postDefaultPlanningRequest = default(PostDefaultPlanningRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete(Guid shiftId);

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(Guid shiftId);
         
        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAsync(Guid shiftId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid shiftId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="patchDefaultPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DefaultPlanningAssignmentResponse</returns>
        DefaultPlanningAssignmentResponse Patch(Guid shiftId, PatchDefaultPlanningRequest patchDefaultPlanningRequest = default(PatchDefaultPlanningRequest));

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
/// <param name="patchDefaultPlanningRequest"> (optional)</param>
        /// <returns>ApiResponse of DefaultPlanningAssignmentResponse</returns>
        ApiResponse<DefaultPlanningAssignmentResponse> PatchWithHttpInfo(Guid shiftId, PatchDefaultPlanningRequest patchDefaultPlanningRequest = default(PatchDefaultPlanningRequest));
         
        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="patchDefaultPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DefaultPlanningAssignmentResponse</returns>
        Task<DefaultPlanningAssignmentResponse> PatchAsync(Guid shiftId, PatchDefaultPlanningRequest patchDefaultPlanningRequest = default(PatchDefaultPlanningRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="patchDefaultPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DefaultPlanningAssignmentResponse)</returns>
        Task<ApiResponse<DefaultPlanningAssignmentResponse>> PatchWithHttpInfoAsync(Guid shiftId, PatchDefaultPlanningRequest patchDefaultPlanningRequest = default(PatchDefaultPlanningRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidateResponse</returns>
        ValidateResponse Validate();

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
                /// <returns>ApiResponse of ValidateResponse</returns>
        ApiResponse<ValidateResponse> ValidateWithHttpInfo();
         
        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateResponse</returns>
        Task<ValidateResponse> ValidateAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateResponse)</returns>
        Task<ApiResponse<ValidateResponse>> ValidateWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));

    }

    /// <inheritdoc cref="IDefaultPlanningClient">
    public class DefaultPlanningClient : IDefaultPlanningClient
    {
        private __DefaultPlanningClient _internalClient;
        private HttpClient _httpClient;

        public DefaultPlanningClient(string host, string? authorization = null)
        {
            _httpClient = new HttpClient() { BaseAddress = new Uri($"{host}/logistics-api/v1") };
            var jsonSerializerOptions = new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            var jsonSerializerOptionsProvider = new JsonSerializerOptionsProvider(jsonSerializerOptions);
            var events = new DefaultPlanningClientEvents();
            if (authorization is null)
            {
                _internalClient = new __DefaultPlanningClient(_httpClient, jsonSerializerOptionsProvider, events, new NullTokenProvider<ApiKeyToken>());
            }
            else
            {
                var token = new ApiKeyToken(authorization, "Authorization", "");
                _internalClient = new __DefaultPlanningClient(_httpClient, jsonSerializerOptionsProvider, events, new ApiKeyTokenProvider(new[] { token }));
            }
        }

        public DefaultPlanningClient(Environment env, string? authorization = null)
            : this(
                env == Environment.Development
                    ? "https://dev-oxs.simplic.io"
                    : "https://oxs.simplic.io",
                authorization
            ) { }

        /// <inheritdoc />
        public string GetBasePath() => _httpClient.BaseAddress.ToString();

        /// <inheritdoc />
        public DefaultPlanningAssignmentResponse GetByResource(Guid resourceId, Guid shiftId = default(Guid))
        {
            try
            {
                var response = _internalClient.GetByResourceAsync(resourceId, shiftId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<DefaultPlanningAssignmentResponse> GetByResourceWithHttpInfo(Guid resourceId, Guid shiftId = default(Guid))
        {
            try
            {
                var response = _internalClient.GetByResourceAsync(resourceId, shiftId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DefaultPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<DefaultPlanningAssignmentResponse> GetByResourceAsync(Guid resourceId, Guid shiftId = default(Guid), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByResourceAsync(resourceId, shiftId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<DefaultPlanningAssignmentResponse>> GetByResourceWithHttpInfoAsync(Guid resourceId, Guid shiftId = default(Guid), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByResourceAsync(resourceId, shiftId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DefaultPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public DefaultPlanningAssignmentResponse GetByShift(Guid shiftId)
        {
            try
            {
                var response = _internalClient.GetByShiftAsync(shiftId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<DefaultPlanningAssignmentResponse> GetByShiftWithHttpInfo(Guid shiftId)
        {
            try
            {
                var response = _internalClient.GetByShiftAsync(shiftId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DefaultPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<DefaultPlanningAssignmentResponse> GetByShiftAsync(Guid shiftId, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByShiftAsync(shiftId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<DefaultPlanningAssignmentResponse>> GetByShiftWithHttpInfoAsync(Guid shiftId, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.GetByShiftAsync(shiftId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DefaultPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public DefaultPlanningAssignmentResponse Post(PostDefaultPlanningRequest postDefaultPlanningRequest = default(PostDefaultPlanningRequest))
        {
            try
            {
                var response = _internalClient.PostAsync(postDefaultPlanningRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<DefaultPlanningAssignmentResponse> PostWithHttpInfo(PostDefaultPlanningRequest postDefaultPlanningRequest = default(PostDefaultPlanningRequest))
        {
            try
            {
                var response = _internalClient.PostAsync(postDefaultPlanningRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DefaultPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<DefaultPlanningAssignmentResponse> PostAsync(PostDefaultPlanningRequest postDefaultPlanningRequest = default(PostDefaultPlanningRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PostAsync(postDefaultPlanningRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<DefaultPlanningAssignmentResponse>> PostWithHttpInfoAsync(PostDefaultPlanningRequest postDefaultPlanningRequest = default(PostDefaultPlanningRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PostAsync(postDefaultPlanningRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DefaultPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public void Delete(Guid shiftId)
        {
            try
            {
                var response = _internalClient.DeleteAsync(shiftId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<Object> DeleteWithHttpInfo(Guid shiftId)
        {
            try
            {
                var response = _internalClient.DeleteAsync(shiftId).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task DeleteAsync(Guid shiftId, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.DeleteAsync(shiftId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(Guid shiftId, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.DeleteAsync(shiftId, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return new ApiResponse<Object>(response.StatusCode, response.Headers.ToMultimap(), null, response.RawContent);
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public DefaultPlanningAssignmentResponse Patch(Guid shiftId, PatchDefaultPlanningRequest patchDefaultPlanningRequest = default(PatchDefaultPlanningRequest))
        {
            try
            {
                var response = _internalClient.PatchAsync(shiftId, patchDefaultPlanningRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<DefaultPlanningAssignmentResponse> PatchWithHttpInfo(Guid shiftId, PatchDefaultPlanningRequest patchDefaultPlanningRequest = default(PatchDefaultPlanningRequest))
        {
            try
            {
                var response = _internalClient.PatchAsync(shiftId, patchDefaultPlanningRequest).GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DefaultPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<DefaultPlanningAssignmentResponse> PatchAsync(Guid shiftId, PatchDefaultPlanningRequest patchDefaultPlanningRequest = default(PatchDefaultPlanningRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PatchAsync(shiftId, patchDefaultPlanningRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<DefaultPlanningAssignmentResponse>> PatchWithHttpInfoAsync(Guid shiftId, PatchDefaultPlanningRequest patchDefaultPlanningRequest = default(PatchDefaultPlanningRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.PatchAsync(shiftId, patchDefaultPlanningRequest, cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<DefaultPlanningAssignmentResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    
        /// <inheritdoc />
        public ValidateResponse Validate()
        {
            try
            {
                var response = _internalClient.ValidateAsync().GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                return response.Ok();
                
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public ApiResponse<ValidateResponse> ValidateWithHttpInfo()
        {
            try
            {
                var response = _internalClient.ValidateAsync().GetAwaiter().GetResult();
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ValidateResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        } 

        /// <inheritdoc />
        public async Task<ValidateResponse> ValidateAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.ValidateAsync(cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
            
                return response.Ok();
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }

        /// <inheritdoc />
        public async Task<ApiResponse<ValidateResponse>> ValidateWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var response = await _internalClient.ValidateAsync(cancellationToken);
                if (!response.IsSuccessStatusCode)
                    throw new ApiException((int)response.StatusCode, response.ReasonPhrase, response.StatusCode, response.Headers.ToMultimap());
                
                
                return new ApiResponse<ValidateResponse>(response.StatusCode, response.Headers.ToMultimap(), response.Ok(), response.RawContent);
            }
            catch (ApiException e)
            {
                throw new ApiException(e.ErrorCode, FormatErrorMessage(e.Message, e.ErrorCode), e.ErrorContent, e.Headers);
            }
        }    

        private string FormatErrorMessage(string message, int errorCode) => $"<{errorCode} - {(HttpStatusCode)errorCode}> {message}";
    }
    //--Custom wrapper end
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    internal interface __IDefaultPlanningClient : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DefaultPlanningClientEvents Events { get; }

        /// <summary>
        /// Gets plan for resource matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse"/>&gt;</returns>
        Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse> GetByResourceAsync(Guid resourceId, Option<Guid> shiftId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets plan for resource matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="resourceId"></param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse"/>?&gt;</returns>
        Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse?> GetByResourceOrDefaultAsync(Guid resourceId, Option<Guid> shiftId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the plan with given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse"/>&gt;</returns>
        Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse> GetByShiftAsync(Guid shiftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the plan with given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="shiftId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse"/>?&gt;</returns>
        Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse?> GetByShiftOrDefaultAsync(Guid shiftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Posts a new plan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDefaultPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningPostApiResponse"/>&gt;</returns>
        Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningPostApiResponse> PostAsync(Option<PostDefaultPlanningRequest> postDefaultPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Posts a new plan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="postDefaultPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningPostApiResponse"/>?&gt;</returns>
        Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningPostApiResponse?> PostOrDefaultAsync(Option<PostDefaultPlanningRequest> postDefaultPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse"/>&gt;</returns>
        Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse> DeleteAsync(Guid shiftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="shiftId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse"/>?&gt;</returns>
        Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse?> DeleteOrDefaultAsync(Guid shiftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Patches plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="patchDefaultPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse"/>&gt;</returns>
        Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse> PatchAsync(Guid shiftId, Option<PatchDefaultPlanningRequest> patchDefaultPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Patches plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="shiftId"></param>
        /// <param name="patchDefaultPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse"/>?&gt;</returns>
        Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse?> PatchOrDefaultAsync(Guid shiftId, Option<PatchDefaultPlanningRequest> patchDefaultPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningValidateGetApiResponse"/>&gt;</returns>
        Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningValidateGetApiResponse> ValidateAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningValidateGetApiResponse"/>?&gt;</returns>
        Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningValidateGetApiResponse?> ValidateOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DefaultPlanningClientEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDefaultPlanningGetByResourceResourceIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDefaultPlanningGetByResourceResourceIdGet;

        internal void ExecuteOnDefaultPlanningGetByResourceResourceIdGet(__DefaultPlanningClient.DefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse apiResponse)
        {
            OnDefaultPlanningGetByResourceResourceIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDefaultPlanningGetByResourceResourceIdGet(Exception exception)
        {
            OnErrorDefaultPlanningGetByResourceResourceIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDefaultPlanningGetByShiftShiftIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDefaultPlanningGetByShiftShiftIdGet;

        internal void ExecuteOnDefaultPlanningGetByShiftShiftIdGet(__DefaultPlanningClient.DefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse apiResponse)
        {
            OnDefaultPlanningGetByShiftShiftIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDefaultPlanningGetByShiftShiftIdGet(Exception exception)
        {
            OnErrorDefaultPlanningGetByShiftShiftIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDefaultPlanningPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDefaultPlanningPost;

        internal void ExecuteOnDefaultPlanningPost(__DefaultPlanningClient.DefaultPlanningClientDefaultPlanningPostApiResponse apiResponse)
        {
            OnDefaultPlanningPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDefaultPlanningPost(Exception exception)
        {
            OnErrorDefaultPlanningPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDefaultPlanningShiftIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDefaultPlanningShiftIdDelete;

        internal void ExecuteOnDefaultPlanningShiftIdDelete(__DefaultPlanningClient.DefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse apiResponse)
        {
            OnDefaultPlanningShiftIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDefaultPlanningShiftIdDelete(Exception exception)
        {
            OnErrorDefaultPlanningShiftIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDefaultPlanningShiftIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDefaultPlanningShiftIdPatch;

        internal void ExecuteOnDefaultPlanningShiftIdPatch(__DefaultPlanningClient.DefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse apiResponse)
        {
            OnDefaultPlanningShiftIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDefaultPlanningShiftIdPatch(Exception exception)
        {
            OnErrorDefaultPlanningShiftIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDefaultPlanningValidateGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDefaultPlanningValidateGet;

        internal void ExecuteOnDefaultPlanningValidateGet(__DefaultPlanningClient.DefaultPlanningClientDefaultPlanningValidateGetApiResponse apiResponse)
        {
            OnDefaultPlanningValidateGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDefaultPlanningValidateGet(Exception exception)
        {
            OnErrorDefaultPlanningValidateGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal sealed partial class __DefaultPlanningClient : __IDefaultPlanningClient
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DefaultPlanningClientEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultPlanningClient"/> class.
        /// </summary>
        /// <returns></returns>
        public __DefaultPlanningClient(
            HttpClient httpClient,
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            DefaultPlanningClientEvents defaultPlanningClientEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider
        )
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            HttpClient = httpClient;
            Events = defaultPlanningClientEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatDefaultPlanningGetByResourceResourceIdGet(ref Guid resourceId, ref Option<Guid> shiftId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="resourceId"></param>
        /// <param name="shiftId"></param>
        private void AfterDefaultPlanningGetByResourceResourceIdGetDefaultImplementation(__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse apiResponseLocalVar, Guid resourceId, Option<Guid> shiftId)
        {
            bool suppressDefaultLog = false;
            AfterDefaultPlanningGetByResourceResourceIdGet(ref suppressDefaultLog, apiResponseLocalVar, resourceId, shiftId);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="resourceId"></param>
        /// <param name="shiftId"></param>
        partial void AfterDefaultPlanningGetByResourceResourceIdGet(ref bool suppressDefaultLog, __DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse apiResponseLocalVar, Guid resourceId, Option<Guid> shiftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="resourceId"></param>
        /// <param name="shiftId"></param>
        private void OnErrorDefaultPlanningGetByResourceResourceIdGetDefaultImplementation(Exception exception, string pathFormat, string path, Guid resourceId, Option<Guid> shiftId)
        {
            bool suppressDefaultLog = false;
            OnErrorDefaultPlanningGetByResourceResourceIdGet(ref suppressDefaultLog, exception, pathFormat, path, resourceId, shiftId);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="resourceId"></param>
        /// <param name="shiftId"></param>
        partial void OnErrorDefaultPlanningGetByResourceResourceIdGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid resourceId, Option<Guid> shiftId);

        /// <summary>
        /// Gets plan for resource matching given id. 
        /// </summary>
        /// <param name="resourceId"></param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse"/>&gt;</returns>
        public async Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse?> GetByResourceOrDefaultAsync(Guid resourceId, Option<Guid> shiftId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetByResourceAsync(resourceId, shiftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets plan for resource matching given id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse"/>&gt;</returns>
        public async Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse> GetByResourceAsync(Guid resourceId, Option<Guid> shiftId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDefaultPlanningGetByResourceResourceIdGet(ref resourceId, ref shiftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/DefaultPlanning/get-by-resource/{resourceId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BresourceId%7D", Uri.EscapeDataString(resourceId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (shiftId.IsSet)
                        parseQueryStringLocalVar["shiftId"] = shiftId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        DefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse apiResponseLocalVar = new DefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/DefaultPlanning/get-by-resource/{resourceId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDefaultPlanningGetByResourceResourceIdGetDefaultImplementation(apiResponseLocalVar, resourceId, shiftId);

                        Events.ExecuteOnDefaultPlanningGetByResourceResourceIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDefaultPlanningGetByResourceResourceIdGetDefaultImplementation(e, "/DefaultPlanning/get-by-resource/{resourceId}", uriBuilderLocalVar.Path, resourceId, shiftId);
                Events.ExecuteOnErrorDefaultPlanningGetByResourceResourceIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse"/>
        /// </summary>
        internal interface IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<DefaultPlanningAssignmentResponse>, IUnauthorized<ProblemDetails>, INotFound<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            bool IsNotFound { get; }
        }

        /// <summary>
        /// The <see cref="DefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse"/>
        /// </summary>
        internal partial class DefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IDefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse
        {
            /// <summary>
            /// The <see cref="DefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DefaultPlanningClientDefaultPlanningGetByResourceResourceIdGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public DefaultPlanningAssignmentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<DefaultPlanningAssignmentResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out DefaultPlanningAssignmentResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return IsNotFound;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDefaultPlanningGetByShiftShiftIdGet(ref Guid shiftId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shiftId"></param>
        private void AfterDefaultPlanningGetByShiftShiftIdGetDefaultImplementation(__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse apiResponseLocalVar, Guid shiftId)
        {
            bool suppressDefaultLog = false;
            AfterDefaultPlanningGetByShiftShiftIdGet(ref suppressDefaultLog, apiResponseLocalVar, shiftId);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shiftId"></param>
        partial void AfterDefaultPlanningGetByShiftShiftIdGet(ref bool suppressDefaultLog, __DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse apiResponseLocalVar, Guid shiftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="shiftId"></param>
        private void OnErrorDefaultPlanningGetByShiftShiftIdGetDefaultImplementation(Exception exception, string pathFormat, string path, Guid shiftId)
        {
            bool suppressDefaultLog = false;
            OnErrorDefaultPlanningGetByShiftShiftIdGet(ref suppressDefaultLog, exception, pathFormat, path, shiftId);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="shiftId"></param>
        partial void OnErrorDefaultPlanningGetByShiftShiftIdGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid shiftId);

        /// <summary>
        /// Gets the plan with given id. 
        /// </summary>
        /// <param name="shiftId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse"/>&gt;</returns>
        public async Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse?> GetByShiftOrDefaultAsync(Guid shiftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetByShiftAsync(shiftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the plan with given id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse"/>&gt;</returns>
        public async Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse> GetByShiftAsync(Guid shiftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDefaultPlanningGetByShiftShiftIdGet(ref shiftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/DefaultPlanning/get-by-shift/{shiftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshiftId%7D", Uri.EscapeDataString(shiftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        DefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse apiResponseLocalVar = new DefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/DefaultPlanning/get-by-shift/{shiftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDefaultPlanningGetByShiftShiftIdGetDefaultImplementation(apiResponseLocalVar, shiftId);

                        Events.ExecuteOnDefaultPlanningGetByShiftShiftIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDefaultPlanningGetByShiftShiftIdGetDefaultImplementation(e, "/DefaultPlanning/get-by-shift/{shiftId}", uriBuilderLocalVar.Path, shiftId);
                Events.ExecuteOnErrorDefaultPlanningGetByShiftShiftIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse"/>
        /// </summary>
        internal interface IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<DefaultPlanningAssignmentResponse>, IUnauthorized<ProblemDetails>, INotFound<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            bool IsNotFound { get; }
        }

        /// <summary>
        /// The <see cref="DefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse"/>
        /// </summary>
        internal partial class DefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IDefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse
        {
            /// <summary>
            /// The <see cref="DefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DefaultPlanningClientDefaultPlanningGetByShiftShiftIdGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public DefaultPlanningAssignmentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<DefaultPlanningAssignmentResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out DefaultPlanningAssignmentResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return IsNotFound;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDefaultPlanningPost(Option<PostDefaultPlanningRequest> postDefaultPlanningRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postDefaultPlanningRequest"></param>
        /// <returns></returns>
        private void ValidateDefaultPlanningPost(Option<PostDefaultPlanningRequest> postDefaultPlanningRequest)
        {
            if (postDefaultPlanningRequest.IsSet && postDefaultPlanningRequest.Value == null)
                throw new ArgumentNullException(nameof(postDefaultPlanningRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postDefaultPlanningRequest"></param>
        private void AfterDefaultPlanningPostDefaultImplementation(__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningPostApiResponse apiResponseLocalVar, Option<PostDefaultPlanningRequest> postDefaultPlanningRequest)
        {
            bool suppressDefaultLog = false;
            AfterDefaultPlanningPost(ref suppressDefaultLog, apiResponseLocalVar, postDefaultPlanningRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postDefaultPlanningRequest"></param>
        partial void AfterDefaultPlanningPost(ref bool suppressDefaultLog, __DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningPostApiResponse apiResponseLocalVar, Option<PostDefaultPlanningRequest> postDefaultPlanningRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postDefaultPlanningRequest"></param>
        private void OnErrorDefaultPlanningPostDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostDefaultPlanningRequest> postDefaultPlanningRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorDefaultPlanningPost(ref suppressDefaultLog, exception, pathFormat, path, postDefaultPlanningRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postDefaultPlanningRequest"></param>
        partial void OnErrorDefaultPlanningPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostDefaultPlanningRequest> postDefaultPlanningRequest);

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <param name="postDefaultPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningPostApiResponse"/>&gt;</returns>
        public async Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningPostApiResponse?> PostOrDefaultAsync(Option<PostDefaultPlanningRequest> postDefaultPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostAsync(postDefaultPlanningRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDefaultPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningPostApiResponse"/>&gt;</returns>
        public async Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningPostApiResponse> PostAsync(Option<PostDefaultPlanningRequest> postDefaultPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDefaultPlanningPost(postDefaultPlanningRequest);

                FormatDefaultPlanningPost(postDefaultPlanningRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/DefaultPlanning";

                    if (postDefaultPlanningRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postDefaultPlanningRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postDefaultPlanningRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        DefaultPlanningClientDefaultPlanningPostApiResponse apiResponseLocalVar = new DefaultPlanningClientDefaultPlanningPostApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/DefaultPlanning", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDefaultPlanningPostDefaultImplementation(apiResponseLocalVar, postDefaultPlanningRequest);

                        Events.ExecuteOnDefaultPlanningPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDefaultPlanningPostDefaultImplementation(e, "/DefaultPlanning", uriBuilderLocalVar.Path, postDefaultPlanningRequest);
                Events.ExecuteOnErrorDefaultPlanningPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IDefaultPlanningClientDefaultPlanningPostApiResponse"/>
        /// </summary>
        internal interface IDefaultPlanningClientDefaultPlanningPostApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<DefaultPlanningAssignmentResponse>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="DefaultPlanningClientDefaultPlanningPostApiResponse"/>
        /// </summary>
        internal partial class DefaultPlanningClientDefaultPlanningPostApiResponse : Simplic.OxS.SDK.__ApiResponse, IDefaultPlanningClientDefaultPlanningPostApiResponse
        {
            /// <summary>
            /// The <see cref="DefaultPlanningClientDefaultPlanningPostApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DefaultPlanningClientDefaultPlanningPostApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public DefaultPlanningAssignmentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<DefaultPlanningAssignmentResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out DefaultPlanningAssignmentResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDefaultPlanningShiftIdDelete(ref Guid shiftId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shiftId"></param>
        private void AfterDefaultPlanningShiftIdDeleteDefaultImplementation(__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse apiResponseLocalVar, Guid shiftId)
        {
            bool suppressDefaultLog = false;
            AfterDefaultPlanningShiftIdDelete(ref suppressDefaultLog, apiResponseLocalVar, shiftId);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shiftId"></param>
        partial void AfterDefaultPlanningShiftIdDelete(ref bool suppressDefaultLog, __DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse apiResponseLocalVar, Guid shiftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="shiftId"></param>
        private void OnErrorDefaultPlanningShiftIdDeleteDefaultImplementation(Exception exception, string pathFormat, string path, Guid shiftId)
        {
            bool suppressDefaultLog = false;
            OnErrorDefaultPlanningShiftIdDelete(ref suppressDefaultLog, exception, pathFormat, path, shiftId);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="shiftId"></param>
        partial void OnErrorDefaultPlanningShiftIdDelete(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid shiftId);

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <param name="shiftId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse"/>&gt;</returns>
        public async Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse?> DeleteOrDefaultAsync(Guid shiftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAsync(shiftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse"/>&gt;</returns>
        public async Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse> DeleteAsync(Guid shiftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDefaultPlanningShiftIdDelete(ref shiftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/DefaultPlanning/{shiftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshiftId%7D", Uri.EscapeDataString(shiftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        DefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse apiResponseLocalVar = new DefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/DefaultPlanning/{shiftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDefaultPlanningShiftIdDeleteDefaultImplementation(apiResponseLocalVar, shiftId);

                        Events.ExecuteOnDefaultPlanningShiftIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDefaultPlanningShiftIdDeleteDefaultImplementation(e, "/DefaultPlanning/{shiftId}", uriBuilderLocalVar.Path, shiftId);
                Events.ExecuteOnErrorDefaultPlanningShiftIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse"/>
        /// </summary>
        internal interface IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse : Simplic.OxS.SDK.__IApiResponse, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>, INotFound<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            bool IsNotFound { get; }
        }

        /// <summary>
        /// The <see cref="DefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse"/>
        /// </summary>
        internal partial class DefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse : Simplic.OxS.SDK.__ApiResponse, IDefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse
        {
            /// <summary>
            /// The <see cref="DefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DefaultPlanningClientDefaultPlanningShiftIdDeleteApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return IsNotFound;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDefaultPlanningShiftIdPatch(ref Guid shiftId, Option<PatchDefaultPlanningRequest> patchDefaultPlanningRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="patchDefaultPlanningRequest"></param>
        /// <returns></returns>
        private void ValidateDefaultPlanningShiftIdPatch(Option<PatchDefaultPlanningRequest> patchDefaultPlanningRequest)
        {
            if (patchDefaultPlanningRequest.IsSet && patchDefaultPlanningRequest.Value == null)
                throw new ArgumentNullException(nameof(patchDefaultPlanningRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shiftId"></param>
        /// <param name="patchDefaultPlanningRequest"></param>
        private void AfterDefaultPlanningShiftIdPatchDefaultImplementation(__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse apiResponseLocalVar, Guid shiftId, Option<PatchDefaultPlanningRequest> patchDefaultPlanningRequest)
        {
            bool suppressDefaultLog = false;
            AfterDefaultPlanningShiftIdPatch(ref suppressDefaultLog, apiResponseLocalVar, shiftId, patchDefaultPlanningRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shiftId"></param>
        /// <param name="patchDefaultPlanningRequest"></param>
        partial void AfterDefaultPlanningShiftIdPatch(ref bool suppressDefaultLog, __DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse apiResponseLocalVar, Guid shiftId, Option<PatchDefaultPlanningRequest> patchDefaultPlanningRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="shiftId"></param>
        /// <param name="patchDefaultPlanningRequest"></param>
        private void OnErrorDefaultPlanningShiftIdPatchDefaultImplementation(Exception exception, string pathFormat, string path, Guid shiftId, Option<PatchDefaultPlanningRequest> patchDefaultPlanningRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorDefaultPlanningShiftIdPatch(ref suppressDefaultLog, exception, pathFormat, path, shiftId, patchDefaultPlanningRequest);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="shiftId"></param>
        /// <param name="patchDefaultPlanningRequest"></param>
        partial void OnErrorDefaultPlanningShiftIdPatch(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid shiftId, Option<PatchDefaultPlanningRequest> patchDefaultPlanningRequest);

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <param name="shiftId"></param>
        /// <param name="patchDefaultPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse"/>&gt;</returns>
        public async Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse?> PatchOrDefaultAsync(Guid shiftId, Option<PatchDefaultPlanningRequest> patchDefaultPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PatchAsync(shiftId, patchDefaultPlanningRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="patchDefaultPlanningRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse"/>&gt;</returns>
        public async Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse> PatchAsync(Guid shiftId, Option<PatchDefaultPlanningRequest> patchDefaultPlanningRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDefaultPlanningShiftIdPatch(patchDefaultPlanningRequest);

                FormatDefaultPlanningShiftIdPatch(ref shiftId, patchDefaultPlanningRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/DefaultPlanning/{shiftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshiftId%7D", Uri.EscapeDataString(shiftId.ToString()));

                    if (patchDefaultPlanningRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (patchDefaultPlanningRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchDefaultPlanningRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        DefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse apiResponseLocalVar = new DefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/DefaultPlanning/{shiftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDefaultPlanningShiftIdPatchDefaultImplementation(apiResponseLocalVar, shiftId, patchDefaultPlanningRequest);

                        Events.ExecuteOnDefaultPlanningShiftIdPatch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDefaultPlanningShiftIdPatchDefaultImplementation(e, "/DefaultPlanning/{shiftId}", uriBuilderLocalVar.Path, shiftId, patchDefaultPlanningRequest);
                Events.ExecuteOnErrorDefaultPlanningShiftIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse"/>
        /// </summary>
        internal interface IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<DefaultPlanningAssignmentResponse>, IBadRequest<ProblemDetails>, IUnauthorized<ProblemDetails>, INotFound<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            bool IsBadRequest { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
    
            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            bool IsNotFound { get; }
        }

        /// <summary>
        /// The <see cref="DefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse"/>
        /// </summary>
        internal partial class DefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse : Simplic.OxS.SDK.__ApiResponse, IDefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse
        {
            /// <summary>
            /// The <see cref="DefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DefaultPlanningClientDefaultPlanningShiftIdPatchApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public DefaultPlanningAssignmentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<DefaultPlanningAssignmentResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out DefaultPlanningAssignmentResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return IsBadRequest;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return IsNotFound;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterDefaultPlanningValidateGetDefaultImplementation(__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningValidateGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterDefaultPlanningValidateGet(ref suppressDefaultLog, apiResponseLocalVar);
            //if (!suppressDefaultLog)
            //    Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterDefaultPlanningValidateGet(ref bool suppressDefaultLog, __DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningValidateGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorDefaultPlanningValidateGetDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorDefaultPlanningValidateGet(ref suppressDefaultLog, exception, pathFormat, path);
            //if (!suppressDefaultLog)
            //    Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorDefaultPlanningValidateGet(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningValidateGetApiResponse"/>&gt;</returns>
        public async Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningValidateGetApiResponse?> ValidateOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ValidateAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningValidateGetApiResponse"/>&gt;</returns>
        public async Task<__DefaultPlanningClient.IDefaultPlanningClientDefaultPlanningValidateGetApiResponse> ValidateAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.PathAndQuery + "/DefaultPlanning/validate";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    if (ApiKeyProvider.HasTokens)
                    {
                        ApiKeyToken apiKeyTokenLocalVar;
                        apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);
                        tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                        //apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "Authorization");
                        apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar);
                    }
                    

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        DefaultPlanningClientDefaultPlanningValidateGetApiResponse apiResponseLocalVar = new DefaultPlanningClientDefaultPlanningValidateGetApiResponse(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/DefaultPlanning/validate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDefaultPlanningValidateGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnDefaultPlanningValidateGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDefaultPlanningValidateGetDefaultImplementation(e, "/DefaultPlanning/validate", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorDefaultPlanningValidateGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IDefaultPlanningClientDefaultPlanningValidateGetApiResponse"/>
        /// </summary>
        internal interface IDefaultPlanningClientDefaultPlanningValidateGetApiResponse : Simplic.OxS.SDK.__IApiResponse, IOk<ValidateResponse>, IUnauthorized<ProblemDetails>
        {
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            bool IsOk { get; }
    
            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            bool IsUnauthorized { get; }
        }

        /// <summary>
        /// The <see cref="DefaultPlanningClientDefaultPlanningValidateGetApiResponse"/>
        /// </summary>
        internal partial class DefaultPlanningClientDefaultPlanningValidateGetApiResponse : Simplic.OxS.SDK.__ApiResponse, IDefaultPlanningClientDefaultPlanningValidateGetApiResponse
        {
            /// <summary>
            /// The <see cref="DefaultPlanningClientDefaultPlanningValidateGetApiResponse"/>
            /// </summary>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DefaultPlanningClientDefaultPlanningValidateGetApiResponse(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ValidateResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ValidateResponse>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ValidateResponse result)
            {
                result = default;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return IsOk;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized.
            /// Throws <see cref="ApiException"> otherwise.
            /// </summary>
            /// <returns></returns>
            public ProblemDetails Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : throw new ApiException((int)StatusCode, ReasonPhrase ?? "", StatusCode, Headers.ToMultimap());
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out ProblemDetails result)
            {
                result = default;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return IsUnauthorized;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                //if (!suppressDefaultLog)
                //    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
