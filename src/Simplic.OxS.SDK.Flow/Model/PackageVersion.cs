/*
 * Simplic.OxS.flow
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Flow
{
    /// <summary>
    /// PackageVersion
    /// </summary>
    [DataContract(Name = "PackageVersion")]
    public partial class PackageVersion : IEquatable<PackageVersion>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name = "kind", EmitDefaultValue = false)]
        public PackageVersionKind? Kind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageVersion" /> class.
        /// </summary>
        /// <param name="kind">kind.</param>
        public PackageVersion(PackageVersionKind? kind = default(PackageVersionKind?))
        {
            this.Kind = kind;
        }

        /// <summary>
        /// Gets or Sets IsLatest
        /// </summary>
        [DataMember(Name = "isLatest", EmitDefaultValue = true)]
        public bool IsLatest { get; private set; }

        /// <summary>
        /// Returns false as IsLatest should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsLatest()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsExact
        /// </summary>
        [DataMember(Name = "isExact", EmitDefaultValue = true)]
        public bool IsExact { get; private set; }

        /// <summary>
        /// Returns false as IsExact should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsExact()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Major
        /// </summary>
        [DataMember(Name = "major", EmitDefaultValue = false)]
        public int Major { get; private set; }

        /// <summary>
        /// Returns false as Major should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMajor()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Minor
        /// </summary>
        [DataMember(Name = "minor", EmitDefaultValue = false)]
        public int Minor { get; private set; }

        /// <summary>
        /// Returns false as Minor should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMinor()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Patch
        /// </summary>
        [DataMember(Name = "patch", EmitDefaultValue = false)]
        public int Patch { get; private set; }

        /// <summary>
        /// Returns false as Patch should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePatch()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; private set; }

        /// <summary>
        /// Returns false as Revision should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRevision()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Normalized
        /// </summary>
        [DataMember(Name = "normalized", EmitDefaultValue = true)]
        public string Normalized { get; private set; }

        /// <summary>
        /// Returns false as Normalized should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNormalized()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackageVersion {\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  IsLatest: ").Append(IsLatest).Append("\n");
            sb.Append("  IsExact: ").Append(IsExact).Append("\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  Minor: ").Append(Minor).Append("\n");
            sb.Append("  Patch: ").Append(Patch).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Normalized: ").Append(Normalized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackageVersion);
        }

        /// <summary>
        /// Returns true if PackageVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of PackageVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageVersion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Kind == input.Kind ||
                    this.Kind.Equals(input.Kind)
                ) && 
                (
                    this.IsLatest == input.IsLatest ||
                    this.IsLatest.Equals(input.IsLatest)
                ) && 
                (
                    this.IsExact == input.IsExact ||
                    this.IsExact.Equals(input.IsExact)
                ) && 
                (
                    this.Major == input.Major ||
                    this.Major.Equals(input.Major)
                ) && 
                (
                    this.Minor == input.Minor ||
                    this.Minor.Equals(input.Minor)
                ) && 
                (
                    this.Patch == input.Patch ||
                    this.Patch.Equals(input.Patch)
                ) && 
                (
                    this.Revision == input.Revision ||
                    this.Revision.Equals(input.Revision)
                ) && 
                (
                    this.Normalized == input.Normalized ||
                    (this.Normalized != null &&
                    this.Normalized.Equals(input.Normalized))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Kind.GetHashCode();
                hashCode = (hashCode * 59) + this.IsLatest.GetHashCode();
                hashCode = (hashCode * 59) + this.IsExact.GetHashCode();
                hashCode = (hashCode * 59) + this.Major.GetHashCode();
                hashCode = (hashCode * 59) + this.Minor.GetHashCode();
                hashCode = (hashCode * 59) + this.Patch.GetHashCode();
                hashCode = (hashCode * 59) + this.Revision.GetHashCode();
                if (this.Normalized != null)
                {
                    hashCode = (hashCode * 59) + this.Normalized.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
