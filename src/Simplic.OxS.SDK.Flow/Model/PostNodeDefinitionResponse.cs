/*
 * Simplic.OxS.flow
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Flow
{
    /// <summary>
    /// PostNodeDefinitionResponse
    /// </summary>
    [DataContract(Name = "PostNodeDefinitionResponse")]
    public partial class PostNodeDefinitionResponse : IEquatable<PostNodeDefinitionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostNodeDefinitionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostNodeDefinitionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostNodeDefinitionResponse" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="markdown">markdown (required).</param>
        /// <param name="target">target (required).</param>
        /// <param name="customDataInPinTemplate">customDataInPinTemplate.</param>
        /// <param name="customFlowOutPinTemplate">customFlowOutPinTemplate.</param>
        /// <param name="dataInPins">dataInPins.</param>
        /// <param name="dataOutPins">dataOutPins.</param>
        /// <param name="flowOutPins">flowOutPins.</param>
        /// <param name="package">package (required).</param>
        public PostNodeDefinitionResponse(string id = default(string), string type = default(string), string eventName = default(string), string name = default(string), string description = default(string), string markdown = default(string), string target = default(string), CustomDataInPinTemplateDefinition customDataInPinTemplate = default(CustomDataInPinTemplateDefinition), CustomFlowOutPinTemplateDefinition customFlowOutPinTemplate = default(CustomFlowOutPinTemplateDefinition), List<DataInPinDefinition> dataInPins = default(List<DataInPinDefinition>), List<DataOutPinDefinition> dataOutPins = default(List<DataOutPinDefinition>), List<FlowOutPinDefinition> flowOutPins = default(List<FlowOutPinDefinition>), NodePackageResponse package = default(NodePackageResponse))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PostNodeDefinitionResponse and cannot be null");
            }
            this.Id = id;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for PostNodeDefinitionResponse and cannot be null");
            }
            this.Type = type;
            // to ensure "markdown" is required (not null)
            if (markdown == null)
            {
                throw new ArgumentNullException("markdown is a required property for PostNodeDefinitionResponse and cannot be null");
            }
            this.Markdown = markdown;
            // to ensure "target" is required (not null)
            if (target == null)
            {
                throw new ArgumentNullException("target is a required property for PostNodeDefinitionResponse and cannot be null");
            }
            this.Target = target;
            // to ensure "package" is required (not null)
            if (package == null)
            {
                throw new ArgumentNullException("package is a required property for PostNodeDefinitionResponse and cannot be null");
            }
            this.Package = package;
            this.EventName = eventName;
            this.Name = name;
            this.Description = description;
            this.CustomDataInPinTemplate = customDataInPinTemplate;
            this.CustomFlowOutPinTemplate = customFlowOutPinTemplate;
            this.DataInPins = dataInPins;
            this.DataOutPins = dataOutPins;
            this.FlowOutPins = flowOutPins;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name = "eventName", EmitDefaultValue = true)]
        public string EventName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Markdown
        /// </summary>
        [DataMember(Name = "markdown", IsRequired = true, EmitDefaultValue = true)]
        public string Markdown { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", IsRequired = true, EmitDefaultValue = true)]
        public string Target { get; set; }

        /// <summary>
        /// Gets or Sets CustomDataInPinTemplate
        /// </summary>
        [DataMember(Name = "customDataInPinTemplate", EmitDefaultValue = false)]
        public CustomDataInPinTemplateDefinition CustomDataInPinTemplate { get; set; }

        /// <summary>
        /// Gets or Sets CustomFlowOutPinTemplate
        /// </summary>
        [DataMember(Name = "customFlowOutPinTemplate", EmitDefaultValue = false)]
        public CustomFlowOutPinTemplateDefinition CustomFlowOutPinTemplate { get; set; }

        /// <summary>
        /// Gets or Sets DataInPins
        /// </summary>
        [DataMember(Name = "dataInPins", EmitDefaultValue = true)]
        public List<DataInPinDefinition> DataInPins { get; set; }

        /// <summary>
        /// Gets or Sets DataOutPins
        /// </summary>
        [DataMember(Name = "dataOutPins", EmitDefaultValue = true)]
        public List<DataOutPinDefinition> DataOutPins { get; set; }

        /// <summary>
        /// Gets or Sets FlowOutPins
        /// </summary>
        [DataMember(Name = "flowOutPins", EmitDefaultValue = true)]
        public List<FlowOutPinDefinition> FlowOutPins { get; set; }

        /// <summary>
        /// Gets or Sets Package
        /// </summary>
        [DataMember(Name = "package", IsRequired = true, EmitDefaultValue = true)]
        public NodePackageResponse Package { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostNodeDefinitionResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Markdown: ").Append(Markdown).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  CustomDataInPinTemplate: ").Append(CustomDataInPinTemplate).Append("\n");
            sb.Append("  CustomFlowOutPinTemplate: ").Append(CustomFlowOutPinTemplate).Append("\n");
            sb.Append("  DataInPins: ").Append(DataInPins).Append("\n");
            sb.Append("  DataOutPins: ").Append(DataOutPins).Append("\n");
            sb.Append("  FlowOutPins: ").Append(FlowOutPins).Append("\n");
            sb.Append("  Package: ").Append(Package).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostNodeDefinitionResponse);
        }

        /// <summary>
        /// Returns true if PostNodeDefinitionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PostNodeDefinitionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostNodeDefinitionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Markdown == input.Markdown ||
                    (this.Markdown != null &&
                    this.Markdown.Equals(input.Markdown))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.CustomDataInPinTemplate == input.CustomDataInPinTemplate ||
                    (this.CustomDataInPinTemplate != null &&
                    this.CustomDataInPinTemplate.Equals(input.CustomDataInPinTemplate))
                ) && 
                (
                    this.CustomFlowOutPinTemplate == input.CustomFlowOutPinTemplate ||
                    (this.CustomFlowOutPinTemplate != null &&
                    this.CustomFlowOutPinTemplate.Equals(input.CustomFlowOutPinTemplate))
                ) && 
                (
                    this.DataInPins == input.DataInPins ||
                    this.DataInPins != null &&
                    input.DataInPins != null &&
                    this.DataInPins.SequenceEqual(input.DataInPins)
                ) && 
                (
                    this.DataOutPins == input.DataOutPins ||
                    this.DataOutPins != null &&
                    input.DataOutPins != null &&
                    this.DataOutPins.SequenceEqual(input.DataOutPins)
                ) && 
                (
                    this.FlowOutPins == input.FlowOutPins ||
                    this.FlowOutPins != null &&
                    input.FlowOutPins != null &&
                    this.FlowOutPins.SequenceEqual(input.FlowOutPins)
                ) && 
                (
                    this.Package == input.Package ||
                    (this.Package != null &&
                    this.Package.Equals(input.Package))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.EventName != null)
                {
                    hashCode = (hashCode * 59) + this.EventName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Markdown != null)
                {
                    hashCode = (hashCode * 59) + this.Markdown.GetHashCode();
                }
                if (this.Target != null)
                {
                    hashCode = (hashCode * 59) + this.Target.GetHashCode();
                }
                if (this.CustomDataInPinTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.CustomDataInPinTemplate.GetHashCode();
                }
                if (this.CustomFlowOutPinTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFlowOutPinTemplate.GetHashCode();
                }
                if (this.DataInPins != null)
                {
                    hashCode = (hashCode * 59) + this.DataInPins.GetHashCode();
                }
                if (this.DataOutPins != null)
                {
                    hashCode = (hashCode * 59) + this.DataOutPins.GetHashCode();
                }
                if (this.FlowOutPins != null)
                {
                    hashCode = (hashCode * 59) + this.FlowOutPins.GetHashCode();
                }
                if (this.Package != null)
                {
                    hashCode = (hashCode * 59) + this.Package.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
