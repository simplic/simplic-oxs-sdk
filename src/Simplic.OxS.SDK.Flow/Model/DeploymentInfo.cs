/*
 * Simplic.OxS.flow
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Flow
{
    /// <summary>
    /// DeploymentInfo
    /// </summary>
    [DataContract(Name = "DeploymentInfo")]
    public partial class DeploymentInfo : IEquatable<DeploymentInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeploymentInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentInfo" /> class.
        /// </summary>
        /// <param name="packages">packages (required).</param>
        /// <param name="assemblies">assemblies (required).</param>
        /// <param name="totalSize">totalSize (required).</param>
        public DeploymentInfo(List<NodePackage> packages = default(List<NodePackage>), List<string> assemblies = default(List<string>), long totalSize = default(long))
        {
            // to ensure "packages" is required (not null)
            if (packages == null)
            {
                throw new ArgumentNullException("packages is a required property for DeploymentInfo and cannot be null");
            }
            this.Packages = packages;
            // to ensure "assemblies" is required (not null)
            if (assemblies == null)
            {
                throw new ArgumentNullException("assemblies is a required property for DeploymentInfo and cannot be null");
            }
            this.Assemblies = assemblies;
            this.TotalSize = totalSize;
        }

        /// <summary>
        /// Gets or Sets Packages
        /// </summary>
        [DataMember(Name = "packages", IsRequired = true, EmitDefaultValue = true)]
        public List<NodePackage> Packages { get; set; }

        /// <summary>
        /// Gets or Sets Assemblies
        /// </summary>
        [DataMember(Name = "assemblies", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Assemblies { get; set; }

        /// <summary>
        /// Gets or Sets TotalSize
        /// </summary>
        [DataMember(Name = "totalSize", IsRequired = true, EmitDefaultValue = true)]
        public long TotalSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeploymentInfo {\n");
            sb.Append("  Packages: ").Append(Packages).Append("\n");
            sb.Append("  Assemblies: ").Append(Assemblies).Append("\n");
            sb.Append("  TotalSize: ").Append(TotalSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeploymentInfo);
        }

        /// <summary>
        /// Returns true if DeploymentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DeploymentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeploymentInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Packages == input.Packages ||
                    this.Packages != null &&
                    input.Packages != null &&
                    this.Packages.SequenceEqual(input.Packages)
                ) && 
                (
                    this.Assemblies == input.Assemblies ||
                    this.Assemblies != null &&
                    input.Assemblies != null &&
                    this.Assemblies.SequenceEqual(input.Assemblies)
                ) && 
                (
                    this.TotalSize == input.TotalSize ||
                    this.TotalSize.Equals(input.TotalSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Packages != null)
                {
                    hashCode = (hashCode * 59) + this.Packages.GetHashCode();
                }
                if (this.Assemblies != null)
                {
                    hashCode = (hashCode * 59) + this.Assemblies.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
