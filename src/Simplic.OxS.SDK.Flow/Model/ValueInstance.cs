/*
 * Simplic.OxS.flow
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Flow
{
    /// <summary>
    /// ValueInstance
    /// </summary>
    [DataContract(Name = "ValueInstance")]
    public partial class ValueInstance : IEquatable<ValueInstance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValueInstance" /> class.
        /// </summary>
        /// <param name="varStatic">varStatic.</param>
        /// <param name="source">source.</param>
        public ValueInstance(Object varStatic = default(Object), Guid? source = default(Guid?))
        {
            this.VarStatic = varStatic;
            this.Source = source;
        }

        /// <summary>
        /// Gets or Sets VarStatic
        /// </summary>
        [DataMember(Name = "static", EmitDefaultValue = true)]
        public Object VarStatic { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public Guid? Source { get; set; }

        /// <summary>
        /// Gets or Sets IsNull
        /// </summary>
        [DataMember(Name = "isNull", EmitDefaultValue = true)]
        public bool IsNull { get; private set; }

        /// <summary>
        /// Returns false as IsNull should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsNull()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValueInstance {\n");
            sb.Append("  VarStatic: ").Append(VarStatic).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  IsNull: ").Append(IsNull).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValueInstance);
        }

        /// <summary>
        /// Returns true if ValueInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of ValueInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValueInstance input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarStatic == input.VarStatic ||
                    (this.VarStatic != null &&
                    this.VarStatic.Equals(input.VarStatic))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.IsNull == input.IsNull ||
                    this.IsNull.Equals(input.IsNull)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarStatic != null)
                {
                    hashCode = (hashCode * 59) + this.VarStatic.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsNull.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
