/*
 * Simplic.OxS.flow
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Flow
{
    /// <summary>
    /// PostPackageRequest
    /// </summary>
    [DataContract(Name = "PostPackageRequest")]
    public partial class PostPackageRequest : IEquatable<PostPackageRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostPackageRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostPackageRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostPackageRequest" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="assemblyName">assemblyName (required).</param>
        public PostPackageRequest(string name = default(string), string varVersion = default(string), string assemblyName = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PostPackageRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "assemblyName" is required (not null)
            if (assemblyName == null)
            {
                throw new ArgumentNullException("assemblyName is a required property for PostPackageRequest and cannot be null");
            }
            this.AssemblyName = assemblyName;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets AssemblyName
        /// </summary>
        [DataMember(Name = "assemblyName", IsRequired = true, EmitDefaultValue = true)]
        public string AssemblyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostPackageRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  AssemblyName: ").Append(AssemblyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostPackageRequest);
        }

        /// <summary>
        /// Returns true if PostPackageRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostPackageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostPackageRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.AssemblyName == input.AssemblyName ||
                    (this.AssemblyName != null &&
                    this.AssemblyName.Equals(input.AssemblyName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.AssemblyName != null)
                {
                    hashCode = (hashCode * 59) + this.AssemblyName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // AssemblyName (string) minLength
            if (this.AssemblyName != null && this.AssemblyName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssemblyName, length must be greater than 1.", new [] { "AssemblyName" });
            }

            yield break;
        }
    }

}
