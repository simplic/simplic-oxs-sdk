/*
 * Simplic.OxS.flow
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Flow
{
    /// <summary>
    /// DebugInfo
    /// </summary>
    [DataContract(Name = "DebugInfo")]
    public partial class DebugInfo : IEquatable<DebugInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DebugInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DebugInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DebugInfo" /> class.
        /// </summary>
        /// <param name="time">time.</param>
        /// <param name="node">node (required).</param>
        /// <param name="error">error.</param>
        /// <param name="stackTrace">stackTrace.</param>
        public DebugInfo(DateTime time = default(DateTime), NodeScope node = default(NodeScope), string error = default(string), Dictionary<string, NodeScope> stackTrace = default(Dictionary<string, NodeScope>))
        {
            // to ensure "node" is required (not null)
            if (node == null)
            {
                throw new ArgumentNullException("node is a required property for DebugInfo and cannot be null");
            }
            this.Node = node;
            this.Time = time;
            this.Error = error;
            this.StackTrace = stackTrace;
        }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public DateTime Time { get; set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name = "node", IsRequired = true, EmitDefaultValue = true)]
        public NodeScope Node { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets StackTrace
        /// </summary>
        [DataMember(Name = "stackTrace", EmitDefaultValue = true)]
        public Dictionary<string, NodeScope> StackTrace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DebugInfo {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  StackTrace: ").Append(StackTrace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebugInfo);
        }

        /// <summary>
        /// Returns true if DebugInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DebugInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebugInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Node == input.Node ||
                    (this.Node != null &&
                    this.Node.Equals(input.Node))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.StackTrace == input.StackTrace ||
                    this.StackTrace != null &&
                    input.StackTrace != null &&
                    this.StackTrace.SequenceEqual(input.StackTrace)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Time != null)
                {
                    hashCode = (hashCode * 59) + this.Time.GetHashCode();
                }
                if (this.Node != null)
                {
                    hashCode = (hashCode * 59) + this.Node.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.StackTrace != null)
                {
                    hashCode = (hashCode * 59) + this.StackTrace.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
