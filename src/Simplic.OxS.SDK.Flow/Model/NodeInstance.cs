/*
 * Simplic.OxS.flow
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Flow
{
    /// <summary>
    /// NodeInstance
    /// </summary>
    [DataContract(Name = "NodeInstance")]
    public partial class NodeInstance : IEquatable<NodeInstance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeInstance" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="nodeType">nodeType.</param>
        /// <param name="description">description.</param>
        /// <param name="position">position.</param>
        /// <param name="customDataInPins">customDataInPins.</param>
        /// <param name="customFlowOutPins">customFlowOutPins.</param>
        /// <param name="dataInPins">dataInPins.</param>
        /// <param name="dataOutPins">dataOutPins.</param>
        /// <param name="flowOutPins">flowOutPins.</param>
        public NodeInstance(Guid id = default(Guid), string nodeType = default(string), string description = default(string), Point position = default(Point), List<CustomDataInPinInstance> customDataInPins = default(List<CustomDataInPinInstance>), List<CustomFlowOutPinInstance> customFlowOutPins = default(List<CustomFlowOutPinInstance>), List<DataInPinInstance> dataInPins = default(List<DataInPinInstance>), List<DataOutPinInstance> dataOutPins = default(List<DataOutPinInstance>), List<FlowOutPinInstance> flowOutPins = default(List<FlowOutPinInstance>))
        {
            this.Id = id;
            this.NodeType = nodeType;
            this.Description = description;
            this.Position = position;
            this.CustomDataInPins = customDataInPins;
            this.CustomFlowOutPins = customFlowOutPins;
            this.DataInPins = dataInPins;
            this.DataOutPins = dataOutPins;
            this.FlowOutPins = flowOutPins;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets NodeType
        /// </summary>
        [DataMember(Name = "nodeType", EmitDefaultValue = true)]
        public string NodeType { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public Point Position { get; set; }

        /// <summary>
        /// Gets or Sets CustomDataInPins
        /// </summary>
        [DataMember(Name = "customDataInPins", EmitDefaultValue = true)]
        public List<CustomDataInPinInstance> CustomDataInPins { get; set; }

        /// <summary>
        /// Gets or Sets CustomFlowOutPins
        /// </summary>
        [DataMember(Name = "customFlowOutPins", EmitDefaultValue = true)]
        public List<CustomFlowOutPinInstance> CustomFlowOutPins { get; set; }

        /// <summary>
        /// Gets or Sets DataInPins
        /// </summary>
        [DataMember(Name = "dataInPins", EmitDefaultValue = true)]
        public List<DataInPinInstance> DataInPins { get; set; }

        /// <summary>
        /// Gets or Sets DataOutPins
        /// </summary>
        [DataMember(Name = "dataOutPins", EmitDefaultValue = true)]
        public List<DataOutPinInstance> DataOutPins { get; set; }

        /// <summary>
        /// Gets or Sets FlowOutPins
        /// </summary>
        [DataMember(Name = "flowOutPins", EmitDefaultValue = true)]
        public List<FlowOutPinInstance> FlowOutPins { get; set; }

        /// <summary>
        /// Gets or Sets AllDataInPins
        /// </summary>
        [DataMember(Name = "allDataInPins", EmitDefaultValue = true)]
        public List<DataInPinInstance> AllDataInPins { get; private set; }

        /// <summary>
        /// Returns false as AllDataInPins should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAllDataInPins()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NodeInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NodeType: ").Append(NodeType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  CustomDataInPins: ").Append(CustomDataInPins).Append("\n");
            sb.Append("  CustomFlowOutPins: ").Append(CustomFlowOutPins).Append("\n");
            sb.Append("  DataInPins: ").Append(DataInPins).Append("\n");
            sb.Append("  DataOutPins: ").Append(DataOutPins).Append("\n");
            sb.Append("  FlowOutPins: ").Append(FlowOutPins).Append("\n");
            sb.Append("  AllDataInPins: ").Append(AllDataInPins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NodeInstance);
        }

        /// <summary>
        /// Returns true if NodeInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of NodeInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeInstance input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.NodeType == input.NodeType ||
                    (this.NodeType != null &&
                    this.NodeType.Equals(input.NodeType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.CustomDataInPins == input.CustomDataInPins ||
                    this.CustomDataInPins != null &&
                    input.CustomDataInPins != null &&
                    this.CustomDataInPins.SequenceEqual(input.CustomDataInPins)
                ) && 
                (
                    this.CustomFlowOutPins == input.CustomFlowOutPins ||
                    this.CustomFlowOutPins != null &&
                    input.CustomFlowOutPins != null &&
                    this.CustomFlowOutPins.SequenceEqual(input.CustomFlowOutPins)
                ) && 
                (
                    this.DataInPins == input.DataInPins ||
                    this.DataInPins != null &&
                    input.DataInPins != null &&
                    this.DataInPins.SequenceEqual(input.DataInPins)
                ) && 
                (
                    this.DataOutPins == input.DataOutPins ||
                    this.DataOutPins != null &&
                    input.DataOutPins != null &&
                    this.DataOutPins.SequenceEqual(input.DataOutPins)
                ) && 
                (
                    this.FlowOutPins == input.FlowOutPins ||
                    this.FlowOutPins != null &&
                    input.FlowOutPins != null &&
                    this.FlowOutPins.SequenceEqual(input.FlowOutPins)
                ) && 
                (
                    this.AllDataInPins == input.AllDataInPins ||
                    this.AllDataInPins != null &&
                    input.AllDataInPins != null &&
                    this.AllDataInPins.SequenceEqual(input.AllDataInPins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.NodeType != null)
                {
                    hashCode = (hashCode * 59) + this.NodeType.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Position != null)
                {
                    hashCode = (hashCode * 59) + this.Position.GetHashCode();
                }
                if (this.CustomDataInPins != null)
                {
                    hashCode = (hashCode * 59) + this.CustomDataInPins.GetHashCode();
                }
                if (this.CustomFlowOutPins != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFlowOutPins.GetHashCode();
                }
                if (this.DataInPins != null)
                {
                    hashCode = (hashCode * 59) + this.DataInPins.GetHashCode();
                }
                if (this.DataOutPins != null)
                {
                    hashCode = (hashCode * 59) + this.DataOutPins.GetHashCode();
                }
                if (this.FlowOutPins != null)
                {
                    hashCode = (hashCode * 59) + this.FlowOutPins.GetHashCode();
                }
                if (this.AllDataInPins != null)
                {
                    hashCode = (hashCode * 59) + this.AllDataInPins.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
