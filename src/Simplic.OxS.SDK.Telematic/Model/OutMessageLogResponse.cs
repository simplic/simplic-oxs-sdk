/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// OutMessageLogResponse
    /// </summary>
    [DataContract(Name = "OutMessageLogResponse")]
    public partial class OutMessageLogResponse : IEquatable<OutMessageLogResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutMessageLogResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="messageType">messageType.</param>
        /// <param name="provider">provider.</param>
        /// <param name="sourceMessageJson">sourceMessageJson.</param>
        /// <param name="destinationMessageJson">destinationMessageJson.</param>
        /// <param name="responseJson">responseJson.</param>
        /// <param name="internalVehicleId">internalVehicleId.</param>
        /// <param name="internalDriverId">internalDriverId.</param>
        /// <param name="internalTourId">internalTourId.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="success">success.</param>
        public OutMessageLogResponse(Guid id = default(Guid), string messageType = default(string), string provider = default(string), string sourceMessageJson = default(string), string destinationMessageJson = default(string), string responseJson = default(string), Guid? internalVehicleId = default(Guid?), Guid? internalDriverId = default(Guid?), Guid? internalTourId = default(Guid?), DateTime startDateTime = default(DateTime), DateTime endDateTime = default(DateTime), bool success = default(bool))
        {
            this.Id = id;
            this.MessageType = messageType;
            this.Provider = provider;
            this.SourceMessageJson = sourceMessageJson;
            this.DestinationMessageJson = destinationMessageJson;
            this.ResponseJson = responseJson;
            this.InternalVehicleId = internalVehicleId;
            this.InternalDriverId = internalDriverId;
            this.InternalTourId = internalTourId;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.Success = success;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "messageType", EmitDefaultValue = true)]
        public string MessageType { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "provider", EmitDefaultValue = true)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets SourceMessageJson
        /// </summary>
        [DataMember(Name = "sourceMessageJson", EmitDefaultValue = true)]
        public string SourceMessageJson { get; set; }

        /// <summary>
        /// Gets or Sets DestinationMessageJson
        /// </summary>
        [DataMember(Name = "destinationMessageJson", EmitDefaultValue = true)]
        public string DestinationMessageJson { get; set; }

        /// <summary>
        /// Gets or Sets ResponseJson
        /// </summary>
        [DataMember(Name = "responseJson", EmitDefaultValue = true)]
        public string ResponseJson { get; set; }

        /// <summary>
        /// Gets or Sets InternalVehicleId
        /// </summary>
        [DataMember(Name = "internalVehicleId", EmitDefaultValue = true)]
        public Guid? InternalVehicleId { get; set; }

        /// <summary>
        /// Gets or Sets InternalDriverId
        /// </summary>
        [DataMember(Name = "internalDriverId", EmitDefaultValue = true)]
        public Guid? InternalDriverId { get; set; }

        /// <summary>
        /// Gets or Sets InternalTourId
        /// </summary>
        [DataMember(Name = "internalTourId", EmitDefaultValue = true)]
        public Guid? InternalTourId { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name = "startDateTime", EmitDefaultValue = false)]
        public DateTime StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name = "endDateTime", EmitDefaultValue = false)]
        public DateTime EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutMessageLogResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  SourceMessageJson: ").Append(SourceMessageJson).Append("\n");
            sb.Append("  DestinationMessageJson: ").Append(DestinationMessageJson).Append("\n");
            sb.Append("  ResponseJson: ").Append(ResponseJson).Append("\n");
            sb.Append("  InternalVehicleId: ").Append(InternalVehicleId).Append("\n");
            sb.Append("  InternalDriverId: ").Append(InternalDriverId).Append("\n");
            sb.Append("  InternalTourId: ").Append(InternalTourId).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutMessageLogResponse);
        }

        /// <summary>
        /// Returns true if OutMessageLogResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OutMessageLogResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutMessageLogResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.SourceMessageJson == input.SourceMessageJson ||
                    (this.SourceMessageJson != null &&
                    this.SourceMessageJson.Equals(input.SourceMessageJson))
                ) && 
                (
                    this.DestinationMessageJson == input.DestinationMessageJson ||
                    (this.DestinationMessageJson != null &&
                    this.DestinationMessageJson.Equals(input.DestinationMessageJson))
                ) && 
                (
                    this.ResponseJson == input.ResponseJson ||
                    (this.ResponseJson != null &&
                    this.ResponseJson.Equals(input.ResponseJson))
                ) && 
                (
                    this.InternalVehicleId == input.InternalVehicleId ||
                    (this.InternalVehicleId != null &&
                    this.InternalVehicleId.Equals(input.InternalVehicleId))
                ) && 
                (
                    this.InternalDriverId == input.InternalDriverId ||
                    (this.InternalDriverId != null &&
                    this.InternalDriverId.Equals(input.InternalDriverId))
                ) && 
                (
                    this.InternalTourId == input.InternalTourId ||
                    (this.InternalTourId != null &&
                    this.InternalTourId.Equals(input.InternalTourId))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.MessageType != null)
                {
                    hashCode = (hashCode * 59) + this.MessageType.GetHashCode();
                }
                if (this.Provider != null)
                {
                    hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                }
                if (this.SourceMessageJson != null)
                {
                    hashCode = (hashCode * 59) + this.SourceMessageJson.GetHashCode();
                }
                if (this.DestinationMessageJson != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationMessageJson.GetHashCode();
                }
                if (this.ResponseJson != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseJson.GetHashCode();
                }
                if (this.InternalVehicleId != null)
                {
                    hashCode = (hashCode * 59) + this.InternalVehicleId.GetHashCode();
                }
                if (this.InternalDriverId != null)
                {
                    hashCode = (hashCode * 59) + this.InternalDriverId.GetHashCode();
                }
                if (this.InternalTourId != null)
                {
                    hashCode = (hashCode * 59) + this.InternalTourId.GetHashCode();
                }
                if (this.StartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartDateTime.GetHashCode();
                }
                if (this.EndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Success.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
