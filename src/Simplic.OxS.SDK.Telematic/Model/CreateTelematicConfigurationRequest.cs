/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// CreateTelematicConfigurationRequest
    /// </summary>
    [DataContract(Name = "CreateTelematicConfigurationRequest")]
    public partial class CreateTelematicConfigurationRequest : IEquatable<CreateTelematicConfigurationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTelematicConfigurationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTelematicConfigurationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTelematicConfigurationRequest" /> class.
        /// </summary>
        /// <param name="providerName">providerName (required).</param>
        /// <param name="providerConfiguration">providerConfiguration.</param>
        /// <param name="autoCreationSettings">autoCreationSettings.</param>
        public CreateTelematicConfigurationRequest(string providerName = default(string), ProviderConfigurationModel providerConfiguration = default(ProviderConfigurationModel), List<AutomaticVehicleConfigurationCreationSettings> autoCreationSettings = default(List<AutomaticVehicleConfigurationCreationSettings>))
        {
            // to ensure "providerName" is required (not null)
            if (providerName == null)
            {
                throw new ArgumentNullException("providerName is a required property for CreateTelematicConfigurationRequest and cannot be null");
            }
            this.ProviderName = providerName;
            this.ProviderConfiguration = providerConfiguration;
            this.AutoCreationSettings = autoCreationSettings;
        }

        /// <summary>
        /// Gets or Sets ProviderName
        /// </summary>
        [DataMember(Name = "providerName", IsRequired = true, EmitDefaultValue = true)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Gets or Sets ProviderConfiguration
        /// </summary>
        [DataMember(Name = "providerConfiguration", EmitDefaultValue = false)]
        public ProviderConfigurationModel ProviderConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets AutoCreationSettings
        /// </summary>
        [DataMember(Name = "autoCreationSettings", EmitDefaultValue = true)]
        public List<AutomaticVehicleConfigurationCreationSettings> AutoCreationSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTelematicConfigurationRequest {\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  ProviderConfiguration: ").Append(ProviderConfiguration).Append("\n");
            sb.Append("  AutoCreationSettings: ").Append(AutoCreationSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTelematicConfigurationRequest);
        }

        /// <summary>
        /// Returns true if CreateTelematicConfigurationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTelematicConfigurationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTelematicConfigurationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProviderName == input.ProviderName ||
                    (this.ProviderName != null &&
                    this.ProviderName.Equals(input.ProviderName))
                ) && 
                (
                    this.ProviderConfiguration == input.ProviderConfiguration ||
                    (this.ProviderConfiguration != null &&
                    this.ProviderConfiguration.Equals(input.ProviderConfiguration))
                ) && 
                (
                    this.AutoCreationSettings == input.AutoCreationSettings ||
                    this.AutoCreationSettings != null &&
                    input.AutoCreationSettings != null &&
                    this.AutoCreationSettings.SequenceEqual(input.AutoCreationSettings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProviderName != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderName.GetHashCode();
                }
                if (this.ProviderConfiguration != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderConfiguration.GetHashCode();
                }
                if (this.AutoCreationSettings != null)
                {
                    hashCode = (hashCode * 59) + this.AutoCreationSettings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProviderName (string) minLength
            if (this.ProviderName != null && this.ProviderName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProviderName, length must be greater than 1.", new [] { "ProviderName" });
            }

            yield break;
        }
    }

}
