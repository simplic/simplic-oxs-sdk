// <auto-generated>
/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// CreateTelematicConfigurationRequest
    /// </summary>
    public partial class CreateTelematicConfigurationRequest : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public CreateTelematicConfigurationRequest()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTelematicConfigurationRequest" /> class.
        /// </summary>
        /// <param name="providerName">providerName</param>
        /// <param name="providerConfiguration">providerConfiguration</param>
        //[JsonConstructor]
        public CreateTelematicConfigurationRequest(string providerName, Option<ProviderConfigurationModel> providerConfiguration = default)
        {
            ProviderName = providerName;
            ProviderConfigurationOption = providerConfiguration;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ProviderName
        /// </summary>
        [JsonPropertyName("providerName")]
        public string ProviderName { get; set; }

        /// <summary>
        /// Used to track the state of ProviderConfiguration
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<ProviderConfigurationModel>))]
        public Option<ProviderConfigurationModel> ProviderConfigurationOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProviderConfiguration
        /// </summary>
        [JsonPropertyName("providerConfiguration")]
        public ProviderConfigurationModel? ProviderConfiguration { get { return this. ProviderConfigurationOption; } set { this.ProviderConfigurationOption = new Option<ProviderConfigurationModel>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTelematicConfigurationRequest {\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  ProviderConfiguration: ").Append(ProviderConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProviderName (string) minLength
            if (this.ProviderName != null && this.ProviderName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProviderName, length must be greater than 1.", new [] { "ProviderName" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateTelematicConfigurationRequest" />
    /// </summary>
    public class CreateTelematicConfigurationRequestJsonConverter : JsonConverter<CreateTelematicConfigurationRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateTelematicConfigurationRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateTelematicConfigurationRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> providerName = default;
            Option<ProviderConfigurationModel> providerConfiguration = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "providerName":
                            providerName = new Option<string>(utf8JsonReader.GetString()!);
                            break;
                        case "providerConfiguration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                providerConfiguration = new Option<ProviderConfigurationModel>(JsonSerializer.Deserialize<ProviderConfigurationModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!providerName.IsSet)
                throw new ArgumentException("Property is required for class CreateTelematicConfigurationRequest.", nameof(providerName));

            if (providerName.IsSet && providerName.Value == null)
                throw new ArgumentNullException(nameof(providerName), "Property is not nullable for class CreateTelematicConfigurationRequest.");

            if (providerConfiguration.IsSet && providerConfiguration.Value == null)
                throw new ArgumentNullException(nameof(providerConfiguration), "Property is not nullable for class CreateTelematicConfigurationRequest.");

            //2return new CreateTelematicConfigurationRequest(providerName.Value!, providerConfiguration);
            return new CreateTelematicConfigurationRequest(providerName.Value!, providerConfiguration);
        }

        /// <summary>
        /// Serializes a <see cref="CreateTelematicConfigurationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTelematicConfigurationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateTelematicConfigurationRequest createTelematicConfigurationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createTelematicConfigurationRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateTelematicConfigurationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTelematicConfigurationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateTelematicConfigurationRequest createTelematicConfigurationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createTelematicConfigurationRequest.ProviderName == null)
                throw new ArgumentNullException(nameof(createTelematicConfigurationRequest.ProviderName), "Property is required for class CreateTelematicConfigurationRequest.");

            if (createTelematicConfigurationRequest.ProviderConfigurationOption.IsSet && createTelematicConfigurationRequest.ProviderConfiguration == null)
                throw new ArgumentNullException(nameof(createTelematicConfigurationRequest.ProviderConfiguration), "Property is required for class CreateTelematicConfigurationRequest.");

            writer.WriteString("providerName", createTelematicConfigurationRequest.ProviderName);

            if (createTelematicConfigurationRequest.ProviderConfigurationOption.IsSet)
            {
                writer.WritePropertyName("providerConfiguration");
                JsonSerializer.Serialize(writer, createTelematicConfigurationRequest.ProviderConfiguration, jsonSerializerOptions);
            }
        }
    }
}
