/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// IncomingTelematicMessage
    /// </summary>
    [DataContract(Name = "IncomingTelematicMessage")]
    public partial class IncomingTelematicMessage : IEquatable<IncomingTelematicMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingTelematicMessage" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="providerIdentifier">providerIdentifier.</param>
        /// <param name="providerVehicleIdentifier">providerVehicleIdentifier.</param>
        /// <param name="internalVehicleIdentifier">internalVehicleIdentifier.</param>
        /// <param name="text">text.</param>
        /// <param name="reference">reference.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="tour">tour.</param>
        /// <param name="place">place.</param>
        /// <param name="order">order.</param>
        /// <param name="fmsData">fmsData.</param>
        /// <param name="locationInformation">locationInformation.</param>
        /// <param name="driver">driver.</param>
        /// <param name="messageTimeUtc">messageTimeUtc.</param>
        /// <param name="messageType">messageType.</param>
        /// <param name="queueId">queueId.</param>
        public IncomingTelematicMessage(Guid id = default(Guid), Guid organizationId = default(Guid), bool isDeleted = default(bool), string providerIdentifier = default(string), string providerVehicleIdentifier = default(string), Guid? internalVehicleIdentifier = default(Guid?), string text = default(string), string reference = default(string), double latitude = default(double), double longitude = default(double), IncomingTour tour = default(IncomingTour), IncomingPlace place = default(IncomingPlace), IncomingOrder order = default(IncomingOrder), FmsData fmsData = default(FmsData), Address locationInformation = default(Address), Driver driver = default(Driver), DateTime? messageTimeUtc = default(DateTime?), List<IncomingMessageType> messageType = default(List<IncomingMessageType>), Guid? queueId = default(Guid?))
        {
            this.Id = id;
            this.OrganizationId = organizationId;
            this.IsDeleted = isDeleted;
            this.ProviderIdentifier = providerIdentifier;
            this.ProviderVehicleIdentifier = providerVehicleIdentifier;
            this.InternalVehicleIdentifier = internalVehicleIdentifier;
            this.Text = text;
            this.Reference = reference;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Tour = tour;
            this.Place = place;
            this.Order = order;
            this.FmsData = fmsData;
            this.LocationInformation = locationInformation;
            this.Driver = driver;
            this.MessageTimeUtc = messageTimeUtc;
            this.MessageType = messageType;
            this.QueueId = queueId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organizationId", EmitDefaultValue = false)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets ProviderIdentifier
        /// </summary>
        [DataMember(Name = "providerIdentifier", EmitDefaultValue = true)]
        public string ProviderIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ProviderVehicleIdentifier
        /// </summary>
        [DataMember(Name = "providerVehicleIdentifier", EmitDefaultValue = true)]
        public string ProviderVehicleIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets InternalVehicleIdentifier
        /// </summary>
        [DataMember(Name = "internalVehicleIdentifier", EmitDefaultValue = true)]
        public Guid? InternalVehicleIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public double Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public double Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Tour
        /// </summary>
        [DataMember(Name = "tour", EmitDefaultValue = false)]
        public IncomingTour Tour { get; set; }

        /// <summary>
        /// Gets or Sets Place
        /// </summary>
        [DataMember(Name = "place", EmitDefaultValue = false)]
        public IncomingPlace Place { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public IncomingOrder Order { get; set; }

        /// <summary>
        /// Gets or Sets FmsData
        /// </summary>
        [DataMember(Name = "fmsData", EmitDefaultValue = false)]
        public FmsData FmsData { get; set; }

        /// <summary>
        /// Gets or Sets LocationInformation
        /// </summary>
        [DataMember(Name = "locationInformation", EmitDefaultValue = false)]
        public Address LocationInformation { get; set; }

        /// <summary>
        /// Gets or Sets Driver
        /// </summary>
        [DataMember(Name = "driver", EmitDefaultValue = false)]
        public Driver Driver { get; set; }

        /// <summary>
        /// Gets or Sets MessageTimeUtc
        /// </summary>
        [DataMember(Name = "messageTimeUtc", EmitDefaultValue = true)]
        public DateTime? MessageTimeUtc { get; set; }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "messageType", EmitDefaultValue = true)]
        public List<IncomingMessageType> MessageType { get; set; }

        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [DataMember(Name = "queueId", EmitDefaultValue = true)]
        public Guid? QueueId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncomingTelematicMessage {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  ProviderIdentifier: ").Append(ProviderIdentifier).Append("\n");
            sb.Append("  ProviderVehicleIdentifier: ").Append(ProviderVehicleIdentifier).Append("\n");
            sb.Append("  InternalVehicleIdentifier: ").Append(InternalVehicleIdentifier).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Tour: ").Append(Tour).Append("\n");
            sb.Append("  Place: ").Append(Place).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  FmsData: ").Append(FmsData).Append("\n");
            sb.Append("  LocationInformation: ").Append(LocationInformation).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  MessageTimeUtc: ").Append(MessageTimeUtc).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncomingTelematicMessage);
        }

        /// <summary>
        /// Returns true if IncomingTelematicMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of IncomingTelematicMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncomingTelematicMessage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.ProviderIdentifier == input.ProviderIdentifier ||
                    (this.ProviderIdentifier != null &&
                    this.ProviderIdentifier.Equals(input.ProviderIdentifier))
                ) && 
                (
                    this.ProviderVehicleIdentifier == input.ProviderVehicleIdentifier ||
                    (this.ProviderVehicleIdentifier != null &&
                    this.ProviderVehicleIdentifier.Equals(input.ProviderVehicleIdentifier))
                ) && 
                (
                    this.InternalVehicleIdentifier == input.InternalVehicleIdentifier ||
                    (this.InternalVehicleIdentifier != null &&
                    this.InternalVehicleIdentifier.Equals(input.InternalVehicleIdentifier))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.Tour == input.Tour ||
                    (this.Tour != null &&
                    this.Tour.Equals(input.Tour))
                ) && 
                (
                    this.Place == input.Place ||
                    (this.Place != null &&
                    this.Place.Equals(input.Place))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.FmsData == input.FmsData ||
                    (this.FmsData != null &&
                    this.FmsData.Equals(input.FmsData))
                ) && 
                (
                    this.LocationInformation == input.LocationInformation ||
                    (this.LocationInformation != null &&
                    this.LocationInformation.Equals(input.LocationInformation))
                ) && 
                (
                    this.Driver == input.Driver ||
                    (this.Driver != null &&
                    this.Driver.Equals(input.Driver))
                ) && 
                (
                    this.MessageTimeUtc == input.MessageTimeUtc ||
                    (this.MessageTimeUtc != null &&
                    this.MessageTimeUtc.Equals(input.MessageTimeUtc))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    this.MessageType != null &&
                    input.MessageType != null &&
                    this.MessageType.SequenceEqual(input.MessageType)
                ) && 
                (
                    this.QueueId == input.QueueId ||
                    (this.QueueId != null &&
                    this.QueueId.Equals(input.QueueId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.OrganizationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                if (this.ProviderIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderIdentifier.GetHashCode();
                }
                if (this.ProviderVehicleIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderVehicleIdentifier.GetHashCode();
                }
                if (this.InternalVehicleIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.InternalVehicleIdentifier.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                if (this.Tour != null)
                {
                    hashCode = (hashCode * 59) + this.Tour.GetHashCode();
                }
                if (this.Place != null)
                {
                    hashCode = (hashCode * 59) + this.Place.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                if (this.FmsData != null)
                {
                    hashCode = (hashCode * 59) + this.FmsData.GetHashCode();
                }
                if (this.LocationInformation != null)
                {
                    hashCode = (hashCode * 59) + this.LocationInformation.GetHashCode();
                }
                if (this.Driver != null)
                {
                    hashCode = (hashCode * 59) + this.Driver.GetHashCode();
                }
                if (this.MessageTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.MessageTimeUtc.GetHashCode();
                }
                if (this.MessageType != null)
                {
                    hashCode = (hashCode * 59) + this.MessageType.GetHashCode();
                }
                if (this.QueueId != null)
                {
                    hashCode = (hashCode * 59) + this.QueueId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
