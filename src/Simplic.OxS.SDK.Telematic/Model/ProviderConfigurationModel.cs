// <auto-generated>
/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// ProviderConfigurationModel
    /// </summary>
    public partial class ProviderConfigurationModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public ProviderConfigurationModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderConfigurationModel" /> class.
        /// </summary>
        /// <param name="accountName">accountName</param>
        /// <param name="apiKey">apiKey</param>
        /// <param name="integrator">integrator</param>
        /// <param name="password">password</param>
        /// <param name="systemNr">systemNr</param>
        /// <param name="username">username</param>
        //[JsonConstructor]
        public ProviderConfigurationModel(Option<string> accountName = default, Option<string> apiKey = default, Option<string> integrator = default, Option<string> password = default, Option<int> systemNr = default, Option<string> username = default)
        {
            AccountNameOption = accountName;
            ApiKeyOption = apiKey;
            IntegratorOption = integrator;
            PasswordOption = password;
            SystemNrOption = systemNr;
            UsernameOption = username;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AccountName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> AccountNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [JsonPropertyName("accountName")]
        public string? AccountName { get { return this. AccountNameOption; } set { this.AccountNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ApiKey
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ApiKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [JsonPropertyName("apiKey")]
        public string? ApiKey { get { return this. ApiKeyOption; } set { this.ApiKeyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Integrator
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> IntegratorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Integrator
        /// </summary>
        [JsonPropertyName("integrator")]
        public string? Integrator { get { return this. IntegratorOption; } set { this.IntegratorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Password
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> PasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string? Password { get { return this. PasswordOption; } set { this.PasswordOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SystemNr
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<int>))]
        public Option<int> SystemNrOption { get; private set; }

        /// <summary>
        /// Gets or Sets SystemNr
        /// </summary>
        [JsonPropertyName("systemNr")]
        public int? SystemNr { get { return this. SystemNrOption; } set { this.SystemNrOption = new Option<int>(value); } }

        /// <summary>
        /// Used to track the state of Username
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> UsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [JsonPropertyName("username")]
        public string? Username { get { return this. UsernameOption; } set { this.UsernameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProviderConfigurationModel {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  Integrator: ").Append(Integrator).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  SystemNr: ").Append(SystemNr).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProviderConfigurationModel" />
    /// </summary>
    public class ProviderConfigurationModelJsonConverter : JsonConverter<ProviderConfigurationModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ProviderConfigurationModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProviderConfigurationModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> accountName = default;
            Option<string> apiKey = default;
            Option<string> integrator = default;
            Option<string> password = default;
            Option<int> systemNr = default;
            Option<string> username = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountName":
                            accountName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "apiKey":
                            apiKey = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "integrator":
                            integrator = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "password":
                            password = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "systemNr":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                systemNr = new Option<int>(utf8JsonReader.GetInt32());
                            break;
                        case "username":
                            username = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (systemNr.IsSet && systemNr.Value == null)
                throw new ArgumentNullException(nameof(systemNr), "Property is not nullable for class ProviderConfigurationModel.");

            //2return new ProviderConfigurationModel(accountName, apiKey, integrator, password, systemNr, username);
            return new ProviderConfigurationModel(accountName, apiKey, integrator, password, systemNr, username);
        }

        /// <summary>
        /// Serializes a <see cref="ProviderConfigurationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="providerConfigurationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProviderConfigurationModel providerConfigurationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, providerConfigurationModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProviderConfigurationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="providerConfigurationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ProviderConfigurationModel providerConfigurationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (providerConfigurationModel.AccountNameOption.IsSet)
                if (providerConfigurationModel.AccountNameOption.Value != null)
                {
                    writer.WriteString("accountName", providerConfigurationModel.AccountName);
                    //var __value = providerConfigurationModel.AccountNameOption.Value;
                    //writer.WriteString("accountName", __value);
                }
                else
                    writer.WriteNull("accountName");

            if (providerConfigurationModel.ApiKeyOption.IsSet)
                if (providerConfigurationModel.ApiKeyOption.Value != null)
                {
                    writer.WriteString("apiKey", providerConfigurationModel.ApiKey);
                    //var __value = providerConfigurationModel.ApiKeyOption.Value;
                    //writer.WriteString("apiKey", __value);
                }
                else
                    writer.WriteNull("apiKey");

            if (providerConfigurationModel.IntegratorOption.IsSet)
                if (providerConfigurationModel.IntegratorOption.Value != null)
                {
                    writer.WriteString("integrator", providerConfigurationModel.Integrator);
                    //var __value = providerConfigurationModel.IntegratorOption.Value;
                    //writer.WriteString("integrator", __value);
                }
                else
                    writer.WriteNull("integrator");

            if (providerConfigurationModel.PasswordOption.IsSet)
                if (providerConfigurationModel.PasswordOption.Value != null)
                {
                    writer.WriteString("password", providerConfigurationModel.Password);
                    //var __value = providerConfigurationModel.PasswordOption.Value;
                    //writer.WriteString("password", __value);
                }
                else
                    writer.WriteNull("password");

            if (providerConfigurationModel.SystemNrOption.IsSet)
                writer.WriteNumber("systemNr", providerConfigurationModel.SystemNrOption!.Value);

            if (providerConfigurationModel.UsernameOption.IsSet)
                if (providerConfigurationModel.UsernameOption.Value != null)
                {
                    writer.WriteString("username", providerConfigurationModel.Username);
                    //var __value = providerConfigurationModel.UsernameOption.Value;
                    //writer.WriteString("username", __value);
                }
                else
                    writer.WriteNull("username");
        }
    }
}
