/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// Driver
    /// </summary>
    [DataContract(Name = "Driver")]
    public partial class Driver : IEquatable<Driver>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Driver" /> class.
        /// </summary>
        /// <param name="providerIdentifier">providerIdentifier.</param>
        /// <param name="internalIdentifier">internalIdentifier.</param>
        /// <param name="driverCardId">driverCardId.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="reference">reference.</param>
        public Driver(string providerIdentifier = default(string), Guid internalIdentifier = default(Guid), string driverCardId = default(string), string firstName = default(string), string lastName = default(string), string reference = default(string))
        {
            this.ProviderIdentifier = providerIdentifier;
            this.InternalIdentifier = internalIdentifier;
            this.DriverCardId = driverCardId;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Reference = reference;
        }

        /// <summary>
        /// Gets or Sets ProviderIdentifier
        /// </summary>
        [DataMember(Name = "providerIdentifier", EmitDefaultValue = true)]
        public string ProviderIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets InternalIdentifier
        /// </summary>
        [DataMember(Name = "internalIdentifier", EmitDefaultValue = false)]
        public Guid InternalIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets DriverCardId
        /// </summary>
        [DataMember(Name = "driverCardId", EmitDefaultValue = true)]
        public string DriverCardId { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Driver {\n");
            sb.Append("  ProviderIdentifier: ").Append(ProviderIdentifier).Append("\n");
            sb.Append("  InternalIdentifier: ").Append(InternalIdentifier).Append("\n");
            sb.Append("  DriverCardId: ").Append(DriverCardId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Driver);
        }

        /// <summary>
        /// Returns true if Driver instances are equal
        /// </summary>
        /// <param name="input">Instance of Driver to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Driver input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProviderIdentifier == input.ProviderIdentifier ||
                    (this.ProviderIdentifier != null &&
                    this.ProviderIdentifier.Equals(input.ProviderIdentifier))
                ) && 
                (
                    this.InternalIdentifier == input.InternalIdentifier ||
                    (this.InternalIdentifier != null &&
                    this.InternalIdentifier.Equals(input.InternalIdentifier))
                ) && 
                (
                    this.DriverCardId == input.DriverCardId ||
                    (this.DriverCardId != null &&
                    this.DriverCardId.Equals(input.DriverCardId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProviderIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderIdentifier.GetHashCode();
                }
                if (this.InternalIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.InternalIdentifier.GetHashCode();
                }
                if (this.DriverCardId != null)
                {
                    hashCode = (hashCode * 59) + this.DriverCardId.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
