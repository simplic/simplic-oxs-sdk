/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// IncomingTour
    /// </summary>
    [DataContract(Name = "IncomingTour")]
    public partial class IncomingTour : IEquatable<IncomingTour>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingTour" /> class.
        /// </summary>
        /// <param name="internalId">internalId.</param>
        /// <param name="providerIdentifier">providerIdentifier.</param>
        /// <param name="places">places.</param>
        /// <param name="startDateTimeUtc">startDateTimeUtc.</param>
        /// <param name="endDateTimeUtc">endDateTimeUtc.</param>
        /// <param name="tourDateUtc">tourDateUtc.</param>
        public IncomingTour(Guid? internalId = default(Guid?), string providerIdentifier = default(string), List<IncomingPlace> places = default(List<IncomingPlace>), DateTime? startDateTimeUtc = default(DateTime?), DateTime? endDateTimeUtc = default(DateTime?), DateTime? tourDateUtc = default(DateTime?))
        {
            this.InternalId = internalId;
            this.ProviderIdentifier = providerIdentifier;
            this.Places = places;
            this.StartDateTimeUtc = startDateTimeUtc;
            this.EndDateTimeUtc = endDateTimeUtc;
            this.TourDateUtc = tourDateUtc;
        }

        /// <summary>
        /// Gets or Sets InternalId
        /// </summary>
        [DataMember(Name = "internalId", EmitDefaultValue = true)]
        public Guid? InternalId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderIdentifier
        /// </summary>
        [DataMember(Name = "providerIdentifier", EmitDefaultValue = true)]
        public string ProviderIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Places
        /// </summary>
        [DataMember(Name = "places", EmitDefaultValue = true)]
        public List<IncomingPlace> Places { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTimeUtc
        /// </summary>
        [DataMember(Name = "startDateTimeUtc", EmitDefaultValue = true)]
        public DateTime? StartDateTimeUtc { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTimeUtc
        /// </summary>
        [DataMember(Name = "endDateTimeUtc", EmitDefaultValue = true)]
        public DateTime? EndDateTimeUtc { get; set; }

        /// <summary>
        /// Gets or Sets TourDateUtc
        /// </summary>
        [DataMember(Name = "tourDateUtc", EmitDefaultValue = true)]
        public DateTime? TourDateUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncomingTour {\n");
            sb.Append("  InternalId: ").Append(InternalId).Append("\n");
            sb.Append("  ProviderIdentifier: ").Append(ProviderIdentifier).Append("\n");
            sb.Append("  Places: ").Append(Places).Append("\n");
            sb.Append("  StartDateTimeUtc: ").Append(StartDateTimeUtc).Append("\n");
            sb.Append("  EndDateTimeUtc: ").Append(EndDateTimeUtc).Append("\n");
            sb.Append("  TourDateUtc: ").Append(TourDateUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncomingTour);
        }

        /// <summary>
        /// Returns true if IncomingTour instances are equal
        /// </summary>
        /// <param name="input">Instance of IncomingTour to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncomingTour input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InternalId == input.InternalId ||
                    (this.InternalId != null &&
                    this.InternalId.Equals(input.InternalId))
                ) && 
                (
                    this.ProviderIdentifier == input.ProviderIdentifier ||
                    (this.ProviderIdentifier != null &&
                    this.ProviderIdentifier.Equals(input.ProviderIdentifier))
                ) && 
                (
                    this.Places == input.Places ||
                    this.Places != null &&
                    input.Places != null &&
                    this.Places.SequenceEqual(input.Places)
                ) && 
                (
                    this.StartDateTimeUtc == input.StartDateTimeUtc ||
                    (this.StartDateTimeUtc != null &&
                    this.StartDateTimeUtc.Equals(input.StartDateTimeUtc))
                ) && 
                (
                    this.EndDateTimeUtc == input.EndDateTimeUtc ||
                    (this.EndDateTimeUtc != null &&
                    this.EndDateTimeUtc.Equals(input.EndDateTimeUtc))
                ) && 
                (
                    this.TourDateUtc == input.TourDateUtc ||
                    (this.TourDateUtc != null &&
                    this.TourDateUtc.Equals(input.TourDateUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InternalId != null)
                {
                    hashCode = (hashCode * 59) + this.InternalId.GetHashCode();
                }
                if (this.ProviderIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderIdentifier.GetHashCode();
                }
                if (this.Places != null)
                {
                    hashCode = (hashCode * 59) + this.Places.GetHashCode();
                }
                if (this.StartDateTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.StartDateTimeUtc.GetHashCode();
                }
                if (this.EndDateTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.EndDateTimeUtc.GetHashCode();
                }
                if (this.TourDateUtc != null)
                {
                    hashCode = (hashCode * 59) + this.TourDateUtc.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
