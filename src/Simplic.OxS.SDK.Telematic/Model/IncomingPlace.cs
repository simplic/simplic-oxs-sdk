/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// IncomingPlace
    /// </summary>
    [DataContract(Name = "IncomingPlace")]
    public partial class IncomingPlace : IEquatable<IncomingPlace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingPlace" /> class.
        /// </summary>
        /// <param name="internalId">internalId.</param>
        /// <param name="providerIdentifier">providerIdentifier.</param>
        /// <param name="address">address.</param>
        /// <param name="orders">orders.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="planStartDateTimeUtc">planStartDateTimeUtc.</param>
        /// <param name="planEndDateTimeUtc">planEndDateTimeUtc.</param>
        /// <param name="reference">reference.</param>
        /// <param name="notes">notes.</param>
        public IncomingPlace(Guid internalId = default(Guid), string providerIdentifier = default(string), Address address = default(Address), List<IncomingOrder> orders = default(List<IncomingOrder>), double? latitude = default(double?), double? longitude = default(double?), DateTime? planStartDateTimeUtc = default(DateTime?), DateTime? planEndDateTimeUtc = default(DateTime?), string reference = default(string), string notes = default(string))
        {
            this.InternalId = internalId;
            this.ProviderIdentifier = providerIdentifier;
            this.Address = address;
            this.Orders = orders;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.PlanStartDateTimeUtc = planStartDateTimeUtc;
            this.PlanEndDateTimeUtc = planEndDateTimeUtc;
            this.Reference = reference;
            this.Notes = notes;
        }

        /// <summary>
        /// Gets or Sets InternalId
        /// </summary>
        [DataMember(Name = "internalId", EmitDefaultValue = false)]
        public Guid InternalId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderIdentifier
        /// </summary>
        [DataMember(Name = "providerIdentifier", EmitDefaultValue = true)]
        public string ProviderIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [DataMember(Name = "orders", EmitDefaultValue = true)]
        public List<IncomingOrder> Orders { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", EmitDefaultValue = true)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", EmitDefaultValue = true)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets PlanStartDateTimeUtc
        /// </summary>
        [DataMember(Name = "planStartDateTimeUtc", EmitDefaultValue = true)]
        public DateTime? PlanStartDateTimeUtc { get; set; }

        /// <summary>
        /// Gets or Sets PlanEndDateTimeUtc
        /// </summary>
        [DataMember(Name = "planEndDateTimeUtc", EmitDefaultValue = true)]
        public DateTime? PlanEndDateTimeUtc { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncomingPlace {\n");
            sb.Append("  InternalId: ").Append(InternalId).Append("\n");
            sb.Append("  ProviderIdentifier: ").Append(ProviderIdentifier).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  PlanStartDateTimeUtc: ").Append(PlanStartDateTimeUtc).Append("\n");
            sb.Append("  PlanEndDateTimeUtc: ").Append(PlanEndDateTimeUtc).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncomingPlace);
        }

        /// <summary>
        /// Returns true if IncomingPlace instances are equal
        /// </summary>
        /// <param name="input">Instance of IncomingPlace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncomingPlace input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InternalId == input.InternalId ||
                    (this.InternalId != null &&
                    this.InternalId.Equals(input.InternalId))
                ) && 
                (
                    this.ProviderIdentifier == input.ProviderIdentifier ||
                    (this.ProviderIdentifier != null &&
                    this.ProviderIdentifier.Equals(input.ProviderIdentifier))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Orders == input.Orders ||
                    this.Orders != null &&
                    input.Orders != null &&
                    this.Orders.SequenceEqual(input.Orders)
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.PlanStartDateTimeUtc == input.PlanStartDateTimeUtc ||
                    (this.PlanStartDateTimeUtc != null &&
                    this.PlanStartDateTimeUtc.Equals(input.PlanStartDateTimeUtc))
                ) && 
                (
                    this.PlanEndDateTimeUtc == input.PlanEndDateTimeUtc ||
                    (this.PlanEndDateTimeUtc != null &&
                    this.PlanEndDateTimeUtc.Equals(input.PlanEndDateTimeUtc))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InternalId != null)
                {
                    hashCode = (hashCode * 59) + this.InternalId.GetHashCode();
                }
                if (this.ProviderIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderIdentifier.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Orders != null)
                {
                    hashCode = (hashCode * 59) + this.Orders.GetHashCode();
                }
                if (this.Latitude != null)
                {
                    hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                }
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                if (this.PlanStartDateTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.PlanStartDateTimeUtc.GetHashCode();
                }
                if (this.PlanEndDateTimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.PlanEndDateTimeUtc.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
