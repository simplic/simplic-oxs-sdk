// <auto-generated>
/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// EmploymentConfigurationModel
    /// </summary>
    public partial class EmploymentConfigurationModel : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public EmploymentConfigurationModel()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentConfigurationModel" /> class.
        /// </summary>
        /// <param name="activeServices">activeServices</param>
        /// <param name="employmentId">employmentId</param>
        /// <param name="externalDriverIdentifier">externalDriverIdentifier</param>
        /// <param name="id">id</param>
        /// <param name="matchCode">matchCode</param>
        /// <param name="providerName">providerName</param>
        /// <param name="validFrom">validFrom</param>
        /// <param name="validTo">validTo</param>
        //[JsonConstructor]
        public EmploymentConfigurationModel(Option<List<string>> activeServices = default, Option<Guid> employmentId = default, Option<string> externalDriverIdentifier = default, Option<Guid> id = default, Option<string> matchCode = default, Option<string> providerName = default, Option<DateTime> validFrom = default, Option<DateTime> validTo = default)
        {
            ActiveServicesOption = activeServices;
            EmploymentIdOption = employmentId;
            ExternalDriverIdentifierOption = externalDriverIdentifier;
            IdOption = id;
            MatchCodeOption = matchCode;
            ProviderNameOption = providerName;
            ValidFromOption = validFrom;
            ValidToOption = validTo;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ActiveServices
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> ActiveServicesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ActiveServices
        /// </summary>
        [JsonPropertyName("activeServices")]
        public List<string>? ActiveServices { get { return this. ActiveServicesOption; } set { this.ActiveServicesOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of EmploymentId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> EmploymentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmploymentId
        /// </summary>
        [JsonPropertyName("employmentId")]
        public Guid? EmploymentId { get { return this. EmploymentIdOption; } set { this.EmploymentIdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of ExternalDriverIdentifier
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ExternalDriverIdentifierOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExternalDriverIdentifier
        /// </summary>
        [JsonPropertyName("externalDriverIdentifier")]
        public string? ExternalDriverIdentifier { get { return this. ExternalDriverIdentifierOption; } set { this.ExternalDriverIdentifierOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<Guid>))]
        public Option<Guid> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this. IdOption; } set { this.IdOption = new Option<Guid>(value); } }

        /// <summary>
        /// Used to track the state of MatchCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> MatchCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets MatchCode
        /// </summary>
        [JsonPropertyName("matchCode")]
        public string? MatchCode { get { return this. MatchCodeOption; } set { this.MatchCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ProviderName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<string>))]
        public Option<string> ProviderNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProviderName
        /// </summary>
        [JsonPropertyName("providerName")]
        public string? ProviderName { get { return this. ProviderNameOption; } set { this.ProviderNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ValidFrom
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ValidFromOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValidFrom
        /// </summary>
        [JsonPropertyName("validFrom")]
        public DateTime? ValidFrom { get { return this. ValidFromOption; } set { this.ValidFromOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Used to track the state of ValidTo
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<DateTime>))]
        public Option<DateTime> ValidToOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValidTo
        /// </summary>
        [JsonPropertyName("validTo")]
        public DateTime? ValidTo { get { return this. ValidToOption; } set { this.ValidToOption = new Option<DateTime>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmploymentConfigurationModel {\n");
            sb.Append("  ActiveServices: ").Append(ActiveServices).Append("\n");
            sb.Append("  EmploymentId: ").Append(EmploymentId).Append("\n");
            sb.Append("  ExternalDriverIdentifier: ").Append(ExternalDriverIdentifier).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MatchCode: ").Append(MatchCode).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmploymentConfigurationModel" />
    /// </summary>
    public class EmploymentConfigurationModelJsonConverter : JsonConverter<EmploymentConfigurationModel>
    {
        /// <summary>
        /// The format to use to serialize ValidFrom
        /// </summary>
        public static string ValidFromFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ValidTo
        /// </summary>
        public static string ValidToFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EmploymentConfigurationModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmploymentConfigurationModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>> activeServices = default;
            Option<Guid> employmentId = default;
            Option<string> externalDriverIdentifier = default;
            Option<Guid> id = default;
            Option<string> matchCode = default;
            Option<string> providerName = default;
            Option<DateTime> validFrom = default;
            Option<DateTime> validTo = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "activeServices":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                activeServices = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "employmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employmentId = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "externalDriverIdentifier":
                            externalDriverIdentifier = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid>(utf8JsonReader.GetGuid());
                            break;
                        case "matchCode":
                            matchCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "providerName":
                            providerName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "validFrom":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validFrom = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "validTo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validTo = new Option<DateTime>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (employmentId.IsSet && employmentId.Value == null)
                throw new ArgumentNullException(nameof(employmentId), "Property is not nullable for class EmploymentConfigurationModel.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EmploymentConfigurationModel.");

            //2return new EmploymentConfigurationModel(activeServices, employmentId, externalDriverIdentifier, id, matchCode, providerName, validFrom, validTo);
            return new EmploymentConfigurationModel(activeServices, employmentId, externalDriverIdentifier, id, matchCode, providerName, validFrom, validTo);
        }

        /// <summary>
        /// Serializes a <see cref="EmploymentConfigurationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentConfigurationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmploymentConfigurationModel employmentConfigurationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, employmentConfigurationModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmploymentConfigurationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentConfigurationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, EmploymentConfigurationModel employmentConfigurationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (employmentConfigurationModel.ActiveServicesOption.IsSet)
                if (employmentConfigurationModel.ActiveServicesOption.Value != null)
                {
                    writer.WritePropertyName("activeServices");
                    JsonSerializer.Serialize(writer, employmentConfigurationModel.ActiveServices, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("activeServices");
            if (employmentConfigurationModel.EmploymentIdOption.IsSet)
                writer.WriteString("employmentId", employmentConfigurationModel.EmploymentIdOption!.Value);

            if (employmentConfigurationModel.ExternalDriverIdentifierOption.IsSet)
                if (employmentConfigurationModel.ExternalDriverIdentifierOption.Value != null)
                {
                    writer.WriteString("externalDriverIdentifier", employmentConfigurationModel.ExternalDriverIdentifier);
                    //var __value = employmentConfigurationModel.ExternalDriverIdentifierOption.Value;
                    //writer.WriteString("externalDriverIdentifier", __value);
                }
                else
                    writer.WriteNull("externalDriverIdentifier");

            if (employmentConfigurationModel.IdOption.IsSet)
                writer.WriteString("id", employmentConfigurationModel.IdOption!.Value);

            if (employmentConfigurationModel.MatchCodeOption.IsSet)
                if (employmentConfigurationModel.MatchCodeOption.Value != null)
                {
                    writer.WriteString("matchCode", employmentConfigurationModel.MatchCode);
                    //var __value = employmentConfigurationModel.MatchCodeOption.Value;
                    //writer.WriteString("matchCode", __value);
                }
                else
                    writer.WriteNull("matchCode");

            if (employmentConfigurationModel.ProviderNameOption.IsSet)
                if (employmentConfigurationModel.ProviderNameOption.Value != null)
                {
                    writer.WriteString("providerName", employmentConfigurationModel.ProviderName);
                    //var __value = employmentConfigurationModel.ProviderNameOption.Value;
                    //writer.WriteString("providerName", __value);
                }
                else
                    writer.WriteNull("providerName");

            if (employmentConfigurationModel.ValidFromOption.IsSet)
                if (employmentConfigurationModel.ValidFromOption.Value != null)
                {
                    writer.WriteString("validFrom", employmentConfigurationModel.ValidFromOption!.Value.ToString(ValidFromFormat));
                    //var __value = employmentConfigurationModel.ValidFromOption.Value;
                    //writer.WriteString("validFrom", __value);
                }
                else
                    writer.WriteNull("validFrom");

            if (employmentConfigurationModel.ValidToOption.IsSet)
                if (employmentConfigurationModel.ValidToOption.Value != null)
                {
                    writer.WriteString("validTo", employmentConfigurationModel.ValidToOption!.Value.ToString(ValidToFormat));
                    //var __value = employmentConfigurationModel.ValidToOption.Value;
                    //writer.WriteString("validTo", __value);
                }
                else
                    writer.WriteNull("validTo");
        }
    }
}
