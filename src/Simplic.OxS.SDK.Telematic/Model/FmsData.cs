/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// FmsData
    /// </summary>
    [DataContract(Name = "FmsData")]
    public partial class FmsData : IEquatable<FmsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FmsData" /> class.
        /// </summary>
        /// <param name="speed">speed.</param>
        /// <param name="totalFuel">totalFuel.</param>
        /// <param name="odometer">odometer.</param>
        /// <param name="fuelLevel">fuelLevel.</param>
        /// <param name="nextServiceStop">nextServiceStop.</param>
        /// <param name="engineWorkTime">engineWorkTime.</param>
        /// <param name="timestampUtc">timestampUtc.</param>
        public FmsData(double speed = default(double), double totalFuel = default(double), double odometer = default(double), double fuelLevel = default(double), double nextServiceStop = default(double), double engineWorkTime = default(double), DateTime timestampUtc = default(DateTime))
        {
            this.Speed = speed;
            this.TotalFuel = totalFuel;
            this.Odometer = odometer;
            this.FuelLevel = fuelLevel;
            this.NextServiceStop = nextServiceStop;
            this.EngineWorkTime = engineWorkTime;
            this.TimestampUtc = timestampUtc;
        }

        /// <summary>
        /// Gets or Sets Speed
        /// </summary>
        [DataMember(Name = "speed", EmitDefaultValue = false)]
        public double Speed { get; set; }

        /// <summary>
        /// Gets or Sets TotalFuel
        /// </summary>
        [DataMember(Name = "totalFuel", EmitDefaultValue = false)]
        public double TotalFuel { get; set; }

        /// <summary>
        /// Gets or Sets Odometer
        /// </summary>
        [DataMember(Name = "odometer", EmitDefaultValue = false)]
        public double Odometer { get; set; }

        /// <summary>
        /// Gets or Sets FuelLevel
        /// </summary>
        [DataMember(Name = "fuelLevel", EmitDefaultValue = false)]
        public double FuelLevel { get; set; }

        /// <summary>
        /// Gets or Sets NextServiceStop
        /// </summary>
        [DataMember(Name = "nextServiceStop", EmitDefaultValue = false)]
        public double NextServiceStop { get; set; }

        /// <summary>
        /// Gets or Sets EngineWorkTime
        /// </summary>
        [DataMember(Name = "engineWorkTime", EmitDefaultValue = false)]
        public double EngineWorkTime { get; set; }

        /// <summary>
        /// Gets or Sets TimestampUtc
        /// </summary>
        [DataMember(Name = "timestampUtc", EmitDefaultValue = false)]
        public DateTime TimestampUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FmsData {\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  TotalFuel: ").Append(TotalFuel).Append("\n");
            sb.Append("  Odometer: ").Append(Odometer).Append("\n");
            sb.Append("  FuelLevel: ").Append(FuelLevel).Append("\n");
            sb.Append("  NextServiceStop: ").Append(NextServiceStop).Append("\n");
            sb.Append("  EngineWorkTime: ").Append(EngineWorkTime).Append("\n");
            sb.Append("  TimestampUtc: ").Append(TimestampUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FmsData);
        }

        /// <summary>
        /// Returns true if FmsData instances are equal
        /// </summary>
        /// <param name="input">Instance of FmsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FmsData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Speed == input.Speed ||
                    this.Speed.Equals(input.Speed)
                ) && 
                (
                    this.TotalFuel == input.TotalFuel ||
                    this.TotalFuel.Equals(input.TotalFuel)
                ) && 
                (
                    this.Odometer == input.Odometer ||
                    this.Odometer.Equals(input.Odometer)
                ) && 
                (
                    this.FuelLevel == input.FuelLevel ||
                    this.FuelLevel.Equals(input.FuelLevel)
                ) && 
                (
                    this.NextServiceStop == input.NextServiceStop ||
                    this.NextServiceStop.Equals(input.NextServiceStop)
                ) && 
                (
                    this.EngineWorkTime == input.EngineWorkTime ||
                    this.EngineWorkTime.Equals(input.EngineWorkTime)
                ) && 
                (
                    this.TimestampUtc == input.TimestampUtc ||
                    (this.TimestampUtc != null &&
                    this.TimestampUtc.Equals(input.TimestampUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Speed.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalFuel.GetHashCode();
                hashCode = (hashCode * 59) + this.Odometer.GetHashCode();
                hashCode = (hashCode * 59) + this.FuelLevel.GetHashCode();
                hashCode = (hashCode * 59) + this.NextServiceStop.GetHashCode();
                hashCode = (hashCode * 59) + this.EngineWorkTime.GetHashCode();
                if (this.TimestampUtc != null)
                {
                    hashCode = (hashCode * 59) + this.TimestampUtc.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
