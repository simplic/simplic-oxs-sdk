/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// IncomingOrder
    /// </summary>
    [DataContract(Name = "IncomingOrder")]
    public partial class IncomingOrder : IEquatable<IncomingOrder>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name = "orderType", EmitDefaultValue = false)]
        public OrderType? OrderType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingOrder" /> class.
        /// </summary>
        /// <param name="internalId">internalId.</param>
        /// <param name="providerIdentifier">providerIdentifier.</param>
        /// <param name="articleName">articleName.</param>
        /// <param name="orderType">orderType.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="weight">weight.</param>
        /// <param name="loadingMeter">loadingMeter.</param>
        /// <param name="reference">reference.</param>
        /// <param name="deliveryNumber">deliveryNumber.</param>
        /// <param name="ePoD">ePoD.</param>
        public IncomingOrder(Guid? internalId = default(Guid?), string providerIdentifier = default(string), string articleName = default(string), OrderType? orderType = default(OrderType?), double? quantity = default(double?), double? weight = default(double?), double? loadingMeter = default(double?), string reference = default(string), string deliveryNumber = default(string), EPoD ePoD = default(EPoD))
        {
            this.InternalId = internalId;
            this.ProviderIdentifier = providerIdentifier;
            this.ArticleName = articleName;
            this.OrderType = orderType;
            this.Quantity = quantity;
            this.Weight = weight;
            this.LoadingMeter = loadingMeter;
            this.Reference = reference;
            this.DeliveryNumber = deliveryNumber;
            this.EPoD = ePoD;
        }

        /// <summary>
        /// Gets or Sets InternalId
        /// </summary>
        [DataMember(Name = "internalId", EmitDefaultValue = true)]
        public Guid? InternalId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderIdentifier
        /// </summary>
        [DataMember(Name = "providerIdentifier", EmitDefaultValue = true)]
        public string ProviderIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ArticleName
        /// </summary>
        [DataMember(Name = "articleName", EmitDefaultValue = true)]
        public string ArticleName { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = true)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = true)]
        public double? Weight { get; set; }

        /// <summary>
        /// Gets or Sets LoadingMeter
        /// </summary>
        [DataMember(Name = "loadingMeter", EmitDefaultValue = true)]
        public double? LoadingMeter { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryNumber
        /// </summary>
        [DataMember(Name = "deliveryNumber", EmitDefaultValue = true)]
        public string DeliveryNumber { get; set; }

        /// <summary>
        /// Gets or Sets EPoD
        /// </summary>
        [DataMember(Name = "ePoD", EmitDefaultValue = false)]
        public EPoD EPoD { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncomingOrder {\n");
            sb.Append("  InternalId: ").Append(InternalId).Append("\n");
            sb.Append("  ProviderIdentifier: ").Append(ProviderIdentifier).Append("\n");
            sb.Append("  ArticleName: ").Append(ArticleName).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  LoadingMeter: ").Append(LoadingMeter).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  DeliveryNumber: ").Append(DeliveryNumber).Append("\n");
            sb.Append("  EPoD: ").Append(EPoD).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncomingOrder);
        }

        /// <summary>
        /// Returns true if IncomingOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of IncomingOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncomingOrder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InternalId == input.InternalId ||
                    (this.InternalId != null &&
                    this.InternalId.Equals(input.InternalId))
                ) && 
                (
                    this.ProviderIdentifier == input.ProviderIdentifier ||
                    (this.ProviderIdentifier != null &&
                    this.ProviderIdentifier.Equals(input.ProviderIdentifier))
                ) && 
                (
                    this.ArticleName == input.ArticleName ||
                    (this.ArticleName != null &&
                    this.ArticleName.Equals(input.ArticleName))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    this.OrderType.Equals(input.OrderType)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.LoadingMeter == input.LoadingMeter ||
                    (this.LoadingMeter != null &&
                    this.LoadingMeter.Equals(input.LoadingMeter))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.DeliveryNumber == input.DeliveryNumber ||
                    (this.DeliveryNumber != null &&
                    this.DeliveryNumber.Equals(input.DeliveryNumber))
                ) && 
                (
                    this.EPoD == input.EPoD ||
                    (this.EPoD != null &&
                    this.EPoD.Equals(input.EPoD))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InternalId != null)
                {
                    hashCode = (hashCode * 59) + this.InternalId.GetHashCode();
                }
                if (this.ProviderIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderIdentifier.GetHashCode();
                }
                if (this.ArticleName != null)
                {
                    hashCode = (hashCode * 59) + this.ArticleName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderType.GetHashCode();
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                if (this.Weight != null)
                {
                    hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                }
                if (this.LoadingMeter != null)
                {
                    hashCode = (hashCode * 59) + this.LoadingMeter.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.DeliveryNumber != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryNumber.GetHashCode();
                }
                if (this.EPoD != null)
                {
                    hashCode = (hashCode * 59) + this.EPoD.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
