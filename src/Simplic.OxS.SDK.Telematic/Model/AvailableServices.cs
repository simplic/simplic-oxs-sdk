/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Telematic.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// AvailableServices
    /// </summary>
    [DataContract(Name = "AvailableServices")]
    public partial class AvailableServices : IEquatable<AvailableServices>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableServices" /> class.
        /// </summary>
        /// <param name="spedion">spedion.</param>
        /// <param name="transics">transics.</param>
        public AvailableServices(List<string> spedion = default(List<string>), List<string> transics = default(List<string>))
        {
            this.Spedion = spedion;
            this.Transics = transics;
        }

        /// <summary>
        /// Gets or Sets Spedion
        /// </summary>
        [DataMember(Name = "spedion", EmitDefaultValue = true)]
        public List<string> Spedion { get; set; }

        /// <summary>
        /// Gets or Sets Transics
        /// </summary>
        [DataMember(Name = "transics", EmitDefaultValue = true)]
        public List<string> Transics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AvailableServices {\n");
            sb.Append("  Spedion: ").Append(Spedion).Append("\n");
            sb.Append("  Transics: ").Append(Transics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailableServices);
        }

        /// <summary>
        /// Returns true if AvailableServices instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailableServices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailableServices input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Spedion == input.Spedion ||
                    this.Spedion != null &&
                    input.Spedion != null &&
                    this.Spedion.SequenceEqual(input.Spedion)
                ) && 
                (
                    this.Transics == input.Transics ||
                    this.Transics != null &&
                    input.Transics != null &&
                    this.Transics.SequenceEqual(input.Transics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Spedion != null)
                {
                    hashCode = (hashCode * 59) + this.Spedion.GetHashCode();
                }
                if (this.Transics != null)
                {
                    hashCode = (hashCode * 59) + this.Transics.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
