// <auto-generated>
/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Simplic.OxS.SDK;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// AvailableServices
    /// </summary>
    public partial class AvailableServices : IValidatableObject
    {

        /// <summary>
        /// Default constructor.
        /// </summary>
        [JsonConstructor]
        public AvailableServices()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableServices" /> class.
        /// </summary>
        /// <param name="spedion">spedion</param>
        /// <param name="transics">transics</param>
        //[JsonConstructor]
        public AvailableServices(Option<List<string>> spedion = default, Option<List<string>> transics = default)
        {
            SpedionOption = spedion;
            TransicsOption = transics;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Spedion
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> SpedionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Spedion
        /// </summary>
        [JsonPropertyName("spedion")]
        public List<string>? Spedion { get { return this. SpedionOption; } set { this.SpedionOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Transics
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        //[JsonConverter(typeof(OptionJsonConverter<List<string>>))]
        public Option<List<string>> TransicsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Transics
        /// </summary>
        [JsonPropertyName("transics")]
        public List<string>? Transics { get { return this. TransicsOption; } set { this.TransicsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AvailableServices {\n");
            sb.Append("  Spedion: ").Append(Spedion).Append("\n");
            sb.Append("  Transics: ").Append(Transics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AvailableServices" />
    /// </summary>
    public class AvailableServicesJsonConverter : JsonConverter<AvailableServices>
    {
        /// <summary>
        /// Deserializes json to <see cref="AvailableServices" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AvailableServices Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>> spedion = default;
            Option<List<string>> transics = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "spedion":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                spedion = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "transics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transics = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            //2return new AvailableServices(spedion, transics);
            return new AvailableServices(spedion, transics);
        }

        /// <summary>
        /// Serializes a <see cref="AvailableServices" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="availableServices"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AvailableServices availableServices, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, availableServices, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AvailableServices" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="availableServices"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, AvailableServices availableServices, JsonSerializerOptions jsonSerializerOptions)
        {
            if (availableServices.SpedionOption.IsSet)
                if (availableServices.SpedionOption.Value != null)
                {
                    writer.WritePropertyName("spedion");
                    JsonSerializer.Serialize(writer, availableServices.Spedion, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("spedion");
            if (availableServices.TransicsOption.IsSet)
                if (availableServices.TransicsOption.Value != null)
                {
                    writer.WritePropertyName("transics");
                    JsonSerializer.Serialize(writer, availableServices.Transics, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("transics");
        }
    }
}
