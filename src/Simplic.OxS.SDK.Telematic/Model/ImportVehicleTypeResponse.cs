/*
 * Simplic.OxS.Telematic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.OpenAPIDateConverter;

using Simplic.OxS.SDK;

namespace Simplic.OxS.SDK.Telematic
{
    /// <summary>
    /// ImportVehicleTypeResponse
    /// </summary>
    [DataContract(Name = "ImportVehicleTypeResponse")]
    public partial class ImportVehicleTypeResponse : IEquatable<ImportVehicleTypeResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportVehicleTypeResponse" /> class.
        /// </summary>
        /// <param name="vehicleTypeId">vehicleTypeId.</param>
        /// <param name="vehicleSubTypeId">vehicleSubTypeId.</param>
        /// <param name="vehicleTypeName">vehicleTypeName.</param>
        /// <param name="vehicleSubTypeName">vehicleSubTypeName.</param>
        /// <param name="externalTypeName">externalTypeName.</param>
        public ImportVehicleTypeResponse(Guid? vehicleTypeId = default(Guid?), Guid? vehicleSubTypeId = default(Guid?), string vehicleTypeName = default(string), string vehicleSubTypeName = default(string), string externalTypeName = default(string))
        {
            this.VehicleTypeId = vehicleTypeId;
            this.VehicleSubTypeId = vehicleSubTypeId;
            this.VehicleTypeName = vehicleTypeName;
            this.VehicleSubTypeName = vehicleSubTypeName;
            this.ExternalTypeName = externalTypeName;
        }

        /// <summary>
        /// Gets or Sets VehicleTypeId
        /// </summary>
        [DataMember(Name = "vehicleTypeId", EmitDefaultValue = true)]
        public Guid? VehicleTypeId { get; set; }

        /// <summary>
        /// Gets or Sets VehicleSubTypeId
        /// </summary>
        [DataMember(Name = "vehicleSubTypeId", EmitDefaultValue = true)]
        public Guid? VehicleSubTypeId { get; set; }

        /// <summary>
        /// Gets or Sets VehicleTypeName
        /// </summary>
        [DataMember(Name = "vehicleTypeName", EmitDefaultValue = true)]
        public string VehicleTypeName { get; set; }

        /// <summary>
        /// Gets or Sets VehicleSubTypeName
        /// </summary>
        [DataMember(Name = "vehicleSubTypeName", EmitDefaultValue = true)]
        public string VehicleSubTypeName { get; set; }

        /// <summary>
        /// Gets or Sets ExternalTypeName
        /// </summary>
        [DataMember(Name = "externalTypeName", EmitDefaultValue = true)]
        public string ExternalTypeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportVehicleTypeResponse {\n");
            sb.Append("  VehicleTypeId: ").Append(VehicleTypeId).Append("\n");
            sb.Append("  VehicleSubTypeId: ").Append(VehicleSubTypeId).Append("\n");
            sb.Append("  VehicleTypeName: ").Append(VehicleTypeName).Append("\n");
            sb.Append("  VehicleSubTypeName: ").Append(VehicleSubTypeName).Append("\n");
            sb.Append("  ExternalTypeName: ").Append(ExternalTypeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportVehicleTypeResponse);
        }

        /// <summary>
        /// Returns true if ImportVehicleTypeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportVehicleTypeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportVehicleTypeResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VehicleTypeId == input.VehicleTypeId ||
                    (this.VehicleTypeId != null &&
                    this.VehicleTypeId.Equals(input.VehicleTypeId))
                ) && 
                (
                    this.VehicleSubTypeId == input.VehicleSubTypeId ||
                    (this.VehicleSubTypeId != null &&
                    this.VehicleSubTypeId.Equals(input.VehicleSubTypeId))
                ) && 
                (
                    this.VehicleTypeName == input.VehicleTypeName ||
                    (this.VehicleTypeName != null &&
                    this.VehicleTypeName.Equals(input.VehicleTypeName))
                ) && 
                (
                    this.VehicleSubTypeName == input.VehicleSubTypeName ||
                    (this.VehicleSubTypeName != null &&
                    this.VehicleSubTypeName.Equals(input.VehicleSubTypeName))
                ) && 
                (
                    this.ExternalTypeName == input.ExternalTypeName ||
                    (this.ExternalTypeName != null &&
                    this.ExternalTypeName.Equals(input.ExternalTypeName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VehicleTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleTypeId.GetHashCode();
                }
                if (this.VehicleSubTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleSubTypeId.GetHashCode();
                }
                if (this.VehicleTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleTypeName.GetHashCode();
                }
                if (this.VehicleSubTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleSubTypeName.GetHashCode();
                }
                if (this.ExternalTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalTypeName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
