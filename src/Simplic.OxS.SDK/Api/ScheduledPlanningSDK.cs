/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Simplic.OxS.SDK.Client;
using Simplic.OxS.SDK.Model;

namespace Simplic.OxS.SDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScheduledPlanningSDKSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all plans for given day.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        List<ScheduledPlanningAssignmentResponse> ScheduledPlanningGetByDateGet(DateTime? dateTime = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Gets all plans for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        ApiResponse<List<ScheduledPlanningAssignmentResponse>> ScheduledPlanningGetByDateGetWithHttpInfo(DateTime? dateTime = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Gets shifts for resource on given day.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        ScheduledPlanningAssignmentResponse ScheduledPlanningGetByResourceResourceIdGet(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Gets shifts for resource on given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        ApiResponse<ScheduledPlanningAssignmentResponse> ScheduledPlanningGetByResourceResourceIdGetWithHttpInfo(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Gets plans matching given shift id for given day.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        List<ScheduledPlanningAssignmentResponse> ScheduledPlanningGetByShiftShiftIdGet(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Gets plans matching given shift id for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        ApiResponse<List<ScheduledPlanningAssignmentResponse>> ScheduledPlanningGetByShiftShiftIdGetWithHttpInfo(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Deletes plan matching given id.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScheduledPlanningIdDelete(Guid id, int operationIndex = 0);

        /// <summary>
        /// Deletes plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScheduledPlanningIdDeleteWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Gets plan matching given id.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        ScheduledPlanningAssignmentResponse ScheduledPlanningIdGet(Guid id, int operationIndex = 0);

        /// <summary>
        /// Gets plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        ApiResponse<ScheduledPlanningAssignmentResponse> ScheduledPlanningIdGetWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Patches plan matching given id.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        ScheduledPlanningAssignmentResponse ScheduledPlanningIdPatch(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0);

        /// <summary>
        /// Patches plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        ApiResponse<ScheduledPlanningAssignmentResponse> ScheduledPlanningIdPatchWithHttpInfo(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0);
        /// <summary>
        /// Posts a new plan.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        ScheduledPlanningAssignmentResponse ScheduledPlanningPost(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0);

        /// <summary>
        /// Posts a new plan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        ApiResponse<ScheduledPlanningAssignmentResponse> ScheduledPlanningPostWithHttpInfo(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0);
        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans.
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidateResponse</returns>
        ValidateResponse ScheduledPlanningValidateGet(int operationIndex = 0);

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidateResponse</returns>
        ApiResponse<ValidateResponse> ScheduledPlanningValidateGetWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScheduledPlanningSDKAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Gets all plans for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ScheduledPlanningAssignmentResponse>> ScheduledPlanningGetByDateGetAsync(DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all plans for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ScheduledPlanningAssignmentResponse>>> ScheduledPlanningGetByDateGetWithHttpInfoAsync(DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets shifts for resource on given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> ScheduledPlanningGetByResourceResourceIdGetAsync(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets shifts for resource on given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledPlanningAssignmentResponse>> ScheduledPlanningGetByResourceResourceIdGetWithHttpInfoAsync(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets plans matching given shift id for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ScheduledPlanningAssignmentResponse>> ScheduledPlanningGetByShiftShiftIdGetAsync(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets plans matching given shift id for given day.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ScheduledPlanningAssignmentResponse>>> ScheduledPlanningGetByShiftShiftIdGetWithHttpInfoAsync(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScheduledPlanningIdDeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScheduledPlanningIdDeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> ScheduledPlanningIdGetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledPlanningAssignmentResponse>> ScheduledPlanningIdGetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patches plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> ScheduledPlanningIdPatchAsync(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patches plan matching given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledPlanningAssignmentResponse>> ScheduledPlanningIdPatchWithHttpInfoAsync(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Posts a new plan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> ScheduledPlanningPostAsync(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Posts a new plan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledPlanningAssignmentResponse>> ScheduledPlanningPostWithHttpInfoAsync(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateResponse</returns>
        System.Threading.Tasks.Task<ValidateResponse> ScheduledPlanningValidateGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateResponse>> ScheduledPlanningValidateGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScheduledPlanningSDK : IScheduledPlanningSDKSync, IScheduledPlanningSDKAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScheduledPlanningSDK : IScheduledPlanningSDK
    {
        private Simplic.OxS.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledPlanningSDK"/> class.
        /// </summary>
        /// <returns></returns>
        public ScheduledPlanningSDK() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledPlanningSDK"/> class.
        /// </summary>
        /// <returns></returns>
        public ScheduledPlanningSDK(string basePath)
        {
            this.Configuration = Simplic.OxS.SDK.Client.Configuration.MergeConfigurations(
                Simplic.OxS.SDK.Client.GlobalConfiguration.Instance,
                new Simplic.OxS.SDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Simplic.OxS.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Simplic.OxS.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Simplic.OxS.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledPlanningSDK"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScheduledPlanningSDK(Simplic.OxS.SDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Simplic.OxS.SDK.Client.Configuration.MergeConfigurations(
                Simplic.OxS.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Simplic.OxS.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Simplic.OxS.SDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Simplic.OxS.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledPlanningSDK"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ScheduledPlanningSDK(Simplic.OxS.SDK.Client.ISynchronousClient client, Simplic.OxS.SDK.Client.IAsynchronousClient asyncClient, Simplic.OxS.SDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Simplic.OxS.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Simplic.OxS.SDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Simplic.OxS.SDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Simplic.OxS.SDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Simplic.OxS.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public List<ScheduledPlanningAssignmentResponse> ScheduledPlanningGetByDateGet(DateTime? dateTime = default(DateTime?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.ApiResponse<List<ScheduledPlanningAssignmentResponse>> localVarResponse = ScheduledPlanningGetByDateGetWithHttpInfo(dateTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public Simplic.OxS.SDK.Client.ApiResponse<List<ScheduledPlanningAssignmentResponse>> ScheduledPlanningGetByDateGetWithHttpInfo(DateTime? dateTime = default(DateTime?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Client.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningGetByDateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ScheduledPlanningAssignmentResponse>>("/ScheduledPlanning/get-by-date", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningGetByDateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ScheduledPlanningAssignmentResponse>> ScheduledPlanningGetByDateGetAsync(DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Client.ApiResponse<List<ScheduledPlanningAssignmentResponse>> localVarResponse = await ScheduledPlanningGetByDateGetWithHttpInfoAsync(dateTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all plans for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Client.ApiResponse<List<ScheduledPlanningAssignmentResponse>>> ScheduledPlanningGetByDateGetWithHttpInfoAsync(DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Client.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningGetByDateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ScheduledPlanningAssignmentResponse>>("/ScheduledPlanning/get-by-date", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningGetByDateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        public ScheduledPlanningAssignmentResponse ScheduledPlanningGetByResourceResourceIdGet(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = ScheduledPlanningGetByResourceResourceIdGetWithHttpInfo(resourceId, dateTime, shiftId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        public Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse> ScheduledPlanningGetByResourceResourceIdGetWithHttpInfo(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceId", Simplic.OxS.SDK.Client.ClientUtils.ParameterToString(resourceId)); // path parameter
            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Client.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }
            if (shiftId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Client.ClientUtils.ParameterToMultiMap("", "shiftId", shiftId));
            }

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningGetByResourceResourceIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning/get-by-resource/{resourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningGetByResourceResourceIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        public async System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> ScheduledPlanningGetByResourceResourceIdGetAsync(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = await ScheduledPlanningGetByResourceResourceIdGetWithHttpInfoAsync(resourceId, dateTime, shiftId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets shifts for resource on given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="shiftId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse>> ScheduledPlanningGetByResourceResourceIdGetWithHttpInfoAsync(Guid resourceId, DateTime? dateTime = default(DateTime?), Guid? shiftId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("resourceId", Simplic.OxS.SDK.Client.ClientUtils.ParameterToString(resourceId)); // path parameter
            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Client.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }
            if (shiftId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Client.ClientUtils.ParameterToMultiMap("", "shiftId", shiftId));
            }

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningGetByResourceResourceIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning/get-by-resource/{resourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningGetByResourceResourceIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public List<ScheduledPlanningAssignmentResponse> ScheduledPlanningGetByShiftShiftIdGet(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.ApiResponse<List<ScheduledPlanningAssignmentResponse>> localVarResponse = ScheduledPlanningGetByShiftShiftIdGetWithHttpInfo(shiftId, dateTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public Simplic.OxS.SDK.Client.ApiResponse<List<ScheduledPlanningAssignmentResponse>> ScheduledPlanningGetByShiftShiftIdGetWithHttpInfo(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shiftId", Simplic.OxS.SDK.Client.ClientUtils.ParameterToString(shiftId)); // path parameter
            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Client.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningGetByShiftShiftIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ScheduledPlanningAssignmentResponse>>("/ScheduledPlanning/get-by-shift/{shiftId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningGetByShiftShiftIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledPlanningAssignmentResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ScheduledPlanningAssignmentResponse>> ScheduledPlanningGetByShiftShiftIdGetAsync(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Client.ApiResponse<List<ScheduledPlanningAssignmentResponse>> localVarResponse = await ScheduledPlanningGetByShiftShiftIdGetWithHttpInfoAsync(shiftId, dateTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets plans matching given shift id for given day. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shiftId"></param>
        /// <param name="dateTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledPlanningAssignmentResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Client.ApiResponse<List<ScheduledPlanningAssignmentResponse>>> ScheduledPlanningGetByShiftShiftIdGetWithHttpInfoAsync(Guid shiftId, DateTime? dateTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shiftId", Simplic.OxS.SDK.Client.ClientUtils.ParameterToString(shiftId)); // path parameter
            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Simplic.OxS.SDK.Client.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningGetByShiftShiftIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ScheduledPlanningAssignmentResponse>>("/ScheduledPlanning/get-by-shift/{shiftId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningGetByShiftShiftIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScheduledPlanningIdDelete(Guid id, int operationIndex = 0)
        {
            ScheduledPlanningIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Simplic.OxS.SDK.Client.ApiResponse<Object> ScheduledPlanningIdDeleteWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ScheduledPlanning/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScheduledPlanningIdDeleteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ScheduledPlanningIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Client.ApiResponse<Object>> ScheduledPlanningIdDeleteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ScheduledPlanning/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        public ScheduledPlanningAssignmentResponse ScheduledPlanningIdGet(Guid id, int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = ScheduledPlanningIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        public Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse> ScheduledPlanningIdGetWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        public async System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> ScheduledPlanningIdGetAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = await ScheduledPlanningIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse>> ScheduledPlanningIdGetWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        public ScheduledPlanningAssignmentResponse ScheduledPlanningIdPatch(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = ScheduledPlanningIdPatchWithHttpInfo(id, patchScheduledPlanningRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        public Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse> ScheduledPlanningIdPatchWithHttpInfo(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchScheduledPlanningRequest;

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        public async System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> ScheduledPlanningIdPatchAsync(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = await ScheduledPlanningIdPatchWithHttpInfoAsync(id, patchScheduledPlanningRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patches plan matching given id. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse>> ScheduledPlanningIdPatchWithHttpInfoAsync(Guid id, PatchScheduledPlanningRequest? patchScheduledPlanningRequest = default(PatchScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Simplic.OxS.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchScheduledPlanningRequest;

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPlanningAssignmentResponse</returns>
        public ScheduledPlanningAssignmentResponse ScheduledPlanningPost(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = ScheduledPlanningPostWithHttpInfo(postScheduledPlanningRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPlanningAssignmentResponse</returns>
        public Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse> ScheduledPlanningPostWithHttpInfo(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postScheduledPlanningRequest;

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPlanningAssignmentResponse</returns>
        public async System.Threading.Tasks.Task<ScheduledPlanningAssignmentResponse> ScheduledPlanningPostAsync(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse> localVarResponse = await ScheduledPlanningPostWithHttpInfoAsync(postScheduledPlanningRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Posts a new plan. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postScheduledPlanningRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPlanningAssignmentResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Client.ApiResponse<ScheduledPlanningAssignmentResponse>> ScheduledPlanningPostWithHttpInfoAsync(PostScheduledPlanningRequest? postScheduledPlanningRequest = default(PostScheduledPlanningRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postScheduledPlanningRequest;

            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ScheduledPlanningAssignmentResponse>("/ScheduledPlanning", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidateResponse</returns>
        public ValidateResponse ScheduledPlanningValidateGet(int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.ApiResponse<ValidateResponse> localVarResponse = ScheduledPlanningValidateGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidateResponse</returns>
        public Simplic.OxS.SDK.Client.ApiResponse<ValidateResponse> ScheduledPlanningValidateGetWithHttpInfo(int operationIndex = 0)
        {
            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningValidateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ValidateResponse>("/ScheduledPlanning/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningValidateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateResponse</returns>
        public async System.Threading.Tasks.Task<ValidateResponse> ScheduledPlanningValidateGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Simplic.OxS.SDK.Client.ApiResponse<ValidateResponse> localVarResponse = await ScheduledPlanningValidateGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks whether any resource has been assigned in multiple plans. 
        /// </summary>
        /// <exception cref="Simplic.OxS.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateResponse)</returns>
        public async System.Threading.Tasks.Task<Simplic.OxS.SDK.Client.ApiResponse<ValidateResponse>> ScheduledPlanningValidateGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Simplic.OxS.SDK.Client.RequestOptions localVarRequestOptions = new Simplic.OxS.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Simplic.OxS.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ScheduledPlanningSDK.ScheduledPlanningValidateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ValidateResponse>("/ScheduledPlanning/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduledPlanningValidateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
