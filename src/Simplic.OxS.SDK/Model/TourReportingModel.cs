/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Client.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Model
{
    /// <summary>
    /// TourReportingModel
    /// </summary>
    [DataContract(Name = "TourReportingModel")]
    public partial class TourReportingModel : IEquatable<TourReportingModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TourReportingModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id.  &lt;br&gt;  Represents a unique identifier for a tour.  .</param>
        /// <param name="globalTourId">Gets or sets the global tour id.  &lt;br&gt;  The global tour id is used to group tours that were generated from the same tour.  .</param>
        /// <param name="number">Gets or sets the number of the tour..</param>
        /// <param name="reference">Gets or sets the reference number..</param>
        /// <param name="startAddress">startAddress.</param>
        /// <param name="endAddress">endAddress.</param>
        /// <param name="startDateTime">Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start..</param>
        /// <param name="endDateTime">Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end..</param>
        /// <param name="tractorUnit1">tractorUnit1.</param>
        /// <param name="tractorUnit2">tractorUnit2.</param>
        /// <param name="tractorUnit3">tractorUnit3.</param>
        /// <param name="trailer1">trailer1.</param>
        /// <param name="trailer2">trailer2.</param>
        /// <param name="driver1">driver1.</param>
        /// <param name="driver2">driver2.</param>
        /// <param name="carrier1">carrier1.</param>
        /// <param name="carrier2">carrier2.</param>
        /// <param name="container1">container1.</param>
        /// <param name="container2">container2.</param>
        /// <param name="shipments">shipments.</param>
        /// <param name="firstShipment">firstShipment.</param>
        /// <param name="lastShipment">lastShipment.</param>
        /// <param name="shipmentItems">shipmentItems.</param>
        public TourReportingModel(Guid id = default(Guid), Guid globalTourId = default(Guid), string number = default(string), string reference = default(string), AddressModel startAddress = default(AddressModel), AddressModel endAddress = default(AddressModel), DateTime startDateTime = default(DateTime), DateTime endDateTime = default(DateTime), ResourceModel tractorUnit1 = default(ResourceModel), ResourceModel tractorUnit2 = default(ResourceModel), ResourceModel tractorUnit3 = default(ResourceModel), ResourceModel trailer1 = default(ResourceModel), ResourceModel trailer2 = default(ResourceModel), ResourceModel driver1 = default(ResourceModel), ResourceModel driver2 = default(ResourceModel), ResourceModel carrier1 = default(ResourceModel), ResourceModel carrier2 = default(ResourceModel), ResourceModel container1 = default(ResourceModel), ResourceModel container2 = default(ResourceModel), List<ShipmentModel> shipments = default(List<ShipmentModel>), ShipmentModel firstShipment = default(ShipmentModel), ShipmentModel lastShipment = default(ShipmentModel), List<ReportingShipmentItem> shipmentItems = default(List<ReportingShipmentItem>))
        {
            this.Id = id;
            this.GlobalTourId = globalTourId;
            this.Number = number;
            this.Reference = reference;
            this.StartAddress = startAddress;
            this.EndAddress = endAddress;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.TractorUnit1 = tractorUnit1;
            this.TractorUnit2 = tractorUnit2;
            this.TractorUnit3 = tractorUnit3;
            this.Trailer1 = trailer1;
            this.Trailer2 = trailer2;
            this.Driver1 = driver1;
            this.Driver2 = driver2;
            this.Carrier1 = carrier1;
            this.Carrier2 = carrier2;
            this.Container1 = container1;
            this.Container2 = container2;
            this.Shipments = shipments;
            this.FirstShipment = firstShipment;
            this.LastShipment = lastShipment;
            this.ShipmentItems = shipmentItems;
        }

        /// <summary>
        /// Gets or sets the id.  &lt;br&gt;  Represents a unique identifier for a tour.  
        /// </summary>
        /// <value>Gets or sets the id.  &lt;br&gt;  Represents a unique identifier for a tour.  </value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the global tour id.  &lt;br&gt;  The global tour id is used to group tours that were generated from the same tour.  
        /// </summary>
        /// <value>Gets or sets the global tour id.  &lt;br&gt;  The global tour id is used to group tours that were generated from the same tour.  </value>
        [DataMember(Name = "globalTourId", EmitDefaultValue = false)]
        public Guid GlobalTourId { get; set; }

        /// <summary>
        /// Gets or sets the number of the tour.
        /// </summary>
        /// <value>Gets or sets the number of the tour.</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets the reference number.
        /// </summary>
        /// <value>Gets or sets the reference number.</value>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets StartAddress
        /// </summary>
        [DataMember(Name = "startAddress", EmitDefaultValue = false)]
        public AddressModel StartAddress { get; set; }

        /// <summary>
        /// Gets or Sets EndAddress
        /// </summary>
        [DataMember(Name = "endAddress", EmitDefaultValue = false)]
        public AddressModel EndAddress { get; set; }

        /// <summary>
        /// Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.
        /// </summary>
        /// <value>Gets or sets the start date time.  &lt;br&gt;  Represents the date and time when the resource should start it&#39;s trip.    This just represents the planned date and time, not the actual start.</value>
        [DataMember(Name = "startDateTime", EmitDefaultValue = false)]
        public DateTime StartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.
        /// </summary>
        /// <value>Gets or sets the end date time.  &lt;br&gt;  Rerpresents the date and time when the resource should end it&#39;s trip.    This just represents the planned date and time, not the actual end.</value>
        [DataMember(Name = "endDateTime", EmitDefaultValue = false)]
        public DateTime EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets TractorUnit1
        /// </summary>
        [DataMember(Name = "tractorUnit1", EmitDefaultValue = false)]
        public ResourceModel TractorUnit1 { get; set; }

        /// <summary>
        /// Gets or Sets TractorUnit2
        /// </summary>
        [DataMember(Name = "tractorUnit2", EmitDefaultValue = false)]
        public ResourceModel TractorUnit2 { get; set; }

        /// <summary>
        /// Gets or Sets TractorUnit3
        /// </summary>
        [DataMember(Name = "tractorUnit3", EmitDefaultValue = false)]
        public ResourceModel TractorUnit3 { get; set; }

        /// <summary>
        /// Gets or Sets Trailer1
        /// </summary>
        [DataMember(Name = "trailer1", EmitDefaultValue = false)]
        public ResourceModel Trailer1 { get; set; }

        /// <summary>
        /// Gets or Sets Trailer2
        /// </summary>
        [DataMember(Name = "trailer2", EmitDefaultValue = false)]
        public ResourceModel Trailer2 { get; set; }

        /// <summary>
        /// Gets or Sets Driver1
        /// </summary>
        [DataMember(Name = "driver1", EmitDefaultValue = false)]
        public ResourceModel Driver1 { get; set; }

        /// <summary>
        /// Gets or Sets Driver2
        /// </summary>
        [DataMember(Name = "driver2", EmitDefaultValue = false)]
        public ResourceModel Driver2 { get; set; }

        /// <summary>
        /// Gets or Sets Carrier1
        /// </summary>
        [DataMember(Name = "carrier1", EmitDefaultValue = false)]
        public ResourceModel Carrier1 { get; set; }

        /// <summary>
        /// Gets or Sets Carrier2
        /// </summary>
        [DataMember(Name = "carrier2", EmitDefaultValue = false)]
        public ResourceModel Carrier2 { get; set; }

        /// <summary>
        /// Gets or Sets Container1
        /// </summary>
        [DataMember(Name = "container1", EmitDefaultValue = false)]
        public ResourceModel Container1 { get; set; }

        /// <summary>
        /// Gets or Sets Container2
        /// </summary>
        [DataMember(Name = "container2", EmitDefaultValue = false)]
        public ResourceModel Container2 { get; set; }

        /// <summary>
        /// Gets or Sets Shipments
        /// </summary>
        [DataMember(Name = "shipments", EmitDefaultValue = true)]
        public List<ShipmentModel> Shipments { get; set; }

        /// <summary>
        /// Gets or Sets FirstShipment
        /// </summary>
        [DataMember(Name = "firstShipment", EmitDefaultValue = false)]
        public ShipmentModel FirstShipment { get; set; }

        /// <summary>
        /// Gets or Sets LastShipment
        /// </summary>
        [DataMember(Name = "lastShipment", EmitDefaultValue = false)]
        public ShipmentModel LastShipment { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentItems
        /// </summary>
        [DataMember(Name = "shipmentItems", EmitDefaultValue = true)]
        public List<ReportingShipmentItem> ShipmentItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TourReportingModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GlobalTourId: ").Append(GlobalTourId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  StartAddress: ").Append(StartAddress).Append("\n");
            sb.Append("  EndAddress: ").Append(EndAddress).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  TractorUnit1: ").Append(TractorUnit1).Append("\n");
            sb.Append("  TractorUnit2: ").Append(TractorUnit2).Append("\n");
            sb.Append("  TractorUnit3: ").Append(TractorUnit3).Append("\n");
            sb.Append("  Trailer1: ").Append(Trailer1).Append("\n");
            sb.Append("  Trailer2: ").Append(Trailer2).Append("\n");
            sb.Append("  Driver1: ").Append(Driver1).Append("\n");
            sb.Append("  Driver2: ").Append(Driver2).Append("\n");
            sb.Append("  Carrier1: ").Append(Carrier1).Append("\n");
            sb.Append("  Carrier2: ").Append(Carrier2).Append("\n");
            sb.Append("  Container1: ").Append(Container1).Append("\n");
            sb.Append("  Container2: ").Append(Container2).Append("\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("  FirstShipment: ").Append(FirstShipment).Append("\n");
            sb.Append("  LastShipment: ").Append(LastShipment).Append("\n");
            sb.Append("  ShipmentItems: ").Append(ShipmentItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TourReportingModel);
        }

        /// <summary>
        /// Returns true if TourReportingModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TourReportingModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TourReportingModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GlobalTourId == input.GlobalTourId ||
                    (this.GlobalTourId != null &&
                    this.GlobalTourId.Equals(input.GlobalTourId))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.StartAddress == input.StartAddress ||
                    (this.StartAddress != null &&
                    this.StartAddress.Equals(input.StartAddress))
                ) && 
                (
                    this.EndAddress == input.EndAddress ||
                    (this.EndAddress != null &&
                    this.EndAddress.Equals(input.EndAddress))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.TractorUnit1 == input.TractorUnit1 ||
                    (this.TractorUnit1 != null &&
                    this.TractorUnit1.Equals(input.TractorUnit1))
                ) && 
                (
                    this.TractorUnit2 == input.TractorUnit2 ||
                    (this.TractorUnit2 != null &&
                    this.TractorUnit2.Equals(input.TractorUnit2))
                ) && 
                (
                    this.TractorUnit3 == input.TractorUnit3 ||
                    (this.TractorUnit3 != null &&
                    this.TractorUnit3.Equals(input.TractorUnit3))
                ) && 
                (
                    this.Trailer1 == input.Trailer1 ||
                    (this.Trailer1 != null &&
                    this.Trailer1.Equals(input.Trailer1))
                ) && 
                (
                    this.Trailer2 == input.Trailer2 ||
                    (this.Trailer2 != null &&
                    this.Trailer2.Equals(input.Trailer2))
                ) && 
                (
                    this.Driver1 == input.Driver1 ||
                    (this.Driver1 != null &&
                    this.Driver1.Equals(input.Driver1))
                ) && 
                (
                    this.Driver2 == input.Driver2 ||
                    (this.Driver2 != null &&
                    this.Driver2.Equals(input.Driver2))
                ) && 
                (
                    this.Carrier1 == input.Carrier1 ||
                    (this.Carrier1 != null &&
                    this.Carrier1.Equals(input.Carrier1))
                ) && 
                (
                    this.Carrier2 == input.Carrier2 ||
                    (this.Carrier2 != null &&
                    this.Carrier2.Equals(input.Carrier2))
                ) && 
                (
                    this.Container1 == input.Container1 ||
                    (this.Container1 != null &&
                    this.Container1.Equals(input.Container1))
                ) && 
                (
                    this.Container2 == input.Container2 ||
                    (this.Container2 != null &&
                    this.Container2.Equals(input.Container2))
                ) && 
                (
                    this.Shipments == input.Shipments ||
                    this.Shipments != null &&
                    input.Shipments != null &&
                    this.Shipments.SequenceEqual(input.Shipments)
                ) && 
                (
                    this.FirstShipment == input.FirstShipment ||
                    (this.FirstShipment != null &&
                    this.FirstShipment.Equals(input.FirstShipment))
                ) && 
                (
                    this.LastShipment == input.LastShipment ||
                    (this.LastShipment != null &&
                    this.LastShipment.Equals(input.LastShipment))
                ) && 
                (
                    this.ShipmentItems == input.ShipmentItems ||
                    this.ShipmentItems != null &&
                    input.ShipmentItems != null &&
                    this.ShipmentItems.SequenceEqual(input.ShipmentItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.GlobalTourId != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalTourId.GetHashCode();
                }
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.StartAddress != null)
                {
                    hashCode = (hashCode * 59) + this.StartAddress.GetHashCode();
                }
                if (this.EndAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EndAddress.GetHashCode();
                }
                if (this.StartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartDateTime.GetHashCode();
                }
                if (this.EndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndDateTime.GetHashCode();
                }
                if (this.TractorUnit1 != null)
                {
                    hashCode = (hashCode * 59) + this.TractorUnit1.GetHashCode();
                }
                if (this.TractorUnit2 != null)
                {
                    hashCode = (hashCode * 59) + this.TractorUnit2.GetHashCode();
                }
                if (this.TractorUnit3 != null)
                {
                    hashCode = (hashCode * 59) + this.TractorUnit3.GetHashCode();
                }
                if (this.Trailer1 != null)
                {
                    hashCode = (hashCode * 59) + this.Trailer1.GetHashCode();
                }
                if (this.Trailer2 != null)
                {
                    hashCode = (hashCode * 59) + this.Trailer2.GetHashCode();
                }
                if (this.Driver1 != null)
                {
                    hashCode = (hashCode * 59) + this.Driver1.GetHashCode();
                }
                if (this.Driver2 != null)
                {
                    hashCode = (hashCode * 59) + this.Driver2.GetHashCode();
                }
                if (this.Carrier1 != null)
                {
                    hashCode = (hashCode * 59) + this.Carrier1.GetHashCode();
                }
                if (this.Carrier2 != null)
                {
                    hashCode = (hashCode * 59) + this.Carrier2.GetHashCode();
                }
                if (this.Container1 != null)
                {
                    hashCode = (hashCode * 59) + this.Container1.GetHashCode();
                }
                if (this.Container2 != null)
                {
                    hashCode = (hashCode * 59) + this.Container2.GetHashCode();
                }
                if (this.Shipments != null)
                {
                    hashCode = (hashCode * 59) + this.Shipments.GetHashCode();
                }
                if (this.FirstShipment != null)
                {
                    hashCode = (hashCode * 59) + this.FirstShipment.GetHashCode();
                }
                if (this.LastShipment != null)
                {
                    hashCode = (hashCode * 59) + this.LastShipment.GetHashCode();
                }
                if (this.ShipmentItems != null)
                {
                    hashCode = (hashCode * 59) + this.ShipmentItems.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
