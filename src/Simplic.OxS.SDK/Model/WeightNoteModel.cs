/*
 * Simplic.OxS.Logistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Simplic.OxS.SDK.Client.OpenAPIDateConverter;

namespace Simplic.OxS.SDK.Model
{
    /// <summary>
    /// Shared model of weight note.
    /// </summary>
    [DataContract(Name = "WeightNoteModel")]
    public partial class WeightNoteModel : IEquatable<WeightNoteModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public WeightNoteType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WeightNoteModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id.  &lt;br&gt;  Represents the unique identifier of the weight note.  .</param>
        /// <param name="isDeleted">Gets or sets whether the weight note is deleted..</param>
        /// <param name="number">Gets or sets the number.  &lt;br&gt;  The number is usually given by the scale operator/ scale document.  .</param>
        /// <param name="documentId">Gets or sets the document id.  &lt;br&gt;  References a document with the weight note.  .</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="type">type.</param>
        /// <param name="createDateTime">Gets or sets the create date time..</param>
        /// <param name="firstWeight">firstWeight.</param>
        /// <param name="secondWeight">secondWeight.</param>
        /// <param name="firstDateTime">Gets or sets the first date time.  &lt;br&gt;  Represents the date and time of the first weighing.  .</param>
        /// <param name="secondDateTime">Gets or sets the second date time.  &lt;br&gt;  Represents the date and time of the second weighing.  .</param>
        /// <param name="reference">Gets or sets the external reference..</param>
        public WeightNoteModel(Guid id = default(Guid), bool isDeleted = default(bool), string number = default(string), Guid? documentId = default(Guid?), QuantityModel quantity = default(QuantityModel), WeightNoteType? type = default(WeightNoteType?), DateTime createDateTime = default(DateTime), QuantityModel firstWeight = default(QuantityModel), QuantityModel secondWeight = default(QuantityModel), DateTime firstDateTime = default(DateTime), DateTime secondDateTime = default(DateTime), string reference = default(string))
        {
            this.Id = id;
            this.IsDeleted = isDeleted;
            this.Number = number;
            this.DocumentId = documentId;
            this.Quantity = quantity;
            this.Type = type;
            this.CreateDateTime = createDateTime;
            this.FirstWeight = firstWeight;
            this.SecondWeight = secondWeight;
            this.FirstDateTime = firstDateTime;
            this.SecondDateTime = secondDateTime;
            this.Reference = reference;
        }

        /// <summary>
        /// Gets or sets the id.  &lt;br&gt;  Represents the unique identifier of the weight note.  
        /// </summary>
        /// <value>Gets or sets the id.  &lt;br&gt;  Represents the unique identifier of the weight note.  </value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets whether the weight note is deleted.
        /// </summary>
        /// <value>Gets or sets whether the weight note is deleted.</value>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or sets the number.  &lt;br&gt;  The number is usually given by the scale operator/ scale document.  
        /// </summary>
        /// <value>Gets or sets the number.  &lt;br&gt;  The number is usually given by the scale operator/ scale document.  </value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets the document id.  &lt;br&gt;  References a document with the weight note.  
        /// </summary>
        /// <value>Gets or sets the document id.  &lt;br&gt;  References a document with the weight note.  </value>
        [DataMember(Name = "documentId", EmitDefaultValue = true)]
        public Guid? DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public QuantityModel Quantity { get; set; }

        /// <summary>
        /// Gets or sets the create date time.
        /// </summary>
        /// <value>Gets or sets the create date time.</value>
        [DataMember(Name = "createDateTime", EmitDefaultValue = false)]
        public DateTime CreateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets FirstWeight
        /// </summary>
        [DataMember(Name = "firstWeight", EmitDefaultValue = false)]
        public QuantityModel FirstWeight { get; set; }

        /// <summary>
        /// Gets or Sets SecondWeight
        /// </summary>
        [DataMember(Name = "secondWeight", EmitDefaultValue = false)]
        public QuantityModel SecondWeight { get; set; }

        /// <summary>
        /// Gets or sets the first date time.  &lt;br&gt;  Represents the date and time of the first weighing.  
        /// </summary>
        /// <value>Gets or sets the first date time.  &lt;br&gt;  Represents the date and time of the first weighing.  </value>
        [DataMember(Name = "firstDateTime", EmitDefaultValue = false)]
        public DateTime FirstDateTime { get; set; }

        /// <summary>
        /// Gets or sets the second date time.  &lt;br&gt;  Represents the date and time of the second weighing.  
        /// </summary>
        /// <value>Gets or sets the second date time.  &lt;br&gt;  Represents the date and time of the second weighing.  </value>
        [DataMember(Name = "secondDateTime", EmitDefaultValue = false)]
        public DateTime SecondDateTime { get; set; }

        /// <summary>
        /// Gets or sets the external reference.
        /// </summary>
        /// <value>Gets or sets the external reference.</value>
        [DataMember(Name = "reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WeightNoteModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreateDateTime: ").Append(CreateDateTime).Append("\n");
            sb.Append("  FirstWeight: ").Append(FirstWeight).Append("\n");
            sb.Append("  SecondWeight: ").Append(SecondWeight).Append("\n");
            sb.Append("  FirstDateTime: ").Append(FirstDateTime).Append("\n");
            sb.Append("  SecondDateTime: ").Append(SecondDateTime).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WeightNoteModel);
        }

        /// <summary>
        /// Returns true if WeightNoteModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WeightNoteModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WeightNoteModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.CreateDateTime == input.CreateDateTime ||
                    (this.CreateDateTime != null &&
                    this.CreateDateTime.Equals(input.CreateDateTime))
                ) && 
                (
                    this.FirstWeight == input.FirstWeight ||
                    (this.FirstWeight != null &&
                    this.FirstWeight.Equals(input.FirstWeight))
                ) && 
                (
                    this.SecondWeight == input.SecondWeight ||
                    (this.SecondWeight != null &&
                    this.SecondWeight.Equals(input.SecondWeight))
                ) && 
                (
                    this.FirstDateTime == input.FirstDateTime ||
                    (this.FirstDateTime != null &&
                    this.FirstDateTime.Equals(input.FirstDateTime))
                ) && 
                (
                    this.SecondDateTime == input.SecondDateTime ||
                    (this.SecondDateTime != null &&
                    this.SecondDateTime.Equals(input.SecondDateTime))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.CreateDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreateDateTime.GetHashCode();
                }
                if (this.FirstWeight != null)
                {
                    hashCode = (hashCode * 59) + this.FirstWeight.GetHashCode();
                }
                if (this.SecondWeight != null)
                {
                    hashCode = (hashCode * 59) + this.SecondWeight.GetHashCode();
                }
                if (this.FirstDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.FirstDateTime.GetHashCode();
                }
                if (this.SecondDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.SecondDateTime.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
